service: chat-app
custom:
  pgDatabase:
    local: postgres
    prd: ${ssm:PGDATABASE}
  pgHost: 
    local: localhost
    prd: ${ssm:PGHOST}
  pgPassword:
    local: password
    prd: ${ssm:PGPASSWORD}
  pgPort:
    local: 5432
    prd: ${ssm:PGPORT}
  pgUser:
    local: postgres
    prd: ${ssm:PGUSER}
provider:
  name: aws
  runtime: nodejs10.x
  region: us-west-1
  vpc:
    securityGroupIds:
      - ${ssm:vpcSecurityGroup}
    subnetIds:
      - ${ssm:vpcSubnet1}
      - ${ssm:vpcSubnet2}
  stage: ${opt:stage, 'local'}
  environment:
    PGDATABASE: ${self:custom.pgDatabase.${self:provider.stage}}
    PGHOST: ${self:custom.pgHost.${self:provider.stage}}
    PGPASSWORD: ${self:custom.pgPassword.${self:provider.stage}}
    PGPORT: ${self:custom.pgPort.${self:provider.stage}}
    PGUSER: ${self:custom.pgUser.${self:provider.stage}}
  iamRoleStatements:
    -  Effect: "Allow"
       Action: 
         - "rds:*"
       Resource: "*"    
functions:
  getMessages:
    handler: src/handlers/messages.get
    events:
      - http:
          path: messages
          method: get
  writeMessage:
    handler: src/handlers/writeMessage.writeMessage
    events:
      - http:
          path: messages
          method: post

  drop:
    handler: src/handlers/drop.dropTables
    events:
      - http:
          path: drop
          method: get
plugins:
  - serverless-plugin-typescript
  - serverless-offline
# package:
#   exclude:
#     - node_modules/**/*
#   include:
#     src/handlers/*.ts
