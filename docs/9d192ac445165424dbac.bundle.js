!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=145)}([function(e,t,n){"use strict";e.exports=n(169)},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(174);e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},function(e,t,n){"use strict";function r(e){var t,n,o="";if(e)if("object"==typeof e)if(e.push)for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(n=r(t))&&(o&&(o+=" "),o+=n);else"boolean"==typeof e||e.call||(o&&(o+=" "),o+=e);return o}t.a=function(){for(var e,t=0,n="";t<arguments.length;)(e=r(arguments[t++]))&&(n&&(n+=" "),n+=e);return n}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(234),i=n(40);t.a=function(e,t){return Object(a.a)(e,o()({defaultTheme:i.a},t))}},function(e,t,n){e.exports=n(175)()},function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return o});n(11);function r(e){return e.charAt(0).toUpperCase()+e.slice(1)}function o(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce(function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}},function(){})}},function(e,t,n){"use strict";n.d(t,"g",function(){return o}),n.d(t,"k",function(){return a}),n.d(t,"h",function(){return i}),n.d(t,"b",function(){return l}),n.d(t,"j",function(){return s}),n.d(t,"e",function(){return c}),n.d(t,"f",function(){return u}),n.d(t,"c",function(){return d}),n.d(t,"d",function(){return f}),n.d(t,"a",function(){return p}),n.d(t,"i",function(){return m});n(11);function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function o(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}function a(e){if(0===e.indexOf("#"))return e;var t=l(e).values;return"#".concat(t.map(function(e){return 1===(t=e.toString(16)).length?"0".concat(t):t;var t}).join(""))}function i(e){var t=(e=l(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-a*Math.max(Math.min(t-3,9-t,1),-1)},c="rgb",u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(c+="a",u.push(t[3])),s({type:c,values:u})}function l(e){if(e.type)return e;if("#"===e.charAt(0))return l(o(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(["Material-UI: unsupported `".concat(e,"` color."),"We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."].join("\n"));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function s(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map(function(e,t){return t<3?parseInt(e,10):e}):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function c(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e){var t="hsl"===(e=l(e)).type?l(i(e)).values:e.values;return t=t.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return u(e)>.5?p(e,t):m(e,t)}function f(e,t){return e=l(e),t=r(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,s(e)}function p(e,t){if(e=l(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return s(e)}function m(e,t){if(e=l(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return s(e)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return i}),n.d(t,"c",function(){return l});var r=n(0),o=n.n(r);function a(e,t){return o.a.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}function i(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function l(e,t){return o.a.useMemo(function(){return null==e&&null==t?null:function(n){i(e,n),i(t,n)}},[e,t])}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){var r=n(111),o=n(181),a=n(112);e.exports=function(e,t){return r(e)||o(e,t)||a()}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(170)},,function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"b",function(){return i}),n.d(t,"d",function(){return l}),n.d(t,"f",function(){return s}),n.d(t,"e",function(){return c});var r=n(2),o=n.n(r),a=(n(11),{easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"}),i={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195},l=function(e){return"".concat(Math.round(e),"ms")},s=function(e){return"string"==typeof e},c=function(e){return!isNaN(parseFloat(e))};t.a={easing:a,duration:i,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?i.standard:n,s=t.easing,c=void 0===s?a.easeInOut:s,u=t.delay,d=void 0===u?0:u;o()(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:l(r)," ").concat(c," ").concat("string"==typeof d?d:l(d))}).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),o=n.n(r),a=n(0),i=n.n(a),l=n(76);function s(e,t){var n=i.a.memo(i.a.forwardRef(function(t,n){return i.a.createElement(l.a,o()({},t,{ref:n}),e)}));return n.muiName=l.a.muiName,n}},function(e,t,n){"use strict";n.d(t,"b",function(){return l}),n.d(t,"a",function(){return s});var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=["xs","sm","md","lg","xl"];function s(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,a=void 0===r?"px":r,s=e.step,c=void 0===s?5:s,u=i()(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function f(e,t){var r=l.indexOf(t)+1;return r===l.length?d(e):"@media (min-width:".concat(n[e]).concat(a,") and ")+"(max-width:".concat(n[l[r]]-c/100).concat(a,")")}return o()({keys:l,values:n,up:d,down:function(e){var t=l.indexOf(e)+1,r=n[l[t]];return t===l.length?d("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-c/100).concat(a,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},u)}},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return o});var r=function(e){return e.scrollTop};function o(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode],delay:o.transitionDelay}}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",function(){return r})},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){"use strict";t.a=function(e){return e&&e.ownerDocument||document}},function(e,t,n){"use strict";(function(e){n.d(t,"f",function(){return fe}),n.d(t,"c",function(){return pe}),n.d(t,"e",function(){return de}),n.d(t,"g",function(){return f}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return q}),n.d(t,"a",function(){return H});var r=n(18),o=n(60),a=(n(71),n(82)),i=n(48),l=n(61),s={}.constructor;function c(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(c);if(e.constructor!==s)return e;var t={};for(var n in e)t[n]=c(e[n]);return t}function u(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=c(t),a=r.plugins.onCreateRule(e,o,n);return a||(e[0],null)}var d=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function f(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=d(e[r]," ");else n=d(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function p(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function m(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,a=void 0===o?0:o,i=t.fallbacks;if(e&&a++,i)if(Array.isArray(i))for(var l=0;l<i.length;l++){var s=i[l];for(var c in s){var u=s[c];null!=u&&(r&&(r+="\n"),r+=""+p(c+": "+f(u)+";",a))}}else for(var d in i){var m=i[d];null!=m&&(r&&(r+="\n"),r+=""+p(d+": "+f(m)+";",a))}for(var h in t){var v=t[h];null!=v&&"fallbacks"!==h&&(r&&(r+="\n"),r+=""+p(h+": "+f(v)+";",a))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),p(e+" {"+r,--a)+p("}",a)):r}var h=function(e){return e},v=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var a=null==o||!1===o,i=e in this.style;if(a&&!i&&!r)return this;var l=a&&i;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var s=this.options.sheet;return s&&s.attached,this},e}(),g=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var a=r.selector,i=r.scoped,s=r.sheet,c=r.generateId;return a?o.selectorText=a:!1!==i&&(o.id=c(Object(l.a)(Object(l.a)(o)),s),o.selectorText="."+h(o.id)),o}Object(i.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=f(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return m(this.selectorText,this.style,n)},Object(a.a)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(v),b={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new g(e,t,n)}},y={indent:1,children:!0},x=/@([\w-]+)/,w=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var o=e.match(x);for(var a in this.at=o?o[1]:"unknown",this.options=n,this.rules=new H(Object(r.a)({},n,{parent:this})),t)this.rules.add(a,t[a]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=y),!1===e.children)return this.key+" {}";var t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""},e}(),k=/@media|@supports\s+/,E={onCreateRule:function(e,t,n){return k.test(e)?new w(e,t,n):null}},C={indent:1,children:!0},S=/@keyframes\s+([\w-]+)/,O=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var o=e.match(S);o&&o[1]?this.name=o[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var a=n.scoped,i=n.sheet,l=n.generateId;for(var s in this.id=!1===a?this.name:l(this,i),this.rules=new H(Object(r.a)({},n,{parent:this})),t)this.rules.add(s,t[s],Object(r.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=C),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),T=/@keyframes\s+/,j=/\$([\w-]+)/g,P=function(e,t){return"string"==typeof e?e.replace(j,function(e,n){return n in t?t[n]:e}):e},R=function(e,t,n){var r=e[t],o=P(r,n);o!==r&&(e[t]=o)},N={onCreateRule:function(e,t,n){return"string"==typeof e&&T.test(e)?new O(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&R(e,"animation-name",n.keyframes),"animation"in e&&R(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return P(e,r.keyframes);default:return e}}},M=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(i.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return m(this.key,this.style,n)},t}(v),A={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new M(e,t,n):null}},L=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=m(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return m(this.key,this.style,e)},e}(),I={onCreateRule:function(e,t,n){return"@font-face"===e?new L(e,t,n):null}},_=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return m(this.key,this.style,e)},e}(),D={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new _(e,t,n):null}},z=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),F={"@charset":!0,"@import":!0,"@namespace":!0},B=[b,E,N,A,I,D,{onCreateRule:function(e,t,n){return e in F?new z(e,t,n):null}}],W={process:!0},U={force:!0,process:!0},H=function(){function e(e){this.map={},this.raw={},this.index=[],this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var o=this.options,a=o.parent,i=o.sheet,l=o.jss,s=o.Renderer,c=o.generateId,d=o.scoped,f=Object(r.a)({classes:this.classes,parent:a,sheet:i,jss:l,Renderer:s,generateId:c,scoped:d},n);this.raw[e]=t,e in this.classes&&(f.selector="."+h(this.classes[e]));var p=u(e,t,f);if(!p)return null;this.register(p);var m=void 0===f.index?this.index.length:f.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof g?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof O&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof g?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof O&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.onUpdate(t,this.get(e),n);else for(var r=0;r<this.index.length;r++)this.onUpdate(t,this.index[r],n)},t.onUpdate=function(t,n,r){void 0===r&&(r=W);var o=this.options,a=o.jss.plugins,i=o.sheet;if(n.rules instanceof e)n.rules.update(t,r);else{var l=n,s=l.style;if(a.onUpdate(t,n,i,r),r.process&&s&&s!==l.style){for(var c in a.onProcessStyle(l.style,l,i),l.style){var u=l.style[c];u!==s[c]&&l.prop(c,u,U)}for(var d in s){var f=l.style[d],p=s[d];null==f&&f!==p&&l.prop(d,null,U)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var a=this.index[o].toString(e);(a||r)&&(t&&(t+="\n"),t+=a)}return t},e}(),$=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(r.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new H(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached?this:(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy(),this)},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.toString=function(e){return this.rules.toString(e)},e}(),V=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce(function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e},{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),q=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){return this.registry.filter(function(e){return e.attached}).map(function(t){return t.toString(e)}).join("\n")},Object(a.a)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),K=new q,X=void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},G="2f1acc6c3a606b082e5eef5e54414ffb";null==X[G]&&(X[G]=0);var Y=X[G]++,Q=function(){var e=0;return function(t,n){e+=1;var r="c",o="";return n&&(r=n.options.classNamePrefix||"c",null!=n.options.jss.id&&(o+=n.options.jss.id)),""+r+Y+o+e}},J=function(e){var t;return function(){return t||(t=e()),t}};function Z(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function ee(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=f(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function te(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function ne(e,t){return e.selectorText=t,e.selectorText===t}var re=J(function(){return document.querySelector("head")});function oe(e){var t=K.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=re(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var ae=J(function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null}),ie=function(e,t,n){void 0===n&&(n=e.cssRules.length);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},le=function(){var e=document.createElement("style");return e.textContent="\n",e},se=function(){function e(e){this.getPropertyValue=Z,this.setProperty=ee,this.removeProperty=te,this.setSelector=ne,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&K.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||le(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var a=ae();a&&this.element.setAttribute("nonce",a)}var t=e.prototype;return t.attach=function(){!this.element.parentNode&&this.sheet&&(!function(e,t){var n=t.insertionPoint,r=oe(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,a=o.parentNode;a&&a.insertBefore(e,o.nextSibling)}else re().appendChild(e)}(this.element,this.sheet.options),this.hasInsertedRules&&(this.hasInsertedRules=!1,this.deploy()))},t.detach=function(){this.element.parentNode.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(o=ie(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,o),o)}var a=e.toString();if(!a)return!1;var i=ie(n,a,t);return!1!==i&&(this.hasInsertedRules=!0,e.renderable=i,i)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ce=0,ue=function(){function e(e){this.id=ce++,this.version="10.0.0-alpha.16",this.plugins=new V,this.options={createGenerateId:Q,Renderer:o.a?se:null,plugins:[]},this.generateId=Q();for(var t=0;t<B.length;t++)this.plugins.use(B[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){void 0===e&&(e={});var t=e.createGenerateId;return t&&(this.options.createGenerateId=t,this.generateId=t()),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===K.index?0:K.index+1);var o=new $(e,Object(r.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(o),o},t.removeStyleSheet=function(e){return e.detach(),K.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var o=Object(r.a)({},n,{jss:this,Renderer:this.options.Renderer});o.generateId||(o.generateId=this.generateId),o.classes||(o.classes={}),o.keyframes||(o.keyframes={});var a=u(e,t,o);return a&&this.plugins.onProcessRule(a),a},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach(function(t){e.plugins.use(t)}),this},e}();function de(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var a=de(r);a&&(t||(t={}),t[n]=a)}}return t}var fe="undefined"!=typeof CSS&&CSS&&"number"in CSS,pe=function(e){return new ue(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */pe()}).call(this,n(87))},function(e,t,n){var r=n(182),o=n(113),a=n(183);e.exports=function(e){return r(e)||o(e)||a()}},function(e,t,n){"use strict";var r=n(242),o=n(40),a=Object(r.b)({defaultTheme:o.a});t.a=a},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),o=n.n(r),a=n(0),i=n.n(a),l=n(35),s=n.n(l),c=n(43);function u(e){var t=i.a.forwardRef(function(t,n){return i.a.createElement(c.a.Consumer,null,function(r){return i.a.createElement(e,o()({muiFormControl:r,ref:n},t))})});return s()(t,e),t}},function(e,t,n){"use strict";n.d(t,"c",function(){return b}),n.d(t,"b",function(){return y});var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(143),d=n(250),f=n(4),p=n(249),m=n(64),h=n(6),v=n(14),g={left:"right",right:"left",top:"down",bottom:"up"};function b(e){return-1!==["left","right"].indexOf(e)}function y(e,t){return"rtl"===e.direction&&b(t)?g[t]:t}var x={enter:v.b.enteringScreen,exit:v.b.leavingScreen},w=s.a.forwardRef(function(e,t){var n=e.anchor,r=void 0===n?"left":n,a=e.BackdropProps,l=e.children,f=e.classes,v=e.className,b=e.elevation,w=void 0===b?16:b,k=e.ModalProps,E=(k=void 0===k?{}:k).BackdropProps,C=i()(k,["BackdropProps"]),S=e.onClose,O=e.open,T=void 0!==O&&O,j=e.PaperProps,P=e.SlideProps,R=e.theme,N=e.transitionDuration,M=void 0===N?x:N,A=e.variant,L=void 0===A?"temporary":A,I=i()(e,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","theme","transitionDuration","variant"]),_=s.a.useRef(!1);s.a.useEffect(function(){_.current=!0},[]);var D=y(R,r),z=s.a.createElement(m.a,o()({elevation:"temporary"===L?w:0,square:!0,className:Object(c.a)(f.paper,f["paperAnchor".concat(Object(h.a)(D))],"temporary"!==L&&f["paperAnchorDocked".concat(Object(h.a)(D))])},j),l);if("permanent"===L)return s.a.createElement("div",o()({className:Object(c.a)(f.root,f.docked,v),ref:t},I),z);var F=s.a.createElement(p.a,o()({in:T,direction:g[D],timeout:M,appear:_.current},P),z);return"persistent"===L?s.a.createElement("div",o()({className:Object(c.a)(f.root,f.docked,v)},I),F):s.a.createElement(u.a,o()({BackdropProps:o()({},a,E,{transitionDuration:M}),BackdropComponent:d.a,className:Object(c.a)(f.root,f.modal,v),open:T,onClose:S,ref:t},I,C),F)});t.a=Object(f.a)(function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:"none"},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}},{name:"MuiDrawer",flip:!1,withTheme:!0})(w)},function(e,t,n){var r=n(47),o=n(42);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(184);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t){function n(e,t,n){var r,o,a,i,l;function s(){var c=Date.now()-i;c<t&&c>=0?r=setTimeout(s,t-c):(r=null,n||(l=e.apply(a,o),a=o=null))}null==t&&(t=100);var c=function(){a=this,o=arguments,i=Date.now();var c=n&&!r;return r||(r=setTimeout(s,t)),c&&(l=e.apply(a,o),a=o=null),l};return c.clear=function(){r&&(clearTimeout(r),r=null)},c.flush=function(){r&&(l=e.apply(a,o),a=o=null,clearTimeout(r),r=null)},c}n.debounce=n,e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(62);n.d(t,"default",function(){return r.a})},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?a((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function o(e,t,r){var o={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){o[t]=n(e[t],r)}),Object.keys(t).forEach(function(i){r.isMergeableObject(t[i])&&e[i]?o[i]=function(e,t){if(!t.customMerge)return a;var n=t.customMerge(e);return"function"==typeof n?n:a}(i,r)(e[i],t[i],r):o[i]=n(t[i],r)}),o}function a(t,a,i){(i=i||{}).arrayMerge=i.arrayMerge||r,i.isMergeableObject=i.isMergeableObject||e;var l=Array.isArray(a),s=Array.isArray(t),c=l===s;return c?l?i.arrayMerge(t,a,i):o(t,a,i):n(a,i)}return a.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return a(e,n,t)},{})},a}()},function(e,t,n){"use strict";var r=n(115),o=n(187),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function l(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===a.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:s,isStream:function(e){return l(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r=n(177),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=u(n);d&&(i=i.concat(d(n)));for(var l=s(t),h=s(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||h&&h[g]||l&&l[g])){var b=f(n,g);try{c(t,g,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";function r(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce(function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e},{})}n.d(t,"a",function(){return r})},,function(e,t,n){"use strict";n.r(t);var r=n(64);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";n.r(t);var r=n(235),o=n(246),a=n(236),i=n(142),l=n(96),s=n(330),c=n(1),u=n.n(c),d=n(19),f=n.n(d),p=n(20),m=n.n(p),h=n(0),v=n.n(h),g=n(22),b=n(331),y=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(this,e),this.options=t}return m()(e,[{key:"collect",value:function(e){var t=new Map;this.sheetsRegistry=new g.b;var n=Object(r.a)();return v.a.createElement(b.b,u()({sheetsManager:t,serverGenerateClassName:n,sheetsRegistry:this.sheetsRegistry},this.options),e)}},{key:"toString",value:function(){return this.sheetsRegistry?this.sheetsRegistry.toString():""}},{key:"getStyleElement",value:function(e){return v.a.createElement("style",Object.assign({id:"jss-server-side",key:"jss-server-side",dangerouslySetInnerHTML:{__html:this.toString()}},e))}}]),e}(),x=n(248),w=n(247),k=n(94),E=n(234),C=n(242);n.d(t,"createGenerateClassName",function(){return r.a}),n.d(t,"createStyles",function(){return o.a}),n.d(t,"getThemeProps",function(){return a.a}),n.d(t,"jssPreset",function(){return i.a}),n.d(t,"makeStyles",function(){return l.a}),n.d(t,"mergeClasses",function(){return s.a}),n.d(t,"ServerStyleSheets",function(){return y}),n.d(t,"styled",function(){return x.a}),n.d(t,"StylesProvider",function(){return b.b}),n.d(t,"ThemeProvider",function(){return w.a}),n.d(t,"useTheme",function(){return k.a}),n.d(t,"withStyles",function(){return E.a}),n.d(t,"withTheme",function(){return C.a}),n.d(t,"withThemeCreator",function(){return C.b})},function(e,t,n){"use strict";var r=n(70),o=Object(r.a)();t.a=o},function(e,t,n){"use strict";var r=n(0),o=n.n(r).a.createContext({});t.a=o},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";var r=n(0),o=n.n(r).a.createContext();t.a=o},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),o=n.n(r),a=n(0),i=n.n(a),l=n(35),s=n.n(l);function c(e){var t=i.a.forwardRef(function(t,n){return i.a.createElement(e,o()({},t,{innerRef:n}))});return s()(t,e)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return i});var r=["template","script","style"];function o(e,t,n,o){var a=[t,n];[].forEach.call(e.children,function(e){-1===a.indexOf(e)&&function(e){return 1===e.nodeType&&-1===r.indexOf(e.tagName.toLowerCase())}(e)&&o(e)})}function a(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function i(e,t,n,r){o(e,t,n,function(e){return a(e,r)})}},function(e,t,n){"use strict";n.r(t);var r=n(114);n.d(t,"default",function(){return r.a})},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";t.a={black:"#000",white:"#fff"}},function(e,t,n){"use strict";function r(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function o(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(r(e.value)&&""!==e.value||t&&r(e.defaultValue)&&""!==e.defaultValue)}function a(e){return e.startAdornment}n.d(t,"b",function(){return o}),n.d(t,"a",function(){return a})},function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=o.a.createContext(null)},,function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,l)}s((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const o=n(185);!function(e){const t="https://quriultc2h.execute-api.us-west-1.amazonaws.com/prd/";e.login=e=>r(this,void 0,void 0,function*(){return yield o.default.post(t+"login",{username:e})}),e.getMessages=()=>r(this,void 0,void 0,function*(){return(yield o.default.get(t+"messages",{headers:{token:e.token}})).data.messages}),e.writeMessage=(n,a)=>r(this,void 0,void 0,function*(){return yield o.default.post(t+"messages",{toUsers:n,message:a},{headers:{token:e.token}})}),e.token="",e.username=""}(t.MessagesService||(t.MessagesService={}))},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n(70),a=n(120),i=n(121),l=n(122),s=n(1),c=n.n(s),u=n(137),d=n.n(u),f=n(9),p=n.n(f);function m(e){var t=e.lineHeight;return e.pixels/(t*e.htmlFontSize)}function h(e){return String(parseFloat(e)).length===String(e).length}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.breakpoints,r=void 0===n?["sm","md","lg"]:n,o=t.disableAlign,a=void 0!==o&&o,i=t.factor,l=void 0===i?2:i,s=t.variants,u=void 0===s?["h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","caption","button","overline"]:s,f=c()({},e);f.typography=c()({},f.typography);var v=f.typography,g=d()(v.htmlFontSize),b=r.map(function(e){return f.breakpoints.values[e]});return u.forEach(function(e){var t=v[e],n=parseFloat(g(t.fontSize,"rem"));if(!(n<=1)){var r=n,o=1+(r-1)/l,i=t.lineHeight;if(!h(i)&&!a)throw new Error(["Material-UI: unsupported non-unitless line height with grid alignment.","Use unitless line heights instead."].join("\n"));h(i)||(i=parseFloat(g(i,"rem"))/parseFloat(n));var s=null;a||(s=function(e){return t={size:e,grid:m({pixels:4,lineHeight:i,htmlFontSize:v.htmlFontSize})},n=t.size,r=t.grid,n-(o=n-n%r)<(a=o+r)-n?o:a;var t,n,r,o,a}),v[e]=c()({},t,function(e){var t=e.cssProperty,n=e.min,r=e.max,o=e.unit,a=void 0===o?"rem":o,i=e.breakpoints,l=void 0===i?[600,960,1280]:i,s=e.transform,c=void 0===s?null:s,u=p()({},t,"".concat(n).concat(a)),d=(r-n)/l[l.length-1];return l.forEach(function(e){var r=n+d*e;null!==c&&(r=c(r)),u["@media (min-width:".concat(e,"px)")]=p()({},t,"".concat(Math.round(1e4*r)/1e4).concat(a))}),u}({cssProperty:"fontSize",min:o,max:r,unit:"rem",breakpoints:b,transform:s}))}}),f}var g=n(69),b=n(14),y=n(94),x=n(40);function w(){return Object(y.a)()||x.a}var k=n(4),E=n(24);n.d(t,"hexToRgb",function(){return r.g}),n.d(t,"rgbToHex",function(){return r.k}),n.d(t,"hslToRgb",function(){return r.h}),n.d(t,"decomposeColor",function(){return r.b}),n.d(t,"recomposeColor",function(){return r.j}),n.d(t,"getContrastRatio",function(){return r.e}),n.d(t,"getLuminance",function(){return r.f}),n.d(t,"emphasize",function(){return r.c}),n.d(t,"fade",function(){return r.d}),n.d(t,"darken",function(){return r.a}),n.d(t,"lighten",function(){return r.i}),n.d(t,"createMuiTheme",function(){return o.a}),n.d(t,"createStyles",function(){return a.a}),n.d(t,"makeStyles",function(){return i.a}),n.d(t,"MuiThemeProvider",function(){return l.a}),n.d(t,"responsiveFontSizes",function(){return v}),n.d(t,"styled",function(){return g.a}),n.d(t,"easing",function(){return b.c}),n.d(t,"duration",function(){return b.b}),n.d(t,"formatMs",function(){return b.d}),n.d(t,"isString",function(){return b.f}),n.d(t,"isNumber",function(){return b.e}),n.d(t,"useTheme",function(){return w}),n.d(t,"withStyles",function(){return k.a}),n.d(t,"withTheme",function(){return E.a})},function(e,t,n){"use strict";t.a={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"}},function(e,t,n){"use strict";t.a={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"}},function(e,t,n){"use strict";t.a={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"}},function(e,t,n){"use strict";t.a={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"}},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(19)),a=r(n(20)),i=r(n(27)),l=r(n(28)),s=r(n(29)),c=r(n(47)),u=r(n(2)),d=r(n(1)),f=r(n(0));r(n(5)),r(n(11));var p,m=(p=null,function(){if(null!==p)return p;var e,t,n,r=!1;try{window.addEventListener("test",null,(e={},t="passive",n={get:function(){r=!0}},Object.defineProperty(e,t,n)))}catch(e){}return p=r,r}()),h={capture:!1,passive:!1};function v(e){return d({},h,e)}function g(e,t,n){var r=[e,t];return r.push(m?n:n.capture),r}function b(e,t,n,r){e.addEventListener.apply(e,g(t,n,r))}function y(e,t,n,r){e.removeEventListener.apply(e,g(t,n,r))}var x=function(e){function t(){return o(this,t),i(this,l(t).apply(this,arguments))}return s(t,e),a(t,[{key:"componentDidMount",value:function(){this.applyListeners(b)}},{key:"componentDidUpdate",value:function(e){this.applyListeners(y,e),this.applyListeners(b)}},{key:"componentWillUnmount",value:function(){this.applyListeners(y)}},{key:"applyListeners",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props,n=t.target;if(n){var r=n;"string"==typeof n&&(r=window[n]),function(e,t){e.children,e.target;var n=u(e,["children","target"]);Object.keys(n).forEach(function(e){if("on"===e.substring(0,2)){var r=n[e],o=c(r),a="object"===o;if(a||"function"===o){var i="capture"===e.substr(-7).toLowerCase(),l=e.substring(2).toLowerCase();l=i?l.substring(0,l.length-7):l,a?t(l,r.handler,r.options):t(l,r,v({capture:i}))}}})}(t,e.bind(null,r))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(f.PureComponent);x.propTypes={},t.withOptions=function(e,t){return{handler:e,options:v(t)}},t.default=x},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.a=o},function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(6),f={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},p=s.a.forwardRef(function(e,t){var n=e.align,r=void 0===n?"inherit":n,a=e.classes,l=e.className,u=e.color,p=void 0===u?"initial":u,m=e.component,h=e.display,v=void 0===h?"initial":h,g=e.gutterBottom,b=void 0!==g&&g,y=e.noWrap,x=void 0!==y&&y,w=e.paragraph,k=void 0!==w&&w,E=(e.theme,e.variant),C=void 0===E?"body1":E,S=e.variantMapping,O=void 0===S?f:S,T=i()(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","theme","variant","variantMapping"]),j=m||(k?"p":O[C]||f[C])||"span";return s.a.createElement(j,o()({className:Object(c.a)(a.root,"inherit"!==C&&a[C],"initial"!==p&&a["color".concat(Object(d.a)(p))],x&&a.noWrap,b&&a.gutterBottom,k&&a.paragraph,"inherit"!==r&&a["align".concat(Object(d.a)(r))],"initial"!==v&&a["display".concat(Object(d.a)(v))],l),ref:t},T))});t.a=Object(u.a)(function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}},{name:"MuiTypography",withTheme:!0})(p)},function(e,t,n){"use strict";n.r(t);var r=n(126);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(1),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=(n(11),n(4)),d=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.component,l=void 0===a?"div":a,u=e.square,d=void 0!==u&&u,f=e.elevation,p=void 0===f?1:f,m=o()(e,["classes","className","component","square","elevation"]),h=Object(c.a)(n.root,n["elevation".concat(p)],!d&&n.rounded,r);return s.a.createElement(l,i()({className:h,ref:t},m))});t.a=Object(u.a)(function(e){var t={};return e.shadows.forEach(function(e,n){t["elevation".concat(n)]={boxShadow:e}}),i()({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius}},t)},{name:"MuiPaper"})(d)},,,function(e,t,n){"use strict";n.r(t);var r=n(110);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";n.r(t);var r=n(76);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(248),i=n(40);t.a=function(e){var t=Object(a.a)(e);return function(e,n){return t(e,o()({defaultTheme:i.a},n))}}},function(e,t,n){"use strict";var r=n(9),o=n.n(r),a=n(1),i=n.n(a),l=n(2),s=n.n(l),c=n(33),u=n.n(c),d=n(92),f=n.n(d),p=(n(11),n(16));function m(e,t,n){var r;return i()({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i()({paddingLeft:t(2),paddingRight:t(2)},n,o()({},e.up("sm"),i()({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},o()(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),o()(r,e.up("sm"),{minHeight:64}),r)},n)}var h=n(56),v=n(57),g=n(55),b=n(58),y=n(49),x=n(7),w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:y.a.white,default:g.a[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}},k={text:{primary:y.a.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:g.a[800],default:"#303030"},action:{active:y.a.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function E(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(x.i)(e.main,r):"dark"===t&&(e.dark=Object(x.a)(e.main,1.5*r)))}function C(e){return Math.round(1e5*e)/1e5}var S={textTransform:"uppercase"},O='"Roboto", "Helvetica", "Arial", sans-serif';function T(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?O:r,a=n.fontSize,l=void 0===a?14:a,c=n.fontWeightLight,d=void 0===c?300:c,f=n.fontWeightRegular,p=void 0===f?400:f,m=n.fontWeightMedium,h=void 0===m?500:m,v=n.htmlFontSize,g=void 0===v?16:v,b=n.allVariants,y=s()(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","htmlFontSize","allVariants"]),x=l/14,w=function(e){return"".concat(e/g*x,"rem")},k=function(e,t,n,r,a){return i()({fontFamily:o,fontWeight:e,fontSize:w(t),lineHeight:n},o===O?{letterSpacing:"".concat(C(r/t),"em")}:{},a,b)},E={h1:k(d,96,1,-1.5),h2:k(d,60,1,-.5),h3:k(p,48,1.04,0),h4:k(p,34,1.17,.25),h5:k(p,24,1.33,0),h6:k(h,20,1.6,.15),subtitle1:k(p,16,1.75,.15),subtitle2:k(h,14,1.57,.1),body1:k(p,16,1.5,.15),body2:k(p,14,1.43,.15),button:k(h,14,1.75,.4,S),caption:k(p,12,1.66,.4),overline:k(p,12,2.66,1,S)};return u()(i()({htmlFontSize:g,pxToRem:w,round:C,fontFamily:o,fontSize:l,fontWeightLight:d,fontWeightRegular:p,fontWeightMedium:h},E),y,{clone:!1})}var j=.2,P=.14,R=.12;function N(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(j,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(P,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(R,")")].join(",")}var M=["none",N(0,1,3,0,0,1,1,0,0,2,1,-1),N(0,1,5,0,0,2,2,0,0,3,1,-2),N(0,1,8,0,0,3,4,0,0,3,3,-2),N(0,2,4,-1,0,4,5,0,0,1,10,0),N(0,3,5,-1,0,5,8,0,0,1,14,0),N(0,3,5,-1,0,6,10,0,0,1,18,0),N(0,4,5,-2,0,7,10,1,0,2,16,1),N(0,5,5,-3,0,8,10,1,0,3,14,2),N(0,5,6,-3,0,9,12,1,0,3,16,2),N(0,6,6,-3,0,10,14,1,0,4,18,3),N(0,6,7,-4,0,11,15,1,0,4,20,3),N(0,7,8,-4,0,12,17,2,0,5,22,4),N(0,7,8,-4,0,13,19,2,0,5,24,4),N(0,7,9,-4,0,14,21,2,0,5,26,4),N(0,8,9,-5,0,15,22,2,0,6,28,5),N(0,8,10,-5,0,16,24,2,0,6,30,5),N(0,8,11,-5,0,17,26,2,0,6,32,5),N(0,9,11,-5,0,18,28,2,0,7,34,6),N(0,9,12,-6,0,19,29,2,0,7,36,6),N(0,10,13,-6,0,20,31,3,0,8,38,7),N(0,10,13,-6,0,21,33,3,0,8,40,7),N(0,10,14,-6,0,22,35,3,0,8,42,7),N(0,11,14,-7,0,23,36,3,0,9,44,8),N(0,11,15,-7,0,24,38,3,0,9,46,8)],A={borderRadius:4};var L=n(14),I=n(74);t.a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,a=e.palette,l=void 0===a?{}:a,c=e.shadows,d=e.spacing,C=e.typography,S=void 0===C?{}:C,O=s()(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),j=function(e){var t=e.primary,n=void 0===t?{light:h.a[300],main:h.a[500],dark:h.a[700]}:t,r=e.secondary,o=void 0===r?{light:v.a.A200,main:v.a.A400,dark:v.a.A700}:r,a=e.error,l=void 0===a?{light:b.a[300],main:b.a[500],dark:b.a[700]}:a,c=e.type,d=void 0===c?"light":c,f=e.contrastThreshold,p=void 0===f?3:f,m=e.tonalOffset,C=void 0===m?.2:m,S=s()(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function O(e){return Object(x.e)(e,k.text.primary)>=p?k.text.primary:w.text.primary}function T(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!(e=i()({},e)).main&&e[t]&&(e.main=e[t]),E(e,"light",n,C),E(e,"dark",r,C),e.contrastText||(e.contrastText=O(e.main)),e}var j={dark:k,light:w};return u()(i()({common:y.a,type:d,primary:T(n),secondary:T(o,"A400","A200","A700"),error:T(l),grey:g.a,contrastThreshold:p,getContrastText:O,augmentColor:T,tonalOffset:C},j[d]),S,{clone:!1})}(l),P=Object(p.a)(n),R=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(t.mui)return t;e="function"==typeof t?t:function(e){return t*e};var n=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return 1===n.length?e(n[0]):n.map(function(t){var n=e(t);return"number"==typeof n?"".concat(n,"px"):n}).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return t}}),n.mui=!0,n}(d);return i()({breakpoints:P,direction:"ltr",mixins:m(P,R,o),overrides:{},palette:j,props:{},shadows:c||M,typography:T(j,S),spacing:R},u()({shape:A,transitions:L.a,zIndex:I.a},O,{isMergeableObject:f.a}))}},function(e,t,n){"use strict";var r=!0;t.a=function(e,t){if(!r){if(e)return;var n="Warning: "+t;"undefined"!=typeof console&&console.warn(n);try{throw Error(n)}catch(e){}}}},function(e,t,n){"use strict";var r=n(0),o=n.n(r).a.createContext(null);t.a=o},function(e,t,n){"use strict";var r="function"==typeof Symbol;t.a=r?Symbol.for("mui.nested"):"__THEME_NESTED__"},function(e,t,n){"use strict";t.a={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(15);t.a=Object(a.a)(o.a.createElement("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown")},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(6),f=s.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.className,l=e.color,u=void 0===l?"inherit":l,f=e.component,p=void 0===f?"svg":f,m=e.fontSize,h=void 0===m?"default":m,v=e.htmlColor,g=e.titleAccess,b=e.viewBox,y=void 0===b?"0 0 24 24":b,x=i()(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return s.a.createElement(p,o()({className:Object(c.a)(r.root,"inherit"!==u&&r["color".concat(Object(d.a)(u))],"default"!==h&&r["fontSize".concat(Object(d.a)(h))],a),focusable:"false",viewBox:y,color:v,"aria-hidden":g?"false":"true",role:g?"img":"presentation",ref:t},x),n,g?s.a.createElement("title",null,g):null)});f.muiName="SvgIcon",t.a=Object(u.a)(function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}},{name:"MuiSvgIcon"})(f)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.disabled,l=e.IconComponent,u=e.inputRef,d=e.name,f=e.onChange,p=e.value,m=e.variant,h=i()(e,["classes","className","disabled","IconComponent","inputRef","name","onChange","value","variant"]);return s.a.createElement("div",{className:n.root},s.a.createElement("select",o()({className:Object(c.a)(n.select,"filled"===m&&n.filled,"outlined"===m&&n.outlined,a&&n.disabled,r),name:d,disabled:a,onChange:f,value:p,ref:u||t},h)),s.a.createElement(l,{className:n.icon}))});t.a=u},function(e,t,n){"use strict";var r=n(21);t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window,n=Object(r.a)(e);return n.defaultView||n.parentView||t}},function(e,t,n){"use strict";t.a=function(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return v});var r=n(0),o=n.n(r),a=n(12),i=n.n(a),l=!0,s=!1,c=null,u={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function d(){l=!0}function f(){l=!1}function p(){"hidden"===this.visibilityState&&s&&(l=!0)}function m(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return l||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!u[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function h(){s=!0,window.clearTimeout(c),c=window.setTimeout(function(){s=!1,window.clearTimeout(c)},100)}function v(){return{isFocusVisible:m,onBlurVisible:h,ref:o.a.useCallback(function(e){var t,n=i.a.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",d,!0),t.addEventListener("mousedown",f,!0),t.addEventListener("pointerdown",f,!0),t.addEventListener("touchstart",f,!0),t.addEventListener("visibilitychange",p,!0))},[])}}},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,"a",function(){return o})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=!("undefined"==typeof window||!window.document||!window.document.createElement);function a(){if(r)return r;if(!o||!window.document.body)return"indeterminate";var e=window.document.createElement("div");return e.appendChild(document.createTextNode("ABCD")),e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e),r="reverse",e.scrollLeft>0?r="default":(e.scrollLeft=1,0===e.scrollLeft&&(r="negative")),document.body.removeChild(e),r}t._setScrollType=function(e){r=e},t.detectScrollType=a,t.getNormalizedScrollLeft=function(e,t){var n=e.scrollLeft;if("rtl"!==t)return n;var r=a();if("indeterminate"===r)return Number.NaN;switch(r){case"negative":return e.scrollWidth-e.clientWidth+n;case"reverse":return e.scrollWidth-e.clientWidth-n}return n},t.setNormalizedScrollLeft=function(e,t,n){if("rtl"===n){var r=a();if("indeterminate"!==r)switch(r){case"negative":e.scrollLeft=e.clientWidth-e.scrollWidth+t;break;case"reverse":e.scrollLeft=e.scrollWidth-e.clientWidth-t;break;default:e.scrollLeft=t}}else e.scrollLeft=t}},,,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(t){var r=n(34),o=n(190),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,s={adapter:("undefined"!=typeof XMLHttpRequest?l=n(116):void 0!==t&&(l=n(116)),l),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){s.headers[e]={}}),r.forEach(["post","put","patch"],function(e){s.headers[e]=r.merge(a)}),e.exports=s}).call(this,n(189))},function(e,t,n){"use strict";n.r(t);var r=n(125);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";n.r(t);var r=n(93);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";n.r(t);var r=n(129);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(179);function o(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==o(e)&&("function"==typeof(t=e.constructor)&&(!1!==o(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(41),f=s.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.className,l=e.component,u=void 0===l?"ul":l,f=e.dense,p=void 0!==f&&f,m=e.disablePadding,h=void 0!==m&&m,v=e.subheader,g=i()(e,["children","classes","className","component","dense","disablePadding","subheader"]),b=s.a.useMemo(function(){return{dense:p}},[p]);return s.a.createElement(d.a.Provider,{value:b},s.a.createElement(u,o()({className:Object(c.a)(r.root,p&&r.dense,!h&&r.padding,v&&r.subheader,a),ref:t},g),v,n))});t.a=Object(u.a)({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(f)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),o=n.n(r),a=n(72);function i(){return o.a.useContext(a.a)}},function(e,t,n){"use strict";var r=n(80),o=n(48),a=(n(5),n(0)),i=n.n(a),l=n(12),s=n.n(l),c=n(51),u="unmounted",d="exited",f="entering",p="entered",m=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=d,r.appearStatus=f):o=p:o=t.unmountOnExit||t.mountOnEnter?u:d,r.state={status:o},r.nextCallback=null,r}Object(o.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===u?{status:d}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==f&&n!==p&&(t=f):n!==f&&n!==p||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=s.a.findDOMNode(this);t===f?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===d&&this.setState({status:u})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:t,a=this.getTimeouts(),i=o?a.appear:a.enter;t||r?(this.props.onEnter(e,o),this.safeSetState({status:f},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,i,function(){n.safeSetState({status:p},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:p},function(){n.props.onEntered(e)})},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:d},function(){t.props.onExited(e)})})})):this.safeSetState({status:d},function(){t.props.onExited(e)})},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===u)return null;var t=this.props,n=t.children,o=Object(r.a)(t,["children"]);if(delete o.in,delete o.mountOnEnter,delete o.unmountOnExit,delete o.appear,delete o.enter,delete o.exit,delete o.timeout,delete o.addEndListener,delete o.onEnter,delete o.onEntering,delete o.onEntered,delete o.onExit,delete o.onExiting,delete o.onExited,"function"==typeof n)return i.a.createElement(c.a.Provider,{value:null},n(e,o));var a=i.a.Children.only(n);return i.a.createElement(c.a.Provider,{value:null},i.a.cloneElement(a,o))},t}(i.a.Component);function h(){}m.contextType=c.a,m.propTypes={},m.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:h,onEntering:h,onEntered:h,onExit:h,onExiting:h,onExited:h},m.UNMOUNTED=0,m.EXITED=1,m.ENTERING=2,m.ENTERED=3,m.EXITING=4,t.a=m},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(1),i=n.n(a),l=n(0),s=n.n(l),c=(n(11),n(22)),u=n(330),d={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}},f=n(94),p=n(331),m=-1e9;n(47);var h=n(33),v=n.n(h);function g(e,t){return t}var b=function(e){var t="function"==typeof e;return{create:function(n,r){var o;try{o=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return o;var a=n.overrides[r],l=i()({},o);return Object.keys(a).forEach(function(e){l[e]=v()(l[e],a[e],{arrayMerge:g})}),l},options:{},themingEnabled:t}},y={};t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,a=t.Component,l=t.defaultTheme,h=void 0===l?y:l,v=o()(t,["name","classNamePrefix","Component","defaultTheme"]),g=b(e),x=n||r||"makeStyles";g.options={index:m+=1,name:n,meta:x,classNamePrefix:x};var w=g.themingEnabled||"string"==typeof n;return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=(w?Object(f.a)():null)||h,r=i()({},s.a.useContext(p.a),v),o=s.a.useRef(),l=s.a.useRef();return function(e,t){var n,r=s.a.useRef([]);if(r.current.length!==t.length)r.current=t,n=e();else for(var o=0;o<t.length;o+=1)if(t[o]!==r.current[o]){r.current=t,n=e();break}s.a.useEffect(function(){return function(){n&&n()}},t)}(function(){var a={name:n,state:{},stylesCreator:g,stylesOptions:r,theme:t};return function(e,t){var n=e.state,r=e.theme,o=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!o.disableGeneration){var s=d.get(o.sheetsManager,a,r);s||(s={refs:0,staticSheet:null,dynamicStyles:null},d.set(o.sheetsManager,a,r,s));var f=i()({},a.options,o,{theme:r,flip:"boolean"==typeof o.flip?o.flip:"rtl"===r.direction});f.generateId=f.serverGenerateClassName||f.generateClassName;var p=o.sheetsRegistry;if(0===s.refs){var m;o.sheetsCache&&(m=d.get(o.sheetsCache,a,r));var h=a.create(r,l);m||((m=o.jss.createStyleSheet(h,i()({link:!1},f))).attach(),o.sheetsCache&&d.set(o.sheetsCache,a,r,m)),p&&p.add(m),s.staticSheet=m,s.dynamicStyles=Object(c.e)(h)}if(s.dynamicStyles){var v=o.jss.createStyleSheet(s.dynamicStyles,i()({link:!0},f));v.update(t).attach(),n.dynamicSheet=v,n.classes=Object(u.a)({baseClasses:s.staticSheet.classes,newClasses:v.classes}),p&&p.add(v)}else n.classes=s.staticSheet.classes;s.refs+=1}}(a,e),l.current=!1,o.current=a,function(){!function(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var a=d.get(r.sheetsManager,o,n);a.refs-=1;var i=r.sheetsRegistry;0===a.refs&&(d.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(a.staticSheet),i&&i.remove(a.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),i&&i.remove(t.dynamicSheet))}}(a)}},[t,g]),s.a.useEffect(function(){l.current&&function(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}(o.current,e),l.current=!0}),function(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Object(u.a)({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}(o.current,e.classes,a)}}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(10),i=n.n(a),l=n(2),s=n.n(l),c=n(0),u=n.n(c),d=(n(5),n(12)),f=n.n(d),p=n(3),m=n(8),h=n(4),v=n(333),g=n(81),b=n(23),y=n.n(b),x=n(19),w=n.n(x),k=n(20),E=n.n(k),C=n(27),S=n.n(C),O=n(28),T=n.n(O),j=n(29),P=n.n(j),R=n(80),N=n(18),M=n(48),A=n(61),L=n(51);function I(e,t){var n=Object.create(null);return e&&c.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&Object(c.isValidElement)(e)?t(e):e}(e)}),n}function _(e,t,n){return null!=n[t]?n[t]:e.props[t]}function D(e,t,n){var r=I(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var c=o[s][r];l[o[s][r]]=n(c)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,r);return Object.keys(o).forEach(function(a){var i=o[a];if(Object(c.isValidElement)(i)){var l=a in t,s=a in r,u=t[a],d=Object(c.isValidElement)(u)&&!u.props.in;!s||l&&!d?s||!l||d?s&&l&&Object(c.isValidElement)(u)&&(o[a]=Object(c.cloneElement)(i,{onExited:n.bind(null,i),in:u.props.in,exit:_(i,"exit",e),enter:_(i,"enter",e)})):o[a]=Object(c.cloneElement)(i,{in:!1}):o[a]=Object(c.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:_(i,"exit",e),enter:_(i,"enter",e)})}}),o}var z=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},F=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Object(A.a)(Object(A.a)(r)));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Object(M.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,r=a,I(n.children,function(e){return Object(c.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:_(e,"appear",n),enter:_(e,"enter",n),exit:_(e,"exit",n)})})):D(e,o,a),firstRender:!1}},n.handleExited=function(e,t){var n=I(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState(function(t){var n=Object(N.a)({},t.children);return delete n[e.key],{children:n}}))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Object(R.a)(e,["component","childFactory"]),o=this.state.contextValue,a=z(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?u.a.createElement(L.a.Provider,{value:o},a):u.a.createElement(L.a.Provider,{value:o},u.a.createElement(t,r,a))},t}(u.a.Component);F.propTypes={},F.defaultProps={component:"div",childFactory:function(e){return e}};var B=F,W=n(95);var U=function(e){var t=e.classes,n=e.className,r=e.pulsate,a=void 0!==r&&r,l=e.rippleX,c=e.rippleY,d=e.rippleSize,f=s()(e,["classes","className","pulsate","rippleX","rippleY","rippleSize"]),m=u.a.useState(!1),h=i()(m,2),v=h[0],g=h[1],b=u.a.useState(!1),y=i()(b,2),x=y[0],w=y[1],k=Object(p.a)(t.ripple,v&&t.rippleVisible,a&&t.ripplePulsate,n),E={width:d,height:d,top:-d/2+c,left:-d/2+l},C=Object(p.a)(t.child,x&&t.childLeaving,a&&t.childPulsate);return u.a.createElement(W.a,o()({onEnter:function(){g(!0)},onExit:function(){w(!0)}},f),u.a.createElement("span",{className:k,style:E},u.a.createElement("span",{className:C})))},H=550,$=80,V=function(e){function t(){var e,n;w()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(n=S()(this,(e=T()(t)).call.apply(e,[this].concat(o)))).state={nextKey:0,ripples:[]},n.container=u.a.createRef(),n.pulsate=function(){n.start({},{pulsate:!0})},n.start=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0,o=t.pulsate,a=void 0!==o&&o,i=t.center,l=void 0===i?n.props.center||t.pulsate:i,s=t.fakeElement,c=void 0!==s&&s;if("mousedown"===e.type&&n.ignoringMouseDown)n.ignoringMouseDown=!1;else{"touchstart"===e.type&&(n.ignoringMouseDown=!0);var u,d,f,p=c?null:n.container.current,m=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(m.width/2),d=Math.round(m.height/2);else{var h=e.clientX?e.clientX:e.touches[0].clientX,v=e.clientY?e.clientY:e.touches[0].clientY;u=Math.round(h-m.left),d=Math.round(v-m.top)}if(l)(f=Math.sqrt((2*Math.pow(m.width,2)+Math.pow(m.height,2))/3))%2==0&&(f+=1);else{var g=2*Math.max(Math.abs((p?p.clientWidth:0)-u),u)+2,b=2*Math.max(Math.abs((p?p.clientHeight:0)-d),d)+2;f=Math.sqrt(Math.pow(g,2)+Math.pow(b,2))}e.touches?(n.startTimerCommit=function(){n.startCommit({pulsate:a,rippleX:u,rippleY:d,rippleSize:f,cb:r})},n.startTimer=setTimeout(function(){n.startTimerCommit&&(n.startTimerCommit(),n.startTimerCommit=null)},$)):n.startCommit({pulsate:a,rippleX:u,rippleY:d,rippleSize:f,cb:r})}},n.startCommit=function(e){var t=e.pulsate,r=e.rippleX,o=e.rippleY,a=e.rippleSize,i=e.cb;n.setState(function(e){return{nextKey:e.nextKey+1,ripples:[].concat(y()(e.ripples),[u.a.createElement(U,{key:e.nextKey,classes:n.props.classes,timeout:{exit:H,enter:H},pulsate:t,rippleX:r,rippleY:o,rippleSize:a})])}},i)},n.stop=function(e,t){clearTimeout(n.startTimer);var r=n.state.ripples;if("touchend"===e.type&&n.startTimerCommit)return e.persist(),n.startTimerCommit(),n.startTimerCommit=null,void(n.startTimer=setTimeout(function(){n.stop(e,t)}));n.startTimerCommit=null,r&&r.length&&n.setState({ripples:r.slice(1)},t)},n}return P()(t,e),E()(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.startTimer)}},{key:"render",value:function(){var e=this.props,t=(e.center,e.classes),n=e.className,r=s()(e,["center","classes","className"]);return u.a.createElement("span",o()({className:Object(p.a)(t.root,n),ref:this.container},r),u.a.createElement(B,{component:null,enter:!0,exit:!0},this.state.ripples))}}]),t}(u.a.PureComponent);V.defaultProps={center:!1};var q=Object(h.a)(function(e){return{root:{display:"block",position:"absolute",overflow:"hidden",borderRadius:"inherit",width:"100%",height:"100%",left:0,top:0,pointerEvents:"none",zIndex:0},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"mui-ripple-enter ".concat(H,"ms ").concat(e.transitions.easing.easeInOut),animationName:"$mui-ripple-enter"},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"mui-ripple-exit ".concat(H,"ms ").concat(e.transitions.easing.easeInOut),animationName:"$mui-ripple-exit"},childPulsate:{position:"absolute",left:0,top:0,animation:"mui-ripple-pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite"),animationName:"$mui-ripple-pulsate"},"@keyframes mui-ripple-enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes mui-ripple-exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes mui-ripple-pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}},{flip:!1,name:"MuiTouchRipple"})(V),K="undefined"!=typeof window?u.a.useLayoutEffect:u.a.useEffect;function X(e){var t=u.a.useRef(e);return K(function(){t.current=e}),u.a.useCallback(function(e){return(0,t.current)(e)},[])}var G=u.a.forwardRef(function(e,t){var n=e.action,r=e.buttonRef,a=e.centerRipple,l=void 0!==a&&a,c=e.children,d=e.classes,h=e.className,b=e.component,y=void 0===b?"button":b,x=e.disabled,w=e.disableRipple,k=void 0!==w&&w,E=e.disableTouchRipple,C=void 0!==E&&E,S=e.focusRipple,O=void 0!==S&&S,T=e.focusVisibleClassName,j=e.onBlur,P=e.onClick,R=e.onFocus,N=e.onFocusVisible,M=e.onKeyDown,A=e.onKeyUp,L=e.onMouseDown,I=e.onMouseLeave,_=e.onMouseUp,D=e.onTouchEnd,z=e.onTouchMove,F=e.onTouchStart,B=e.tabIndex,W=void 0===B?0:B,U=e.TouchRippleProps,H=e.type,$=void 0===H?"button":H,V=s()(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"]),K=u.a.useRef(null);var G=u.a.useRef(null),Y=u.a.useState(!1),Q=i()(Y,2),J=Q[0],Z=Q[1];x&&J&&Z(!1);var ee=Object(g.a)(),te=ee.isFocusVisible,ne=ee.onBlurVisible,re=ee.ref;function oe(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:C;return X(function(r){return t&&t(r),!(r.defaultPrevented||n)&&G.current&&G.current[e](r),!0})}u.a.useImperativeHandle(n,function(){return{focusVisible:function(){Z(!0),K.current.focus()}}},[]),u.a.useEffect(function(){J&&O&&!k&&G.current.pulsate()},[k,O,J]);var ae=oe("start",L),ie=oe("stop",_),le=oe("stop",function(e){J&&e.preventDefault(),I&&I(e)}),se=oe("start",F),ce=oe("stop",D),ue=oe("stop",z),de=oe("stop",function(e){J&&(ne(e),Z(!1)),j&&j(e)},!1),fe=X(function(e){x||(K.current||(K.current=e.currentTarget),te(e)&&(Z(!0),N&&N(e)),R&&R(e))}),pe=u.a.useRef(!1),me=X(function(e){O&&!pe.current&&J&&G.current&&" "===e.key&&(pe.current=!0,e.persist(),G.current.stop(e,function(){G.current.start(e)})),M&&M(e);var t=f.a.findDOMNode(K.current);e.target!==e.currentTarget||!y||"button"===y||" "!==e.key&&"Enter"!==e.key||"A"===t.tagName&&t.href||(e.preventDefault(),P&&P(e))}),he=X(function(e){O&&" "===e.key&&G.current&&J&&(pe.current=!1,e.persist(),G.current.stop(e,function(){G.current.pulsate(e)})),A&&A(e)}),ve=Object(p.a)(d.root,h,J&&[d.focusVisible,T],x&&d.disabled),ge=y;"button"===ge&&V.href&&(ge="a");var be={};"button"===ge?(be.type=$,be.disabled=x):(be.role="button",be["aria-disabled"]=x);var ye=Object(m.c)(r,t),xe=Object(m.c)(re,K),we=Object(m.c)(ye,xe);return u.a.createElement(ge,o()({className:ve,onBlur:de,onClick:P,onFocus:fe,onKeyDown:me,onKeyUp:he,onMouseDown:ae,onMouseLeave:le,onMouseUp:ie,onTouchEnd:ce,onTouchMove:ue,onTouchStart:se,ref:we,tabIndex:x?-1:W},be,V),c,k||x?null:u.a.createElement(v.a,null,u.a.createElement(q,o()({ref:G,center:l},U))))});t.a=Object(h.a)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(G)},,,,,,,,,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){i=r(n);for(var u=0;u<i.length;u++)a.call(n,i[u])&&(l[i[u]]=n[i[u]])}}return l}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(10),i=n.n(a),l=n(2),s=n.n(l),c=n(0),u=n.n(c),d=n(12),f=n.n(d),p=(n(11),n(5),n(3)),m=n(141),h=n(237),v=n(252),g=n(239),b=n(238),y=n(245),x=n(253),w=n(4),k={standard:m.a,filled:h.a,outlined:v.a},E=u.a.forwardRef(function(e,t){var n=e.autoComplete,r=e.autoFocus,a=e.children,l=e.classes,c=e.className,d=e.defaultValue,m=e.error,h=e.FormHelperTextProps,v=e.fullWidth,w=e.helperText,E=e.id,C=e.InputLabelProps,S=e.inputProps,O=e.InputProps,T=e.inputRef,j=e.label,P=e.multiline,R=e.name,N=e.onBlur,M=e.onChange,A=e.onFocus,L=e.placeholder,I=e.required,_=void 0!==I&&I,D=e.rows,z=e.rowsMax,F=e.select,B=void 0!==F&&F,W=e.SelectProps,U=e.type,H=e.value,$=e.variant,V=void 0===$?"standard":$,q=s()(e,["autoComplete","autoFocus","children","classes","className","defaultValue","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]),K=u.a.useState(0),X=i()(K,2),G=X[0],Y=X[1],Q=u.a.useRef(null);u.a.useEffect(function(){if("outlined"===V){var e=f.a.findDOMNode(Q.current);Y(null!=e?e.offsetWidth:0)}},[V,_]);var J={};"outlined"===V&&(C&&void 0!==C.shrink&&(J.notched=C.shrink),J.labelWidth=G);var Z=w&&E?"".concat(E,"-helper-text"):void 0,ee=k[V],te=u.a.createElement(ee,o()({"aria-describedby":Z,autoComplete:n,autoFocus:r,defaultValue:d,fullWidth:v,multiline:P,name:R,rows:D,rowsMax:z,type:U,value:H,id:E,inputRef:T,onBlur:N,onChange:M,onFocus:A,placeholder:L,inputProps:S},J,O));return u.a.createElement(b.a,o()({className:Object(p.a)(l.root,c),error:m,fullWidth:v,ref:t,required:_,variant:V},q),j&&u.a.createElement(g.a,o()({htmlFor:E,ref:Q},C),j),B?u.a.createElement(x.a,o()({"aria-describedby":Z,value:H,input:te},W),a):te,w&&u.a.createElement(y.a,o()({id:Z},h),w))});t.a=Object(w.a)({root:{}},{name:"MuiTextField"})(E)},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(1),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(7),f=n(97),p=n(6),m=s.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.className,l=e.color,u=void 0===l?"default":l,d=e.component,m=void 0===d?"button":d,h=e.disabled,v=void 0!==h&&h,g=e.disableFocusRipple,b=void 0!==g&&g,y=e.focusVisibleClassName,x=e.fullWidth,w=void 0!==x&&x,k=e.size,E=void 0===k?"medium":k,C=e.type,S=void 0===C?"button":C,O=e.variant,T=void 0===O?"text":O,j=o()(e,["children","classes","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","fullWidth","size","type","variant"]),P="contained"===T,R="text"===T,N=Object(c.a)(r.root,a,"outlined"===T&&[r.outlined,"primary"===u&&r.outlinedPrimary,"secondary"===u&&r.outlinedSecondary],"secondary"===u&&[R&&r.textSecondary,P&&r.containedSecondary],"primary"===u&&[R&&r.textPrimary,P&&r.containedPrimary],R&&r.text,P&&r.contained,"medium"!==E&&r["size".concat(Object(p.a)(E))],v&&r.disabled,w&&r.fullWidth,"inherit"===u&&r.colorInherit);return s.a.createElement(f.a,i()({className:N,component:m,disabled:v,focusRipple:!b,focusVisibleClassName:Object(c.a)(r.focusVisible,y),ref:t,type:S},j),s.a.createElement("span",{className:r.label},n))});t.a=Object(u.a)(function(e){return{root:i()({lineHeight:1.75},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Object(d.d)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(d.d)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(d.d)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 16px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Object(d.d)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Object(d.d)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Object(d.d)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Object(d.d)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},sizeSmall:{padding:"4px 8px",minWidth:64,fontSize:e.typography.pxToRem(13)},sizeLarge:{padding:"8px 24px",fontSize:e.typography.pxToRem(15)},fullWidth:{width:"100%"}}},{name:"MuiButton"})(m)},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(34),o=n(191),a=n(193),i=n(194),l=n(195),s=n(117),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(196);e.exports=function(e){return new Promise(function(t,u){var d=e.data,f=e.headers;r.isFormData(d)&&delete f["Content-Type"];var p=new XMLHttpRequest,m="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||l(e.url)||(p=new window.XDomainRequest,m="onload",h=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var v=e.auth.username||"",g=e.auth.password||"";f.Authorization="Basic "+c(v+":"+g)}if(p.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[m]=function(){if(p&&(4===p.readyState||h)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,u,r),p=null}},p.onerror=function(){u(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var b=n(197),y=(e.withCredentials||l(e.url))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;y&&(f[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&r.forEach(f,function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),u(e),p=null)}),void 0===d&&(d=null),p.send(d)})}},function(e,t,n){"use strict";var r=n(192);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(246);function o(e){return Object(r.a)(e)}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(96),i=n(40);t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(a.a)(e,o()({defaultTheme:i.a},t))}},function(e,t,n){"use strict";var r=n(247);t.a=r.a},function(e,t,n){"use strict";n.r(t);var r=n(124);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(6),f=n(64),p=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.color,l=void 0===a?"primary":a,u=e.position,p=void 0===u?"fixed":u,m=i()(e,["classes","className","color","position"]);return s.a.createElement(f.a,o()({square:!0,component:"header",elevation:4,className:Object(c.a)(n.root,n["position".concat(Object(d.a)(p))],"inherit"!==l&&n["color".concat(Object(d.a)(l))],"fixed"===p&&"mui-fixed",r),ref:t},m))});t.a=Object(u.a)(function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText}}},{name:"MuiAppBar"})(p)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(9),s=n.n(l),c=n(0),u=n.n(c),d=(n(5),n(3)),f=n(4),p=u.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.component,l=void 0===a?"div":a,s=e.disableGutters,c=void 0!==s&&s,f=e.variant,p=void 0===f?"regular":f,m=i()(e,["classes","className","component","disableGutters","variant"]),h=Object(d.a)(n.root,n[p],!c&&n.gutters,r);return u.a.createElement(l,o()({className:h,ref:t},m))});t.a=Object(f.a)(function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:s()({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}},{name:"MuiToolbar"})(p)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(7),f=n(97),p=n(6),m=s.a.forwardRef(function(e,t){var n=e.edge,r=void 0!==n&&n,a=e.children,l=e.classes,u=e.className,d=e.color,m=void 0===d?"default":d,h=e.disabled,v=void 0!==h&&h,g=e.disableFocusRipple,b=void 0!==g&&g,y=e.size,x=void 0===y?"medium":y,w=i()(e,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return s.a.createElement(f.a,o()({className:Object(c.a)(l.root,"default"!==m&&l["color".concat(Object(p.a)(m))],v&&l.disabled,"medium"!==x&&l["size".concat(Object(p.a)(x))],"start"===r&&l.edgeStart,"end"===r&&l.edgeEnd,u),centerRipple:!0,focusRipple:!b,disabled:v,ref:t},w),s.a.createElement("span",{className:l.label},a))});t.a=Object(u.a)(function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:Object(d.d)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(d.d)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(d.d)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}},{name:"MuiIconButton"})(m)},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.memo(a.default.forwardRef(function(t,n){return a.default.createElement(i.default,(0,o.default)({},t,{ref:n}),e)}));0;return n.muiName=i.default.muiName,n};var o=r(n(1)),a=r(n(0)),i=r(n(68))},function(e,t,n){"use strict";n.r(t);var r=n(26);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(97),f=n(8),p=n(41),m=n(12),h=n.n(m),v=(n(11),"undefined"==typeof window?s.a.useEffect:s.a.useLayoutEffect),g=s.a.forwardRef(function(e,t){var n=e.alignItems,r=void 0===n?"center":n,a=e.autoFocus,l=e.button,u=void 0!==l&&l,m=e.children,g=e.classes,b=e.className,y=e.component,x=e.ContainerComponent,w=void 0===x?"li":x,k=e.ContainerProps,E=(k=void 0===k?{}:k).className,C=i()(k,["className"]),S=e.dense,O=e.disabled,T=void 0!==O&&O,j=e.disableGutters,P=void 0!==j&&j,R=e.divider,N=void 0!==R&&R,M=e.focusVisibleClassName,A=e.selected,L=void 0!==A&&A,I=i()(e,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),_=s.a.useContext(p.a),D={dense:S||_.dense||!1,alignItems:r},z=s.a.useRef(null);v(function(){a&&z.current&&z.current.focus()},[a]);var F=s.a.Children.toArray(m),B=F.length&&Object(f.a)(F[F.length-1],["ListItemSecondaryAction"]),W=s.a.useCallback(function(e){z.current=h.a.findDOMNode(e)},[]),U=Object(f.c)(W,t),H=o()({className:Object(c.a)(g.root,D.dense&&g.dense,!P&&g.gutters,N&&g.divider,T&&g.disabled,u&&g.button,"flex-start"===r&&g.alignItemsFlexStart,B&&g.secondaryAction,L&&g.selected,b),disabled:T},I),$=y||"li";return u&&(H.component=y||"div",H.focusVisibleClassName=Object(c.a)(g.focusVisible,M),$=d.a),B?($=H.component||y?$:"div","li"===w&&("li"===$?$="div":"li"===H.component&&(H.component="div")),s.a.createElement(p.a.Provider,{value:D},s.a.createElement(w,o()({className:Object(c.a)(g.container,E),ref:U},C),s.a.createElement($,H,F),F.pop()))):s.a.createElement(p.a.Provider,{value:D},s.a.createElement($,o()({ref:U},H),F))});t.a=Object(u.a)(function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}},{name:"MuiListItem"})(g)},function(e,t,n){"use strict";n.r(t);var r=n(131);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=i()(e,["classes","className"]);return s.a.createElement("div",o()({className:Object(c.a)(n.root,r),ref:t},a))});t.a=Object(u.a)(function(e){return{root:{minWidth:56,color:e.palette.action.active,flexShrink:0,display:"inline-flex"}}},{name:"MuiListItemIcon"})(d)},function(e,t,n){"use strict";n.r(t);var r=n(133);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(62),f=n(41),p=s.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.className,l=e.disableTypography,u=void 0!==l&&l,p=e.inset,m=void 0!==p&&p,h=e.primary,v=e.primaryTypographyProps,g=e.secondary,b=e.secondaryTypographyProps,y=i()(e,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]),x=s.a.useContext(f.a).dense,w=null!=h?h:n;null==w||w.type===d.a||u||(w=s.a.createElement(d.a,o()({variant:x?"body2":"body1",className:r.primary,component:"span"},v),w));var k=g;return null==k||k.type===d.a||u||(k=s.a.createElement(d.a,o()({variant:"body2",className:r.secondary,color:"textSecondary"},b),k)),s.a.createElement("div",o()({className:Object(c.a)(r.root,x&&r.dense,m&&r.inset,w&&k&&r.multiline,a),ref:t},y),w,k)});t.a=Object(u.a)({root:{flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},multiline:{marginTop:6,marginBottom:6},dense:{},inset:{paddingLeft:56},primary:{},secondary:{}},{name:"MuiListItemText"})(p)},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"common",function(){return o.a}),n.d(r,"red",function(){return a.a}),n.d(r,"pink",function(){return i.a}),n.d(r,"purple",function(){return l}),n.d(r,"deepPurple",function(){return s}),n.d(r,"indigo",function(){return c.a}),n.d(r,"blue",function(){return u}),n.d(r,"lightBlue",function(){return d}),n.d(r,"cyan",function(){return f}),n.d(r,"teal",function(){return p}),n.d(r,"green",function(){return m}),n.d(r,"lightGreen",function(){return h}),n.d(r,"lime",function(){return v}),n.d(r,"yellow",function(){return g}),n.d(r,"amber",function(){return b}),n.d(r,"orange",function(){return y}),n.d(r,"deepOrange",function(){return x}),n.d(r,"brown",function(){return w}),n.d(r,"grey",function(){return k.a}),n.d(r,"blueGrey",function(){return E});var o=n(49),a=n(58),i=n(57),l={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},s={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea"},c=n(56),u={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},d={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},f={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4"},p={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"},m={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},h={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17"},v={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00"},g={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600"},b={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00"},y={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},x={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00"},w={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037"},k=n(55),E={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64"},C=n(70),S=n(120),O=n(121),T=n(122),j=n(69),P=n(4),R=n(24),N=n(124),M=n(1),A=n.n(M),L=n(2),I=n.n(L),_=n(0),D=n.n(_),z=n(5),F=n.n(z),B=n(3),W=D.a.forwardRef(function(e,t){var n=e.alt,r=e.children,o=e.childrenClassName,a=e.classes,i=e.className,l=e.component,s=void 0===l?"div":l,c=e.imgProps,u=e.sizes,d=e.src,f=e.srcSet,p=I()(e,["alt","children","childrenClassName","classes","className","component","imgProps","sizes","src","srcSet"]),m=null,h=d||f;return m=h?D.a.createElement("img",A()({alt:n,src:d,srcSet:f,sizes:u,className:a.img},c)):o&&D.a.isValidElement(r)?D.a.cloneElement(r,{className:Object(B.a)(o,r.props.className)}):r,D.a.createElement(s,A()({className:Object(B.a)(a.root,a.system,!h&&a.colorDefault,i),ref:t},p),m)}),U=Object(P.a)(function(e){return{root:{position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),borderRadius:"50%",overflow:"hidden",userSelect:"none"},colorDefault:{color:e.palette.background.default,backgroundColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},img:{width:"100%",height:"100%",textAlign:"center",objectFit:"cover"}}},{name:"MuiAvatar"})(W),H=n(250),$=n(6),V=D.a.forwardRef(function(e,t){var n=e.badgeContent,r=e.children,o=e.classes,a=e.className,i=e.color,l=void 0===i?"default":i,s=e.component,c=void 0===s?"span":s,u=e.invisible,d=e.max,f=void 0===d?99:d,p=e.showZero,m=void 0!==p&&p,h=e.variant,v=void 0===h?"standard":h,g=I()(e,["badgeContent","children","classes","className","color","component","invisible","max","showZero","variant"]),b=u;null==u&&(0===n&&!m||null==n&&"dot"!==v)&&(b=!0);var y="";return"dot"!==v&&(y=n>f?"".concat(f,"+"):n),D.a.createElement(c,A()({className:Object(B.a)(o.root,a),ref:t},g),r,D.a.createElement("span",{className:Object(B.a)(o.badge,"default"!==l&&o["color".concat(Object($.a)(l))],b&&o.invisible,"dot"===v&&o.dot)},y))}),q=Object(P.a)(function(e){return{root:{position:"relative",display:"inline-flex",verticalAlign:"middle"},badge:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",top:0,right:0,boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,padding:"0 4px",height:20,borderRadius:10,backgroundColor:e.palette.color,color:e.palette.textColor,zIndex:1,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen})},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorError:{backgroundColor:e.palette.error.main,color:e.palette.error.contrastText},invisible:{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen}),transform:"scale(0) translate(50%, -50%)",transformOrigin:"100% 0%"},dot:{height:6,minWidth:6,padding:0}}},{name:"MuiBadge"})(V),K=(n(11),D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.component,i=void 0===a?"div":a,l=e.onChange,s=e.showLabels,c=void 0!==s&&s,u=e.value,d=I()(e,["children","classes","className","component","onChange","showLabels","value"]);return D.a.createElement(i,A()({className:Object(B.a)(r.root,o),ref:t},d),D.a.Children.map(n,function(e,t){if(!D.a.isValidElement(e))return null;var n=void 0===e.props.value?t:e.props.value;return D.a.cloneElement(e,{selected:n===u,showLabel:void 0!==e.props.showLabel?e.props.showLabel:c,value:n,onChange:l})}))})),X=Object(P.a)(function(e){return{root:{display:"flex",justifyContent:"center",height:56,backgroundColor:e.palette.background.paper}}},{name:"MuiBottomNavigation"})(K),G=n(97),Y=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.icon,a=e.label,i=e.onChange,l=e.onClick,s=e.selected,c=e.showLabel,u=e.value,d=I()(e,["classes","className","icon","label","onChange","onClick","selected","showLabel","value"]);return D.a.createElement(G.a,A()({ref:t,className:Object(B.a)(n.root,s&&n.selected,!c&&!s&&n.iconOnly,r),focusRipple:!0,onClick:function(e){i&&i(e,u),l&&l(e)}},d),D.a.createElement("span",{className:n.wrapper},o,D.a.createElement("span",{className:Object(B.a)(n.label,s&&n.selected,!c&&!s&&n.iconOnly)},a)))}),Q=Object(P.a)(function(e){return{root:{transition:e.transitions.create(["color","padding-top"],{duration:e.transitions.duration.short}),padding:"6px 12px 8px",minWidth:80,maxWidth:168,color:e.palette.text.secondary,flex:"1","&$iconOnly":{paddingTop:16},"&$selected":{paddingTop:6,color:e.palette.primary.main}},selected:{},iconOnly:{},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"},label:{fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(12),opacity:1,transition:"font-size 0.2s, opacity 0.2s",transitionDelay:"0.1s","&$iconOnly":{opacity:0,transitionDelay:"0s"},"&$selected":{fontSize:e.typography.pxToRem(14)}}}},{name:"MuiBottomNavigationAction"})(Y),J=n(23),Z=n.n(J),ee=n(33),te=n.n(ee);var ne=function(e,t){return t?te()(e,t,{clone:!1}):e};var re=function(e){var t=function(t){var n=e(t);return t.css?A()({},ne(n,e(A()({theme:t.theme},t.css))),function(e,t){var n={};return Object.keys(e).forEach(function(r){-1===t.indexOf(r)&&(n[r]=e[r])}),n}(t.css,[e.filterProps])):n};return t.propTypes={},t.filterProps=["css"].concat(Z()(e.filterProps)),t};var oe=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return t.reduce(function(t,n){var r=n(e);return r?ne(t,r):t},{})};return r.propTypes={},r.filterProps=t.reduce(function(e,t){return e.concat(t.filterProps)},[]),r},ae=n(9),ie=n.n(ae),le=n(47),se=n.n(le),ce={xs:0,sm:600,md:960,lg:1280,xl:1920},ue={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(ce[e],"px)")}};function de(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||ue;return t.reduce(function(e,o,a){return e[r.up(r.keys[a])]=n(t[a]),e},{})}if("object"===se()(t)){var o=e.theme.breakpoints||ue;return Object.keys(t).reduce(function(e,r){return e[o.up(r)]=n(t[r]),e},{})}return n(t)}function fe(e,t){return t&&"string"==typeof t?t.split(".").reduce(function(e,t){return e&&e[t]?e[t]:null},e):null}var pe=function(e){var t=e.prop,n=e.cssProperty,r=void 0===n?e.prop:n,o=e.themeKey,a=e.transform,i=function(e){if(null==e[t])return null;var n=e[t],i=fe(e.theme,o)||{};return de(e,n,function(e){var t;return"function"==typeof i?t=i(e):Array.isArray(i)?t=i[e]:(t=fe(i,e)||e,a&&(t=a(t))),!1===r?t:ie()({},r,t)})};return i.propTypes={},i.filterProps=[t],i};function me(e){return"number"!=typeof e?e:"".concat(e,"px solid").concat(0===e?" !important":"")}var he=oe(pe({prop:"border",themeKey:"borders",transform:me}),pe({prop:"borderTop",themeKey:"borders",transform:me}),pe({prop:"borderRight",themeKey:"borders",transform:me}),pe({prop:"borderBottom",themeKey:"borders",transform:me}),pe({prop:"borderLeft",themeKey:"borders",transform:me}),pe({prop:"borderColor",themeKey:"palette",transform:function(e){return"".concat(e," !important")}}),pe({prop:"borderRadius",themeKey:"shape"})),ve=oe(pe({prop:"display"}),pe({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}})),ge=oe(pe({prop:"flexDirection"}),pe({prop:"flexWrap"}),pe({prop:"justifyContent"}),pe({prop:"alignItems"}),pe({prop:"alignContent"}),pe({prop:"order"}),pe({prop:"flex"}),pe({prop:"flexGrow"}),pe({prop:"flexShrink"}),pe({prop:"alignSelf"})),be=oe(pe({prop:"position"}),pe({prop:"zIndex",themeKey:"zIndex"}),pe({prop:"top"}),pe({prop:"right"}),pe({prop:"bottom"}),pe({prop:"left"})),ye=oe(pe({prop:"color",themeKey:"palette"}),pe({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"})),xe=pe({prop:"boxShadow",themeKey:"shadows"});function we(e){return e<=1?"".concat(100*e,"%"):e}var ke=pe({prop:"width",transform:we}),Ee=pe({prop:"maxWidth",transform:we}),Ce=pe({prop:"minWidth",transform:we}),Se=pe({prop:"height",transform:we}),Oe=pe({prop:"maxHeight",transform:we}),Te=pe({prop:"minHeight",transform:we}),je=(pe({prop:"size",cssProperty:"width",transform:we}),pe({prop:"size",cssProperty:"height",transform:we}),oe(ke,Ee,Ce,Se,Oe,Te)),Pe=n(10),Re=n.n(Pe);var Ne,Me,Ae={m:"margin",p:"padding"},Le={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Ie=(Ne=function(e){if(e.length>3)return[e];var t=e.split(""),n=Re()(t,2),r=n[0],o=n[1],a=Ae[r],i=Le[o]||"";return Array.isArray(i)?i.map(function(e){return a+e}):[a+i]},Me={},function(e){return void 0===Me[e]&&(Me[e]=Ne(e)),Me[e]}),_e=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginLeft","marginTop","marginRight","marginBottom","padding","paddingTop","paddingRight","paddingBottom","paddingLeft"];function De(e,t){return function(n){return e.reduce(function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e},{})}}function ze(e){var t=function(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}(e.theme);return Object.keys(e).map(function(n){if(-1===_e.indexOf(n))return null;var r=De(Ie(n),t),o=e[n];return de(e,o,r)}).reduce(ne,{})}ze.propTypes={},ze.filterProps=_e;var Fe=ze,Be=oe(pe({prop:"fontFamily",themeKey:"typography"}),pe({prop:"fontSize",themeKey:"typography"}),pe({prop:"fontWeight",themeKey:"typography"}),pe({prop:"textAlign"})),We=re(oe(he,ve,ge,be,ye,xe,je,Fe,Be)),Ue=Object(j.a)("div")(We,{name:"MuiBox"}),He=n(62),$e=n(7),Ve=n(15),qe=Object(Ve.a)(D.a.createElement("path",{d:"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreHoriz");var Ke=Object(P.a)(function(e){return{root:{display:"flex"},icon:{width:24,height:16,backgroundColor:e.palette.grey[100],color:e.palette.grey[700],borderRadius:2,marginLeft:e.spacing(.5),marginRight:e.spacing(.5),cursor:"pointer","&:hover, &:focus":{backgroundColor:e.palette.grey[200]},"&:active":{boxShadow:e.shadows[0],backgroundColor:Object($e.c)(e.palette.grey[200],.12)}}}},{name:"PrivateBreadcrumbCollapsed"})(function(e){var t=e.classes,n=I()(e,["classes"]);return D.a.createElement("li",A()({className:t.root},n),D.a.createElement(qe,{className:t.icon}))});var Xe=Object(P.a)({root:{display:"flex",userSelect:"none",marginLeft:8,marginRight:8}},{name:"PrivateBreadcrumbSeparator"})(function(e){var t=e.classes,n=e.className,r=I()(e,["classes","className"]);return D.a.createElement("li",A()({"aria-hidden":!0,className:Object(B.a)(t.root,n)},r))});var Ge=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.component,i=void 0===a?"nav":a,l=e.itemsAfterCollapse,s=void 0===l?1:l,c=e.itemsBeforeCollapse,u=void 0===c?1:c,d=e.maxItems,f=void 0===d?8:d,p=e.separator,m=void 0===p?"/":p,h=I()(e,["children","classes","className","component","itemsAfterCollapse","itemsBeforeCollapse","maxItems","separator"]),v=D.a.useState(!1),g=Re()(v,2),b=g[0],y=g[1],x=D.a.Children.toArray(n).filter(function(e){return D.a.isValidElement(e)}).map(function(e,t){return D.a.createElement("li",{className:r.li,key:"child-".concat(t)},e)});return D.a.createElement(He.a,A()({ref:t,component:i,color:"textSecondary",className:Object(B.a)(r.root,o)},h),D.a.createElement("ol",{className:r.ol},function(e,t,n){return e.reduce(function(r,o,a){return a<e.length-1?r=r.concat(o,D.a.createElement(Xe,{key:"separator-".concat(a),className:t},n)):r.push(o),r},[])}(b||f&&x.length<=f?x:function(e){return u+s>=e.length?e:[].concat(Z()(e.slice(0,u)),[D.a.createElement(Ke,{key:"ellipsis",onClick:function(){y(!0)}})],Z()(e.slice(e.length-s,e.length)))}(x),r.separator,m)))}),Ye=Object(P.a)({root:{},ol:{display:"flex",flexWrap:"wrap",alignItems:"center",padding:0,margin:0},li:{listStyle:"none"},separator:{}},{name:"MuiBreadcrumbs"})(Ge),Qe=n(114),Je=n(64),Ze=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.raised,a=void 0!==o&&o,i=I()(e,["classes","className","raised"]);return D.a.createElement(Je.a,A()({className:Object(B.a)(n.root,r),elevation:a?8:1,ref:t},i))}),et=Object(P.a)({root:{overflow:"hidden"}},{name:"MuiCard"})(Ze),tt=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.focusVisibleClassName,i=I()(e,["children","classes","className","focusVisibleClassName"]);return D.a.createElement(G.a,A()({className:Object(B.a)(r.root,o),focusVisibleClassName:Object(B.a)(a,r.focusVisible),ref:t},i),n,D.a.createElement("span",{className:r.focusHighlight}))}),nt=Object(P.a)(function(e){return{root:{display:"block",textAlign:"inherit",width:"100%","&:hover $focusHighlight":{opacity:e.palette.action.hoverOpacity},"&$focusVisible $focusHighlight":{opacity:.12}},focusVisible:{},focusHighlight:{pointerEvents:"none",position:"absolute",backgroundColor:"currentcolor",top:0,right:0,bottom:0,left:0,opacity:0,transition:e.transitions.create("opacity",{duration:e.transitions.duration.short})}}},{name:"MuiCardActionArea"})(tt),rt=D.a.forwardRef(function(e,t){var n=e.disableSpacing,r=void 0!==n&&n,o=e.classes,a=e.className,i=I()(e,["disableSpacing","classes","className"]);return D.a.createElement("div",A()({className:Object(B.a)(o.root,!r&&o.spacing,a),ref:t},i))}),ot=Object(P.a)({root:{display:"flex",alignItems:"center",padding:8},spacing:{"& > * + *":{marginLeft:8}}},{name:"MuiCardActions"})(rt),at=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"div":o,i=I()(e,["classes","className","component"]);return D.a.createElement(a,A()({className:Object(B.a)(n.root,r),ref:t},i))}),it=Object(P.a)({root:{padding:16,"&:last-child":{paddingBottom:24}}},{name:"MuiCardContent"})(at),lt=D.a.forwardRef(function(e,t){var n=e.action,r=e.avatar,o=e.classes,a=e.className,i=e.component,l=void 0===i?"div":i,s=e.disableTypography,c=void 0!==s&&s,u=e.subheader,d=e.subheaderTypographyProps,f=e.title,p=e.titleTypographyProps,m=I()(e,["action","avatar","classes","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"]),h=f;null==h||h.type===He.a||c||(h=D.a.createElement(He.a,A()({variant:r?"body2":"h5",className:o.title,component:"span",display:"block"},p),h));var v=u;return null==v||v.type===He.a||c||(v=D.a.createElement(He.a,A()({variant:r?"body2":"body1",className:o.subheader,color:"textSecondary",component:"span",display:"block"},d),v)),D.a.createElement(l,A()({className:Object(B.a)(o.root,a),ref:t},m),r&&D.a.createElement("div",{className:o.avatar},r),D.a.createElement("div",{className:o.content},h,v),n&&D.a.createElement("div",{className:o.action},n))}),st=Object(P.a)({root:{display:"flex",alignItems:"center",padding:16},avatar:{flex:"0 0 auto",marginRight:16},action:{flex:"0 0 auto",alignSelf:"flex-start",marginTop:-8,marginRight:-8},content:{flex:"1 1 auto"},title:{},subheader:{}},{name:"MuiCardHeader"})(lt),ct=["video","audio","picture","iframe","img"],ut=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"div":o,i=e.image,l=e.src,s=e.style,c=I()(e,["classes","className","component","image","src","style"]),u=-1!==ct.indexOf(a),d=!u&&i?A()({backgroundImage:'url("'.concat(i,'")')},s):s;return D.a.createElement(a,A()({className:Object(B.a)(n.root,u&&n.media,r),ref:t,style:d,src:u?i||l:void 0},c))}),dt=Object(P.a)({root:{display:"block",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center"},media:{width:"100%",objectFit:"cover"}},{name:"MuiCardMedia"})(ut),ft=n(25),pt=n(126),mt=D.a.forwardRef(function(e,t){var n=e.autoFocus,r=e.checked,o=e.checkedIcon,a=e.classes,i=e.className,l=e.defaultChecked,s=e.disabled,c=e.icon,u=e.id,d=e.inputProps,f=e.inputRef,p=e.muiFormControl,m=e.name,h=e.onBlur,v=e.onChange,g=e.onFocus,b=e.readOnly,y=e.required,x=e.tabIndex,w=e.type,k=e.value,E=I()(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","muiFormControl","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),C=D.a.useRef(null!=r).current,S=D.a.useState(Boolean(l)),O=Re()(S,2),T=O[0],j=O[1],P=s;p&&void 0===P&&(P=p.disabled);var R=C?r:T,N="checkbox"===w||"radio"===w;return D.a.createElement(pt.a,A()({component:"span",className:Object(B.a)(a.root,R&&a.checked,P&&a.disabled,i),disabled:P,tabIndex:null,role:void 0,onFocus:function(e){g&&g(e),p&&p.onFocus&&p.onFocus(e)},onBlur:function(e){h&&h(e),p&&p.onBlur&&p.onBlur(e)},ref:t},E),R?o:c,D.a.createElement("input",A()({autoFocus:n,checked:r,defaultChecked:l,className:a.input,disabled:P,id:N&&u,name:m,onChange:function(e){var t=e.target.checked;C||j(t),v&&v(e,t)},readOnly:b,ref:f,required:y,tabIndex:x,type:w,value:k},d)))}),ht=Object(P.a)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0}},{name:"PrivateSwitchBase"})(Object(ft.a)(mt)),vt=Object(Ve.a)(D.a.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),gt=Object(Ve.a)(D.a.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),bt=Object(Ve.a)(D.a.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox"),yt=D.a.createElement(gt,null),xt=D.a.createElement(vt,null),wt=D.a.createElement(bt,null),kt=D.a.forwardRef(function(e,t){var n=e.checkedIcon,r=void 0===n?yt:n,o=e.classes,a=e.color,i=void 0===a?"secondary":a,l=e.icon,s=void 0===l?xt:l,c=e.indeterminate,u=void 0!==c&&c,d=e.indeterminateIcon,f=void 0===d?wt:d,p=e.inputProps,m=I()(e,["checkedIcon","classes","color","icon","indeterminate","indeterminateIcon","inputProps"]);return D.a.createElement(ht,A()({type:"checkbox",checkedIcon:u?f:r,classes:{root:Object(B.a)(o.root,o["color".concat(Object($.a)(i))],u&&o.indeterminate),checked:o.checked,disabled:o.disabled},color:i,inputProps:A()({"data-indeterminate":u},p),icon:u?f:s,ref:t},m))}),Et=Object(P.a)(function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},indeterminate:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:Object($e.d)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object($e.d)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}},{name:"MuiCheckbox"})(kt),Ct=Object(Ve.a)(D.a.createElement("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel"),St=n(8),Ot=D.a.forwardRef(function(e,t){var n=e.avatar,r=e.classes,o=e.className,a=e.clickable,i=e.color,l=void 0===i?"default":i,s=e.component,c=void 0===s?"div":s,u=e.deleteIcon,d=e.icon,f=e.label,p=e.onClick,m=e.onDelete,h=e.onKeyDown,v=e.onKeyUp,g=e.variant,b=void 0===g?"default":g,y=I()(e,["avatar","classes","className","clickable","color","component","deleteIcon","icon","label","onClick","onDelete","onKeyDown","onKeyUp","variant"]),x=D.a.useRef(null),w=function(e){e.stopPropagation(),m&&m(e)},k=!(!1===a||!p)||a,E=Object(B.a)(r.root,o,"outlined"===b&&[r.outlined,"primary"===l&&r.outlinedPrimary,"secondary"===l&&r.outlinedSecondary],"default"!==l&&[r["color".concat(Object($.a)(l))],k&&r["clickableColor".concat(Object($.a)(l))],m&&r["deletableColor".concat(Object($.a)(l))]],k&&r.clickable,m&&r.deletable),C=null;if(m){var S=Object(B.a)("default"!==l&&["outlined"!==b&&r["deleteIconColor".concat(Object($.a)(l))],"outlined"===b&&r["deleteIconOutlinedColor".concat(Object($.a)(l))]]);C=u&&D.a.isValidElement(u)?D.a.cloneElement(u,{className:Object(B.a)(u.props.className,r.deleteIcon,S),onClick:w}):D.a.createElement(Ct,{className:Object(B.a)(r.deleteIcon,S),onClick:w})}var O=null;n&&D.a.isValidElement(n)&&(O=D.a.cloneElement(n,{className:Object(B.a)(r.avatar,n.props.className,"default"!==l&&r["avatarColor".concat(Object($.a)(l))]),childrenClassName:Object(B.a)(r.avatarChildren,n.props.childrenClassName)}));var T=null;d&&D.a.isValidElement(d)&&(T=D.a.cloneElement(d,{className:Object(B.a)(r.icon,d.props.className,"default"!==l&&r["iconColor".concat(Object($.a)(l))])}));var j=Object(St.c)(x,t);return D.a.createElement(c,A()({role:k||m?"button":void 0,className:E,tabIndex:k||m?0:void 0,onClick:p,onKeyDown:function(e){if(h&&h(e),e.currentTarget===e.target){var t=e.key;" "!==t&&"Enter"!==t&&"Backspace"!==t&&"Delete"!==t&&"Escape"!==t||e.preventDefault()}},onKeyUp:function(e){if(v&&v(e),e.currentTarget===e.target){var t=e.key;!p||" "!==t&&"Enter"!==t?!m||"Backspace"!==t&&"Delete"!==t?"Escape"===t&&x.current&&x.current.blur():m(e):p(e)}},ref:j},y),O||T,D.a.createElement("span",{className:r.label},f),C)}),Tt=Object(P.a)(function(e){var t="light"===e.palette.type?e.palette.grey[300]:e.palette.grey[700],n=Object($e.d)(e.palette.text.primary,.26);return{root:{fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:e.palette.getContrastText(t),backgroundColor:t,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:"none",textDecoration:"none",border:"none",padding:0,verticalAlign:"middle",boxSizing:"border-box"},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},clickable:{WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover, &:focus":{backgroundColor:Object($e.c)(t,.08)},"&:active":{boxShadow:e.shadows[1],backgroundColor:Object($e.c)(t,.12)}},clickableColorPrimary:{"&:hover, &:focus":{backgroundColor:Object($e.c)(e.palette.primary.main,.08)},"&:active":{backgroundColor:Object($e.c)(e.palette.primary.main,.12)}},clickableColorSecondary:{"&:hover, &:focus":{backgroundColor:Object($e.c)(e.palette.secondary.main,.08)},"&:active":{backgroundColor:Object($e.c)(e.palette.secondary.main,.12)}},deletable:{"&:focus":{backgroundColor:Object($e.c)(t,.08)}},deletableColorPrimary:{"&:focus":{backgroundColor:Object($e.c)(e.palette.primary.main,.2)}},deletableColorSecondary:{"&:focus":{backgroundColor:Object($e.c)(e.palette.secondary.main,.2)}},outlined:{backgroundColor:"transparent",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:Object($e.d)(e.palette.text.primary,e.palette.action.hoverOpacity)},"& $avatar":{marginLeft:-1}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(e.palette.primary.main),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:Object($e.d)(e.palette.primary.main,e.palette.action.hoverOpacity)}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(e.palette.secondary.main),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:Object($e.d)(e.palette.secondary.main,e.palette.action.hoverOpacity)}},avatar:{marginRight:-4,width:32,height:32,color:"light"===e.palette.type?e.palette.grey[700]:e.palette.grey[300],fontSize:e.typography.pxToRem(16)},avatarColorPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.dark},avatarColorSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.dark},avatarChildren:{width:19,height:19},icon:{color:"light"===e.palette.type?e.palette.grey[700]:e.palette.grey[300],marginLeft:4,marginRight:-8},iconColorPrimary:{color:"inherit"},iconColorSecondary:{color:"inherit"},label:{display:"flex",alignItems:"center",paddingLeft:12,paddingRight:12,userSelect:"none",whiteSpace:"nowrap",cursor:"inherit"},deleteIcon:{WebkitTapHighlightColor:"transparent",color:n,cursor:"pointer",height:"auto",margin:"0 4px 0 -8px","&:hover":{color:Object($e.d)(n,.4)}},deleteIconColorPrimary:{color:Object($e.d)(e.palette.primary.contrastText,.7),"&:hover, &:active":{color:e.palette.primary.contrastText}},deleteIconColorSecondary:{color:Object($e.d)(e.palette.secondary.contrastText,.7),"&:hover, &:active":{color:e.palette.secondary.contrastText}},deleteIconOutlinedColorPrimary:{color:Object($e.d)(e.palette.primary.main,.7),"&:hover, &:active":{color:e.palette.primary.main}},deleteIconOutlinedColorSecondary:{color:Object($e.d)(e.palette.secondary.main,.7),"&:hover, &:active":{color:e.palette.secondary.main}}}},{name:"MuiChip"})(Ot);function jt(e){var t,n,r;return t=e,n=0,r=1,e=(Math.min(Math.max(n,t),r)-n)/(r-n),e=(e-=1)*e*e+1}var Pt=D.a.forwardRef(function(e,t){var n,r=e.classes,o=e.className,a=e.color,i=void 0===a?"primary":a,l=e.disableShrink,s=void 0!==l&&l,c=e.size,u=void 0===c?40:c,d=e.style,f=e.thickness,p=void 0===f?3.6:f,m=e.value,h=void 0===m?0:m,v=e.variant,g=void 0===v?"indeterminate":v,b=I()(e,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),y={},x={},w={};if("determinate"===g||"static"===g){var k=2*Math.PI*((44-p)/2);y.strokeDasharray=k.toFixed(3),w["aria-valuenow"]=Math.round(h),"static"===g?(y.strokeDashoffset="".concat(((100-h)/100*k).toFixed(3),"px"),x.transform="rotate(-90deg)"):(y.strokeDashoffset="".concat((n=(100-h)/100,n*n*k).toFixed(3),"px"),x.transform="rotate(".concat((270*jt(h/70)).toFixed(3),"deg)"))}return D.a.createElement("div",A()({className:Object(B.a)(r.root,"inherit"!==i&&r["color".concat(Object($.a)(i))],"indeterminate"===g&&r.indeterminate,"static"===g&&r.static,o),style:A()({width:u,height:u},x,d),ref:t,role:"progressbar"},w,b),D.a.createElement("svg",{className:r.svg,viewBox:"".concat(22," ").concat(22," ").concat(44," ").concat(44)},D.a.createElement("circle",{className:Object(B.a)(r.circle,"indeterminate"===g&&r.circleIndeterminate,"static"===g&&r.circleStatic,s&&r.circleDisableShrink),style:y,cx:44,cy:44,r:(44-p)/2,fill:"none",strokeWidth:p})))}),Rt=Object(P.a)(function(e){return{root:{display:"inline-block",lineHeight:1},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"mui-progress-circular-rotate 1.4s linear infinite",animationName:"$mui-progress-circular-rotate"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"mui-progress-circular-dash 1.4s ease-in-out infinite",animationName:"$mui-progress-circular-dash",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},"@keyframes mui-progress-circular-rotate":{"100%":{transform:"rotate(360deg)"}},"@keyframes mui-progress-circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}},{name:"MuiCircularProgress",flip:!1})(Pt),Nt=n(12),Mt=n.n(Nt),At=n(21);function Lt(e){return e.substring(2).toLowerCase()}var It=function(e){var t=e.children,n=e.mouseEvent,r=void 0===n?"onClick":n,o=e.touchEvent,a=void 0===o?"onTouchEnd":o,i=e.onClickAway,l=function(){var e=D.a.useRef(!1);return D.a.useEffect(function(){return e.current=!0,function(){e.current=!1}},[]),e}(),s=D.a.useRef(!1),c=D.a.useRef(null),u=D.a.useCallback(function(e){c.current=Mt.a.findDOMNode(e)},[]),d=Object(St.c)(t.ref,u),f=D.a.useCallback(function(e){if(!e.defaultPrevented&&l.current)if(s.current)s.current=!1;else{var t=c.current;if(t){var n=Object(At.a)(t);n.documentElement&&n.documentElement.contains(e.target)&&!t.contains(e.target)&&i(e)}}},[l,i]),p=D.a.useCallback(function(){s.current=!0},[]);return D.a.useEffect(function(){if(!1!==a){var e=Lt(a);return document.addEventListener(e,f),document.addEventListener("touchmove",p),function(){document.removeEventListener(e,f),document.removeEventListener("touchmove",p)}}},[f,p,a]),D.a.useEffect(function(){if(!1!==r){var e=Lt(r);return document.addEventListener(e,f),function(){document.removeEventListener(e,f)}}},[f,r]),D.a.createElement(D.a.Fragment,null,D.a.cloneElement(t,{ref:d}))},_t=n(95),Dt=n(14),zt=n(17),Ft=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.collapsedHeight,i=void 0===a?"0px":a,l=e.component,s=void 0===l?"div":l,c=e.in,u=e.onEnter,d=e.onEntered,f=e.onEntering,p=e.onExit,m=e.onExiting,h=e.style,v=e.theme,g=e.timeout,b=void 0===g?Dt.b.standard:g,y=I()(e,["children","classes","className","collapsedHeight","component","in","onEnter","onEntered","onEntering","onExit","onExiting","style","theme","timeout"]),x=D.a.useRef(),w=D.a.useRef(null),k=D.a.useRef();D.a.useEffect(function(){return function(){clearTimeout(x.current)}},[]);return D.a.createElement(_t.a,A()({in:c,onEnter:function(e){e.style.height=i,u&&u(e)},onEntered:function(e){e.style.height="auto",d&&d(e)},onEntering:function(e){var t=w.current?w.current.clientHeight:0,n=Object(zt.a)({style:h,timeout:b},{mode:"enter"}).duration;if("auto"===b){var r=v.transitions.getAutoHeightDuration(t);e.style.transitionDuration="".concat(r,"ms"),k.current=r}else e.style.transitionDuration="string"==typeof n?n:"".concat(n,"ms");e.style.height="".concat(t,"px"),f&&f(e)},onExit:function(e){var t=w.current?w.current.clientHeight:0;e.style.height="".concat(t,"px"),p&&p(e)},onExiting:function(e){var t=w.current?w.current.clientHeight:0,n=Object(zt.a)({style:h,timeout:b},{mode:"exit"}).duration;if("auto"===b){var r=v.transitions.getAutoHeightDuration(t);e.style.transitionDuration="".concat(r,"ms"),k.current=r}else e.style.transitionDuration="string"==typeof n?n:"".concat(n,"ms");e.style.height=i,m&&m(e)},addEndListener:function(e,t){"auto"===b&&(x.current=setTimeout(t,k.current||0))},timeout:"auto"===b?null:b},y),function(e,a){return D.a.createElement(s,A()({className:Object(B.a)(r.container,"entered"===e&&r.entered,"exited"===e&&!c&&"0px"===i&&r.hidden,o),style:A()({minHeight:i},h),ref:t},a),D.a.createElement("div",{className:r.wrapper,ref:w},D.a.createElement("div",{className:r.wrapperInner},n)))})});Ft.muiSupportAuto=!0;var Bt=Object(P.a)(function(e){return{container:{height:0,overflow:"hidden",transition:e.transitions.create("height")},entered:{height:"auto",overflow:"visible"},hidden:{visibility:"hidden"},wrapper:{display:"flex"},wrapperInner:{width:"100%"}}},{withTheme:!0,name:"MuiCollapse"})(Ft),Wt=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"div":o,i=e.fixed,l=void 0!==i&&i,s=e.maxWidth,c=void 0===s?"lg":s,u=I()(e,["classes","className","component","fixed","maxWidth"]);return D.a.createElement(a,A()({className:Object(B.a)(n.root,l&&n.fixed,!1!==c&&n["maxWidth".concat(Object($.a)(String(c)))],r),ref:t},u))}),Ut=Object(P.a)(function(e){var t;return{root:(t={width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},ie()(t,e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),ie()(t,e.breakpoints.up("md"),{paddingLeft:e.spacing(4),paddingRight:e.spacing(4)}),t),fixed:Object.keys(e.breakpoints.values).reduce(function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t},{}),maxWidthXs:ie()({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:ie()({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:ie()({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:ie()({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:ie()({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}},{name:"MuiContainer"})(Wt),Ht=Object(O.a)(function(e){return{"@global":{html:{WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightMedium},body:A()({margin:0,color:e.palette.text.primary},e.typography.body2,{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}})}}},{name:"MuiCssBaseline"});var $t=function(e){var t=e.children,n=void 0===t?null:t;return Ht(),D.a.createElement(D.a.Fragment,null,n)},Vt=n(143),qt=n(251),Kt={enter:Dt.b.enteringScreen,exit:Dt.b.leavingScreen},Xt=D.a.forwardRef(function(e,t){var n=e.BackdropProps,r=e.children,o=e.classes,a=e.className,i=e.disableBackdropClick,l=void 0!==i&&i,s=e.disableEscapeKeyDown,c=void 0!==s&&s,u=e.fullScreen,d=void 0!==u&&u,f=e.fullWidth,p=void 0!==f&&f,m=e.maxWidth,h=void 0===m?"sm":m,v=e.onBackdropClick,g=e.onClose,b=e.onEnter,y=e.onEntered,x=e.onEntering,w=e.onEscapeKeyDown,k=e.onExit,E=e.onExited,C=e.onExiting,S=e.open,O=e.PaperComponent,T=void 0===O?Je.a:O,j=e.PaperProps,P=void 0===j?{}:j,R=e.scroll,N=void 0===R?"paper":R,M=e.TransitionComponent,L=void 0===M?qt.a:M,_=e.transitionDuration,z=void 0===_?Kt:_,F=e.TransitionProps,W=I()(e,["BackdropProps","children","classes","className","disableBackdropClick","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClose","onEnter","onEntered","onEntering","onEscapeKeyDown","onExit","onExited","onExiting","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps"]),U=D.a.useRef();return D.a.createElement(Vt.a,A()({className:Object(B.a)(o.root,a),BackdropComponent:H.a,BackdropProps:A()({transitionDuration:z},n),closeAfterTransition:!0,disableBackdropClick:l,disableEscapeKeyDown:c,onEscapeKeyDown:w,onClose:g,open:S,ref:t,role:"dialog"},W),D.a.createElement(L,A()({appear:!0,in:S,timeout:z,onEnter:b,onEntering:x,onEntered:y,onExit:k,onExiting:C,onExited:E},F),D.a.createElement("div",{className:Object(B.a)(o.container,o["scroll".concat(Object($.a)(N))]),onClick:function(e){e.target===e.currentTarget&&e.target===U.current&&(U.current=null,v&&v(e),!l&&g&&g(e,"backdropClick"))},onMouseDown:function(e){U.current=e.target},role:"document"},D.a.createElement(T,A()({elevation:24},P,{className:Object(B.a)(o.paper,o["paperScroll".concat(Object($.a)(N))],o["paperWidth".concat(Object($.a)(String(h)))],d&&o.paperFullScreen,p&&o.paperFullWidth,P.className)}),r))))}),Gt=Object(P.a)(function(e){return{root:{"@media print":{position:"absolute"}},scrollPaper:{display:"flex",justifyContent:"center",alignItems:"center"},scrollBody:{overflowY:"auto",overflowX:"hidden"},container:{height:"100%","@media print":{height:"auto"},outline:"none"},paper:{display:"flex",flexDirection:"column",margin:48,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},paperScrollPaper:{flex:"0 1 auto",maxHeight:"calc(100% - 96px)"},paperScrollBody:{margin:"48px auto"},paperWidthFalse:{"&$paperScrollBody":{margin:48}},paperWidthXs:{maxWidth:Math.max(e.breakpoints.values.xs,444),"&$paperScrollBody":ie()({},e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+96),{margin:48})},paperWidthSm:{maxWidth:e.breakpoints.values.sm,"&$paperScrollBody":ie()({},e.breakpoints.down(e.breakpoints.values.sm+96),{margin:48})},paperWidthMd:{maxWidth:e.breakpoints.values.md,"&$paperScrollBody":ie()({},e.breakpoints.down(e.breakpoints.values.md+96),{margin:48})},paperWidthLg:{maxWidth:e.breakpoints.values.lg,"&$paperScrollBody":ie()({},e.breakpoints.down(e.breakpoints.values.lg+96),{margin:48})},paperWidthXl:{maxWidth:e.breakpoints.values.xl,"&$paperScrollBody":ie()({},e.breakpoints.down(e.breakpoints.values.xl+96),{margin:48})},paperFullWidth:{width:"100%","&$paperScrollBody":{width:"initial"}},paperFullScreen:{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,"&$paperScrollBody":{margin:0}}}},{name:"MuiDialog"})(Xt),Yt=D.a.forwardRef(function(e,t){var n=e.disableSpacing,r=void 0!==n&&n,o=e.classes,a=e.className,i=I()(e,["disableSpacing","classes","className"]);return D.a.createElement("div",A()({className:Object(B.a)(o.root,!r&&o.spacing,a),ref:t},i))}),Qt=Object(P.a)({root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end"},spacing:{"& > * + *":{marginLeft:8}}},{name:"MuiDialogActions"})(Yt),Jt=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.dividers,a=void 0!==o&&o,i=I()(e,["classes","className","dividers"]);return D.a.createElement("div",A()({className:Object(B.a)(n.root,a&&n.dividers,r),ref:t},i))}),Zt=Object(P.a)(function(e){return{root:{flex:"1 1 auto",padding:"8px 24px",WebkitOverflowScrolling:"touch",overflowY:"auto"},dividers:{borderTop:"1px solid ".concat(e.palette.divider),borderBottom:"1px solid ".concat(e.palette.divider)}}},{name:"MuiDialogContent"})(Jt),en=D.a.forwardRef(function(e,t){return D.a.createElement(He.a,A()({component:"p",variant:"body1",color:"textSecondary",ref:t},e))}),tn=Object(P.a)({root:{marginBottom:16}},{name:"MuiDialogContentText"})(en),nn=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.disableTypography,i=void 0!==a&&a,l=I()(e,["children","classes","className","disableTypography"]);return D.a.createElement("div",A()({className:Object(B.a)(r.root,o),ref:t},l),i?n:D.a.createElement(He.a,{variant:"h6"},n))}),rn=Object(P.a)({root:{margin:0,padding:"16px 24px",flex:"0 0 auto"}},{name:"MuiDialogTitle"})(nn),on=D.a.forwardRef(function(e,t){var n=e.absolute,r=void 0!==n&&n,o=e.classes,a=e.className,i=e.component,l=void 0===i?"hr":i,s=e.light,c=void 0!==s&&s,u=e.variant,d=void 0===u?"fullWidth":u,f=I()(e,["absolute","classes","className","component","light","variant"]);return"li"!==l||f.role||(f.role="separator"),D.a.createElement(l,A()({className:Object(B.a)(o.root,"inset"===d&&o.inset,"middle"===d&&o.middle,r&&o.absolute,c&&o.light,a),ref:t},f))}),an=Object(P.a)(function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:Object($e.d)(e.palette.divider,.08)},middle:{marginLeft:e.spacing(2),marginRight:e.spacing(2)}}},{name:"MuiDivider"})(on),ln=n(26),sn=n(138),cn=n.n(sn),un=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.defaultExpanded,i=void 0!==a&&a,l=e.disabled,s=void 0!==l&&l,c=e.expanded,u=e.onChange,d=e.square,f=void 0!==d&&d,p=e.TransitionComponent,m=void 0===p?Bt:p,h=e.TransitionProps,v=I()(e,["children","classes","className","defaultExpanded","disabled","expanded","onChange","square","TransitionComponent","TransitionProps"]),g=D.a.useRef(null!=c).current,b=D.a.useState(i),y=Re()(b,2),x=y[0],w=y[1],k=g?c:x,E=D.a.Children.toArray(n),C=cn()(E),S=C[0],O=C.slice(1);return D.a.createElement(Je.a,A()({className:Object(B.a)(r.root,k&&r.expanded,s&&r.disabled,!f&&r.rounded,o),ref:t,square:f},v),D.a.cloneElement(S,{disabled:s,expanded:k,onChange:function(e){g||w(!k),u&&u(e,!k)}}),D.a.createElement(m,A()({in:k,timeout:"auto"},h),D.a.createElement("div",{"aria-labelledby":S.props.id,id:S.props["aria-controls"],role:"region"},O)))}),dn=Object(P.a)(function(e){var t={duration:e.transitions.duration.shortest};return{root:{position:"relative",transition:e.transitions.create(["margin"],t),"&:before":{position:"absolute",left:0,top:-1,right:0,height:1,content:'""',opacity:1,backgroundColor:e.palette.divider,transition:e.transitions.create(["opacity","background-color"],t)},"&:first-child":{"&:before":{display:"none"}},"&$expanded":{margin:"16px 0","&:first-child":{marginTop:0},"&:last-child":{marginBottom:0},"&:before":{opacity:0}},"&$expanded + &":{"&:before":{display:"none"}},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},rounded:{borderRadius:0,"&:first-child":{borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius},"&:last-child":{borderBottomLeftRadius:e.shape.borderRadius,borderBottomRightRadius:e.shape.borderRadius,"@supports (-ms-ime-align: auto)":{borderBottomLeftRadius:0,borderBottomRightRadius:0}}},expanded:{},disabled:{}}},{name:"MuiExpansionPanel"})(un),fn=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.disableSpacing,a=void 0!==o&&o,i=I()(e,["classes","className","disableSpacing"]);return D.a.createElement("div",A()({className:Object(B.a)(n.root,!a&&n.spacing,r),ref:t},i))}),pn=Object(P.a)({root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end"},spacing:{"& > * + *":{marginLeft:8}}},{name:"MuiExpansionPanelActions"})(fn),mn=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=I()(e,["classes","className"]);return D.a.createElement("div",A()({className:Object(B.a)(n.root,r),ref:t},o))}),hn=Object(P.a)({root:{display:"flex",padding:"8px 24px 24px"}},{name:"MuiExpansionPanelDetails"})(mn),vn=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.disabled,i=void 0!==a&&a,l=e.expanded,s=e.expandIcon,c=e.IconButtonProps,u=e.onBlur,d=e.onChange,f=e.onClick,p=e.onFocusVisible,m=I()(e,["children","classes","className","disabled","expanded","expandIcon","IconButtonProps","onBlur","onChange","onClick","onFocusVisible"]),h=D.a.useState(!1),v=Re()(h,2),g=v[0],b=v[1];return D.a.createElement(G.a,A()({focusRipple:!1,disableRipple:!0,disabled:i,component:"div","aria-expanded":l,className:Object(B.a)(r.root,i&&r.disabled,l&&r.expanded,g&&r.focused,o),onFocusVisible:function(e){b(!0),p&&p(e)},onBlur:function(e){b(!1),u&&u(e)},onClick:function(e){d&&d(e),f&&f(e)},ref:t},m),D.a.createElement("div",{className:Object(B.a)(r.content,l&&r.expanded)},n),s&&D.a.createElement(pt.a,A()({disabled:i,className:Object(B.a)(r.expandIcon,l&&r.expanded),edge:"end",component:"div",tabIndex:-1,"aria-hidden":!0},c),s))}),gn=Object(P.a)(function(e){var t={duration:e.transitions.duration.shortest};return{root:{display:"flex",minHeight:48,transition:e.transitions.create(["min-height","background-color"],t),padding:"0 24px 0 24px","&:hover:not($disabled)":{cursor:"pointer"},"&$expanded":{minHeight:64},"&$focused":{backgroundColor:e.palette.grey[300]},"&$disabled":{opacity:.38}},expanded:{},focused:{},disabled:{},content:{display:"flex",flexGrow:1,transition:e.transitions.create(["margin"],t),margin:"12px 0","&$expanded":{margin:"20px 0"}},expandIcon:{transform:"rotate(0deg)",transition:e.transitions.create("transform",t),"&:hover":{backgroundColor:"transparent"},"&$expanded":{transform:"rotate(180deg)"}}}},{name:"MuiExpansionPanelSummary"})(vn),bn=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=e.color,i=void 0===a?"default":a,l=e.component,s=void 0===l?"button":l,c=e.disabled,u=void 0!==c&&c,d=e.disableFocusRipple,f=void 0!==d&&d,p=e.focusVisibleClassName,m=e.size,h=void 0===m?"large":m,v=e.variant,g=void 0===v?"round":v,b=I()(e,["children","classes","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"]);return D.a.createElement(G.a,A()({className:Object(B.a)(r.root,"extended"===g&&r.extended,"primary"===i&&r.primary,"secondary"===i&&r.secondary,"large"!==h&&r["size".concat(Object($.a)(h))],u&&r.disabled,"inherit"===i&&r.colorInherit,o),component:s,disabled:u,focusRipple:!f,focusVisibleClassName:Object(B.a)(r.focusVisible,p),ref:t},b),D.a.createElement("span",{className:r.label},n))}),yn=Object(P.a)(function(e){return{root:A()({},e.typography.button,{boxSizing:"border-box",minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]},color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],"&$focusVisible":{boxShadow:e.shadows[6]},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground},textDecoration:"none"},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},primary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},secondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},extended:{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48,"&$sizeSmall":{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"&$sizeMedium":{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40}},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},sizeSmall:{width:40,height:40},sizeMedium:{width:48,height:48}}},{name:"MuiFab"})(bn),xn=n(237),wn=n(238),kn=D.a.forwardRef(function(e,t){e.checked;var n=e.classes,r=e.className,o=e.control,a=e.disabled,i=(e.inputRef,e.label),l=e.labelPlacement,s=void 0===l?"end":l,c=e.muiFormControl,u=(e.name,e.onChange,e.value,I()(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","muiFormControl","name","onChange","value"])),d=a;void 0===d&&void 0!==o.props.disabled&&(d=o.props.disabled),void 0===d&&c&&(d=c.disabled);var f={disabled:d};return["checked","name","onChange","value","inputRef"].forEach(function(t){void 0===o.props[t]&&void 0!==e[t]&&(f[t]=e[t])}),D.a.createElement("label",A()({className:Object(B.a)(n.root,"end"!==s&&n["labelPlacement".concat(Object($.a)(s))],d&&n.disabled,r),ref:t},u),D.a.cloneElement(o,f),D.a.createElement(He.a,{component:"span",className:Object(B.a)(n.label,d&&n.disabled)},i))}),En=Object(P.a)(function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}},{name:"MuiFormControlLabel"})(Object(ft.a)(kn)),Cn=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.row,a=void 0!==o&&o,i=I()(e,["classes","className","row"]);return D.a.createElement("div",A()({className:Object(B.a)(n.root,a&&n.row,r),ref:t},i))}),Sn=Object(P.a)({root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}},{name:"MuiFormGroup"})(Cn),On=n(245),Tn=n(240),jn=n(16),Pn=[0,1,2,3,4,5,6,7,8,9,10],Rn=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];var Nn=D.a.forwardRef(function(e,t){var n=e.alignContent,r=void 0===n?"stretch":n,o=e.alignItems,a=void 0===o?"stretch":o,i=e.classes,l=e.className,s=e.component,c=void 0===s?"div":s,u=e.container,d=void 0!==u&&u,f=e.direction,p=void 0===f?"row":f,m=e.item,h=void 0!==m&&m,v=e.justify,g=void 0===v?"flex-start":v,b=e.lg,y=void 0!==b&&b,x=e.md,w=void 0!==x&&x,k=e.sm,E=void 0!==k&&k,C=e.spacing,S=void 0===C?0:C,O=e.wrap,T=void 0===O?"wrap":O,j=e.xl,P=void 0!==j&&j,R=e.xs,N=void 0!==R&&R,M=e.zeroMinWidth,L=void 0!==M&&M,_=I()(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),z=Object(B.a)(i.root,l,d&&[i.container,0!==S&&i["spacing-xs-".concat(String(S))]],h&&i.item,L&&i.zeroMinWidth,"row"!==p&&i["direction-xs-".concat(String(p))],"wrap"!==T&&i["wrap-xs-".concat(String(T))],"stretch"!==a&&i["align-items-xs-".concat(String(a))],"stretch"!==r&&i["align-content-xs-".concat(String(r))],"flex-start"!==g&&i["justify-xs-".concat(String(g))],!1!==N&&i["grid-xs-".concat(String(N))],!1!==E&&i["grid-sm-".concat(String(E))],!1!==w&&i["grid-md-".concat(String(w))],!1!==y&&i["grid-lg-".concat(String(y))],!1!==P&&i["grid-xl-".concat(String(P))]);return D.a.createElement(c,A()({className:z,ref:t},_))});var Mn=Object(P.a)(function(e){return A()({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return Pn.forEach(function(r){var o=e.spacing(r);0!==o&&(n["spacing-".concat(t,"-").concat(r)]={margin:-o/2,width:"calc(100% + ".concat(o,"px)"),"& > $item":{padding:o/2}})}),n}(e,"xs"),jn.b.reduce(function(t,n){return function(e,t,n){var r={};Rn.forEach(function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}}),"xs"===n?Object.assign(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t},{}))},{name:"MuiGrid"})(Nn),An=D.a.forwardRef(function(e,t){var n=e.cellHeight,r=void 0===n?180:n,o=e.children,a=e.classes,i=e.className,l=e.cols,s=void 0===l?2:l,c=e.component,u=void 0===c?"ul":c,d=e.spacing,f=void 0===d?4:d,p=e.style,m=I()(e,["cellHeight","children","classes","className","cols","component","spacing","style"]);return D.a.createElement(u,A()({className:Object(B.a)(a.root,i),ref:t,style:A()({margin:-f/2},p)},m),D.a.Children.map(o,function(e){if(!D.a.isValidElement(e))return null;var t=e.props.cols||1,n=e.props.rows||1;return D.a.cloneElement(e,{style:Object.assign({width:"".concat(100/s*t,"%"),height:"auto"===r?"auto":r*n+f,padding:f/2},e.props.style)})}))}),Ln=Object(P.a)({root:{display:"flex",flexWrap:"wrap",overflowY:"auto",listStyle:"none",padding:0,WebkitOverflowScrolling:"touch"}},{name:"MuiGridList"})(An),In=n(30),_n=n.n(In),Dn=function(e,t){var n,r,o,a;e&&e.complete&&(e.width/e.height>e.parentNode.offsetWidth/e.parentNode.offsetHeight?((n=e.classList).remove.apply(n,Z()(t.imgFullWidth.split(" "))),(r=e.classList).add.apply(r,Z()(t.imgFullHeight.split(" ")))):((o=e.classList).remove.apply(o,Z()(t.imgFullHeight.split(" "))),(a=e.classList).add.apply(a,Z()(t.imgFullWidth.split(" ")))))};var zn=D.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,a=(e.cols,e.component),i=void 0===a?"li":a,l=(e.rows,I()(e,["children","classes","className","cols","component","rows"])),s=D.a.useRef(null);return D.a.useEffect(function(){!function(e,t){e&&(e.complete?Dn(e,t):e.addEventListener("load",function(){Dn(e,t)}))}(s.current,r)}),D.a.useEffect(function(){var e=_n()(function(){Dn(s.current,r)},166);return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[r]),D.a.createElement(i,A()({className:Object(B.a)(r.root,o),ref:t},l),D.a.createElement("div",{className:r.tile},D.a.Children.map(n,function(e){return D.a.isValidElement(e)?"img"===e.type||Object(St.a)(e,["Image"])?D.a.cloneElement(e,{ref:s}):e:null})))}),Fn=Object(P.a)({root:{boxSizing:"border-box",flexShrink:0},tile:{position:"relative",display:"block",height:"100%",overflow:"hidden"},imgFullHeight:{height:"100%",transform:"translateX(-50%)",position:"relative",left:"50%"},imgFullWidth:{width:"100%",position:"relative",transform:"translateY(-50%)",top:"50%"}},{name:"MuiGridListTile"})(zn),Bn=D.a.forwardRef(function(e,t){var n=e.actionIcon,r=e.actionPosition,o=void 0===r?"right":r,a=e.classes,i=e.className,l=e.subtitle,s=e.title,c=e.titlePosition,u=void 0===c?"bottom":c,d=I()(e,["actionIcon","actionPosition","classes","className","subtitle","title","titlePosition"]),f=n&&o,p=Object(B.a)(a.root,"bottom"===u&&a.titlePositionBottom,"top"===u&&a.titlePositionTop,l&&a.rootSubtitle,i),m=Object(B.a)(a.titleWrap,"left"===f&&a.titleWrapActionPosLeft,"right"===f&&a.titleWrapActionPosRight);return D.a.createElement("div",A()({className:p,ref:t},d),D.a.createElement("div",{className:m},D.a.createElement("div",{className:a.title},s),l?D.a.createElement("div",{className:a.subtitle},l):null),n?D.a.createElement("div",{className:Object(B.a)(a.actionIcon,"left"===f&&a.actionIconActionPosLeft)},n):null)}),Wn=Object(P.a)(function(e){return{root:{position:"absolute",left:0,right:0,height:48,background:"rgba(0, 0, 0, 0.5)",display:"flex",alignItems:"center",fontFamily:e.typography.fontFamily},titlePositionBottom:{bottom:0},titlePositionTop:{top:0},rootSubtitle:{height:68},titleWrap:{flexGrow:1,marginLeft:16,marginRight:16,color:e.palette.common.white,overflow:"hidden"},titleWrapActionPosLeft:{marginLeft:0},titleWrapActionPosRight:{marginRight:0},title:{fontSize:e.typography.pxToRem(16),lineHeight:"24px",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},subtitle:{fontSize:e.typography.pxToRem(12),lineHeight:1,textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},actionIcon:{},actionIconActionPosLeft:{order:-1}}},{name:"MuiGridListTileBar"})(Bn),Un=n(243),Hn=n(19),$n=n.n(Hn),Vn=n(20),qn=n.n(Vn),Kn=n(27),Xn=n.n(Kn),Gn=n(28),Yn=n.n(Gn),Qn=n(29),Jn=n.n(Qn),Zn=n(59),er=n.n(Zn),tr=n(236),nr=n(35),rr=n.n(nr),or=function(e,t){return!(arguments.length>2&&void 0!==arguments[2])||arguments[2]?jn.b.indexOf(e)<=jn.b.indexOf(t):jn.b.indexOf(e)<jn.b.indexOf(t)},ar=function(e,t){return!(arguments.length>2&&void 0!==arguments[2])||arguments[2]?jn.b.indexOf(t)<=jn.b.indexOf(e):jn.b.indexOf(t)<jn.b.indexOf(e)},ir=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){var n=e.withTheme,r=void 0!==n&&n,o=e.noSSR,a=void 0!==o&&o,i=e.initialWidth,l=e.resizeInterval,s=void 0===l?166:l,c=function(e){function n(e){var t;return $n()(this,n),(t=Xn()(this,Yn()(n).call(this,e))).state={width:a?t.getWidth():void 0},"undefined"!=typeof window&&(t.handleResize=_n()(function(){var e=t.getWidth();e!==t.state.width&&t.setState({width:e})},s)),t}return Jn()(n,e),qn()(n,[{key:"componentDidMount",value:function(){var e=this.getWidth();e!==this.state.width&&this.setState({width:e})}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"getWidth",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.innerWidth,t=this.props.theme.breakpoints,n=null,r=1;null===n&&r<jn.b.length;){var o=jn.b[r];if(e<t.values[o]){n=jn.b[r-1];break}r+=1}return n=n||"xl"}},{key:"render",value:function(){var e=Object(tr.a)({theme:this.props.theme,name:"MuiWithWidth",props:A()({},this.props)}),n=e.initialWidth,o=e.theme,a=e.width,l=I()(e,["initialWidth","theme","width"]),s=A()({width:a||this.state.width||n||i},l);return void 0===s.width?null:(r&&(s.theme=o),D.a.createElement(D.a.Fragment,null,D.a.createElement(t,s),D.a.createElement(er.a,{target:"window",onResize:this.handleResize})))}}]),n}(D.a.Component);return rr()(c,t),Object(R.a)(c)}};function lr(e){var t=e.children,n=e.only,r=e.width,o=!0;if(n)if(Array.isArray(n))for(var a=0;a<n.length;a+=1){if(r===n[a]){o=!1;break}}else n&&r===n&&(o=!1);if(o)for(var i=0;i<jn.b.length;i+=1){var l=jn.b[i],s=e["".concat(l,"Up")],c=e["".concat(l,"Down")];if(s&&or(l,r)||c&&ar(l,r)){o=!1;break}}return o?t:null}lr.propTypes={children:F.a.node,className:F.a.string,implementation:F.a.oneOf(["js","css"]),initialWidth:F.a.oneOf(["xs","sm","md","lg","xl"]),lgDown:F.a.bool,lgUp:F.a.bool,mdDown:F.a.bool,mdUp:F.a.bool,only:F.a.oneOfType([F.a.oneOf(["xs","sm","md","lg","xl"]),F.a.arrayOf(F.a.oneOf(["xs","sm","md","lg","xl"]))]),smDown:F.a.bool,smUp:F.a.bool,width:F.a.string.isRequired,xlDown:F.a.bool,xlUp:F.a.bool,xsDown:F.a.bool,xsUp:F.a.bool};var sr=ir()(lr);var cr=Object(P.a)(function(e){var t={display:"none"};return jn.b.reduce(function(n,r){return n["only".concat(Object($.a)(r))]=ie()({},e.breakpoints.only(r),t),n["".concat(r,"Up")]=ie()({},e.breakpoints.up(r),t),n["".concat(r,"Down")]=ie()({},e.breakpoints.down(r),t),n},{})},{name:"PrivateHiddenCss"})(function(e){var t=e.children,n=e.classes,r=e.className,o=(e.lgDown,e.lgUp,e.mdDown,e.mdUp,e.only),a=(e.smDown,e.smUp,e.xlDown,e.xlUp,e.xsDown,e.xsUp,I()(e,["children","classes","className","lgDown","lgUp","mdDown","mdUp","only","smDown","smUp","xlDown","xlUp","xsDown","xsUp"]),[]);r&&a.push(r);for(var i=0;i<jn.b.length;i+=1){var l=jn.b[i],s=e["".concat(l,"Up")],c=e["".concat(l,"Down")];s&&a.push(n["".concat(l,"Up")]),c&&a.push(n["".concat(l,"Down")])}return o&&(Array.isArray(o)?o:[o]).forEach(function(e){a.push(n["only".concat(Object($.a)(e))])}),D.a.createElement("div",{className:a.join(" ")},t)});function ur(e){var t=e.implementation,n=I()(e,["implementation"]);return"js"===t?D.a.createElement(sr,n):D.a.createElement(cr,n)}ur.defaultProps={implementation:"js",lgDown:!1,lgUp:!1,mdDown:!1,mdUp:!1,smDown:!1,smUp:!1,xlDown:!1,xlUp:!1,xsDown:!1,xsUp:!1};var dr=ur,fr=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,a=void 0===o?"inherit":o,i=e.component,l=void 0===i?"span":i,s=e.fontSize,c=void 0===s?"default":s,u=I()(e,["classes","className","color","component","fontSize"]);return D.a.createElement(l,A()({className:Object(B.a)("material-icons",n.root,"inherit"!==a&&n["color".concat(Object($.a)(a))],"default"!==c&&n["fontSize".concat(Object($.a)(c))],r),"aria-hidden":!0,ref:t},u))});fr.muiName="Icon";var pr=Object(P.a)(function(e){return{root:{userSelect:"none",fontSize:e.typography.pxToRem(24),width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(36)}}},{name:"MuiIcon"})(fr),mr=n(141),hr=n(43),vr=D.a.forwardRef(function(e,t){var n=e.children,r=e.component,o=void 0===r?"div":r,a=e.classes,i=e.className,l=e.disablePointerEvents,s=void 0!==l&&l,c=e.disableTypography,u=void 0!==c&&c,d=e.muiFormControl,f=e.position,p=e.variant,m=I()(e,["children","component","classes","className","disablePointerEvents","disableTypography","muiFormControl","position","variant"]),h=p;return d&&!h&&(h=d.variant),D.a.createElement(hr.a.Provider,{value:null},D.a.createElement(o,A()({className:Object(B.a)(a.root,"filled"===h&&a.filled,"start"===f&&a.positionStart,"end"===f&&a.positionEnd,s&&a.disablePointerEvents,i),ref:t},m),"string"!=typeof n||u?n:D.a.createElement(He.a,{color:"textSecondary"},n)))}),gr=Object(P.a)({root:{display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center"},filled:{"&$positionStart":{marginTop:16}},positionStart:{marginRight:8},positionEnd:{marginLeft:8},disablePointerEvents:{pointerEvents:"none"}},{name:"MuiInputAdornment"})(Object(ft.a)(vr)),br=n(144),yr=n(239),xr=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,a=void 0===o?"primary":o,i=e.value,l=e.valueBuffer,s=e.variant,c=void 0===s?"indeterminate":s,u=I()(e,["classes","className","color","value","valueBuffer","variant"]),d=Object(B.a)(n.root,"primary"===a&&n.colorPrimary,"secondary"===a&&n.colorSecondary,"determinate"===c&&n.determinate,"indeterminate"===c&&n.indeterminate,"buffer"===c&&n.buffer,"query"===c&&n.query,r),f=Object(B.a)(n.dashed,"primary"===a&&n.dashedColorPrimary,"secondary"===a&&n.dashedColorSecondary),p=Object(B.a)(n.bar,"primary"===a&&n.barColorPrimary,"secondary"===a&&n.barColorSecondary,("indeterminate"===c||"query"===c)&&n.bar1Indeterminate,"determinate"===c&&n.bar1Determinate,"buffer"===c&&n.bar1Buffer),m=Object(B.a)(n.bar,("indeterminate"===c||"query"===c)&&n.bar2Indeterminate,"buffer"===c&&["primary"===a&&n.colorPrimary,"secondary"===a&&n.colorSecondary,n.bar2Buffer],"buffer"!==c&&["primary"===a&&n.barColorPrimary,"secondary"===a&&n.barColorSecondary]),h={},v={bar1:{},bar2:{}};return"determinate"!==c&&"buffer"!==c||void 0!==i&&(h["aria-valuenow"]=Math.round(i),v.bar1.transform="translateX(".concat(i-100,"%)")),"buffer"===c&&void 0!==l&&(v.bar2.transform="translateX(".concat((l||0)-100,"%)")),D.a.createElement("div",A()({className:d,role:"progressbar"},h,{ref:t},u),"buffer"===c?D.a.createElement("div",{className:f}):null,D.a.createElement("div",{className:p,style:v.bar1}),"determinate"===c?null:D.a.createElement("div",{className:m,style:v.bar2}))}),wr=Object(P.a)(function(e){return{root:{position:"relative",overflow:"hidden",height:4},colorPrimary:{backgroundColor:Object($e.i)(e.palette.primary.light,.6)},colorSecondary:{backgroundColor:Object($e.i)(e.palette.secondary.light,.4)},determinate:{},indeterminate:{},buffer:{backgroundColor:"transparent"},query:{transform:"rotate(180deg)"},dashed:{position:"absolute",marginTop:0,height:"100%",width:"100%",animation:"buffer 3s infinite linear",animationName:"$buffer"},dashedColorPrimary:{backgroundImage:"radial-gradient(".concat(Object($e.i)(e.palette.primary.light,.6)," 0%, ").concat(Object($e.i)(e.palette.primary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},dashedColorSecondary:{backgroundImage:"radial-gradient(".concat(Object($e.i)(e.palette.secondary.light,.4)," 0%, ").concat(Object($e.i)(e.palette.secondary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},bar:{width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},barColorPrimary:{backgroundColor:e.palette.primary.main},barColorSecondary:{backgroundColor:e.palette.secondary.main},bar1Indeterminate:{width:"auto",animation:"mui-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite",animationName:"$mui-indeterminate1"},bar1Determinate:{transition:"transform .".concat(4,"s linear")},bar1Buffer:{zIndex:1,transition:"transform .".concat(4,"s linear")},bar2Indeterminate:{width:"auto",animation:"mui-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite",animationName:"$mui-indeterminate2",animationDelay:"1.15s"},bar2Buffer:{transition:"transform .".concat(4,"s linear")},"@keyframes mui-indeterminate1":{"0%":{left:"-35%",right:"100%"},"60%":{left:"100%",right:"-90%"},"100%":{left:"100%",right:"-90%"}},"@keyframes mui-indeterminate2":{"0%":{left:"-200%",right:"100%"},"60%":{left:"107%",right:"-8%"},"100%":{left:"107%",right:"-8%"}},"@keyframes buffer":{"0%":{opacity:1,backgroundPosition:"0px -23px"},"50%":{opacity:0,backgroundPosition:"0px -23px"},"100%":{opacity:1,backgroundPosition:"-200px -23px"}}}},{name:"MuiLinearProgress"})(xr),kr=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"a":o,i=e.color,l=void 0===i?"primary":i,s=e.TypographyClasses,c=e.underline,u=void 0===c?"hover":c,d=e.variant,f=void 0===d?"inherit":d,p=I()(e,["classes","className","component","color","TypographyClasses","underline","variant"]);return D.a.createElement(He.a,A()({className:Object(B.a)(n.root,"button"===a&&n.button,n["underline".concat(Object($.a)(u))],r),classes:s,color:l,component:a,ref:t,variant:f},p))}),Er=Object(P.a)({root:{},underlineNone:{textDecoration:"none"},underlineHover:{textDecoration:"none","&:hover":{textDecoration:"underline"}},underlineAlways:{textDecoration:"underline"},button:{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none","&::-moz-focus-inner":{borderStyle:"none"}}},{name:"MuiLink"})(kr),Cr=n(93),Sr=n(129),Or=n(41),Tr=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=I()(e,["classes","className"]),a=D.a.useContext(Or.a);return D.a.createElement("div",A()({className:Object(B.a)(n.root,"flex-start"===a.alignItems&&n.alignItemsFlexStart,r),ref:t},o))}),jr=Object(P.a)({root:{minWidth:56,flexShrink:0},alignItemsFlexStart:{marginTop:8}},{name:"MuiListItemAvatar"})(Tr),Pr=n(131),Rr=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=I()(e,["classes","className"]);return D.a.createElement("div",A()({className:Object(B.a)(n.root,r),ref:t},o))});Rr.muiName="ListItemSecondaryAction";var Nr=Object(P.a)({root:{position:"absolute",right:16,top:"50%",transform:"translateY(-50%)"}},{name:"MuiListItemSecondaryAction"})(Rr),Mr=n(133),Ar=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,a=void 0===o?"default":o,i=e.component,l=void 0===i?"li":i,s=e.disableGutters,c=void 0!==s&&s,u=e.disableSticky,d=void 0!==u&&u,f=e.inset,p=void 0!==f&&f,m=I()(e,["classes","className","color","component","disableGutters","disableSticky","inset"]);return D.a.createElement(l,A()({className:Object(B.a)(n.root,"default"!==a&&n["color".concat(Object($.a)(a))],p&&n.inset,!d&&n.sticky,!c&&n.gutters,r),ref:t},m))}),Lr=Object(P.a)(function(e){return{root:{boxSizing:"border-box",lineHeight:"48px",listStyle:"none",color:e.palette.text.secondary,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(14)},colorPrimary:{color:e.palette.primary.main},colorInherit:{color:"inherit"},gutters:{paddingLeft:16,paddingRight:16},inset:{paddingLeft:72},sticky:{position:"sticky",top:0,zIndex:1,backgroundColor:"inherit"}}},{name:"MuiListSubheader"})(Ar),Ir=n(136),_r=D.a.forwardRef(function(e,t){var n,r=e.classes,o=e.className,a=e.component,i=void 0===a?"li":a,l=e.disableGutters,s=void 0!==l&&l,c=e.role,u=void 0===c?"menuitem":c,d=e.selected,f=e.tabIndex,p=I()(e,["classes","className","component","disableGutters","role","selected","tabIndex"]);return e.disabled||(n=void 0!==f?f:-1),D.a.createElement(Sr.a,A()({button:!0,role:u,tabIndex:n,component:i,selected:d,disableGutters:s,className:Object(B.a)(r.root,d&&r.selected,!s&&r.gutters,o),ref:t},p))}),Dr=Object(P.a)(function(e){return{root:A()({},e.typography.subtitle1,{minHeight:48,paddingTop:4,paddingBottom:4,boxSizing:"border-box",width:"auto",overflow:"hidden",whiteSpace:"nowrap"}),gutters:{paddingLeft:16,paddingRight:16},selected:{}}},{name:"MuiMenuItem"})(_r),zr=n(244),Fr=D.a.forwardRef(function(e,t){var n=e.activeStep,r=void 0===n?0:n,o=e.backButton,a=e.classes,i=e.className,l=e.LinearProgressProps,s=e.nextButton,c=e.position,u=void 0===c?"bottom":c,d=e.steps,f=e.variant,p=void 0===f?"dots":f,m=I()(e,["activeStep","backButton","classes","className","LinearProgressProps","nextButton","position","steps","variant"]);return D.a.createElement(Je.a,A()({square:!0,elevation:0,className:Object(B.a)(a.root,a["position".concat(Object($.a)(u))],i),ref:t},m),o,"text"===p&&D.a.createElement(D.a.Fragment,null,r+1," / ",d),"dots"===p&&D.a.createElement("div",{className:a.dots},Z()(new Array(d)).map(function(e,t){return D.a.createElement("div",{key:t,className:Object(B.a)(a.dot,t===r&&a.dotActive)})})),"progress"===p&&D.a.createElement(wr,A()({className:a.progress,variant:"determinate",value:Math.ceil(r/(d-1)*100)},l)),s)}),Br=Object(P.a)(function(e){return{root:{display:"flex",flexDirection:"row",justifyContent:"space-between",alignItems:"center",background:e.palette.background.default,padding:8},positionBottom:{position:"fixed",bottom:0,left:0,right:0,zIndex:e.zIndex.mobileStepper},positionTop:{position:"fixed",top:0,left:0,right:0,zIndex:e.zIndex.mobileStepper},positionStatic:{},dots:{display:"flex",flexDirection:"row"},dot:{backgroundColor:e.palette.action.disabled,borderRadius:"50%",width:8,height:8,margin:"0 2px"},dotActive:{backgroundColor:e.palette.primary.main},progress:{width:"50%"}}},{name:"MuiMobileStepper"})(Fr),Wr=n(140),Ur=n(135),Hr=n(333),$r=n(252),Vr=n(241),qr=n(139),Kr=n(332);function Xr(e){if("rtl"!==("undefined"!=typeof window&&document.body.getAttribute("dir")||"ltr"))return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}var Gr=D.a.forwardRef(function(e,t){var n=e.anchorEl,r=e.children,o=e.container,a=e.disablePortal,i=void 0!==a&&a,l=e.keepMounted,s=void 0!==l&&l,c=e.modifiers,u=e.open,d=e.placement,f=void 0===d?"bottom":d,p=e.popperOptions,m=void 0===p?{}:p,h=e.transition,v=void 0!==h&&h,g=I()(e,["anchorEl","children","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","transition"]),b=D.a.useRef(null),y=D.a.useRef(),x=D.a.useState(!e.open),w=Re()(x,2),k=w[0],E=w[1],C=D.a.useState(),S=Re()(C,2),O=S[0],T=S[1],j=Object(St.c)(b,t),P=D.a.useCallback(function(){var e=function(e){e.placement!==O&&T(e.placement)},t=b.current;t&&n&&u&&(y.current&&(y.current.destroy(),y.current=null),y.current=new qr.a(function(e){return"function"==typeof e?e():e}(n),t,A()({placement:Xr(f)},m,{modifiers:A()({},i?{}:{preventOverflow:{boundariesElement:"window"}},c,m.modifiers),onCreate:Object($.b)(e,m.onCreate),onUpdate:Object($.b)(e,m.onUpdate)})))},[n,i,c,u,O,f,m]),R=function(){y.current&&(y.current.destroy(),y.current=null)};if(D.a.useEffect(function(){return function(){R()}},[]),D.a.useEffect(function(){P()},[P]),D.a.useEffect(function(){u||v||R()},[u,v]),!s&&!u&&(!v||k))return null;var N={placement:O||Xr(f)};return v&&(N.TransitionProps={in:u,onEnter:function(){E(!1)},onExited:function(){E(!0),R()}}),D.a.createElement(Kr.a,{onRendered:P,disablePortal:i,container:o},D.a.createElement("div",A()({ref:j,role:"tooltip",style:{position:"absolute"}},g),"function"==typeof r?r(N):r))}),Yr=Object(Ve.a)(D.a.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"RadioButtonUnchecked"),Qr=Object(Ve.a)(D.a.createElement("path",{d:"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"}),"RadioButtonChecked"),Jr=D.a.createElement(Yr,null);var Zr=Object(P.a)(function(e){return{root:{position:"relative",display:"flex","&$checked $layer":{transform:"scale(1)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.shortest})}},layer:{position:"absolute",transform:"scale(0)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeIn,duration:e.transitions.duration.shortest})},checked:{}}},{name:"PrivateRadioButtonIcon"})(function(e){var t=e.checked,n=e.classes,r=e.className,o=I()(e,["checked","classes","className"]);return D.a.createElement("div",A()({className:Object(B.a)(n.root,t&&n.checked,r)},o),Jr,D.a.createElement(Qr,{className:n.layer}))}),eo=D.a.createContext(),to=D.a.createElement(Zr,{checked:!0}),no=D.a.createElement(Zr,null),ro=D.a.forwardRef(function(e,t){var n=e.checked,r=e.classes,o=e.color,a=void 0===o?"secondary":o,i=e.name,l=e.onChange,s=I()(e,["checked","classes","color","name","onChange"]),c=D.a.useContext(eo),u=n,d=Object($.b)(l,c&&c.onChange),f=i;return c&&(void 0===u&&(u=c.value===e.value),void 0===f&&(f=c.name)),D.a.createElement(ht,A()({color:a,type:"radio",icon:no,checkedIcon:to,classes:{root:Object(B.a)(r.root,r["color".concat(Object($.a)(a))]),checked:r.checked,disabled:r.disabled},name:f,checked:u,onChange:d,ref:t},s))}),oo=Object(P.a)(function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:Object($e.d)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object($e.d)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}},{name:"MuiRadio"})(ro),ao=D.a.forwardRef(function(e,t){var n=e.actions,r=e.children,o=e.name,a=e.value,i=e.onChange,l=I()(e,["actions","children","name","value","onChange"]),s=D.a.useRef(null),c=D.a.useRef(null!=e.value).current,u=D.a.useState(function(){return c?null:e.defaultValue}),d=Re()(u,2),f=d[0],p=d[1];D.a.useImperativeHandle(n,function(){return{focus:function(){var e=s.current.querySelector("input:not(:disabled):checked");e||(e=s.current.querySelector("input:not(:disabled)")),e&&e.focus()}}},[]),D.a.useEffect(function(){},[a,c]);var m={name:o,onChange:function(e){c||p(e.target.value),i&&i(e,e.target.value)},value:c?a:f},h=Object(St.c)(t,s);return D.a.createElement(Sn,A()({role:"radiogroup",ref:h},l),D.a.createElement(eo.Provider,{value:m},r))});var io=function(e){function t(){return $n()(this,t),Xn()(this,Yn()(t).apply(this,arguments))}return Jn()(t,e),qn()(t,[{key:"componentDidMount",value:function(){this.ref=Mt.a.findDOMNode(this),Object(St.b)(this.props.rootRef,this.ref)}},{key:"componentDidUpdate",value:function(e){var t=Mt.a.findDOMNode(this);e.rootRef===this.props.rootRef&&this.ref===t||(e.rootRef!==this.props.rootRef&&Object(St.b)(e.rootRef,null),this.ref=t,Object(St.b)(this.props.rootRef,this.ref))}},{key:"componentWillUnmount",value:function(){this.ref=null,Object(St.b)(this.props.rootRef,null)}},{key:"render",value:function(){return this.props.children}}]),t}(D.a.Component),lo=n(253),so=n(249),co=D.a.forwardRef(function(e,t){var n=e.action,r=e.classes,o=e.className,a=e.message,i=I()(e,["action","classes","className","message"]);return D.a.createElement(Je.a,A()({component:He.a,variant:"body2",variantMapping:{body1:"div",body2:"div"},role:"alertdialog",square:!0,elevation:6,className:Object(B.a)(r.root,o),ref:t},i),D.a.createElement("div",{className:r.message},a),n?D.a.createElement("div",{className:r.action},n):null)}),uo=Object(P.a)(function(e){var t="light"===e.palette.type?.8:.98,n=Object($e.c)(e.palette.background.default,t);return{root:ie()({color:e.palette.getContrastText(n),backgroundColor:n,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px 16px",borderRadius:e.shape.borderRadius,flexGrow:1},e.breakpoints.up("sm"),{flexGrow:"initial",minWidth:288}),message:{padding:"8px 0"},action:{display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}}},{name:"MuiSnackbarContent"})(co),fo=D.a.forwardRef(function(e,t){var n=e.action,r=e.anchorOrigin,o=r.vertical,a=r.horizontal,i=e.autoHideDuration,l=e.children,s=e.classes,c=e.className,u=e.ClickAwayListenerProps,d=e.ContentProps,f=e.disableWindowBlurListener,p=e.message,m=e.onClose,h=e.onEnter,v=e.onEntered,g=e.onEntering,b=e.onExit,y=e.onExited,x=e.onExiting,w=e.onMouseEnter,k=e.onMouseLeave,E=e.open,C=e.resumeHideDuration,S=e.TransitionComponent,O=e.transitionDuration,T=e.TransitionProps,j=I()(e,["action","anchorOrigin","autoHideDuration","children","classes","className","ClickAwayListenerProps","ContentProps","disableWindowBlurListener","message","onClose","onEnter","onEntered","onEntering","onExit","onExited","onExiting","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","transitionDuration","TransitionProps"]),P=D.a.useRef(),R=D.a.useState(!E),N=Re()(R,2),M=N[0],L=N[1],_=D.a.useCallback(function(e){var t=null!=e?e:i;m&&null!=t&&(clearTimeout(P.current),P.current=setTimeout(function(){m&&null!=(null!=e?e:i)&&m(null,"timeout")},t))},[i,m]);D.a.useEffect(function(){return E&&_(),function(){clearTimeout(P.current)}},[E,_]);var z=function(){clearTimeout(P.current)},F=D.a.useCallback(function(){if(null!=i){if(null!=C)return void _(C);_(.5*i)}},[i,C,_]);return D.a.useEffect(function(){if(!f)return window.addEventListener("focus",F),window.addEventListener("blur",z),function(){window.removeEventListener("focus",F),window.removeEventListener("blur",z)}},[f,F]),!E&&M?null:D.a.createElement(It,A()({onClickAway:function(e){m&&m(e,"clickaway")}},u),D.a.createElement("div",A()({className:Object(B.a)(s.root,s["anchorOrigin".concat(Object($.a)(o)).concat(Object($.a)(a))],c),onMouseEnter:function(e){w&&w(e),z()},onMouseLeave:function(e){k&&k(e),F()},ref:t},j),D.a.createElement(S,A()({appear:!0,in:E,onEnter:Object($.b)(function(){L(!1)},h),onEntered:v,onEntering:g,onExit:b,onExited:Object($.b)(function(){L(!0)},y),onExiting:x,timeout:O,direction:"top"===o?"down":"up"},T),l||D.a.createElement(uo,A()({message:p,action:n},d)))))});fo.defaultProps={anchorOrigin:{vertical:"bottom",horizontal:"center"},disableWindowBlurListener:!1,TransitionComponent:Un.a,transitionDuration:{enter:Dt.b.enteringScreen,exit:Dt.b.leavingScreen}};var po=Object(P.a)(function(e){var t={top:8},n={bottom:8},r={justifyContent:"flex-end"},o={justifyContent:"flex-start"},a={top:24},i={bottom:24},l={right:24},s={left:24},c={left:"50%",right:"auto",transform:"translateX(-50%)"};return{root:{zIndex:e.zIndex.snackbar,position:"fixed",display:"flex",left:8,right:8,justifyContent:"center",alignItems:"center"},anchorOriginTopCenter:A()({},t,ie()({},e.breakpoints.up("sm"),A()({},a,c))),anchorOriginBottomCenter:A()({},n,ie()({},e.breakpoints.up("sm"),A()({},i,c))),anchorOriginTopRight:A()({},t,r,ie()({},e.breakpoints.up("sm"),A()({left:"auto"},a,l))),anchorOriginBottomRight:A()({},n,r,ie()({},e.breakpoints.up("sm"),A()({left:"auto"},i,l))),anchorOriginTopLeft:A()({},t,o,ie()({},e.breakpoints.up("sm"),A()({right:"auto"},a,s))),anchorOriginBottomLeft:A()({},n,o,ie()({},e.breakpoints.up("sm"),A()({right:"auto"},i,s)))}},{flip:!1,name:"MuiSnackbar"})(fo),mo=D.a.forwardRef(function(e,t){var n=e.active,r=void 0!==n&&n,o=e.alternativeLabel,a=e.children,i=e.classes,l=e.className,s=e.completed,c=void 0!==s&&s,u=e.connector,d=e.disabled,f=void 0!==d&&d,p=e.index,m=e.last,h=e.orientation,v=I()(e,["active","alternativeLabel","children","classes","className","completed","connector","disabled","index","last","orientation"]),g=Object(B.a)(i.root,i[h],o&&i.alternativeLabel,c&&i.completed,l);return D.a.createElement("div",A()({className:g,ref:t},v),u&&o&&0!==p&&D.a.cloneElement(u,{orientation:h,alternativeLabel:o,index:p,active:r,completed:c,disabled:f}),D.a.Children.map(a,function(e){return D.a.isValidElement(e)?D.a.cloneElement(e,A()({active:r,alternativeLabel:o,completed:c,disabled:f,last:m,icon:p+1,orientation:h},e.props)):null}))}),ho=Object(P.a)({root:{},horizontal:{paddingLeft:8,paddingRight:8,"&:first-child":{paddingLeft:0},"&:last-child":{paddingRight:0}},vertical:{},alternativeLabel:{flex:1,position:"relative"},completed:{}},{name:"MuiStep"})(mo),vo=Object(Ve.a)(D.a.createElement("path",{d:"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"}),"CheckCircle"),go=Object(Ve.a)(D.a.createElement("path",{d:"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"}),"Warning"),bo=n(76),yo=D.a.createElement("circle",{cx:"12",cy:"12",r:"12"}),xo=D.a.forwardRef(function(e,t){var n=e.completed,r=void 0!==n&&n,o=e.icon,a=e.active,i=void 0!==a&&a,l=e.error,s=void 0!==l&&l,c=e.classes;return"number"==typeof o||"string"==typeof o?s?D.a.createElement(go,{className:Object(B.a)(c.root,c.error),ref:t}):r?D.a.createElement(vo,{className:Object(B.a)(c.root,c.completed),ref:t}):D.a.createElement(bo.a,{className:Object(B.a)(c.root,i&&c.active),ref:t},yo,D.a.createElement("text",{className:c.text,x:"12",y:"16",textAnchor:"middle"},o)):o}),wo=Object(P.a)(function(e){return{root:{display:"block",color:e.palette.text.disabled,"&$active":{color:e.palette.primary.main},"&$completed":{color:e.palette.primary.main},"&$error":{color:e.palette.error.main}},text:{fill:e.palette.primary.contrastText,fontSize:e.typography.caption.fontSize,fontFamily:e.typography.fontFamily},active:{},completed:{},error:{}}},{name:"MuiStepIcon"})(xo),ko=D.a.forwardRef(function(e,t){var n=e.active,r=void 0!==n&&n,o=e.alternativeLabel,a=void 0!==o&&o,i=e.children,l=e.classes,s=e.className,c=e.completed,u=void 0!==c&&c,d=e.disabled,f=void 0!==d&&d,p=e.error,m=void 0!==p&&p,h=e.icon,v=(e.last,e.optional),g=e.orientation,b=void 0===g?"horizontal":g,y=e.StepIconComponent,x=e.StepIconProps,w=I()(e,["active","alternativeLabel","children","classes","className","completed","disabled","error","icon","last","optional","orientation","StepIconComponent","StepIconProps"]),k=y;return h&&!k&&(k=wo),D.a.createElement("span",A()({className:Object(B.a)(l.root,l[b],f&&l.disabled,a&&l.alternativeLabel,m&&l.error,s),ref:t},w),h||k?D.a.createElement("span",{className:Object(B.a)(l.iconContainer,a&&l.alternativeLabel)},D.a.createElement(k,A()({completed:u,active:r,error:m,icon:h},x))):null,D.a.createElement("span",{className:l.labelContainer},D.a.createElement(He.a,{variant:"body2",component:"span",className:Object(B.a)(l.label,a&&l.alternativeLabel,u&&l.completed,r&&l.active,m&&l.error),display:"block"},i),v))});ko.muiName="StepLabel";var Eo=Object(P.a)(function(e){return{root:{display:"flex",alignItems:"center","&$alternativeLabel":{flexDirection:"column"},"&$disabled":{cursor:"default"}},horizontal:{},vertical:{},label:{color:e.palette.text.secondary,"&$active":{color:e.palette.text.primary,fontWeight:500},"&$completed":{color:e.palette.text.primary,fontWeight:500},"&$alternativeLabel":{textAlign:"center",marginTop:16},"&$error":{color:e.palette.error.main}},active:{},completed:{},error:{},disabled:{},iconContainer:{flexShrink:0,display:"flex",paddingRight:8,"&$alternativeLabel":{paddingRight:0}},alternativeLabel:{},labelContainer:{width:"100%"}}},{name:"MuiStepLabel"})(ko),Co=D.a.forwardRef(function(e,t){var n=e.active,r=e.alternativeLabel,o=e.children,a=e.classes,i=e.className,l=e.completed,s=e.disabled,c=e.icon,u=(e.last,e.optional),d=e.orientation,f=I()(e,["active","alternativeLabel","children","classes","className","completed","disabled","icon","last","optional","orientation"]),p={active:n,alternativeLabel:r,completed:l,disabled:s,icon:c,optional:u,orientation:d},m=Object(St.a)(o,["StepLabel"])?D.a.cloneElement(o,p):D.a.createElement(Eo,p,o);return D.a.createElement(G.a,A()({disabled:s,TouchRippleProps:{className:a.touchRipple},className:Object(B.a)(a.root,a[d],i),ref:t},f),m)}),So=Object(P.a)({root:{width:"100%",padding:"24px 16px",margin:"-24px -16px",boxSizing:"content-box"},horizontal:{},vertical:{justifyContent:"flex-start"},touchRipple:{color:"rgba(0, 0, 0, 0.3)"}},{name:"MuiStepButton"})(Co),Oo=D.a.forwardRef(function(e,t){var n=e.active,r=e.alternativeLabel,o=void 0!==r&&r,a=e.classes,i=e.className,l=e.completed,s=e.disabled,c=(e.index,e.orientation),u=void 0===c?"horizontal":c,d=I()(e,["active","alternativeLabel","classes","className","completed","disabled","index","orientation"]);return D.a.createElement("div",A()({className:Object(B.a)(a.root,a[u],o&&a.alternativeLabel,n&&a.active,l&&a.completed,s&&a.disabled,i),ref:t},d),D.a.createElement("span",{className:Object(B.a)(a.line,"horizontal"===u&&a.lineHorizontal,"vertical"===u&&a.lineVertical)}))}),To=Object(P.a)(function(e){return{root:{flex:"1 1 auto"},horizontal:{},vertical:{marginLeft:12,padding:"0 0 8px"},alternativeLabel:{position:"absolute",top:12,left:"calc(-50% + 20px)",right:"calc(50% + 20px)"},active:{},completed:{},disabled:{},line:{display:"block",borderColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},lineHorizontal:{borderTopStyle:"solid",borderTopWidth:1},lineVertical:{borderLeftStyle:"solid",borderLeftWidth:1,minHeight:24}}},{name:"MuiStepConnector"})(Oo),jo=D.a.forwardRef(function(e,t){var n=e.active,r=(e.alternativeLabel,e.children),o=e.classes,a=e.className,i=(e.completed,e.last),l=(e.optional,e.orientation,e.TransitionComponent),s=void 0===l?Bt:l,c=e.transitionDuration,u=void 0===c?"auto":c,d=e.TransitionProps,f=I()(e,["active","alternativeLabel","children","classes","className","completed","last","optional","orientation","TransitionComponent","transitionDuration","TransitionProps"]),p=u;return"auto"!==u||s.muiSupportAuto||(p=void 0),D.a.createElement("div",A()({className:Object(B.a)(o.root,i&&o.last,a),ref:t},f),D.a.createElement(s,A()({in:n,className:o.transition,timeout:p,unmountOnExit:!0},d),r))}),Po=Object(P.a)(function(e){return{root:{marginTop:8,marginLeft:12,paddingLeft:20,paddingRight:8,borderLeft:"1px solid ".concat("light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600])},last:{borderLeft:"none"},transition:{}}},{name:"MuiStepContent"})(jo),Ro=D.a.createElement(To,null),No=D.a.forwardRef(function(e,t){var n=e.activeStep,r=void 0===n?0:n,o=e.alternativeLabel,a=void 0!==o&&o,i=e.children,l=e.classes,s=e.className,c=e.connector,u=void 0===c?Ro:c,d=e.nonLinear,f=void 0!==d&&d,p=e.orientation,m=void 0===p?"horizontal":p,h=I()(e,["activeStep","alternativeLabel","children","classes","className","connector","nonLinear","orientation"]),v=Object(B.a)(l.root,l[m],a&&l.alternativeLabel,s),g=D.a.isValidElement(u)?D.a.cloneElement(u,{orientation:m}):null,b=D.a.Children.toArray(i),y=b.map(function(e,t){var n={alternativeLabel:a,connector:u,last:t+1===b.length,orientation:m},o={index:t,active:!1,completed:!1,disabled:!1};return r===t?o.active=!0:!f&&r>t?o.completed=!0:!f&&r<t&&(o.disabled=!0),[!a&&g&&0!==t&&D.a.cloneElement(g,A()({key:t},o)),D.a.cloneElement(e,A()({},n,o,e.props))]});return D.a.createElement(Je.a,A()({square:!0,elevation:0,className:v,ref:t},h),y)}),Mo=Object(P.a)({root:{display:"flex",padding:24},horizontal:{flexDirection:"row",alignItems:"center"},vertical:{flexDirection:"column"},alternativeLabel:{alignItems:"flex-start"}},{name:"MuiStepper"})(No),Ao=n(42),Lo=n.n(Ao),Io=n(44),_o=D.a.forwardRef(function(e,t){var n=e.anchor,r=e.classes,o=e.className,a=e.width,i=I()(e,["anchor","classes","className","width"]);return D.a.createElement("div",A()({className:Object(B.a)(r.root,r["anchor".concat(Object($.a)(n))],o),ref:t,style:ie()({},Object(ln.c)(n)?"width":"height",a)},i))}),Do=Object(P.a)(function(e){return{root:{position:"fixed",top:0,left:0,bottom:0,zIndex:e.zIndex.drawer-1},anchorLeft:{right:"auto"},anchorRight:{left:"auto",right:0},anchorTop:{bottom:"auto",right:0},anchorBottom:{top:"auto",bottom:0,right:0}}},{name:"PrivateSwipeArea"})(_o),zo=3,Fo=null;var Bo=function(e){function t(){var e,n;$n()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(n=Xn()(this,(e=Yn()(t)).call.apply(e,[this].concat(o)))).state={},n.isSwiping=null,n.swipeAreaRef=D.a.createRef(),n.paperRef=null,n.handleBodyTouchStart=function(e){if(null===Fo||Fo===Lo()(n)){var t=n.props,r=t.disableDiscovery,o=t.disableSwipeToOpen,a=t.open,i=t.swipeAreaWidth,l=Object(ln.b)(n.props.theme,n.props.anchor),s="right"===l?document.body.offsetWidth-e.touches[0].pageX:e.touches[0].pageX,c="bottom"===l?window.innerHeight-e.touches[0].clientY:e.touches[0].clientY;if(!a){if(o||e.target!==n.swipeAreaRef.current)return;if(Object(ln.c)(n.props.anchor)){if(s>i)return}else if(c>i)return}Fo=Lo()(n),n.startX=s,n.startY=c,n.setState({maybeSwiping:!0}),!a&&n.paperRef&&n.setPosition(n.getMaxTranslate()+(r?20:-i),{changeTransition:!1}),n.velocity=0,n.lastTime=null,n.lastTranslate=null,document.body.addEventListener("touchmove",n.handleBodyTouchMove,{passive:!1}),document.body.addEventListener("touchend",n.handleBodyTouchEnd),document.body.addEventListener("touchcancel",n.handleBodyTouchEnd)}},n.handleBodyTouchMove=function(e){if(n.paperRef){var t=Object(ln.b)(n.props.theme,n.props.anchor),r=Object(ln.c)(n.props.anchor),o="right"===t?document.body.offsetWidth-e.touches[0].pageX:e.touches[0].pageX,a="bottom"===t?window.innerHeight-e.touches[0].clientY:e.touches[0].clientY;if(null==n.isSwiping){var i=Math.abs(o-n.startX),l=Math.abs(a-n.startY);i>l&&e.preventDefault();var s=r?i>l&&i>zo:l>i&&l>zo;if(!0===s||(r?l>zo:i>zo)){if(n.isSwiping=s,!s)return void n.handleBodyTouchEnd(e);n.startX=o,n.startY=a,n.props.disableDiscovery||n.props.open||(r?n.startX-=n.props.swipeAreaWidth:n.startY-=n.props.swipeAreaWidth)}}if(n.isSwiping){var c=n.getTranslate(r?o:a);null===n.lastTranslate&&(n.lastTranslate=c,n.lastTime=performance.now()+1);var u=(c-n.lastTranslate)/(performance.now()-n.lastTime)*1e3;n.velocity=.4*n.velocity+.6*u,n.lastTranslate=c,n.lastTime=performance.now(),e.preventDefault(),n.setPosition(c)}}},n.handleBodyTouchEnd=function(e){if(Fo=null,n.removeBodyTouchListeners(),n.setState({maybeSwiping:!1}),n.isSwiping){n.isSwiping=null;var t,r=Object(ln.b)(n.props.theme,n.props.anchor);t=Object(ln.c)(n.props.anchor)?"right"===r?document.body.offsetWidth-e.changedTouches[0].pageX:e.changedTouches[0].pageX:"bottom"===r?window.innerHeight-e.changedTouches[0].clientY:e.changedTouches[0].clientY;var o=n.getTranslate(t)/n.getMaxTranslate();n.props.open?n.velocity>n.props.minFlingVelocity||o>n.props.hysteresis?n.props.onClose():n.setPosition(0,{mode:"exit"}):n.velocity<-n.props.minFlingVelocity||1-o>n.props.hysteresis?n.props.onOpen():n.setPosition(n.getMaxTranslate(),{mode:"enter"})}else n.isSwiping=null},n.handleBackdropRef=function(e){n.backdropRef=Mt.a.findDOMNode(e)},n.handlePaperRef=function(e){n.paperRef=Mt.a.findDOMNode(e)},n}return Jn()(t,e),qn()(t,[{key:"componentDidMount",value:function(){"temporary"===this.props.variant&&this.listenTouchStart()}},{key:"componentDidUpdate",value:function(e){var t=this.props.variant,n=e.variant;t!==n&&("temporary"===t?this.listenTouchStart():"temporary"===n&&this.removeTouchStart())}},{key:"componentWillUnmount",value:function(){this.removeTouchStart(),this.removeBodyTouchListeners(),Fo===this&&(Fo=null)}},{key:"getMaxTranslate",value:function(){return Object(ln.c)(this.props.anchor)?this.paperRef.clientWidth:this.paperRef.clientHeight}},{key:"getTranslate",value:function(e){var t=Object(ln.c)(this.props.anchor)?this.startX:this.startY;return Math.min(Math.max(this.props.open?t-e:this.getMaxTranslate()+t-e,0),this.getMaxTranslate())}},{key:"setPosition",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.mode,r=void 0===n?null:n,o=t.changeTransition,a=void 0===o||o,i=Object(ln.b)(this.props.theme,this.props.anchor),l=-1!==["right","bottom"].indexOf(i)?1:-1,s=Object(ln.c)(this.props.anchor)?"translate(".concat(l*e,"px, 0)"):"translate(0, ".concat(l*e,"px)"),c=this.paperRef.style;c.webkitTransform=s,c.transform=s;var u="";if(r&&(u=this.props.theme.transitions.create("all",Object(zt.a)({timeout:this.props.transitionDuration},{mode:r}))),a&&(c.webkitTransition=u,c.transition=u),!this.props.disableBackdropTransition&&!this.props.hideBackdrop){var d=this.backdropRef.style;d.opacity=1-e/this.getMaxTranslate(),a&&(d.webkitTransition=u,d.transition=u)}}},{key:"listenTouchStart",value:function(){document.body.addEventListener("touchstart",this.handleBodyTouchStart)}},{key:"removeTouchStart",value:function(){document.body.removeEventListener("touchstart",this.handleBodyTouchStart)}},{key:"removeBodyTouchListeners",value:function(){document.body.removeEventListener("touchmove",this.handleBodyTouchMove,{passive:!1}),document.body.removeEventListener("touchend",this.handleBodyTouchEnd),document.body.removeEventListener("touchcancel",this.handleBodyTouchEnd)}},{key:"render",value:function(){var e=this.props,t=e.anchor,n=(e.disableBackdropTransition,e.disableDiscovery,e.disableSwipeToOpen),r=(e.hysteresis,e.innerRef),o=(e.minFlingVelocity,e.ModalProps),a=(o=void 0===o?{}:o).BackdropProps,i=I()(o,["BackdropProps"]),l=(e.onOpen,e.open),s=e.PaperProps,c=void 0===s?{}:s,u=e.SwipeAreaProps,d=e.swipeAreaWidth,f=e.variant,p=I()(e,["anchor","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hysteresis","innerRef","minFlingVelocity","ModalProps","onOpen","open","PaperProps","SwipeAreaProps","swipeAreaWidth","variant"]),m=this.state.maybeSwiping;return D.a.createElement(D.a.Fragment,null,D.a.createElement(ln.a,A()({open:!("temporary"!==f||!m)||l,variant:f,ModalProps:A()({BackdropProps:A()({},a,{ref:this.handleBackdropRef})},i),PaperProps:A()({},c,{style:A()({pointerEvents:"temporary"!==f||l?"":"none"},c.style),ref:this.handlePaperRef}),anchor:t,ref:r},p)),!n&&"temporary"===f&&D.a.createElement(Hr.a,null,D.a.createElement(Do,A()({anchor:t,innerRef:this.swipeAreaRef,width:d},u))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.maybeSwiping?{maybeSwiping:!1,open:e.open}:!e.open&&t.open?{maybeSwiping:!1,open:e.open}:{open:e.open}}}]),t}(D.a.Component);Bo.defaultProps={anchor:"left",disableBackdropTransition:!1,disableDiscovery:!1,disableSwipeToOpen:"undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent),hysteresis:.55,minFlingVelocity:400,swipeAreaWidth:20,transitionDuration:{enter:Dt.b.enteringScreen,exit:Dt.b.leavingScreen},variant:"temporary"};var Wo=Object(R.a)(Object(Io.a)(Bo)),Uo=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,a=void 0===o?"secondary":o,i=e.edge,l=void 0!==i&&i,s=I()(e,["classes","className","color","edge"]),c=D.a.createElement("span",{className:n.thumb});return D.a.createElement("span",{className:Object(B.a)(n.root,"start"===l&&n.edgeStart,"end"===l&&n.edgeEnd,r)},D.a.createElement(ht,A()({type:"checkbox",icon:c,checkedIcon:c,classes:{root:Object(B.a)(n.switchBase,n["color".concat(Object($.a)(a))]),input:n.input,checked:n.checked,disabled:n.disabled},ref:t},s)),D.a.createElement("span",{className:n.track}))}),Ho=Object(P.a)(function(e){return{root:{display:"inline-flex",width:58,height:38,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle"},edgeStart:{marginLeft:-8},edgeEnd:{marginRight:-8},switchBase:{position:"absolute",top:0,left:0,zIndex:1,color:"light"===e.palette.type?e.palette.grey[50]:e.palette.grey[400],transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest}),"&$checked":{transform:"translateX(50%)"},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{opacity:.5},"&$disabled + $track":{opacity:"light"===e.palette.type?.12:.1}},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:Object($e.d)(e.palette.primary.main,e.palette.action.hoverOpacity)}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.primary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object($e.d)(e.palette.secondary.main,e.palette.action.hoverOpacity)}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.secondary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},checked:{},disabled:{},input:{left:"-100%",width:"300%"},thumb:{boxShadow:e.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},track:{height:"100%",width:"100%",borderRadius:7,zIndex:-1,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white,opacity:"light"===e.palette.type?.38:.3}}},{name:"MuiSwitch"})(Uo),$o=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.disabled,a=void 0!==o&&o,i=e.disableFocusRipple,l=void 0!==i&&i,s=e.fullWidth,c=e.icon,u=e.indicator,d=e.label,f=e.onChange,p=e.onClick,m=e.selected,h=e.textColor,v=void 0===h?"inherit":h,g=e.value,b=e.wrapped,y=void 0!==b&&b,x=I()(e,["classes","className","disabled","disableFocusRipple","fullWidth","icon","indicator","label","onChange","onClick","selected","textColor","value","wrapped"]);return D.a.createElement(G.a,A()({focusRipple:!l,className:Object(B.a)(n.root,n["textColor".concat(Object($.a)(v))],a&&n.disabled,m&&n.selected,d&&c&&n.labelIcon,s&&n.fullWidth,y&&n.wrapped,r),ref:t,role:"tab","aria-selected":m,disabled:a,onClick:function(e){f&&f(e,g),p&&p(e)}},x),D.a.createElement("span",{className:n.wrapper},c,d),u)}),Vo=Object(P.a)(function(e){var t;return{root:A()({},e.typography.button,(t={maxWidth:264,minWidth:72,position:"relative",boxSizing:"border-box",minHeight:48,flexShrink:0,padding:"6px 12px"},ie()(t,e.breakpoints.up("md"),{padding:"6px 24px"}),ie()(t,"overflow","hidden"),ie()(t,"whiteSpace","normal"),ie()(t,"textAlign","center"),ie()(t,e.breakpoints.up("md"),{fontSize:e.typography.pxToRem(13),minWidth:160}),t)),labelIcon:{minHeight:72,paddingTop:9,"& $wrapper > *:first-child":{marginBottom:6}},textColorInherit:{color:"inherit",opacity:.7,"&$selected":{opacity:1},"&$disabled":{opacity:.4}},textColorPrimary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled}},textColorSecondary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.secondary.main},"&$disabled":{color:e.palette.text.disabled}},selected:{},disabled:{},fullWidth:{flexShrink:1,flexGrow:1,flexBasis:0,maxWidth:"none"},wrapped:{fontSize:e.typography.pxToRem(12),lineHeight:1.5},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"}}},{name:"MuiTab"})($o),qo=D.a.createContext(),Ko=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"table":o,i=e.padding,l=void 0===i?"default":i,s=e.size,c=void 0===s?"medium":s,u=I()(e,["classes","className","component","padding","size"]),d=D.a.useMemo(function(){return{padding:l,size:c}},[l,c]);return D.a.createElement(qo.Provider,{value:d},D.a.createElement(a,A()({ref:t,className:Object(B.a)(n.root,r)},u)))}),Xo=Object(P.a)({root:{display:"table",width:"100%",borderCollapse:"collapse",borderSpacing:0}},{name:"MuiTable"})(Ko),Go=D.a.createContext(),Yo={variant:"body"},Qo=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"tbody":o,i=I()(e,["classes","className","component"]);return D.a.createElement(Go.Provider,{value:Yo},D.a.createElement(a,A()({className:Object(B.a)(n.root,r),ref:t},i)))}),Jo=Object(P.a)({root:{display:"table-row-group"}},{name:"MuiTableBody"})(Qo),Zo=D.a.forwardRef(function(e,t){var n,r=e.align,o=void 0===r?"inherit":r,a=e.classes,i=e.className,l=e.component,s=e.padding,c=e.scope,u=e.size,d=e.sortDirection,f=e.variant,p=I()(e,["align","classes","className","component","padding","scope","size","sortDirection","variant"]),m=D.a.useContext(qo),h=D.a.useContext(Go);n=l||(h&&"head"===h.variant?"th":"td");var v=c;!v&&h&&"head"===h.variant&&(v="col");var g=s||(m&&m.padding?m.padding:"default"),b=u||(m&&m.size?m.size:"medium"),y=null;return d&&(y="asc"===d?"ascending":"descending"),D.a.createElement(n,A()({ref:t,className:Object(B.a)(a.root,(f?"head"===f:h&&"head"===h.variant)&&a.head,(f?"body"===f:h&&"body"===h.variant)&&a.body,(f?"footer"===f:h&&"footer"===h.variant)&&a.footer,"inherit"!==o&&a["align".concat(Object($.a)(o))],"default"!==g&&a["padding".concat(Object($.a)(g))],"medium"!==b&&a["size".concat(Object($.a)(b))],i),"aria-sort":y,scope:v},p))}),ea=Object(P.a)(function(e){return{root:A()({},e.typography.body2,{display:"table-cell",verticalAlign:"inherit",borderBottom:"1px solid\n    ".concat("light"===e.palette.type?Object($e.i)(Object($e.d)(e.palette.divider,1),.88):Object($e.a)(Object($e.d)(e.palette.divider,1),.68)),textAlign:"left",padding:"14px 40px 14px 16px","&:last-child":{paddingRight:16}}),head:{color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12),lineHeight:e.typography.pxToRem(21),fontWeight:e.typography.fontWeightMedium},body:{color:e.palette.text.primary,fontWeight:e.typography.fontWeightRegular},footer:{color:e.palette.text.secondary,lineHeight:e.typography.pxToRem(21),fontSize:e.typography.pxToRem(12)},sizeSmall:{padding:"6px 24px 6px 16px","&:last-child":{paddingRight:16},"&$paddingCheckbox":{width:24,padding:"0px 12px 0 16px","&:last-child":{paddingLeft:12,paddingRight:16},"& > *":{padding:0}}},paddingCheckbox:{width:48,padding:"0 0 0 4px","&:last-child":{paddingLeft:0,paddingRight:4}},paddingNone:{padding:0,"&:last-child":{padding:0}},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right",flexDirection:"row-reverse"},alignJustify:{textAlign:"justify"}}},{name:"MuiTableCell"})(Zo),ta={variant:"footer"},na=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"tfoot":o,i=I()(e,["classes","className","component"]);return D.a.createElement(Go.Provider,{value:ta},D.a.createElement(a,A()({className:Object(B.a)(n.root,r),ref:t},i)))}),ra=Object(P.a)({root:{display:"table-footer-group"}},{name:"MuiTableFooter"})(na),oa={variant:"head"},aa=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"thead":o,i=I()(e,["classes","className","component"]);return D.a.createElement(Go.Provider,{value:oa},D.a.createElement(a,A()({className:Object(B.a)(n.root,r),ref:t},i)))}),ia=Object(P.a)({root:{display:"table-header-group"}},{name:"MuiTableHead"})(aa),la=n(125),sa=Object(Ve.a)(D.a.createElement("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"}),"KeyboardArrowLeft"),ca=Object(Ve.a)(D.a.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"}),"KeyboardArrowRight"),ua=D.a.createElement(ca,null),da=D.a.createElement(sa,null),fa=D.a.createElement(sa,null),pa=D.a.createElement(ca,null),ma=D.a.forwardRef(function(e,t){var n=e.backIconButtonProps,r=e.count,o=e.nextIconButtonProps,a=e.onChangePage,i=e.page,l=e.rowsPerPage,s=e.theme,c=I()(e,["backIconButtonProps","count","nextIconButtonProps","onChangePage","page","rowsPerPage","theme"]);return D.a.createElement("div",A()({ref:t},c),D.a.createElement(pt.a,A()({onClick:function(e){a(e,i-1)},disabled:0===i,color:"inherit"},n),"rtl"===s.direction?ua:da),D.a.createElement(pt.a,A()({onClick:function(e){a(e,i+1)},disabled:i>=Math.ceil(r/l)-1,color:"inherit"},o),"rtl"===s.direction?fa:pa))}),ha=Object(R.a)(ma),va=function(e){var t=e.from,n=e.to,r=e.count;return"".concat(t,"-").concat(n," of ").concat(r)},ga=[10,25,50,100],ba=D.a.forwardRef(function(e,t){var n,r=e.ActionsComponent,o=void 0===r?ha:r,a=e.backIconButtonProps,i=e.classes,l=e.colSpan,s=e.component,c=void 0===s?ea:s,u=e.count,d=e.labelDisplayedRows,f=void 0===d?va:d,p=e.labelRowsPerPage,m=void 0===p?"Rows per page:":p,h=e.nextIconButtonProps,v=e.onChangePage,g=e.onChangeRowsPerPage,b=e.page,y=e.rowsPerPage,x=e.rowsPerPageOptions,w=void 0===x?ga:x,k=e.SelectProps,E=void 0===k?{}:k,C=I()(e,["ActionsComponent","backIconButtonProps","classes","colSpan","component","count","labelDisplayedRows","labelRowsPerPage","nextIconButtonProps","onChangePage","onChangeRowsPerPage","page","rowsPerPage","rowsPerPageOptions","SelectProps"]);c!==ea&&"td"!==c||(n=l||1e3);var S=E.native?"option":Dr;return D.a.createElement(c,A()({className:i.root,colSpan:n,ref:t},C),D.a.createElement(la.a,{className:i.toolbar},D.a.createElement("div",{className:i.spacer}),w.length>1&&D.a.createElement(He.a,{color:"inherit",variant:"caption",className:i.caption},m),w.length>1&&D.a.createElement(lo.a,A()({classes:{root:i.selectRoot,select:i.select,icon:i.selectIcon},input:D.a.createElement(br.a,{className:i.input}),value:y,onChange:g},E),w.map(function(e){return D.a.createElement(S,{className:i.menuItem,key:e,value:e},e)})),D.a.createElement(He.a,{color:"inherit",variant:"caption",className:i.caption},f({from:0===u?0:b*y+1,to:Math.min(u,(b+1)*y),count:u,page:b})),D.a.createElement(o,{className:i.actions,backIconButtonProps:a,count:u,nextIconButtonProps:h,onChangePage:v,page:b,rowsPerPage:y})))}),ya=Object(P.a)(function(e){return{root:{color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12),"&:last-child":{padding:0}},toolbar:{height:56,minHeight:56,paddingRight:2},spacer:{flex:"1 1 100%"},caption:{flexShrink:0},selectRoot:{marginRight:32,marginLeft:8},select:{paddingLeft:8,paddingRight:24,textAlign:"right",textAlignLast:"right"},selectIcon:{top:1},input:{color:"inherit",fontSize:"inherit",flexShrink:0},menuItem:{},actions:{flexShrink:0,marginLeft:20}}},{name:"MuiTablePagination"})(ba),xa=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,a=void 0===o?"tr":o,i=e.hover,l=void 0!==i&&i,s=e.selected,c=void 0!==s&&s,u=I()(e,["classes","className","component","hover","selected"]),d=D.a.useContext(Go);return D.a.createElement(a,A()({ref:t,className:Object(B.a)(n.root,r,d&&["head"===d.variant&&n.head,"footer"===d.variant&&n.footer],l&&n.hover,c&&n.selected)},u))}),wa=Object(P.a)(function(e){return{root:{color:"inherit",display:"table-row",verticalAlign:"middle",outline:"none","&$selected":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.04)":"rgba(255, 255, 255, 0.08)"},"&$hover:hover":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.07)":"rgba(255, 255, 255, 0.14)"}},selected:{},hover:{},head:{},footer:{}}},{name:"MuiTableRow"})(xa),ka=Object(Ve.a)(D.a.createElement("path",{d:"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),"ArrowDownward"),Ea=D.a.forwardRef(function(e,t){var n=e.active,r=void 0!==n&&n,o=e.children,a=e.classes,i=e.className,l=e.direction,s=void 0===l?"desc":l,c=e.hideSortIcon,u=void 0!==c&&c,d=e.IconComponent,f=void 0===d?ka:d,p=I()(e,["active","children","classes","className","direction","hideSortIcon","IconComponent"]);return D.a.createElement(G.a,A()({className:Object(B.a)(a.root,r&&a.active,i),component:"span",disableRipple:!0,ref:t},p),o,u&&!r?null:D.a.createElement(f,{className:Object(B.a)(a.icon,a["iconDirection".concat(Object($.a)(s))])}))}),Ca=Object(P.a)(function(e){return{root:{cursor:"pointer",display:"inline-flex",justifyContent:"flex-start",flexDirection:"inherit",alignItems:"center","&:focus":{color:e.palette.text.primary},"&:hover":{color:e.palette.text.primary,"& $icon":{opacity:1,color:e.palette.text.secondary}},"&$active":{color:e.palette.text.primary,"&& $icon":{opacity:1,color:e.palette.text.primary}}},active:{},icon:{height:18,marginRight:4,marginLeft:4,opacity:0,transition:e.transitions.create(["opacity","transform"],{duration:e.transitions.duration.shorter}),userSelect:"none",width:18},iconDirectionDesc:{transform:"rotate(0deg)"},iconDirectionAsc:{transform:"rotate(180deg)"}}},{name:"MuiTableSortLabel"})(Ea),Sa=n(83);function Oa(e){return(1+Math.sin(Math.PI*e-Math.PI/2))/2}var Ta=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},a=r.ease,i=void 0===a?Oa:a,l=r.duration,s=void 0===l?300:l,c=null,u=t[e],d=!1,f=function(){d=!0};return u===n?(o(new Error("Element already at target position")),f):(requestAnimationFrame(function r(a){if(d)o(new Error("Animation cancelled"));else{null===c&&(c=a);var l=Math.min(1,(a-c)/s);t[e]=i(l)*(n-u)+u,l>=1?requestAnimationFrame(function(){o(null)}):requestAnimationFrame(r)}}),f)},ja={width:99,height:99,position:"absolute",top:-9999,overflow:"scroll"};function Pa(e){var t=e.onChange,n=I()(e,["onChange"]),r=D.a.useRef(),o=D.a.useRef(null),a=function(){r.current=o.current.offsetHeight-o.current.clientHeight};return D.a.useEffect(function(){var e=_n()(function(){var e=r.current;a(),e!==r.current&&t(r.current)},166);return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[t]),D.a.useEffect(function(){a(),t(r.current)},[t]),D.a.createElement("div",A()({style:ja,ref:o},n))}var Ra=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,a=I()(e,["classes","className","color"]);return D.a.createElement("span",A()({className:Object(B.a)(n.root,n["color".concat(Object($.a)(o))],r),ref:t},a))}),Na=Object(P.a)(function(e){return{root:{position:"absolute",height:2,bottom:0,width:"100%",transition:e.transitions.create()},colorPrimary:{backgroundColor:e.palette.primary.main},colorSecondary:{backgroundColor:e.palette.secondary.main}}},{name:"PrivateTabIndicator"})(Ra),Ma=D.a.createElement(sa,{fontSize:"small"}),Aa=D.a.createElement(ca,{fontSize:"small"}),La=D.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.direction,a=e.onClick,i=e.visible,l=void 0===i||i,s=I()(e,["classes","className","direction","onClick","visible"]),c=Object(B.a)(n.root,r);return l?D.a.createElement(G.a,A()({component:"div",className:c,onClick:a,ref:t,role:null,tabIndex:null},s),"left"===o?Ma:Aa):D.a.createElement("div",{className:c})}),Ia=Object(P.a)({root:{color:"inherit",width:40,flexShrink:0}},{name:"PrivateTabScrollButton"})(La),_a=function(e){function t(){var e;return $n()(this,t),(e=Xn()(this,Yn()(t).call(this))).state={indicatorStyle:{},scrollerStyle:{overflow:"hidden",marginBottom:null},showLeftScroll:!1,showRightScroll:!1,mounted:!1},e.getConditionalElements=function(){var t=e.props,n=t.classes,r=t.ScrollButtonComponent,o=t.scrollButtons,a=t.theme,i=t.variant,l=e.state,s=l.showLeftScroll,c=l.showRightScroll,u={},d="scrollable"===i;u.scrollbarSizeListener=d?D.a.createElement(Pa,{className:n.scrollable,onChange:e.handleScrollbarSizeChange}):null;var f=d&&("auto"===o&&(s||c)||"desktop"===o||"on"===o);return u.scrollButtonLeft=f?D.a.createElement(r,{direction:"rtl"===a.direction?"right":"left",onClick:e.handleLeftScrollClick,visible:s,className:Object(B.a)(n.scrollButtons,"on"!==o&&n.scrollButtonsDesktop)}):null,u.scrollButtonRight=f?D.a.createElement(r,{direction:"rtl"===a.direction?"left":"right",onClick:e.handleRightScrollClick,visible:c,className:Object(B.a)(n.scrollButtons,"on"!==o&&n.scrollButtonsDesktop)}):null,u},e.getTabsMeta=function(t,n){var r,o;if(e.tabsRef){var a=e.tabsRef.getBoundingClientRect();r={clientWidth:e.tabsRef.clientWidth,scrollLeft:e.tabsRef.scrollLeft,scrollLeftNormalized:Object(Sa.getNormalizedScrollLeft)(e.tabsRef,n),scrollWidth:e.tabsRef.scrollWidth,left:a.left,right:a.right}}if(e.tabsRef&&!1!==t){var i=e.tabsRef.children[0].children;if(i.length>0){var l=i[e.valueToIndex.get(t)];o=l?l.getBoundingClientRect():null}}return{tabsMeta:r,tabMeta:o}},e.handleLeftScrollClick=function(){e.moveTabsScroll(-e.tabsRef.clientWidth)},e.handleRightScrollClick=function(){e.moveTabsScroll(e.tabsRef.clientWidth)},e.handleScrollbarSizeChange=function(t){e.setState({scrollerStyle:{overflow:null,marginBottom:-t}})},e.handleTabsRef=function(t){e.tabsRef=t},e.moveTabsScroll=function(t){var n=e.props.theme,r="rtl"===n.direction?-1:1,o=e.tabsRef.scrollLeft+t*r,a="rtl"===n.direction&&"reverse"===Object(Sa.detectScrollType)()?-1:1;e.scroll(a*o)},e.scrollSelectedIntoView=function(){var t=e.props,n=t.theme,r=t.value,o=e.getTabsMeta(r,n.direction),a=o.tabsMeta,i=o.tabMeta;if(i&&a)if(i.left<a.left){var l=a.scrollLeft+(i.left-a.left);e.scroll(l)}else if(i.right>a.right){var s=a.scrollLeft+(i.right-a.right);e.scroll(s)}},e.scroll=function(t){Ta("scrollLeft",e.tabsRef,t)},e.updateScrollButtonState=function(){var t=e.props,n=t.scrollButtons,r=t.theme;if("scrollable"===t.variant&&"off"!==n){var o=e.tabsRef,a=o.scrollWidth,i=o.clientWidth,l=Object(Sa.getNormalizedScrollLeft)(e.tabsRef,r.direction),s="rtl"===r.direction?l<a-i-1:l>1,c="rtl"!==r.direction?l<a-i-1:l>1;s===e.state.showLeftScroll&&c===e.state.showRightScroll||e.setState({showLeftScroll:s,showRightScroll:c})}},"undefined"!=typeof window&&(e.handleResize=_n()(function(){e.updateIndicatorState(e.props),e.updateScrollButtonState()},166),e.handleTabsScroll=_n()(function(){e.updateScrollButtonState()},166)),e}return Jn()(t,e),qn()(t,[{key:"componentDidMount",value:function(){this.setState({mounted:!0}),this.updateIndicatorState(this.props),this.updateScrollButtonState(),this.props.action&&this.props.action({updateIndicator:this.handleResize})}},{key:"componentDidUpdate",value:function(e,t){this.updateIndicatorState(this.props),this.updateScrollButtonState(),this.state.indicatorStyle!==t.indicatorStyle&&this.scrollSelectedIntoView()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear(),this.handleTabsScroll.clear()}},{key:"updateIndicatorState",value:function(e){var t=e.theme,n=e.value,r=this.getTabsMeta(n,t.direction),o=r.tabsMeta,a=r.tabMeta,i=0;if(a&&o){var l="rtl"===t.direction?o.scrollLeftNormalized+o.clientWidth-o.scrollWidth:o.scrollLeft;i=Math.round(a.left-o.left+l)}var s={left:i,width:a?Math.round(a.width):0};s.left===this.state.indicatorStyle.left&&s.width===this.state.indicatorStyle.width||isNaN(s.left)||isNaN(s.width)||this.setState({indicatorStyle:s})}},{key:"render",value:function(){var e=this,t=this.props,n=(t.action,t.centered),r=t.children,o=t.classes,a=t.className,i=t.component,l=t.indicatorColor,s=t.innerRef,c=t.onChange,u=(t.ScrollButtonComponent,t.scrollButtons,t.TabIndicatorProps),d=void 0===u?{}:u,f=t.textColor,p=(t.theme,t.value),m=t.variant,h=I()(t,["action","centered","children","classes","className","component","indicatorColor","innerRef","onChange","ScrollButtonComponent","scrollButtons","TabIndicatorProps","textColor","theme","value","variant"]),v="scrollable"===m,g=D.a.createElement(Na,A()({className:o.indicator,color:l},d,{style:A()({},this.state.indicatorStyle,d.style)}));this.valueToIndex=new Map;var b=0,y=D.a.Children.map(r,function(t){if(!D.a.isValidElement(t))return null;var n=void 0===t.props.value?b:t.props.value;e.valueToIndex.set(n,b);var r=n===p;return b+=1,D.a.cloneElement(t,{fullWidth:"fullWidth"===m,indicator:r&&!e.state.mounted&&g,selected:r,onChange:c,textColor:f,value:n})}),x=this.getConditionalElements();return D.a.createElement(i,A()({className:Object(B.a)(o.root,a),ref:s},h),D.a.createElement(er.a,{target:"window",onResize:this.handleResize}),D.a.createElement("div",{className:o.flexContainer},x.scrollButtonLeft,x.scrollbarSizeListener,D.a.createElement("div",{className:Object(B.a)(o.scroller,!v&&o.fixed,v&&o.scrollable),style:this.state.scrollerStyle,ref:this.handleTabsRef,role:"tablist",onScroll:this.handleTabsScroll},D.a.createElement("div",{className:Object(B.a)(o.flexContainer,n&&!v&&o.centered)},y),this.state.mounted&&g),x.scrollButtonRight))}}]),t}(D.a.Component);_a.defaultProps={centered:!1,component:"div",indicatorColor:"secondary",ScrollButtonComponent:Ia,scrollButtons:"auto",textColor:"inherit",variant:"standard"};var Da=Object(P.a)(function(e){return{root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch"},flexContainer:{display:"flex"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:ie()({},e.breakpoints.down("xs"),{display:"none"}),indicator:{}}},{name:"MuiTabs",withTheme:!0})(Object(Io.a)(_a)),za=n(110),Fa=n(81);var Ba=Object(P.a)(function(e){return{popper:{zIndex:e.zIndex.tooltip,pointerEvents:"none",position:"absolute",top:0,left:0},popperInteractive:{pointerEvents:"auto"},tooltip:{backgroundColor:Object($e.d)(e.palette.grey[700],.9),borderRadius:e.shape.borderRadius,color:e.palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(10),lineHeight:"".concat(e.typography.round(1.4),"em"),maxWidth:300,fontWeight:e.typography.fontWeightMedium},touch:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:"".concat(e.typography.round(16/14),"em"),fontWeight:e.typography.fontWeightRegular},tooltipPlacementLeft:ie()({transformOrigin:"right center",margin:"0 24px "},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementRight:ie()({transformOrigin:"left center",margin:"0 24px"},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementTop:ie()({transformOrigin:"center bottom",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"}),tooltipPlacementBottom:ie()({transformOrigin:"center top",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"})}},{name:"MuiTooltip",withTheme:!0})(function(e){var t=e.children,n=e.classes,r=e.disableFocusListener,o=void 0!==r&&r,a=e.disableHoverListener,i=void 0!==a&&a,l=e.disableTouchListener,s=void 0!==l&&l,c=e.enterDelay,u=void 0===c?0:c,d=e.enterTouchDelay,f=void 0===d?700:d,p=e.id,m=e.interactive,h=void 0!==m&&m,v=e.leaveDelay,g=void 0===v?0:v,b=e.leaveTouchDelay,y=void 0===b?1500:b,x=e.onClose,w=e.onOpen,k=e.open,E=e.placement,C=void 0===E?"bottom":E,S=e.PopperProps,O=e.theme,T=e.title,j=e.TransitionComponent,P=void 0===j?Un.a:j,R=e.TransitionProps,N=I()(e,["children","classes","disableFocusListener","disableHoverListener","disableTouchListener","enterDelay","enterTouchDelay","id","interactive","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperProps","theme","title","TransitionComponent","TransitionProps"]),M=D.a.useState(!1),L=Re()(M,2),_=L[0],z=L[1],F=D.a.useState(0),W=Re()(F,2)[1],U=D.a.useState(),H=Re()(U,2),V=H[0],q=H[1],K=D.a.useRef(!1),X=D.a.useRef(null!=e.open).current,G=D.a.useRef(),Y=D.a.useRef(),Q=D.a.useRef(),J=D.a.useRef(),Z=D.a.useRef();D.a.useEffect(function(){},[X,T,V]),D.a.useEffect(function(){G.current||(G.current="mui-tooltip-".concat(Math.round(1e5*Math.random()))),k&&W(function(e){return!e})},[k]),D.a.useEffect(function(){return function(){clearTimeout(Y.current),clearTimeout(Q.current),clearTimeout(J.current),clearTimeout(Z.current)}},[]);var ee=function(e){X||_||z(!0),w&&w(e)},te=function(e){var n=t.props;"mouseover"===e.type&&n.onMouseOver&&n.onMouseOver(e),K.current&&"touchstart"!==e.type||(V&&V.setAttribute("title",""),clearTimeout(Q.current),clearTimeout(J.current),u?(e.persist(),Q.current=setTimeout(function(){ee(e)},u)):ee(e))},ne=Object(Fa.a)(),re=ne.isFocusVisible,oe=ne.onBlurVisible,ae=ne.ref,ie=D.a.useState(!1),le=Re()(ie,2),se=le[0],ce=le[1],ue=function(e){X||z(!1),x&&x(e),clearTimeout(Y.current),Y.current=setTimeout(function(){K.current=!1},O.transitions.duration.shortest)},de=function(e){var n=t.props;"blur"===e.type&&(n.onBlur&&n.onBlur(e),se&&(ce(!1),oe())),"mouseleave"===e.type&&n.onMouseLeave&&n.onMouseLeave(e),clearTimeout(Q.current),clearTimeout(J.current),g?(e.persist(),J.current=setTimeout(function(){ue(e)},g)):ue(e)},fe=Object(St.c)(D.a.useCallback(function(e){q(Mt.a.findDOMNode(e))},[]),ae),pe=Object(St.c)(t.ref,fe),me=X?k:_;""===T&&(me=!1);var he=!me&&!i,ve=A()({"aria-describedby":me?p||G.current:null,title:he&&"string"==typeof T?T:null},N,t.props,{className:Object(B.a)(N.className,t.props.className)});s||(ve.onTouchStart=function(e){K.current=!0;var n=t.props;n.onTouchStart&&n.onTouchStart(e),clearTimeout(J.current),clearTimeout(Y.current),clearTimeout(Z.current),e.persist(),Z.current=setTimeout(function(){te(e)},f)},ve.onTouchEnd=function(e){t.props.onTouchEnd&&t.props.onTouchEnd(e),clearTimeout(Z.current),clearTimeout(J.current),e.persist(),J.current=setTimeout(function(){ue(e)},y)}),i||(ve.onMouseOver=te,ve.onMouseLeave=de),o||(ve.onFocus=function(e){V||q(e.currentTarget),re(e)&&(ce(!0),te(e));var n=t.props;n.onFocus&&n.onFocus(e)},ve.onBlur=de);var ge=h?{onMouseOver:ve.onMouseOver,onMouseLeave:ve.onMouseLeave,onFocus:ve.onFocus,onBlur:ve.onBlur}:{};return D.a.createElement(D.a.Fragment,null,D.a.cloneElement(t,A()({ref:pe},ve)),D.a.createElement(Gr,A()({className:Object(B.a)(n.popper,h&&n.popperInteractive),placement:C,anchorEl:V,open:!!V&&me,id:ve["aria-describedby"],transition:!0},ge,S),function(e){var t=e.placement,r=e.TransitionProps;return D.a.createElement(P,A()({timeout:O.transitions.duration.shorter},r,R),D.a.createElement("div",{className:Object(B.a)(n.tooltip,K.current&&n.touch,n["tooltipPlacement".concat(Object($.a)(t.split("-")[0]))])},T))}))}),Wa=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){var n=e.breakpoint,r=void 0===n?"sm":n;return ir()(function(e){return D.a.createElement(t,A()({fullScreen:ar(r,e.width)},e))})}},Ua={entering:{transform:"scale(1)"},entered:{transform:"scale(1)"}},Ha={enter:Dt.b.enteringScreen,exit:Dt.b.leavingScreen},$a=D.a.forwardRef(function(e,t){var n=e.children,r=e.in,o=e.onEnter,a=e.onExit,i=e.style,l=e.theme,s=e.timeout,c=void 0===s?Ha:s,u=I()(e,["children","in","onEnter","onExit","style","theme","timeout"]),d=Object(St.c)(n.ref,t);return D.a.createElement(_t.a,A()({appear:!0,in:r,onEnter:function(e){Object(zt.b)(e);var t=Object(zt.a)({style:i,timeout:c},{mode:"enter"});e.style.webkitTransition=l.transitions.create("transform",t),e.style.transition=l.transitions.create("transform",t),o&&o(e)},onExit:function(e){var t=Object(zt.a)({style:i,timeout:c},{mode:"exit"});e.style.webkitTransition=l.transitions.create("transform",t),e.style.transition=l.transitions.create("transform",t),a&&a(e)},timeout:c},u),function(e,t){return D.a.cloneElement(n,A()({style:A()({transform:"scale(0)",visibility:"exited"!==e||r?void 0:"hidden"},Ua[e],i,n.props.style),ref:d},t))})}),Va=Object(R.a)($a);n.d(t,"colors",function(){return r}),n.d(t,"createMuiTheme",function(){return C.a}),n.d(t,"createStyles",function(){return S.a}),n.d(t,"makeStyles",function(){return O.a}),n.d(t,"MuiThemeProvider",function(){return T.a}),n.d(t,"styled",function(){return j.a}),n.d(t,"withStyles",function(){return P.a}),n.d(t,"withTheme",function(){return R.a}),n.d(t,"AppBar",function(){return N.a}),n.d(t,"Avatar",function(){return U}),n.d(t,"Backdrop",function(){return H.a}),n.d(t,"Badge",function(){return q}),n.d(t,"BottomNavigation",function(){return X}),n.d(t,"BottomNavigationAction",function(){return Q}),n.d(t,"Box",function(){return Ue}),n.d(t,"Breadcrumbs",function(){return Ye}),n.d(t,"Button",function(){return Qe.a}),n.d(t,"ButtonBase",function(){return G.a}),n.d(t,"Card",function(){return et}),n.d(t,"CardActionArea",function(){return nt}),n.d(t,"CardActions",function(){return ot}),n.d(t,"CardContent",function(){return it}),n.d(t,"CardHeader",function(){return st}),n.d(t,"CardMedia",function(){return dt}),n.d(t,"Checkbox",function(){return Et}),n.d(t,"Chip",function(){return Tt}),n.d(t,"CircularProgress",function(){return Rt}),n.d(t,"ClickAwayListener",function(){return It}),n.d(t,"Collapse",function(){return Bt}),n.d(t,"Container",function(){return Ut}),n.d(t,"CssBaseline",function(){return $t}),n.d(t,"Dialog",function(){return Gt}),n.d(t,"DialogActions",function(){return Qt}),n.d(t,"DialogContent",function(){return Zt}),n.d(t,"DialogContentText",function(){return tn}),n.d(t,"DialogTitle",function(){return rn}),n.d(t,"Divider",function(){return an}),n.d(t,"Drawer",function(){return ln.a}),n.d(t,"ExpansionPanel",function(){return dn}),n.d(t,"ExpansionPanelActions",function(){return pn}),n.d(t,"ExpansionPanelDetails",function(){return hn}),n.d(t,"ExpansionPanelSummary",function(){return gn}),n.d(t,"Fab",function(){return yn}),n.d(t,"Fade",function(){return qt.a}),n.d(t,"FilledInput",function(){return xn.a}),n.d(t,"FormControl",function(){return wn.a}),n.d(t,"FormControlLabel",function(){return En}),n.d(t,"FormGroup",function(){return Sn}),n.d(t,"FormHelperText",function(){return On.a}),n.d(t,"FormLabel",function(){return Tn.a}),n.d(t,"Grid",function(){return Mn}),n.d(t,"GridList",function(){return Ln}),n.d(t,"GridListTile",function(){return Fn}),n.d(t,"GridListTileBar",function(){return Wn}),n.d(t,"Grow",function(){return Un.a}),n.d(t,"Hidden",function(){return dr}),n.d(t,"Icon",function(){return pr}),n.d(t,"IconButton",function(){return pt.a}),n.d(t,"Input",function(){return mr.a}),n.d(t,"InputAdornment",function(){return gr}),n.d(t,"InputBase",function(){return br.a}),n.d(t,"InputLabel",function(){return yr.a}),n.d(t,"LinearProgress",function(){return wr}),n.d(t,"Link",function(){return Er}),n.d(t,"List",function(){return Cr.a}),n.d(t,"ListItem",function(){return Sr.a}),n.d(t,"ListItemAvatar",function(){return jr}),n.d(t,"ListItemIcon",function(){return Pr.a}),n.d(t,"ListItemSecondaryAction",function(){return Nr}),n.d(t,"ListItemText",function(){return Mr.a}),n.d(t,"ListSubheader",function(){return Lr}),n.d(t,"Menu",function(){return Ir.a}),n.d(t,"MenuItem",function(){return Dr}),n.d(t,"MenuList",function(){return zr.a}),n.d(t,"MobileStepper",function(){return Br}),n.d(t,"Modal",function(){return Vt.a}),n.d(t,"ModalManager",function(){return Wr.a}),n.d(t,"NativeSelect",function(){return Ur.a}),n.d(t,"NoSsr",function(){return Hr.a}),n.d(t,"OutlinedInput",function(){return $r.a}),n.d(t,"Paper",function(){return Je.a}),n.d(t,"Popover",function(){return Vr.a}),n.d(t,"Popper",function(){return Gr}),n.d(t,"Portal",function(){return Kr.a}),n.d(t,"Radio",function(){return oo}),n.d(t,"RadioGroup",function(){return ao}),n.d(t,"RootRef",function(){return io}),n.d(t,"Select",function(){return lo.a}),n.d(t,"Slide",function(){return so.a}),n.d(t,"Snackbar",function(){return po}),n.d(t,"SnackbarContent",function(){return uo}),n.d(t,"Step",function(){return ho}),n.d(t,"StepButton",function(){return So}),n.d(t,"StepConnector",function(){return To}),n.d(t,"StepContent",function(){return Po}),n.d(t,"StepIcon",function(){return wo}),n.d(t,"StepLabel",function(){return Eo}),n.d(t,"Stepper",function(){return Mo}),n.d(t,"SvgIcon",function(){return bo.a}),n.d(t,"SwipeableDrawer",function(){return Wo}),n.d(t,"Switch",function(){return Ho}),n.d(t,"Tab",function(){return Vo}),n.d(t,"Table",function(){return Xo}),n.d(t,"TableBody",function(){return Jo}),n.d(t,"TableCell",function(){return ea}),n.d(t,"TableFooter",function(){return ra}),n.d(t,"TableHead",function(){return ia}),n.d(t,"TablePagination",function(){return ya}),n.d(t,"TableRow",function(){return wa}),n.d(t,"TableSortLabel",function(){return Ca}),n.d(t,"Tabs",function(){return Da}),n.d(t,"TextField",function(){return za.a}),n.d(t,"Toolbar",function(){return la.a}),n.d(t,"Tooltip",function(){return Ba}),n.d(t,"Typography",function(){return He.a}),n.d(t,"withMobileDialog",function(){return Wa}),n.d(t,"withWidth",function(){return ir}),n.d(t,"Zoom",function(){return Va})},function(e,t,n){"use strict";n.d(t,"b",function(){return h});var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(77)),u=n(4),d=n(36),f=n(25),p=n(75),m=n(141),h=function(e){return{root:{position:"relative",width:"100%"},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",paddingRight:32,borderRadius:0,width:"calc(100% - 32px)",minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper}},filled:{width:"calc(100% - 44px)"},outlined:{width:"calc(100% - 46px)",borderRadius:e.shape.borderRadius},selectMenu:{width:"auto",height:"auto",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",color:e.palette.action.active,"pointer-events":"none"}}},v=s.a.createElement(m.a,null),g=s.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.IconComponent,l=void 0===a?p.a:a,u=e.input,f=void 0===u?v:u,m=e.inputProps,h=e.muiFormControl,g=(e.variant,i()(e,["children","classes","IconComponent","input","inputProps","muiFormControl","variant"])),b=Object(d.a)({props:e,muiFormControl:h,states:["variant"]});return s.a.cloneElement(f,o()({inputComponent:c.a,inputProps:o()({children:n,classes:r,IconComponent:l,variant:b.variant,type:void 0},m,f?f.props.inputProps:{}),ref:t},g))});g.muiName="Select",t.a=Object(u.a)(h,{name:"MuiNativeSelect"})(Object(f.a)(g))},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(241),f=n(244),p=(n(11),n(12)),m=n.n(p),h=n(8),v={vertical:"top",horizontal:"right"},g={vertical:"top",horizontal:"left"},b=s.a.forwardRef(function(e,t){var n=e.autoFocus,r=e.children,a=e.classes,l=e.disableAutoFocusItem,u=void 0!==l&&l,p=e.MenuListProps,b=void 0===p?{}:p,y=e.onClose,x=e.onEntering,w=e.open,k=e.PaperProps,E=void 0===k?{}:k,C=e.PopoverClasses,S=e.theme,O=e.transitionDuration,T=void 0===O?"auto":O,j=e.variant,P=void 0===j?"selectedMenu":j,R=i()(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","theme","transitionDuration","variant"]),N=void 0!==n?n:!u,M=s.a.useRef(null),A=s.a.useRef(null),L=s.a.useRef(null),I=null,_=null,D=s.a.Children.map(r,function(e,t){if(!s.a.isValidElement(e))return null;null===I&&(I=t);var n=null;return"selectedMenu"===P&&null===_&&e.props.selected&&!e.props.disabled?(_=t,n={},N&&(n.autoFocus=!0),void 0===e.props.tabIndex&&(n.tabIndex=0),n.ref=function(t){L.current=m.a.findDOMNode(t),Object(h.b)(e.ref,t)}):t===I&&(n={ref:function(t){A.current=m.a.findDOMNode(t),Object(h.b)(e.ref,t)}}),null!==n?s.a.cloneElement(e,n):e});return s.a.createElement(d.a,o()({getContentAnchorEl:function(){return L.current||A.current},classes:C,onClose:y,onEntering:function(e){M.current&&M.current.adjustStyleForScrollbar(e,S),x&&x(e)},anchorOrigin:"rtl"===S.direction?v:g,transformOrigin:"rtl"===S.direction?v:g,PaperProps:o()({},E,{classes:o()({},E.classes,{root:a.paper})}),open:w,ref:t,transitionDuration:T},R),s.a.createElement(f.a,o()({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),y&&y(e,"tabKeyDown"))},actions:M,autoFocus:N&&null===_},b,{className:Object(c.a)(a.list,b.className)}),D))});t.a=Object(u.a)({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:"none"}},{name:"MuiMenu",withTheme:!0})(b)},function(e,t,n){var r=n(206),o=function(e){return r(e)[0]};e.exports=function(e){return null==e&&(e=e),function(t,n,a,i){null==a&&(a=e),null==i&&(i=a);var l=r(t)[1];if(l===n)return t;var s=o(t);if("px"!==l)if("em"===l)s=o(t)*o(a);else if("rem"===l)s=o(t)*o(e);else{if("ex"!==l)return t;s=o(t)*o(a)*2}var c=s;if("px"!==n)if("em"===n)c=s/o(i);else if("rem"===n)c=s/o(e);else{if("ex"!==n)return t;c=s/o(i)/2}return parseFloat(c.toFixed(5))+n}}},function(e,t,n){var r=n(111),o=n(113),a=n(112);e.exports=function(e){return r(e)||o(e)||a()}},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){o=1;break}var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function c(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:u(c(e))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function p(e){return 11===e?d:10===e?f:d||f}function m(e){if(!e)return document.documentElement;for(var t=p(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===s(n,"position")?m(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i,l,s=a.commonAncestorContainer;if(e!==s&&t!==s||r.contains(o))return"BODY"===(l=(i=s).nodeName)||"HTML"!==l&&m(i.firstElementChild)!==i?m(s):s;var c=h(e);return c.host?v(c.host,t):v(e,h(t).host)}function g(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function b(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],p(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function x(e){var t=e.body,n=e.documentElement,r=p(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},k=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function S(e){return C({},e,{right:e.left+e.width,bottom:e.top+e.height})}function O(e){var t={};try{if(p(10)){t=e.getBoundingClientRect();var n=g(e,"top"),r=g(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?x(e.ownerDocument):{},i=a.width||e.clientWidth||o.right-o.left,l=a.height||e.clientHeight||o.bottom-o.top,c=e.offsetWidth-i,u=e.offsetHeight-l;if(c||u){var d=s(e);c-=b(d,"x"),u-=b(d,"y"),o.width-=c,o.height-=u}return S(o)}function T(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=p(10),o="HTML"===t.nodeName,a=O(e),i=O(t),l=u(e),c=s(t),d=parseFloat(c.borderTopWidth,10),f=parseFloat(c.borderLeftWidth,10);n&&o&&(i.top=Math.max(i.top,0),i.left=Math.max(i.left,0));var m=S({top:a.top-i.top-d,left:a.left-i.left-f,width:a.width,height:a.height});if(m.marginTop=0,m.marginLeft=0,!r&&o){var h=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);m.top-=d-h,m.bottom-=d-h,m.left-=f-v,m.right-=f-v,m.marginTop=h,m.marginLeft=v}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(m=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=g(t,"top"),o=g(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}(m,t)),m}function j(e){if(!e||!e.parentElement||p())return document.documentElement;for(var t=e.parentElement;t&&"none"===s(t,"transform");)t=t.parentElement;return t||document.documentElement}function P(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?j(e):v(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=T(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),i=t?0:g(n),l=t?0:g(n,"left");return S({top:i-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:a})}(i,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=u(c(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var d=T(l,i,o);if("HTML"!==l.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===s(t,"position"))return!0;var r=c(t);return!!r&&e(r)}(i))a=d;else{var f=x(e.ownerDocument),p=f.height,m=f.width;a.top+=d.top-d.marginTop,a.bottom=p+d.top,a.left+=d.left-d.marginLeft,a.right=m+d.left}}var h="number"==typeof(n=n||0);return a.left+=h?n:n.left||0,a.top+=h?n:n.top||0,a.right-=h?n:n.right||0,a.bottom-=h?n:n.bottom||0,a}function R(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=P(n,r,a,o),l={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},s=Object.keys(l).map(function(e){return C({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),c=s.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),u=c.length>0?c[0].key:s[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function N(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return T(n,r?j(t):v(t,n),r)}function M(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function A(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function L(e,t,n){n=n.split("-")[0];var r=M(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),i=a?"top":"left",l=a?"left":"top",s=a?"height":"width",c=a?"width":"height";return o[i]=t[i]+t[s]/2-r[s]/2,o[l]=n===l?t[l]-r[c]:t[A(l)],o}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function _(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=I(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&l(n)&&(t.offsets.popper=S(t.offsets.popper),t.offsets.reference=S(t.offsets.reference),t=n(t,e))}),t}function D(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function z(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],a=o?""+o+n:e;if(void 0!==document.body.style[a])return a}return null}function F(e){var t=e.ownerDocument;return t?t.defaultView:window}function B(e,t,n,r){n.updateBound=r,F(e).addEventListener("resize",n.updateBound,{passive:!0});var o=u(e);return function e(t,n,r,o){var a="BODY"===t.nodeName,i=a?t.ownerDocument.defaultView:t;i.addEventListener(n,r,{passive:!0}),a||e(u(i.parentNode),n,r,o),o.push(i)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function W(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,F(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function H(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(r="px"),e.style[n]=t[n]+r})}var $=n&&/Firefox/i.test(navigator.userAgent);function V(e,t,n){var r=I(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var a="`"+t+"`",i="`"+n+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],K=q.slice(3);function X(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=K.indexOf(e),r=K.slice(n+1).concat(K.slice(0,n));return t?r.reverse():r}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Y(e,t,n,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=i.indexOf(I(i,function(e){return-1!==e.search(/,|\s/)}));i[l]&&-1===i[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,c=-1!==l?[i.slice(0,l).concat([i[l].split(s)[0]]),[i[l].split(s)[1]].concat(i.slice(l+1))]:[i];return(c=c.map(function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var l=void 0;switch(i){case"%p":l=n;break;case"%":case"%r":default:l=r}return S(l)[t]/100*a}if("vh"===i||"vw"===i)return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){U(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,l=-1!==["bottom","top"].indexOf(n),s=l?"left":"top",c=l?"width":"height",u={start:E({},s,a[s]),end:E({},s,a[s]+a[c]-i[c])};e.offsets.popper=C({},i,u[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,l=r.split("-")[0],s=void 0;return s=U(+n)?[+n,0]:Y(n,a,i,l),"left"===l?(a.top+=s[0],a.left-=s[1]):"right"===l?(a.top+=s[0],a.left+=s[1]):"top"===l?(a.left+=s[0],a.top-=s[1]):"bottom"===l&&(a.left+=s[0],a.top+=s[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||m(e.instance.popper);e.instance.reference===n&&(n=m(n));var r=z("transform"),o=e.instance.popper.style,a=o.top,i=o.left,l=o[r];o.top="",o.left="",o[r]="";var s=P(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=a,o.left=i,o[r]=l,t.boundaries=s;var c=t.priority,u=e.offsets.popper,d={primary:function(e){var n=u[e];return u[e]<s[e]&&!t.escapeWithReference&&(n=Math.max(u[e],s[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=u[n];return u[e]>s[e]&&!t.escapeWithReference&&(r=Math.min(u[n],s[e]-("right"===e?u.width:u.height))),E({},n,r)}};return c.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=C({},u,d[t](e))}),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),l=i?"right":"bottom",s=i?"left":"top",c=i?"width":"height";return n[l]<a(r[s])&&(e.offsets.popper[s]=a(r[s])-n[c]),n[s]>a(r[l])&&(e.offsets.popper[s]=a(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,i=a.popper,l=a.reference,c=-1!==["left","right"].indexOf(o),u=c?"height":"width",d=c?"Top":"Left",f=d.toLowerCase(),p=c?"left":"top",m=c?"bottom":"right",h=M(r)[u];l[m]-h<i[f]&&(e.offsets.popper[f]-=i[f]-(l[m]-h)),l[f]+h>i[m]&&(e.offsets.popper[f]+=l[f]+h-i[m]),e.offsets.popper=S(e.offsets.popper);var v=l[f]+l[u]/2-h/2,g=s(e.instance.popper),b=parseFloat(g["margin"+d],10),y=parseFloat(g["border"+d+"Width"],10),x=v-e.offsets.popper[f]-b-y;return x=Math.max(Math.min(i[u]-h,x),0),e.arrowElement=r,e.offsets.arrow=(E(n={},f,Math.round(x)),E(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(D(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=P(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=A(r),a=e.placement.split("-")[1]||"",i=[];switch(t.behavior){case G.FLIP:i=[r,o];break;case G.CLOCKWISE:i=X(r);break;case G.COUNTERCLOCKWISE:i=X(r,!0);break;default:i=t.behavior}return i.forEach(function(l,s){if(r!==l||i.length===s+1)return e;r=e.placement.split("-")[0],o=A(r);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===r&&d(c.right)>d(u.left)||"right"===r&&d(c.left)<d(u.right)||"top"===r&&d(c.bottom)>d(u.top)||"bottom"===r&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),m=d(c.right)>d(n.right),h=d(c.top)<d(n.top),v=d(c.bottom)>d(n.bottom),g="left"===r&&p||"right"===r&&m||"top"===r&&h||"bottom"===r&&v,b=-1!==["top","bottom"].indexOf(r),y=!!t.flipVariations&&(b&&"start"===a&&p||b&&"end"===a&&m||!b&&"start"===a&&h||!b&&"end"===a&&v),x=!!t.flipVariationsByContent&&(b&&"start"===a&&m||b&&"end"===a&&p||!b&&"start"===a&&v||!b&&"end"===a&&h),w=y||x;(f||g||w)&&(e.flipped=!0,(f||g)&&(r=i[s+1]),w&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=C({},e.offsets.popper,L(e.instance.popper,e.offsets.reference,e.placement)),e=_(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[i?"left":"top"]=a[n]-(l?o[i?"width":"height"]:0),e.placement=A(t),e.offsets.popper=S(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=I(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,a=I(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:t.gpuAcceleration,l=m(e.instance.popper),s=O(l),c={position:o.position},u=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,a=Math.round,i=Math.floor,l=function(e){return e},s=a(o.width),c=a(r.width),u=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),f=t?u||d||s%2==c%2?a:i:l,p=t?a:l;return{left:f(s%2==1&&c%2==1&&!d&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:f(r.right)}}(e,window.devicePixelRatio<2||!$),d="bottom"===n?"top":"bottom",f="right"===r?"left":"right",p=z("transform"),h=void 0,v=void 0;if(v="bottom"===d?"HTML"===l.nodeName?-l.clientHeight+u.bottom:-s.height+u.bottom:u.top,h="right"===f?"HTML"===l.nodeName?-l.clientWidth+u.right:-s.width+u.right:u.left,i&&p)c[p]="translate3d("+h+"px, "+v+"px, 0)",c[d]=0,c[f]=0,c.willChange="transform";else{var g="bottom"===d?-1:1,b="right"===f?-1:1;c[d]=v*g,c[f]=h*b,c.willChange=d+", "+f}var y={"x-placement":e.placement};return e.attributes=C({},y,e.attributes),e.styles=C({},c,e.styles),e.arrowStyles=C({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return H(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&H(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var a=N(o,t,e,n.positionFixed),i=R(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",i),H(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=C({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(C({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=C({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return C({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return k(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=N(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=R(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=L(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=_(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,D(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[z("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=B(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=q,J.Defaults=Q,t.a=J}).call(this,n(87))},function(e,t,n){"use strict";var r=n(19),o=n.n(r),a=n(20),i=n.n(a),l=n(79),s=n(21),c=n(78);function u(e){var t=Object(s.a)(e),n=Object(c.a)(t);return t.body===e?n.innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}var d=n(45);function f(e,t){var n=-1;return e.some(function(e,r){return!!t(e)&&(n=r,!0)}),n}function p(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}var m=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o()(this,e);var n=t.hideSiblingNodes,r=void 0===n||n,a=t.handleContainerOverflow,i=void 0===a||a;this.hideSiblingNodes=r,this.handleContainerOverflow=i,this.modals=[],this.data=[]}return i()(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Object(d.a)(e.modalRef,!1),this.hideSiblingNodes&&Object(d.b)(t,e.mountNode,e.modalRef,!0);var r=f(this.data,function(e){return e.container===t});if(-1!==r)return this.data[r].modals.push(e),n;var o={modals:[e],container:t,overflowing:u(t),prevPaddings:[]};return this.data.push(o),n}},{key:"mount",value:function(e){var t=f(this.data,function(t){return-1!==t.modals.indexOf(e)}),n=this.data[t];!n.style&&this.handleContainerOverflow&&function(e){e.style={overflow:e.container.style.overflow,paddingRight:e.container.style.paddingRight};var t={overflow:"hidden"};if(e.overflowing){var n=Object(l.a)();t.paddingRight="".concat(p(e.container)+n,"px");for(var r=Object(s.a)(e.container).querySelectorAll(".mui-fixed"),o=0;o<r.length;o+=1){var a=p(r[o]);e.prevPaddings.push(a),r[o].style.paddingRight="".concat(a+n,"px")}}Object.keys(t).forEach(function(n){e.container.style[n]=t[n]})}(n)}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=f(this.data,function(t){return-1!==t.modals.indexOf(e)}),r=this.data[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)this.handleContainerOverflow&&function(e){e.style&&Object.keys(e.style).forEach(function(t){e.container.style[t]=e.style[t]});for(var t=Object(s.a)(e.container).querySelectorAll(".mui-fixed"),n=0;n<t.length;n+=1)t[n].style.paddingRight="".concat(e.prevPaddings[n],"px")}(r),e.modalRef&&Object(d.a)(e.modalRef,!0),this.hideSiblingNodes&&Object(d.b)(r.container,e.mountNode,e.modalRef,!1),this.data.splice(n,1);else if(this.hideSiblingNodes){var o=r.modals[r.modals.length-1];o.modalRef&&Object(d.a)(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e}}]),e}();t.a=m},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(144),d=n(4),f=s.a.forwardRef(function(e,t){var n=e.disableUnderline,r=e.classes,a=e.fullWidth,l=void 0!==a&&a,d=e.inputComponent,f=void 0===d?"input":d,p=e.multiline,m=void 0!==p&&p,h=e.type,v=void 0===h?"text":h,g=i()(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return s.a.createElement(u.a,o()({classes:o()({},r,{root:Object(c.a)(r.root,!n&&r.underline),underline:null}),fullWidth:l,inputComponent:f,multiline:m,ref:t,type:v},g))});f.muiName="Input",t.a=Object(d.a)(function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(n)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}},{name:"MuiInput"})(f)},function(e,t,n){"use strict";var r=n(22),o=Date.now(),a="fnValues"+o,i="fnStyle"+ ++o;var l=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var o=Object(r.d)(e,{},n);return o[i]=t,o},onProcessStyle:function(e,t){if(a in t||i in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[a]=n,e},onUpdate:function(e,t,n,r){var o=t,l=o[i];l&&(o.style=l(e));var s=o[a];if(s)for(var c in s)o.prop(c,s[c](e),r)}}},s=n(18),c="@global",u="@global ",d=function(){function e(e,t,n){for(var o in this.type="global",this.at=c,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new r.a(Object(s.a)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),f=function(){function e(e,t,n){this.type="global",this.at=c,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(u.length);this.rule=n.jss.createRule(r,t,Object(s.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),p=/\s*,\s*/g;function m(e,t){for(var n=e.split(p),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var h=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===c)return new d(e,t,n);if("@"===e[0]&&e.substr(0,u.length)===u)return new f(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,r=n?n[c]:null;if(r){for(var o in r)t.sheet.addRule(o,r[o],Object(s.a)({},t,{selector:m(o,e.selector)}));delete n[c]}}(e),function(e){var t=e.options,n=e.style;for(var r in n)if("@"===r[0]&&r.substr(0,c.length)===c){var o=m(r.substr(c.length),e.selector);t.sheet.addRule(o,n[r],Object(s.a)({},t,{selector:o})),delete n[r]}}(e))}}},v=/\s*,\s*/g,g=/&/g,b=/\$([\w-]+)/g;var y=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(v),r=e.split(v),o="",a=0;a<n.length;a++)for(var i=n[a],l=0;l<r.length;l++){var s=r[l];o&&(o+=", "),o+=-1!==s.indexOf("&")?s.replace(g,i):i+" "+s}return o}function n(e,t,n){if(n)return Object(s.a)({},n,{index:n.index+1});var r=e.options.nestingLevel;return r=void 0===r?1:r+1,Object(s.a)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1})}return{onProcessStyle:function(r,o,a){if("style"!==o.type)return r;var i,l,c=o,u=c.options.parent;for(var d in r){var f=-1!==d.indexOf("&"),p="@"===d[0];if(f||p){if(i=n(c,u,i),f){var m=t(d,c.selector);l||(l=e(u,a)),m=m.replace(b,l),u.addRule(m,r[d],Object(s.a)({},i,{selector:m}))}else p&&u.addRule(d,{},i).addRule(c.key,r[d],{selector:c.selector});delete r[d]}}return r}}},x=/[A-Z]/g,w=/^ms-/,k={};function E(e){return"-"+e.toLowerCase()}var C=function(e){if(k.hasOwnProperty(e))return k[e];var t=e.replace(x,E);return k[e]=w.test(t)?"-"+t:t};function S(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:C(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(S):t.fallbacks=S(e.fallbacks)),t}var O=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=S(e[t]);return e}return S(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=C(t);return t===r?e:(n.prop(r,e),null)}}},T=r.f?window.CSS.px:"px",j=r.f?window.CSS.ms:"ms",P=r.f?window.CSS.percent:"%";function R(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var N=R({"animation-delay":j,"animation-duration":j,"background-position":T,"background-position-x":T,"background-position-y":T,"background-size":T,border:T,"border-bottom":T,"border-bottom-left-radius":T,"border-bottom-right-radius":T,"border-bottom-width":T,"border-left":T,"border-left-width":T,"border-radius":T,"border-right":T,"border-right-width":T,"border-top":T,"border-top-left-radius":T,"border-top-right-radius":T,"border-top-width":T,"border-width":T,margin:T,"margin-bottom":T,"margin-left":T,"margin-right":T,"margin-top":T,padding:T,"padding-bottom":T,"padding-left":T,"padding-right":T,"padding-top":T,"mask-position-x":T,"mask-position-y":T,"mask-size":T,height:T,width:T,"min-height":T,"max-height":T,"min-width":T,"max-width":T,bottom:T,left:T,top:T,right:T,"box-shadow":T,"text-shadow":T,"column-gap":T,"column-rule":T,"column-rule-width":T,"column-width":T,"font-size":T,"font-size-delta":T,"letter-spacing":T,"text-indent":T,"text-stroke":T,"text-stroke-width":T,"word-spacing":T,motion:T,"motion-offset":T,outline:T,"outline-offset":T,"outline-width":T,perspective:T,"perspective-origin-x":P,"perspective-origin-y":P,"transform-origin":P,"transform-origin-x":P,"transform-origin-y":P,"transform-origin-z":P,"transition-delay":j,"transition-duration":j,"vertical-align":T,"flex-basis":T,"shape-margin":T,size:T,grid:T,"grid-gap":T,"grid-row-gap":T,"grid-column-gap":T,"grid-template-rows":T,"grid-template-columns":T,"grid-auto-rows":T,"grid-auto-columns":T,"box-shadow-x":T,"box-shadow-y":T,"box-shadow-blur":T,"box-shadow-spread":T,"font-line-height":T,"text-shadow-x":T,"text-shadow-y":T,"text-shadow-blur":T});function M(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=M(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=M(o,t[o],n);else for(var a in t)t[a]=M(e+"-"+a,t[a],n);else if("number"==typeof t)return n[e]?""+t+n[e]:N[e]?"function"==typeof N[e]?N[e](t).toString():""+t+N[e]:t.toString();return t}var A=function(e){void 0===e&&(e={});var t=R(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=M(r,e[r],t);return e},onChangeValue:function(e,n){return M(n,e,t)}}},L=n(60);function I(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var _="",D="",z="",F="";if(L.a){var B={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},W=document.createElement("p").style;for(var U in B)if(U+"Transform"in W){_=U,D=B[U];break}"Webkit"===_&&"msHyphens"in W&&(_="ms",D=B.ms,F="edge"),"Webkit"===_&&"-apple-trailing-word"in W&&(z="apple")}var H={js:_,css:D,vendor:z,browser:F};var $={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===H.js?"-webkit-"+e:H.css+e)}},V=/[-\s]+(.)?/g;function q(e,t){return t?t.toUpperCase():""}function K(e){return e.replace(V,q)}function X(e){return K("-"+e)}var G,Y={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===H.js?"WebkitColumn"+X(e)in t&&H.css+"column-"+e:"Moz"===H.js&&("page"+X(e)in t&&"page-"+e))}},Q={noPrefill:["text-decoration-skip-ink"],supportedProperty:function(e){return"text-decoration-skip-ink"===e&&("apple"===H.vendor?""+H.css+e:"Webkit"===H.js||"Moz"===H.js?e:H.css+e)}},J={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===H.js?H.css+"print-"+e:e)}},Z={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},ee=Object.keys(Z),te=function(e){return H.css+e},ne={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},re=[$,{noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:H.css+e)}},{noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:H.css+e)}},{noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===H.js){if(K("mask-image")in t)return e;if(H.js+X("mask-image")in t)return H.css+e}return e}},{noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===H.js||"ms"===H.js?H.css+e:e)}},J,Q,Y,{supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===H.js)return e;var n=e.replace("-inline","");return H.js+X(n)in t&&H.css+n}},{supportedProperty:function(e,t){return K(e)in t&&e}},{supportedProperty:function(e,t){var n=X(e);return H.js+n in t?H.css+e:"Webkit"!==H.js&&"Webkit"+n in t&&"-webkit-"+e}},{supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===H.js?""+H.css+e:e)}},{supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===H.js?H.css+"scroll-chaining":e)}},{supportedProperty:function(e,t){var n=ne[e];return!!n&&(H.js+X(n)in t&&H.css+n)}},{supportedProperty:function(e,t,n){var r=n.multiple;if(ee.indexOf(e)>-1){var o=Z[e];if(!Array.isArray(o))return H.js+X(o)in t&&H.css+o;if(!r)return!1;for(var a=0;a<o.length;a++)if(!(H.js+X(o[0])in t))return!1;return o.map(te)}return!1}}],oe=re.filter(function(e){return e.supportedProperty}).map(function(e){return e.supportedProperty}),ae=re.filter(function(e){return e.noPrefill}).reduce(function(e,t){return e.push.apply(e,I(t.noPrefill)),e},[]),ie={};if(L.a){G=document.createElement("p");var le=window.getComputedStyle(document.documentElement,"");for(var se in le)isNaN(se)||(ie[le[se]]=le[se]);ae.forEach(function(e){return delete ie[e]})}function ce(e,t){if(void 0===t&&(t={}),!G)return e;if(null!=ie[e])return ie[e];"transition"!==e&&"transform"!==e||(t[e]=e in G.style);for(var n=0;n<oe.length&&(ie[e]=oe[n](e,G.style,t),!ie[e]);n++);try{G.style[e]=""}catch(e){return!1}return ie[e]}var ue,de={},fe={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},pe=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function me(e,t,n){return"all"===t?"all":"all"===n?", all":t?ce(t):", "+ce(n)}function he(e,t){var n=t;if(!ue)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=de[r])return de[r];try{ue.style[e]=n}catch(e){return de[r]=!1,!1}if(fe[e])n=n.replace(pe,me);else if(""===ue.style[e]&&("-ms-flex"===(n=H.css+n)&&(ue.style[e]="-ms-flexbox"),ue.style[e]=n,""===ue.style[e]))return de[r]=!1,!1;return ue.style[e]="",de[r]=n,de[r]}
/**
 * CSS Vendor prefix detection and property feature testing.
 *
 * @copyright Oleg Slobodskoi 2015
 * @website https://github.com/jsstyles/css-vendor
 * @license MIT
 */L.a&&(ue=document.createElement("p"));var ve=function(){return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]?n:"ms"===H.js?n:"@"+H.css+"keyframes"+n.substr(10)}var n},onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n in e){var o=e[n],a=!1,i=ce(n);i&&i!==n&&(a=!0);var l=!1,s=he(i,Object(r.g)(o));s&&s!==o&&(l=!0),(a||l)&&(a&&delete e[n],e[i||n]=s||o)}return e},onChangeValue:function(e,t){return he(t,Object(r.g)(e))||e}}};var ge=function(){function e(e,t){return e.length-t.length}return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),a=0;a<o.length;a++)r[o[a]]=t[o[a]];return r}}};t.a=function(){return{plugins:[l(),h(),y(),O(),A(),"undefined"==typeof window?null:ve(),ge()]}}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(19),s=n.n(l),c=n(20),u=n.n(c),d=n(27),f=n.n(d),p=n(28),m=n.n(p),h=n(42),v=n.n(h),g=n(29),b=n.n(g),y=n(0),x=n.n(y),w=n(12),k=n.n(w),E=(n(5),n(21)),C=n(332),S=n(6),O=n(8),T=n(44),j=n(242),P=n(74),R=n(140);n(11);var N=function(e){var t=e.children,n=e.disableAutoFocus,r=void 0!==n&&n,o=e.disableEnforceFocus,a=void 0!==o&&o,i=e.disableRestoreFocus,l=void 0!==i&&i,s=e.getDoc,c=e.isEnabled,u=e.open,d=x.a.useRef(),f=x.a.useRef(null),p=x.a.useRef(null),m=x.a.useRef(),h=x.a.useRef(null),v=x.a.useCallback(function(e){h.current=k.a.findDOMNode(e)},[]),g=Object(O.c)(t.ref,v);return x.a.useMemo(function(){u&&(m.current=s().activeElement)},[u]),x.a.useEffect(function(){if(u){var e=Object(E.a)(h.current);r||!h.current||h.current.contains(e.activeElement)||(h.current.hasAttribute("tabIndex")||h.current.setAttribute("tabIndex",-1),h.current.focus());var t=function(){a||!c()||d.current?d.current=!1:h.current&&!h.current.contains(e.activeElement)&&h.current.focus()},n=function(t){!a&&c()&&9===t.keyCode&&e.activeElement===h.current&&(d.current=!0,t.shiftKey?p.current.focus():f.current.focus())};return e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0),function(){e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),l||(m.current.focus&&m.current.focus(),m.current=null)}}},[r,a,l,c,u]),x.a.createElement(x.a.Fragment,null,x.a.createElement("div",{tabIndex:0,ref:f,"data-test":"sentinelStart"}),x.a.cloneElement(t,{ref:g}),x.a.createElement("div",{tabIndex:0,ref:p,"data-test":"sentinelEnd"}))},M={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",touchAction:"none"},invisible:{backgroundColor:"transparent"}},A=x.a.forwardRef(function(e,t){var n=e.invisible,r=e.open,a=i()(e,["invisible","open"]);return r?x.a.createElement("div",o()({"aria-hidden":!0,ref:t},a,{style:o()({},M.root,n?M.invisible:{},a.style)})):null});A.defaultProps={invisible:!1};var L=A,I=n(45);function _(e){return!!e.children&&e.children.props.hasOwnProperty("in")}var D=function(e){function t(e){var n;return s()(this,t),(n=f()(this,m()(t).call(this))).handleOpen=function(){var e=function(e){return e="function"==typeof e?e():e,k.a.findDOMNode(e)}(n.props.container)||n.getDoc().body;n.props.manager.add(v()(n),e),n.modalRef&&n.handleOpened()},n.handleRendered=function(){n.props.onRendered&&n.props.onRendered(),n.props.open?n.handleOpened():Object(I.a)(n.modalRef,!0)},n.handleOpened=function(){n.props.manager.mount(v()(n)),n.modalRef.scrollTop=0},n.handleClose=function(e){_(n.props)&&n.props.closeAfterTransition&&"unmount"!==e||n.props.manager.remove(v()(n))},n.handleEnter=function(){n.setState({exited:!1})},n.handleExited=function(){n.props.closeAfterTransition&&n.props.manager.remove(v()(n)),n.setState({exited:!0})},n.handleBackdropClick=function(e){e.target===e.currentTarget&&(n.props.onBackdropClick&&n.props.onBackdropClick(e),!n.props.disableBackdropClick&&n.props.onClose&&n.props.onClose(e,"backdropClick"))},n.handleKeyDown=function(e){"Escape"===e.key&&n.isTopModal()&&(e.stopPropagation(),n.props.onEscapeKeyDown&&n.props.onEscapeKeyDown(e),!n.props.disableEscapeKeyDown&&n.props.onClose&&n.props.onClose(e,"escapeKeyDown"))},n.handlePortalRef=function(e){n.mountNode=e},n.handleModalRef=function(e){n.modalRef=e,Object(O.b)(n.props.innerRef,e)},n.isTopModal=function(){return n.props.manager.isTopModal(v()(n))},n.getDoc=function(){return Object(E.a)(n.mountNode)},n.state={exited:!e.open},n}return b()(t,e),u()(t,[{key:"componentDidMount",value:function(){this.props.open&&this.handleOpen()}},{key:"componentDidUpdate",value:function(e){e.open&&!this.props.open?this.handleClose():!e.open&&this.props.open&&this.handleOpen()}},{key:"componentWillUnmount",value:function(){(this.props.open||_(this.props)&&!this.state.exited)&&this.handleClose("unmount")}},{key:"render",value:function(){var e=this.props,t=e.BackdropComponent,n=e.BackdropProps,r=e.children,a=(e.closeAfterTransition,e.container),l=e.disableAutoFocus,s=(e.disableBackdropClick,e.disableEnforceFocus),c=(e.disableEscapeKeyDown,e.disablePortal),u=e.disableRestoreFocus,d=e.hideBackdrop,f=(e.innerRef,e.keepMounted),p=(e.manager,e.onBackdropClick,e.onClose,e.onEscapeKeyDown,e.onRendered,e.open),m=e.theme,h=i()(e,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","hideBackdrop","innerRef","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open","theme"]),v=this.state.exited,g=_(this.props);if(!f&&!p&&(!g||v))return null;var b={};g&&(b.onEnter=Object(S.b)(this.handleEnter,r.props.onEnter),b.onExited=Object(S.b)(this.handleExited,r.props.onExited)),void 0===r.props.role&&(b.role=r.props.role||"document"),void 0===r.props.tabIndex&&(b.tabIndex=r.props.tabIndex||"-1");var y=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(m||{zIndex:P.a});return x.a.createElement(C.a,{ref:this.handlePortalRef,container:a,disablePortal:c,onRendered:this.handleRendered},x.a.createElement("div",o()({ref:this.handleModalRef,onKeyDown:this.handleKeyDown,role:"presentation"},h,{style:o()({},y.root,!p&&v?y.hidden:{},h.style)}),d?null:x.a.createElement(t,o()({open:p,onClick:this.handleBackdropClick},n)),x.a.createElement(N,{disableEnforceFocus:s,disableAutoFocus:l,disableRestoreFocus:u,getDoc:this.getDoc,isEnabled:this.isTopModal,open:p},x.a.cloneElement(r,b))))}}]),t}(x.a.Component);D.defaultProps={BackdropComponent:L,closeAfterTransition:!1,disableAutoFocus:!1,disableBackdropClick:!1,disableEnforceFocus:!1,disableEscapeKeyDown:!1,disablePortal:!1,disableRestoreFocus:!1,hideBackdrop:!1,keepMounted:!1,manager:new R.a};t.a=Object(j.a)(Object(T.a)(D))},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(10),i=n.n(a),l=n(2),s=n.n(l),c=n(0),u=n.n(c),d=(n(5),n(11),n(3)),f=n(36),p=n(43),m=n(4),h=n(8),v=n(30),g=n.n(v);function b(e,t){return parseInt(e[t],10)||0}var y="undefined"!=typeof window?u.a.useLayoutEffect:u.a.useEffect,x={visibility:"hidden",position:"absolute",overflow:"hidden",height:"0"},w=u.a.forwardRef(function(e,t){var n=e.onChange,r=e.rows,a=e.rowsMax,l=e.style,c=e.value,d=s()(e,["onChange","rows","rowsMax","style","value"]),f=u.a.useRef(null!=c).current,p=u.a.useRef(null),m=u.a.useState({}),v=i()(m,2),w=v[0],k=v[1],E=u.a.useRef(null),C=Object(h.c)(t,p),S=u.a.useCallback(function(){var t=p.current,n=E.current,o=window.getComputedStyle(t);n.style.width=o.width,n.value=t.value||e.placeholder||"x";var i=n.scrollHeight,l=o["box-sizing"];n.value="x";var s=n.scrollHeight,c=i;null!=r&&(c=Math.max(Number(r)*s,c)),null!=a&&(c=Math.min(Number(a)*s,c)),c=Math.max(c,s),"content-box"===l?c-=b(o,"padding-bottom")+b(o,"padding-top"):"border-box"===l&&(c+=b(o,"border-bottom-width")+b(o,"border-top-width")),k(function(e){return i>0&&Math.abs((e.innerHeight||0)-i)>1?{innerHeight:i,outerHeight:c}:e})},[k,r,a,e.placeholder]);u.a.useEffect(function(){var e=g()(function(){S()},166);return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[S]),y(function(){S()});return u.a.createElement(u.a.Fragment,null,u.a.createElement("textarea",o()({value:c,onChange:function(e){f||S(),n&&n(e)},ref:C,style:o()({height:w.outerHeight,overflow:w.outerHeight===w.innerHeight?"hidden":null},l)},d)),u.a.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:E,tabIndex:-1,style:o()({},x,l)}))}),k=n(50),E=u.a.forwardRef(function(e,t){var n=e["aria-describedby"],r=e.autoComplete,a=e.autoFocus,l=e.classes,c=e.className,m=e.defaultValue,v=e.disabled,g=e.endAdornment,b=(e.error,e.fullWidth),y=void 0!==b&&b,x=e.id,E=e.inputComponent,C=void 0===E?"input":E,S=e.inputProps,O=(S=void 0===S?{}:S).className,T=s()(S,["className"]),j=e.inputRef,P=(e.margin,e.multiline),R=void 0!==P&&P,N=e.name,M=e.onBlur,A=e.onChange,L=e.onClick,I=e.onEmpty,_=e.onFilled,D=e.onFocus,z=e.onKeyDown,F=e.onKeyUp,B=e.placeholder,W=e.readOnly,U=e.renderPrefix,H=e.rows,$=e.rowsMax,V=e.startAdornment,q=e.type,K=void 0===q?"text":q,X=e.value,G=s()(e,["aria-describedby","autoComplete","autoFocus","classes","className","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onEmpty","onFilled","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderPrefix","rows","rowsMax","startAdornment","type","value"]),Y=u.a.useRef(null!=X).current,Q=u.a.useRef(),J=u.a.useCallback(function(e){},[]),Z=Object(h.c)(T.ref,J),ee=Object(h.c)(j,Z),te=Object(h.c)(Q,ee),ne=u.a.useState(!1),re=i()(ne,2),oe=re[0],ae=re[1],ie=u.a.useContext(p.a),le=Object(f.a)({props:e,muiFormControl:ie,states:["disabled","error","margin","required","filled"]});le.focused=ie?ie.focused:oe,u.a.useEffect(function(){!ie&&v&&oe&&(ae(!1),M&&M())},[ie,v,oe,M]);var se=u.a.useCallback(function(e){if(Object(k.b)(e))return ie&&ie.onFilled&&ie.onFilled(),void(_&&_());ie&&ie.onEmpty&&ie.onEmpty(),I&&I()},[ie,I,_]);u.a.useEffect(function(){Y&&se({value:X})},[X,se,Y]),u.a.useEffect(function(){Y||se(Q.current)},[se,Y]);var ce=C,ue=o()({},T,{ref:te});return"string"!=typeof ce?ue=o()({inputRef:te,type:K},ue,{ref:null}):R?H&&!$?ce="textarea":(ue=o()({rows:H,rowsMax:$},ue),ce=w):ue=o()({type:K},ue),u.a.createElement("div",o()({className:Object(d.a)(l.root,le.disabled&&l.disabled,le.error&&l.error,y&&l.fullWidth,le.focused&&l.focused,ie&&l.formControl,"dense"===le.margin&&l.marginDense,R&&l.multiline,V&&l.adornedStart,g&&l.adornedEnd,c),onClick:function(e){Q.current&&e.currentTarget===e.target&&Q.current.focus(),L&&L(e)},ref:t},G),U?U(o()({},le,{startAdornment:V})):null,V,u.a.createElement(p.a.Provider,{value:null},u.a.createElement(ce,o()({"aria-invalid":le.error,"aria-describedby":n,autoComplete:r,autoFocus:a,className:Object(d.a)(l.input,le.disabled&&l.disabled,"search"===K&&l.inputTypeSearch,R&&l.inputMultiline,"dense"===le.margin&&l.inputMarginDense,V&&l.inputAdornedStart,g&&l.inputAdornedEnd,O),defaultValue:m,disabled:le.disabled,id:x,name:N,onBlur:function(e){M&&M(e),ie&&ie.onBlur?ie.onBlur(e):ae(!1)},onChange:function(e){if(Y||se({value:(e.target||Q.current).value}),A){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];A.apply(void 0,[e].concat(n))}},onFocus:function(e){le.disabled?e.stopPropagation():(D&&D(e),ie&&ie.onFocus?ie.onFocus(e):ae(!0))},onKeyDown:z,onKeyUp:F,placeholder:B,readOnly:W,required:le.required,rows:H,value:X},ue))),g)});t.a=Object(m.a)(function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},o={opacity:t?.42:.5};return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.primary,fontSize:e.typography.pxToRem(16),lineHeight:"1.1875em",boxSizing:"border-box",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}},formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px")},fullWidth:{width:"100%"},input:{font:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1875em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{}}},{name:"MuiInputBase"})(E)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(12),a=n(173);o.render(r.createElement(a.App,null),document.getElementById("app-root"))},,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(109),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,m=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,a,i,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,l],c=0;(e=Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function w(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||y}function k(){}function E(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=w.prototype;var C=E.prototype=new k;C.constructor=E,r(C,w.prototype),C.isPureReactComponent=!0;var S={current:null},O={current:null},T=Object.prototype.hasOwnProperty,j={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)T.call(t,r)&&!j.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:O.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var N=/\/+/g,M=[];function A(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case a:case i:s=!0}}if(s)return r(o,t,""===n?"."+_(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=n+_(l=t[c],c);s+=e(l,u,r,o)}else if(u=null===t||"object"!=typeof t?null:"function"==typeof(u=g&&t[g]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),c=0;!(l=t.next()).done;)s+=e(l=l.value,u=n+_(l,c++),r,o);else"object"===l&&b("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(R(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(N,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(N,"$&/")+"/"),I(e,z,t=A(t,a,r,o)),L(t)}function B(){var e=S.current;return null===e&&b("321"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,D,t=A(null,null,t,n)),L(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return R(e)||b("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return B().useCallback(e,t)},useContext:function(e,t){return B().useContext(e,t)},useEffect:function(e,t){return B().useEffect(e,t)},useImperativeHandle:function(e,t,n){return B().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return B().useLayoutEffect(e,t)},useMemo:function(e,t){return B().useMemo(e,t)},useReducer:function(e,t,n){return B().useReducer(e,t,n)},useRef:function(e){return B().useRef(e)},useState:function(e){return B().useState(e)},Fragment:l,StrictMode:s,Suspense:m,createElement:P,cloneElement:function(e,t,n){null==e&&b("267",e);var o=void 0,i=r({},e.props),l=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=O.current),void 0!==t.key&&(l=""+t.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)T.call(t,o)&&!j.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==u?u[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){u=Array(o);for(var d=0;d<o;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:a,type:e.type,key:l,ref:s,props:i,_owner:c}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.8.6",unstable_ConcurrentMode:f,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentOwner:O,assign:r}},U={default:W},H=U&&W||U;e.exports=H.default||H},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(109),a=n(171);function i(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,a,i,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,l],c=0;(e=Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||i("227");var l=!1,s=null,c=!1,u=null,d={onError:function(e){l=!0,s=e}};function f(e,t,n,r,o,a,i,c,u){l=!1,s=null,function(e,t,n,r,o,a,i,l,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(d,arguments)}var p=null,m={};function h(){if(p)for(var e in m){var t=m[e],n=p.indexOf(e);if(-1<n||i("96",e),!g[n])for(var r in t.extractEvents||i("97",e),g[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,s=r;b.hasOwnProperty(s)&&i("99",s),b[s]=a;var c=a.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&v(c[o],l,s);o=!0}else a.registrationName?(v(a.registrationName,l,s),o=!0):o=!1;o||i("98",r,e)}}}function v(e,t,n){y[e]&&i("100",e),y[e]=t,x[e]=t.eventTypes[n].dependencies}var g=[],b={},y={},x={},w=null,k=null,E=null;function C(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,a,d,p,m){if(f.apply(this,arguments),l){if(l){var h=s;l=!1,s=null}else i("198"),h=void 0;c||(c=!0,u=h)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&i("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function O(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var T=null;function j(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)C(e,t[r],n[r]);else t&&C(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var P={injectEventPluginOrder:function(e){p&&i("101"),p=Array.prototype.slice.call(e),h()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&i("102",t),m[t]=r,n=!0)}n&&h()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&i("231",t,typeof n),n)}function N(e){if(null!==e&&(T=S(T,e)),e=T,T=null,e&&(O(e,j),T&&i("95"),c))throw e=u,c=!1,u=null,e}var M=Math.random().toString(36).slice(2),A="__reactInternalInstance$"+M,L="__reactEventHandlers$"+M;function I(e){if(e[A])return e[A];for(;!e[A];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[A]).tag||6===e.tag?e:null}function _(e){return!(e=e[A])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;i("33")}function z(e){return e[L]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function B(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)B(n[t],"captured",e);for(t=0;t<n.length;t++)B(n[t],"bubbled",e)}}function U(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function H(e){e&&e.dispatchConfig.registrationName&&U(e._targetInst,null,e)}function $(e){O(e,W)}var V=!("undefined"==typeof window||!window.document||!window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var K={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},X={},G={};function Y(e){if(X[e])return X[e];if(!K[e])return e;var t,n=K[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return X[e]=n[t];return e}V&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete K.animationend.animation,delete K.animationiteration.animation,delete K.animationstart.animation),"TransitionEvent"in window||delete K.transitionend.transition);var Q=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ae(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ie(){return!0}function le(){return!1}function se(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ie:le,this.isPropagationStopped=le,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ue(e){e instanceof this||i("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=ce,e.release=ue}o(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),se.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},se.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,de(n),n},de(se);var fe=se.extend({data:null}),pe=se.extend({data:null}),me=[9,13,27,32],he=V&&"CompositionEvent"in window,ve=null;V&&"documentMode"in document&&(ve=document.documentMode);var ge=V&&"TextEvent"in window&&!ve,be=V&&(!he||ve&&8<ve&&11>=ve),ye=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function ke(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ce=!1;var Se={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(he)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else Ce?ke(e,n)&&(o=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(be&&"ko"!==n.locale&&(Ce||o!==xe.compositionStart?o===xe.compositionEnd&&Ce&&(a=ae()):(re="value"in(ne=r)?ne.value:ne.textContent,Ce=!0)),o=fe.getPooled(o,t,n,r),a?o.data=a:null!==(a=Ee(n))&&(o.data=a),$(o),a=o):a=null,(e=ge?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(we=!0,ye);case"textInput":return(e=t.data)===ye&&we?null:e;default:return null}}(e,n):function(e,t){if(Ce)return"compositionend"===e||!he&&ke(e,t)?(e=ae(),oe=re=ne=null,Ce=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(xe.beforeInput,t,n,r)).data=e,$(t)):t=null,null===a?t:null===t?a:[a,t]}},Oe=null,Te=null,je=null;function Pe(e){if(e=k(e)){"function"!=typeof Oe&&i("280");var t=w(e.stateNode);Oe(e.stateNode,e.type,t)}}function Re(e){Te?je?je.push(e):je=[e]:Te=e}function Ne(){if(Te){var e=Te,t=je;if(je=Te=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Me(e,t){return e(t)}function Ae(e,t,n){return e(t,n)}function Le(){}var Ie=!1;function _e(e,t){if(Ie)return e(t);Ie=!0;try{return Me(e,t)}finally{Ie=!1,(null!==Te||null!==je)&&(Le(),Ne())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Be(e){if(!V)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ue(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function He(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;$e.hasOwnProperty("ReactCurrentDispatcher")||($e.ReactCurrentDispatcher={current:null});var Ve=/^(.*)[\\\/]/,qe="function"==typeof Symbol&&Symbol.for,Ke=qe?Symbol.for("react.element"):60103,Xe=qe?Symbol.for("react.portal"):60106,Ge=qe?Symbol.for("react.fragment"):60107,Ye=qe?Symbol.for("react.strict_mode"):60108,Qe=qe?Symbol.for("react.profiler"):60114,Je=qe?Symbol.for("react.provider"):60109,Ze=qe?Symbol.for("react.context"):60110,et=qe?Symbol.for("react.concurrent_mode"):60111,tt=qe?Symbol.for("react.forward_ref"):60112,nt=qe?Symbol.for("react.suspense"):60113,rt=qe?Symbol.for("react.memo"):60115,ot=qe?Symbol.for("react.lazy"):60116,at="function"==typeof Symbol&&Symbol.iterator;function it(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=at&&e[at]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ge:return"Fragment";case Xe:return"Portal";case Qe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case ot:if(e=1===e._status?e._result:null)return lt(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=lt(e.type);n=null,r&&(n=lt(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(Ve,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ut=Object.prototype.hasOwnProperty,dt={},ft={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){mt[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){mt[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){mt[e]=new pt(e,5,!1,e.toLowerCase(),null)});var ht=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function gt(e,t,n,r){var o=mt.hasOwnProperty(t)?mt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ut.call(ft,e)||!ut.call(dt,e)&&(ct.test(e)?ft[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function yt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=bt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&gt(e,"checked",t,!1)}function kt(e,t){wt(e,t);var n=bt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ct(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ct(e,t.type,bt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ct(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(ht,vt);mt[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(ht,vt);mt[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(ht,vt);mt[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){mt[e]=new pt(e,1,!1,e.toLowerCase(),null)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ot(e,t,n){return(e=se.getPooled(St.change,e,t,n)).type="change",Re(n),$(e),e}var Tt=null,jt=null;function Pt(e){N(e)}function Rt(e){if(He(D(e)))return e}function Nt(e,t){if("change"===e)return t}var Mt=!1;function At(){Tt&&(Tt.detachEvent("onpropertychange",Lt),jt=Tt=null)}function Lt(e){"value"===e.propertyName&&Rt(jt)&&_e(Pt,e=Ot(jt,e,Fe(e)))}function It(e,t,n){"focus"===e?(At(),jt=n,(Tt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&At()}function _t(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(jt)}function Dt(e,t){if("click"===e)return Rt(t)}function zt(e,t){if("input"===e||"change"===e)return Rt(t)}V&&(Mt=Be("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:St,_isInputEventSupported:Mt,extractEvents:function(e,t,n,r){var o=t?D(t):window,a=void 0,i=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?a=Nt:ze(o)?Mt?a=zt:(a=_t,i=It):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Dt),a&&(a=a(e,t)))return Ot(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ct(o,"number",o.value)}},Bt=se.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ut(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Ht(){return Ut}var $t=0,Vt=0,qt=!1,Kt=!1,Xt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ht,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,qt?"mousemove"===e.type?e.screenX-t:0:(qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Vt;return Vt=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),Gt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qt={eventTypes:Yt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?I(t):null):a=null,a===t)return null;var i=void 0,l=void 0,s=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(i=Xt,l=Yt.mouseLeave,s=Yt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Gt,l=Yt.pointerLeave,s=Yt.pointerEnter,c="pointer");var u=null==a?o:D(a);if(o=null==t?o:D(t),(e=i.getPooled(l,a,n,r)).type=c+"leave",e.target=u,e.relatedTarget=o,(n=i.getPooled(s,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=u,r=t,a&&r)e:{for(o=r,c=0,i=t=a;i;i=F(i))c++;for(i=0,s=o;s;s=F(s))i++;for(;0<c-i;)t=F(t),c--;for(;0<i-c;)o=F(o),i--;for(;c--;){if(t===o||t===o.alternate)break e;t=F(t),o=F(o)}t=null}else t=null;for(o=t,t=[];a&&a!==o&&(null===(c=a.alternate)||c!==o);)t.push(a),a=F(a);for(a=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)a.push(r),r=F(r);for(r=0;r<t.length;r++)U(t[r],"bubbled",e);for(r=a.length;0<r--;)U(a[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&i("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&i("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var l=o.child;l;){if(l===n)return nn(o),e;if(l===r)return nn(o),t;l=l.sibling}i("188")}if(n.return!==r.return)n=o,r=a;else{l=!1;for(var s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}l||i("189")}}n.alternate!==r&&i("190")}return 3!==n.tag&&i("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Bt.extend({relatedTarget:null});function sn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},un={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn=Bt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=sn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?un[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ht,charCode:function(e){return"keypress"===e.type?sn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?sn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),fn=Xt.extend({dataTransfer:null}),pn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ht}),mn=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),hn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[Q,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],gn={},bn={};function yn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},gn[e]=t,bn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){yn(e,!0)}),vn.forEach(function(e){yn(e,!1)});var xn={eventTypes:gn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=bn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=bn[e];if(!o)return null;switch(e){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":e=dn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=fn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case Q:case J:case Z:e=on;break;case ee:e=mn;break;case"scroll":e=Bt;break;case"wheel":e=hn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Gt;break;default:e=se}return $(t=e.getPooled(o,t,n,r)),t}},wn=xn.isInteractiveTopLevelEventType,kn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=I(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=null,l=0;l<g.length;l++){var s=g[l];s&&(s=s.extractEvents(r,t,a,o))&&(i=S(i,s))}N(i)}}var Cn=!0;function Sn(e,t){if(!t)return null;var n=(wn(e)?Tn:jn).bind(null,e);t.addEventListener(e,n,!1)}function On(e,t){if(!t)return null;var n=(wn(e)?Tn:jn).bind(null,e);t.addEventListener(e,n,!0)}function Tn(e,t){Ae(jn,e,t)}function jn(e,t){if(Cn){var n=Fe(t);if(null===(n=I(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),kn.length){var r=kn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{_e(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>kn.length&&kn.push(e)}}}var Pn={},Rn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function Mn(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Rn++,Pn[e[Nn]]={}),Pn[e[Nn]]}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function _n(){for(var e=window,t=An();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=An((e=t.contentWindow).document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function zn(e){var t=_n(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=In(n,a);var i=In(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=V&&"documentMode"in document&&11>=document.documentMode,Bn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Un=null,Hn=null,$n=!1;function Vn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $n||null==Wn||Wn!==An(n)?null:("selectionStart"in(n=Wn)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hn&&en(Hn,n)?null:(Hn=n,(e=se.getPooled(Bn.select,Un,e,t)).type="select",e.target=Wn,$(e),e))}var qn={eventTypes:Bn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Mn(a),o=x.onSelect;for(var i=0;i<o.length;i++){var l=o[i];if(!a.hasOwnProperty(l)||!a[l]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?D(t):window,e){case"focus":(ze(a)||"true"===a.contentEditable)&&(Wn=a,Un=t,Hn=null);break;case"blur":Hn=Un=Wn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":case"dragend":return $n=!1,Vn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Vn(n,r)}return null}};function Kn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Xn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gn(e,t){return null!=t.dangerouslySetInnerHTML&&i("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&i("92"),Array.isArray(t)&&(1>=t.length||i("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:bt(n)}}function Qn(e,t){var n=bt(t.value),r=bt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=z,k=_,E=D,P.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:Qt,ChangeEventPlugin:Ft,SelectEventPlugin:qn,BeforeInputEventPlugin:Se});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ar(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lr=["Webkit","ms","Moz","O"];function sr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=sr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){lr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var ur=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function dr(e,t){t&&(ur[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&i("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&i("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||i("61")),null!=t.style&&"object"!=typeof t.style&&i("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=Mn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":On("scroll",e);break;case"focus":case"blur":On("focus",e),On("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Be(o)&&On(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function mr(){}var hr=null,vr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yr="function"==typeof setTimeout?setTimeout:void 0,xr="function"==typeof clearTimeout?clearTimeout:void 0,wr=a.unstable_scheduleCallback,kr=a.unstable_cancelCallback;function Er(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Cr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Sr=[],Or=-1;function Tr(e){0>Or||(e.current=Sr[Or],Sr[Or]=null,Or--)}function jr(e,t){Sr[++Or]=e.current,e.current=t}var Pr={},Rr={current:Pr},Nr={current:!1},Mr=Pr;function Ar(e,t){var n=e.type.contextTypes;if(!n)return Pr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Lr(e){return null!=(e=e.childContextTypes)}function Ir(e){Tr(Nr),Tr(Rr)}function _r(e){Tr(Nr),Tr(Rr)}function Dr(e,t,n){Rr.current!==Pr&&i("168"),jr(Rr,t),jr(Nr,n)}function zr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())a in e||i("108",lt(t)||"Unknown",a);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Pr,Mr=Rr.current,jr(Rr,t),jr(Nr,Nr.current),!0}function Br(e,t,n){var r=e.stateNode;r||i("169"),n?(t=zr(e,t,Mr),r.__reactInternalMemoizedMergedChildContext=t,Tr(Nr),Tr(Rr),jr(Rr,t)):Tr(Nr),jr(Nr,n)}var Wr=null,Ur=null;function Hr(e){return function(t){try{return e(t)}catch(e){}}}function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Vr(e,t,n,r){return new $r(e,t,n,r)}function qr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Kr(e,t){var n=e.alternate;return null===n?((n=Vr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Xr(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)qr(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ge:return Gr(n.children,o,a,t);case et:return Yr(n,3|o,a,t);case Ye:return Yr(n,2|o,a,t);case Qe:return(e=Vr(12,n,t,4|o)).elementType=Qe,e.type=Qe,e.expirationTime=a,e;case nt:return(e=Vr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case ot:l=16,r=null;break e}i("130",null==e?e:typeof e,"")}return(t=Vr(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Gr(e,t,n,r){return(e=Vr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=Vr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Qr(e,t,n){return(e=Vr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=Vr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,a=t.latestPingedTime;0===(o=0!==o?o:a)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function ao(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var io={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=kl(),o=Ya(r=Gi(r,e));o.payload=t,null!=n&&(o.callback=n),Hi(),Ja(e,o),Ji(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=kl(),o=Ya(r=Gi(r,e));o.tag=$a,o.payload=t,null!=n&&(o.callback=n),Hi(),Ja(e,o),Ji(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=kl(),r=Ya(n=Gi(n,e));r.tag=Va,null!=t&&(r.callback=t),Hi(),Ja(e,r),Ji(e,n)}};function lo(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,a))}function so(e,t,n){var r=!1,o=Pr,a=t.contextType;return"object"==typeof a&&null!==a?a=Ua(a):(o=Lr(t)?Mr:Rr.current,a=(r=null!=(r=t.contextTypes))?Ar(e,o):Pr),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=io,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&io.enqueueReplaceState(t,t.state,null)}function uo(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ua(a):(a=Lr(t)?Mr:Rr.current,o.context=Ar(e,a)),null!==(a=e.updateQueue)&&(ni(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(ao(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&io.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(ni(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&i("309"),r=n.stateNode),r||i("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&i("284"),n._owner||i("290",e)}return e}function mo(e,t){"textarea"!==e.type&&i("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kr(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Qr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Xr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Gr(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=Xr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Xe:return(t=Jr(t,e.mode,n)).return=e,t}if(fo(t)||it(t))return(t=Gr(t,e.mode,n,null)).return=e,t;mo(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===o?n.type===Ge?d(e,t,n.props.children,r,o):c(e,t,n,r):null;case Xe:return n.key===o?u(e,t,n,r):null}if(fo(n)||it(n))return null!==o?null:d(e,t,n,r,null);mo(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?d(t,e,r.props.children,o,r.key):c(t,e,r,o);case Xe:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||it(r))return d(t,e=e.get(n)||null,r,o,null);mo(t,r)}return null}function h(o,i,l,s){for(var c=null,u=null,d=i,h=i=0,v=null;null!==d&&h<l.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var g=p(o,d,l[h],s);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),i=a(g,i,h),null===u?c=g:u.sibling=g,u=g,d=v}if(h===l.length)return n(o,d),c;if(null===d){for(;h<l.length;h++)(d=f(o,l[h],s))&&(i=a(d,i,h),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);h<l.length;h++)(v=m(d,o,h,l[h],s))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),i=a(v,i,h),null===u?c=v:u.sibling=v,u=v);return e&&d.forEach(function(e){return t(o,e)}),c}function v(o,l,s,c){var u=it(s);"function"!=typeof u&&i("150"),null==(s=u.call(s))&&i("151");for(var d=u=null,h=l,v=l=0,g=null,b=s.next();null!==h&&!b.done;v++,b=s.next()){h.index>v?(g=h,h=null):g=h.sibling;var y=p(o,h,b.value,c);if(null===y){h||(h=g);break}e&&h&&null===y.alternate&&t(o,h),l=a(y,l,v),null===d?u=y:d.sibling=y,d=y,h=g}if(b.done)return n(o,h),u;if(null===h){for(;!b.done;v++,b=s.next())null!==(b=f(o,b.value,c))&&(l=a(b,l,v),null===d?u=b:d.sibling=b,d=b);return u}for(h=r(o,h);!b.done;v++,b=s.next())null!==(b=m(h,o,v,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?v:b.key),l=a(b,l,v),null===d?u=b:d.sibling=b,d=b);return e&&h.forEach(function(e){return t(o,e)}),u}return function(e,r,a,s){var c="object"==typeof a&&null!==a&&a.type===Ge&&null===a.key;c&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case Ke:e:{for(u=a.key,c=r;null!==c;){if(c.key===u){if(7===c.tag?a.type===Ge:c.elementType===a.type){n(e,c.sibling),(r=o(c,a.type===Ge?a.props.children:a.props)).ref=po(e,c,a),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}a.type===Ge?((r=Gr(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Xr(a.type,a.key,a.props,null,e.mode,s)).ref=po(e,r,a),s.return=e,e=s)}return l(e);case Xe:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Qr(a,e.mode,s)).return=e,e=r),l(e);if(fo(a))return h(e,r,a,s);if(it(a))return v(e,r,a,s);if(u&&mo(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:i("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var vo=ho(!0),go=ho(!1),bo={},yo={current:bo},xo={current:bo},wo={current:bo};function ko(e){return e===bo&&i("174"),e}function Eo(e,t){jr(wo,t),jr(xo,e),jr(yo,bo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Tr(yo),jr(yo,t)}function Co(e){Tr(yo),Tr(xo),Tr(wo)}function So(e){ko(wo.current);var t=ko(yo.current),n=tr(t,e.type);t!==n&&(jr(xo,e),jr(yo,n))}function Oo(e){xo.current===e&&(Tr(yo),Tr(xo))}var To=0,jo=2,Po=4,Ro=8,No=16,Mo=32,Ao=64,Lo=128,Io=$e.ReactCurrentDispatcher,_o=0,Do=null,zo=null,Fo=null,Bo=null,Wo=null,Uo=null,Ho=0,$o=null,Vo=0,qo=!1,Ko=null,Xo=0;function Go(){i("321")}function Yo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Qo(e,t,n,r,o,a){if(_o=a,Do=t,Fo=null!==e?e.memoizedState:null,Io.current=null===Fo?ua:da,t=n(r,o),qo){do{qo=!1,Xo+=1,Fo=null!==e?e.memoizedState:null,Uo=Bo,$o=Wo=zo=null,Io.current=da,t=n(r,o)}while(qo);Ko=null,Xo=0}return Io.current=ca,(e=Do).memoizedState=Bo,e.expirationTime=Ho,e.updateQueue=$o,e.effectTag|=Vo,e=null!==zo&&null!==zo.next,_o=0,Uo=Wo=Bo=Fo=zo=Do=null,Ho=0,$o=null,Vo=0,e&&i("300"),t}function Jo(){Io.current=ca,_o=0,Uo=Wo=Bo=Fo=zo=Do=null,Ho=0,$o=null,Vo=0,qo=!1,Ko=null,Xo=0}function Zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Wo?Bo=Wo=e:Wo=Wo.next=e,Wo}function ea(){if(null!==Uo)Uo=(Wo=Uo).next,Fo=null!==(zo=Fo)?zo.next:null;else{null===Fo&&i("310");var e={memoizedState:(zo=Fo).memoizedState,baseState:zo.baseState,queue:zo.queue,baseUpdate:zo.baseUpdate,next:null};Wo=null===Wo?Bo=e:Wo.next=e,Fo=zo.next}return Wo}function ta(e,t){return"function"==typeof t?t(e):t}function na(e){var t=ea(),n=t.queue;if(null===n&&i("311"),n.lastRenderedReducer=e,0<Xo){var r=n.dispatch;if(null!==Ko){var o=Ko.get(n);if(void 0!==o){Ko.delete(n);var a=t.memoizedState;do{a=e(a,o.action),o=o.next}while(null!==o);return Jt(a,t.memoizedState)||(ka=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),n.lastRenderedState=a,[a,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(a=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var s=o=null,c=r,u=!1;do{var d=c.expirationTime;d<_o?(u||(u=!0,s=l,o=a),d>Ho&&(Ho=d)):a=c.eagerReducer===e?c.eagerState:e(a,c.action),l=c,c=c.next}while(null!==c&&c!==r);u||(s=l,o=a),Jt(a,t.memoizedState)||(ka=!0),t.memoizedState=a,t.baseUpdate=s,t.baseState=o,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function ra(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===$o?($o={lastEffect:null}).lastEffect=e.next=e:null===(t=$o.lastEffect)?$o.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,$o.lastEffect=e),e}function oa(e,t,n,r){var o=Zo();Vo|=e,o.memoizedState=ra(t,n,void 0,void 0===r?null:r)}function aa(e,t,n,r){var o=ea();r=void 0===r?null:r;var a=void 0;if(null!==zo){var i=zo.memoizedState;if(a=i.destroy,null!==r&&Yo(r,i.deps))return void ra(To,n,a,r)}Vo|=e,o.memoizedState=ra(t,n,a,r)}function ia(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function la(){}function sa(e,t,n){25>Xo||i("301");var r=e.alternate;if(e===Do||null!==r&&r===Do)if(qo=!0,e={expirationTime:_o,action:n,eagerReducer:null,eagerState:null,next:null},null===Ko&&(Ko=new Map),void 0===(n=Ko.get(t)))Ko.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Hi();var o=kl(),a={expirationTime:o=Gi(o,e),action:n,eagerReducer:null,eagerState:null,next:null},l=t.last;if(null===l)a.next=a;else{var s=l.next;null!==s&&(a.next=s),l.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,u=r(c,n);if(a.eagerReducer=r,a.eagerState=u,Jt(u,c))return}catch(e){}Ji(e,o)}}var ca={readContext:Ua,useCallback:Go,useContext:Go,useEffect:Go,useImperativeHandle:Go,useLayoutEffect:Go,useMemo:Go,useReducer:Go,useRef:Go,useState:Go,useDebugValue:Go},ua={readContext:Ua,useCallback:function(e,t){return Zo().memoizedState=[e,void 0===t?null:t],e},useContext:Ua,useEffect:function(e,t){return oa(516,Lo|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,Po|Mo,ia.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oa(4,Po|Mo,e,t)},useMemo:function(e,t){var n=Zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=sa.bind(null,Do,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zo().memoizedState=e},useState:function(e){var t=Zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ta,lastRenderedState:e}).dispatch=sa.bind(null,Do,e),[t.memoizedState,e]},useDebugValue:la},da={readContext:Ua,useCallback:function(e,t){var n=ea();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Ua,useEffect:function(e,t){return aa(516,Lo|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,aa(4,Po|Mo,ia.bind(null,t,e),n)},useLayoutEffect:function(e,t){return aa(4,Po|Mo,e,t)},useMemo:function(e,t){var n=ea();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:na,useRef:function(){return ea().memoizedState},useState:function(e){return na(ta)},useDebugValue:la},fa=null,pa=null,ma=!1;function ha(e,t){var n=Vr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function va(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ga(e){if(ma){var t=pa;if(t){var n=t;if(!va(e,t)){if(!(t=Er(n))||!va(e,t))return e.effectTag|=2,ma=!1,void(fa=e);ha(fa,n)}fa=e,pa=Cr(t)}else e.effectTag|=2,ma=!1,fa=e}}function ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fa=e}function ya(e){if(e!==fa)return!1;if(!ma)return ba(e),ma=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=pa;t;)ha(e,t),t=Er(t);return ba(e),pa=fa?Er(e.stateNode):null,!0}function xa(){pa=fa=null,ma=!1}var wa=$e.ReactCurrentOwner,ka=!1;function Ea(e,t,n,r){t.child=null===e?go(t,null,n,r):vo(t,e.child,n,r)}function Ca(e,t,n,r,o){n=n.render;var a=t.ref;return Wa(t,o),r=Qo(e,t,n,r,a,o),null===e||ka?(t.effectTag|=1,Ea(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Aa(e,t,o))}function Sa(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||qr(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Xr(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Oa(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Aa(e,t,a):(t.effectTag|=1,(e=Kr(i,r)).ref=t.ref,e.return=t,t.child=e)}function Oa(e,t,n,r,o,a){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(ka=!1,o<a)?Aa(e,t,a):ja(e,t,n,r,a)}function Ta(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ja(e,t,n,r,o){var a=Lr(n)?Mr:Rr.current;return a=Ar(t,a),Wa(t,o),n=Qo(e,t,n,r,a,o),null===e||ka?(t.effectTag|=1,Ea(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Aa(e,t,o))}function Pa(e,t,n,r,o){if(Lr(n)){var a=!0;Fr(t)}else a=!1;if(Wa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),so(t,n,r),uo(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ua(c):c=Ar(t,c=Lr(n)?Mr:Rr.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&co(t,i,r,c),Ka=!1;var f=t.memoizedState;s=i.state=f;var p=t.updateQueue;null!==p&&(ni(t,p,r,i,o),s=t.memoizedState),l!==r||f!==s||Nr.current||Ka?("function"==typeof u&&(ao(t,n,u,r),s=t.memoizedState),(l=Ka||lo(t,n,l,r,f,s,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,l=t.memoizedProps,i.props=t.type===t.elementType?l:ro(t.type,l),s=i.context,"object"==typeof(c=n.contextType)&&null!==c?c=Ua(c):c=Ar(t,c=Lr(n)?Mr:Rr.current),(d="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&co(t,i,r,c),Ka=!1,s=t.memoizedState,f=i.state=s,null!==(p=t.updateQueue)&&(ni(t,p,r,i,o),f=t.memoizedState),l!==r||s!==f||Nr.current||Ka?("function"==typeof u&&(ao(t,n,u,r),f=t.memoizedState),(u=Ka||lo(t,n,l,r,s,f,c))?(d||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),i.props=r,i.state=f,i.context=c,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Ra(e,t,n,r,a,o)}function Ra(e,t,n,r,o,a){Ta(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Br(t,n,!1),Aa(e,t,a);r=t.stateNode,wa.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=vo(t,e.child,null,a),t.child=vo(t,null,l,a)):Ea(e,t,l,a),t.memoizedState=r.state,o&&Br(t,n,!0),t.child}function Na(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),Eo(e,t.containerInfo)}function Ma(e,t,n){var r=t.mode,o=t.pendingProps,a=t.memoizedState;if(0==(64&t.effectTag)){a=null;var i=!1}else a={timedOutAt:null!==a?a.timedOutAt:0},i=!0,t.effectTag&=-65;if(null===e)if(i){var l=o.fallback;e=Gr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Gr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=go(t,null,o.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,i?(n=o.fallback,o=Kr(r,r.pendingProps),0==(1&t.mode)&&((i=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=i)),r=o.sibling=Kr(l,n,l.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=vo(t,r.child,o.children,n)):(l=e.child,i?(i=o.fallback,(o=Gr(null,r,0,null)).child=l,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Gr(i,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=vo(t,l,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=a,t.child=n,r}function Aa(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&i("153"),null!==t.child){for(n=Kr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function La(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Nr.current)ka=!0;else if(r<n){switch(ka=!1,t.tag){case 3:Na(t),xa();break;case 5:So(t);break;case 1:Lr(t.type)&&Fr(t);break;case 4:Eo(t,t.stateNode.containerInfo);break;case 10:Fa(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ma(e,t,n):null!==(t=Aa(e,t,n))?t.sibling:null}return Aa(e,t,n)}}else ka=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Ar(t,Rr.current);if(Wa(t,n),o=Qo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Jo(),Lr(r)){var a=!0;Fr(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&ao(t,r,l,e),o.updater=io,t.stateNode=o,o._reactInternalFiber=t,uo(t,r,e,n),t=Ra(null,t,r,!0,a,n)}else t.tag=0,Ea(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),a=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return qr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),a=ro(e,a),l=void 0,o){case 0:l=ja(null,t,e,a,n);break;case 1:l=Pa(null,t,e,a,n);break;case 11:l=Ca(null,t,e,a,n);break;case 14:l=Sa(null,t,e,ro(e.type,a),r,n);break;default:i("306",e,"")}return l;case 0:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pa(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return Na(t),null===(r=t.updateQueue)&&i("282"),o=null!==(o=t.memoizedState)?o.element:null,ni(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(xa(),t=Aa(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(pa=Cr(t.stateNode.containerInfo),fa=t,o=ma=!0),o?(t.effectTag|=2,t.child=go(t,null,r,n)):(Ea(e,t,r,n),xa()),t=t.child),t;case 5:return So(t),null===e&&ga(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,br(r,o)?l=null:null!==a&&br(r,a)&&(t.effectTag|=16),Ta(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ea(e,t,l,n),t=t.child),t;case 6:return null===e&&ga(t),null;case 13:return Ma(e,t,n);case 4:return Eo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=vo(t,null,r,n):Ea(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ca(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return Ea(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ea(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,Fa(t,a=o.value),null!==l){var s=l.value;if(0===(a=Jt(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!Nr.current){t=Aa(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var c=s.contextDependencies;if(null!==c){l=s.child;for(var u=c.first;null!==u;){if(u.context===r&&0!=(u.observedBits&a)){1===s.tag&&((u=Ya(n)).tag=Va,Ja(s,u)),s.expirationTime<n&&(s.expirationTime=n),null!==(u=s.alternate)&&u.expirationTime<n&&(u.expirationTime=n),u=n;for(var d=s.return;null!==d;){var f=d.alternate;if(d.childExpirationTime<u)d.childExpirationTime=u,null!==f&&f.childExpirationTime<u&&(f.childExpirationTime=u);else{if(!(null!==f&&f.childExpirationTime<u))break;f.childExpirationTime=u}d=d.return}c.expirationTime<n&&(c.expirationTime=n);break}u=u.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}Ea(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,Wa(t,n),r=r(o=Ua(o,a.unstable_observedBits)),t.effectTag|=1,Ea(e,t,r,n),t.child;case 14:return a=ro(o=t.type,t.pendingProps),Sa(e,t,o,a=ro(o.type,a),r,n);case 15:return Oa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Lr(r)?(e=!0,Fr(t)):e=!1,Wa(t,n),so(t,r,o),uo(t,r,o,n),Ra(null,t,r,!0,e,n)}i("156")}var Ia={current:null},_a=null,Da=null,za=null;function Fa(e,t){var n=e.type._context;jr(Ia,n._currentValue),n._currentValue=t}function Ba(e){var t=Ia.current;Tr(Ia),e.type._context._currentValue=t}function Wa(e,t){_a=e,za=Da=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(ka=!0),e.contextDependencies=null}function Ua(e,t){return za!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Da?(null===_a&&i("308"),Da=t,_a.contextDependencies={first:t,expirationTime:0}):Da=Da.next=t),e._currentValue}var Ha=0,$a=1,Va=2,qa=3,Ka=!1;function Xa(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ga(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ya(e){return{expirationTime:e,tag:Ha,payload:null,callback:null,next:null,nextEffect:null}}function Qa(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ja(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Xa(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Xa(e.memoizedState),o=n.updateQueue=Xa(n.memoizedState)):r=e.updateQueue=Ga(o):null===o&&(o=n.updateQueue=Ga(r));null===o||r===o?Qa(r,t):null===r.lastUpdate||null===o.lastUpdate?(Qa(r,t),Qa(o,t)):(Qa(r,t),o.lastUpdate=t)}function Za(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Xa(e.memoizedState):ei(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ei(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ga(t)),t}function ti(e,t,n,r,a,i){switch(n.tag){case $a:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case qa:e.effectTag=-2049&e.effectTag|64;case Ha:if(null==(a="function"==typeof(e=n.payload)?e.call(i,r,a):e))break;return o({},r,a);case Va:Ka=!0}return r}function ni(e,t,n,r,o){Ka=!1;for(var a=(t=ei(e,t)).baseState,i=null,l=0,s=t.firstUpdate,c=a;null!==s;){var u=s.expirationTime;u<o?(null===i&&(i=s,a=c),l<u&&(l=u)):(c=ti(e,0,s,c,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(u=null,s=t.firstCapturedUpdate;null!==s;){var d=s.expirationTime;d<o?(null===u&&(u=s,null===i&&(a=c)),l<d&&(l=d)):(c=ti(e,0,s,c,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===i&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===u&&(a=c),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=u,e.expirationTime=l,e.memoizedState=c}function ri(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&i("191",n),n.call(r)}e=e.nextEffect}}function ai(e,t){return{value:e,source:t,stack:st(t)}}function ii(e){e.effectTag|=4}var li=void 0,si=void 0,ci=void 0,ui=void 0;li=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},si=function(){},ci=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l=t.stateNode;switch(ko(yo.current),e=null,n){case"input":i=yt(l,i),r=yt(l,r),e=[];break;case"option":i=Kn(l,i),r=Kn(l,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Gn(l,i),r=Gn(l,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(l.onclick=mr)}dr(n,r),l=n=void 0;var s=null;for(n in i)if(!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&null!=i[n])if("style"===n){var c=i[n];for(l in c)c.hasOwnProperty(l)&&(s||(s={}),s[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(y.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var u=r[n];if(c=null!=i?i[n]:void 0,r.hasOwnProperty(n)&&u!==c&&(null!=u||null!=c))if("style"===n)if(c){for(l in c)!c.hasOwnProperty(l)||u&&u.hasOwnProperty(l)||(s||(s={}),s[l]="");for(l in u)u.hasOwnProperty(l)&&c[l]!==u[l]&&(s||(s={}),s[l]=u[l])}else s||(e||(e=[]),e.push(n,s)),s=u;else"dangerouslySetInnerHTML"===n?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(e=e||[]).push(n,""+u)):"children"===n?c===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(n,""+u):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(y.hasOwnProperty(n)?(null!=u&&pr(a,n),e||c===u||(e=[])):(e=e||[]).push(n,u))}s&&(e=e||[]).push("style",s),a=e,(t.updateQueue=a)&&ii(t)}},ui=function(e,t,n,r){n!==r&&ii(t)};var di="function"==typeof WeakSet?WeakSet:Set;function fi(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Xi(e,t)}else t.current=null}function mi(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==To){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==To&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function hi(e){switch("function"==typeof Ur&&Ur(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Xi(o,e)}}n=n.next}while(n!==t)}break;case 1:if(pi(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Xi(e,t)}break;case 5:pi(e);break;case 4:bi(e)}}function vi(e){return 5===e.tag||3===e.tag||4===e.tag}function gi(e){e:{for(var t=e.return;null!==t;){if(vi(t)){var n=t;break e}t=t.return}i("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:i("161")}16&n.effectTag&&(ar(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,l=o.stateNode,s=n;8===a.nodeType?a.parentNode.insertBefore(l,s):a.insertBefore(l,s)}else t.insertBefore(o.stateNode,n);else r?(l=t,s=o.stateNode,8===l.nodeType?(a=l.parentNode).insertBefore(s,l):(a=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==a.onclick||(a.onclick=mr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function bi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&i("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,l=a;;)if(hi(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===a)break;for(;null===l.sibling;){if(null===l.return||l.return===a)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(a=r,l=t.stateNode,8===a.nodeType?a.parentNode.removeChild(l):a.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(hi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function yi(e,t){switch(t.tag){case 0:case 11:case 14:case 15:mi(Po,Ro,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&function(e,t,n,r,o){e[L]=o,"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),fr(n,r),r=fr(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],l=t[a+1];"style"===i?cr(e,l):"dangerouslySetInnerHTML"===i?or(e,l):"children"===i?ar(e,l):gt(e,i,l,r)}switch(n){case"input":kt(e,o);break;case"textarea":Qn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Xn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Xn(e,!!o.multiple,o.defaultValue,!0):Xn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,a,o,e,r)}break;case 6:null===t.stateNode&&i("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=kl())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=sr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new di),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Gi(t=kl(),e),null!==(e=Qi(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&El(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:i("163")}}var xi="function"==typeof WeakMap?WeakMap:Map;function wi(e,t,n){(n=Ya(n)).tag=qa,n.payload={element:null};var r=t.value;return n.callback=function(){Ml(r),fi(e,t)},n}function ki(e,t,n){(n=Ya(n)).tag=qa;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zi?zi=new Set([this]):zi.add(this));var n=t.value,o=t.stack;fi(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Ei(e){switch(e.tag){case 1:Lr(e.type)&&Ir();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Co(),_r(),0!=(64&(t=e.effectTag))&&i("285"),e.effectTag=-2049&t|64,e;case 5:return Oo(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Co(),null;case 10:return Ba(e),null;default:return null}}var Ci=$e.ReactCurrentDispatcher,Si=$e.ReactCurrentOwner,Oi=1073741822,Ti=!1,ji=null,Pi=null,Ri=0,Ni=-1,Mi=!1,Ai=null,Li=!1,Ii=null,_i=null,Di=null,zi=null;function Fi(){if(null!==ji)for(var e=ji.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ir();break;case 3:Co(),_r();break;case 5:Oo(t);break;case 4:Co();break;case 10:Ba(t)}e=e.return}Pi=null,Ri=0,Ni=-1,Mi=!1,ji=null}function Bi(){for(;null!==Ai;){var e=Ai.effectTag;if(16&e&&ar(Ai.stateNode,""),128&e){var t=Ai.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:gi(Ai),Ai.effectTag&=-3;break;case 6:gi(Ai),Ai.effectTag&=-3,yi(Ai.alternate,Ai);break;case 4:yi(Ai.alternate,Ai);break;case 8:bi(e=Ai),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Ai=Ai.nextEffect}}function Wi(){for(;null!==Ai;){if(256&Ai.effectTag)e:{var e=Ai.alternate,t=Ai;switch(t.tag){case 0:case 11:case 15:mi(jo,To,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:i("163")}}Ai=Ai.nextEffect}}function Ui(e,t){for(;null!==Ai;){var n=Ai.effectTag;if(36&n){var r=Ai.alternate,o=Ai,a=t;switch(o.tag){case 0:case 11:case 15:mi(No,Mo,o);break;case 1:var l=o.stateNode;if(4&o.effectTag)if(null===r)l.componentDidMount();else{var s=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);l.componentDidUpdate(s,r.memoizedState,l.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ri(0,r,l);break;case 3:if(null!==(r=o.updateQueue)){if(l=null,null!==o.child)switch(o.child.tag){case 5:l=o.child.stateNode;break;case 1:l=o.child.stateNode}ri(0,r,l)}break;case 5:a=o.stateNode,null===r&&4&o.effectTag&&gr(o.type,o.memoizedProps)&&a.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:i("163")}}128&n&&(null!==(o=Ai.ref)&&(a=Ai.stateNode,"function"==typeof o?o(a):o.current=a)),512&n&&(Ii=e),Ai=Ai.nextEffect}}function Hi(){null!==_i&&kr(_i),null!==Di&&Di()}function $i(e,t){Li=Ti=!0,e.current===t&&i("177");var n=e.pendingCommitExpirationTime;0===n&&i("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}no(0,e)}(e,o>r?o:r),Si.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Cn,vr=function(){var e=_n();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,l=-1,s=0,c=0,u=e,d=null;t:for(;;){for(var f;u!==t||0!==r&&3!==u.nodeType||(i=a+r),u!==o||0!==n&&3!==u.nodeType||(l=a+n),3===u.nodeType&&(a+=u.nodeValue.length),null!==(f=u.firstChild);)d=u,u=f;for(;;){if(u===e)break t;if(d===t&&++s===r&&(i=a),d===o&&++c===n&&(l=a),null!==(f=u.nextSibling))break;d=(u=d).parentNode}u=f}t=-1===i||-1===l?null:{start:i,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),Cn=!1,Ai=r;null!==Ai;){o=!1;var l=void 0;try{Wi()}catch(e){o=!0,l=e}o&&(null===Ai&&i("178"),Xi(Ai,l),null!==Ai&&(Ai=Ai.nextEffect))}for(Ai=r;null!==Ai;){o=!1,l=void 0;try{Bi()}catch(e){o=!0,l=e}o&&(null===Ai&&i("178"),Xi(Ai,l),null!==Ai&&(Ai=Ai.nextEffect))}for(zn(vr),vr=null,Cn=!!hr,hr=null,e.current=t,Ai=r;null!==Ai;){o=!1,l=void 0;try{Ui(e,n)}catch(e){o=!0,l=e}o&&(null===Ai&&i("178"),Xi(Ai,l),null!==Ai&&(Ai=Ai.nextEffect))}if(null!==r&&null!==Ii){var s=function(e,t){Di=_i=Ii=null;var n=ol;ol=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var a=t;mi(Lo,To,a),mi(To,Ao,a)}catch(e){r=!0,o=e}r&&Xi(t,o)}t=t.nextEffect}while(null!==t);ol=n,0!==(n=e.expirationTime)&&El(e,n),ul||ol||jl(1073741823,!1)}.bind(null,e,r);_i=a.unstable_runWithPriority(a.unstable_NormalPriority,function(){return wr(s)}),Di=s}Ti=Li=!1,"function"==typeof Wr&&Wr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(zi=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Vi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){ji=e;e:{var a=t,l=Ri,s=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Lr(t.type)&&Ir();break;case 3:Co(),_r(),(s=t.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==a&&null!==a.child||(ya(t),t.effectTag&=-3),si(t);break;case 5:Oo(t);var c=ko(wo.current);if(l=t.type,null!==a&&null!=t.stateNode)ci(a,t,l,s,c),a.ref!==t.ref&&(t.effectTag|=128);else if(s){var u=ko(yo.current);if(ya(t)){a=(s=t).stateNode;var d=s.type,f=s.memoizedProps,p=c;switch(a[A]=s,a[L]=f,l=void 0,c=d){case"iframe":case"object":Sn("load",a);break;case"video":case"audio":for(d=0;d<te.length;d++)Sn(te[d],a);break;case"source":Sn("error",a);break;case"img":case"image":case"link":Sn("error",a),Sn("load",a);break;case"form":Sn("reset",a),Sn("submit",a);break;case"details":Sn("toggle",a);break;case"input":xt(a,f),Sn("invalid",a),pr(p,"onChange");break;case"select":a._wrapperState={wasMultiple:!!f.multiple},Sn("invalid",a),pr(p,"onChange");break;case"textarea":Yn(a,f),Sn("invalid",a),pr(p,"onChange")}for(l in dr(c,f),d=null,f)f.hasOwnProperty(l)&&(u=f[l],"children"===l?"string"==typeof u?a.textContent!==u&&(d=["children",u]):"number"==typeof u&&a.textContent!==""+u&&(d=["children",""+u]):y.hasOwnProperty(l)&&null!=u&&pr(p,l));switch(c){case"input":Ue(a),Et(a,f,!0);break;case"textarea":Ue(a),Jn(a);break;case"select":case"option":break;default:"function"==typeof f.onClick&&(a.onclick=mr)}l=d,s.updateQueue=l,(s=null!==l)&&ii(t)}else{f=t,p=l,a=s,d=9===c.nodeType?c:c.ownerDocument,u===Zn.html&&(u=er(p)),u===Zn.html?"script"===p?((a=d.createElement("div")).innerHTML="<script><\/script>",d=a.removeChild(a.firstChild)):"string"==typeof a.is?d=d.createElement(p,{is:a.is}):(d=d.createElement(p),"select"===p&&(p=d,a.multiple?p.multiple=!0:a.size&&(p.size=a.size))):d=d.createElementNS(u,p),(a=d)[A]=f,a[L]=s,li(a,t,!1,!1),p=a;var m=c,h=fr(d=l,f=s);switch(d){case"iframe":case"object":Sn("load",p),c=f;break;case"video":case"audio":for(c=0;c<te.length;c++)Sn(te[c],p);c=f;break;case"source":Sn("error",p),c=f;break;case"img":case"image":case"link":Sn("error",p),Sn("load",p),c=f;break;case"form":Sn("reset",p),Sn("submit",p),c=f;break;case"details":Sn("toggle",p),c=f;break;case"input":xt(p,f),c=yt(p,f),Sn("invalid",p),pr(m,"onChange");break;case"option":c=Kn(p,f);break;case"select":p._wrapperState={wasMultiple:!!f.multiple},c=o({},f,{value:void 0}),Sn("invalid",p),pr(m,"onChange");break;case"textarea":Yn(p,f),c=Gn(p,f),Sn("invalid",p),pr(m,"onChange");break;default:c=f}dr(d,c),u=void 0;var v=d,g=p,b=c;for(u in b)if(b.hasOwnProperty(u)){var x=b[u];"style"===u?cr(g,x):"dangerouslySetInnerHTML"===u?null!=(x=x?x.__html:void 0)&&or(g,x):"children"===u?"string"==typeof x?("textarea"!==v||""!==x)&&ar(g,x):"number"==typeof x&&ar(g,""+x):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(y.hasOwnProperty(u)?null!=x&&pr(m,u):null!=x&&gt(g,u,x,h))}switch(d){case"input":Ue(p),Et(p,f,!1);break;case"textarea":Ue(p),Jn(p);break;case"option":null!=f.value&&p.setAttribute("value",""+bt(f.value));break;case"select":(c=p).multiple=!!f.multiple,null!=(p=f.value)?Xn(c,!!f.multiple,p,!1):null!=f.defaultValue&&Xn(c,!!f.multiple,f.defaultValue,!0);break;default:"function"==typeof c.onClick&&(p.onclick=mr)}(s=gr(l,s))&&ii(t),t.stateNode=a}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&i("166");break;case 6:a&&null!=t.stateNode?ui(a,t,a.memoizedProps,s):("string"!=typeof s&&(null===t.stateNode&&i("166")),a=ko(wo.current),ko(yo.current),ya(t)?(l=(s=t).stateNode,a=s.memoizedProps,l[A]=s,(s=l.nodeValue!==a)&&ii(t)):(l=t,(s=(9===a.nodeType?a:a.ownerDocument).createTextNode(s))[A]=t,l.stateNode=s));break;case 11:break;case 13:if(s=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,ji=t;break e}s=null!==s,l=null!==a&&null!==a.memoizedState,null!==a&&!s&&l&&(null!==(a=a.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=a,a.nextEffect=c):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),(s||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Co(),si(t);break;case 10:Ba(t);break;case 9:case 14:break;case 17:Lr(t.type)&&Ir();break;case 18:break;default:i("156")}ji=null}if(t=e,1===Ri||1!==t.childExpirationTime){for(s=0,l=t.child;null!==l;)(a=l.expirationTime)>s&&(s=a),(c=l.childExpirationTime)>s&&(s=c),l=l.sibling;t.childExpirationTime=s}if(null!==ji)return ji;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Ei(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function qi(e){var t=La(e.alternate,e,Ri);return e.memoizedProps=e.pendingProps,null===t&&(t=Vi(e)),Si.current=null,t}function Ki(e,t){Ti&&i("243"),Hi(),Ti=!0;var n=Ci.current;Ci.current=ca;var r=e.nextExpirationTimeToWorkOn;r===Ri&&e===Pi&&null!==ji||(Fi(),Ri=r,ji=Kr((Pi=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==ji&&!Ol();)ji=qi(ji);else for(;null!==ji;)ji=qi(ji)}catch(t){if(za=Da=_a=null,Jo(),null===ji)o=!0,Ml(t);else{null===ji&&i("271");var a=ji,l=a.return;if(null!==l){e:{var s=e,c=l,u=a,d=t;if(l=Ri,u.effectTag|=1024,u.firstEffect=u.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var f=d;d=c;var p=-1,m=-1;do{if(13===d.tag){var h=d.alternate;if(null!==h&&null!==(h=h.memoizedState)){m=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=d.pendingProps.maxDuration)&&(0>=h?p=0:(-1===p||h<p)&&(p=h))}d=d.return}while(null!==d);d=c;do{if((h=13===d.tag)&&(h=void 0!==d.memoizedProps.fallback&&null===d.memoizedState),h){if(null===(c=d.updateQueue)?((c=new Set).add(f),d.updateQueue=c):c.add(f),0==(1&d.mode)){d.effectTag|=64,u.effectTag&=-1957,1===u.tag&&(null===u.alternate?u.tag=17:((l=Ya(1073741823)).tag=Va,Ja(u,l))),u.expirationTime=1073741823;break e}c=l;var v=(u=s).pingCache;null===v?(v=u.pingCache=new xi,h=new Set,v.set(f,h)):void 0===(h=v.get(f))&&(h=new Set,v.set(f,h)),h.has(c)||(h.add(c),u=Yi.bind(null,u,f,c),f.then(u,u)),-1===p?s=1073741823:(-1===m&&(m=10*(1073741822-to(s,l))-5e3),s=m+p),0<=s&&Ni<s&&(Ni=s),d.effectTag|=2048,d.expirationTime=l;break e}d=d.return}while(null!==d);d=Error((lt(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(u))}Mi=!0,d=ai(d,u),s=c;do{switch(s.tag){case 3:s.effectTag|=2048,s.expirationTime=l,Za(s,l=wi(s,d,l));break e;case 1:if(p=d,m=s.type,u=s.stateNode,0==(64&s.effectTag)&&("function"==typeof m.getDerivedStateFromError||null!==u&&"function"==typeof u.componentDidCatch&&(null===zi||!zi.has(u)))){s.effectTag|=2048,s.expirationTime=l,Za(s,l=ki(s,p,l));break e}}s=s.return}while(null!==s)}ji=Vi(a);continue}o=!0,Ml(t)}}break}if(Ti=!1,Ci.current=n,za=Da=_a=null,Jo(),o)Pi=null,e.finishedWork=null;else if(null!==ji)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&i("281"),Pi=null,Mi){if(o=e.latestPendingTime,a=e.latestSuspendedTime,l=e.latestPingedTime,0!==o&&o<r||0!==a&&a<r||0!==l&&l<r)return eo(e,r),void wl(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void wl(e,n,r,t,-1)}t&&-1!==Ni?(eo(e,r),(t=10*(1073741822-to(e,r)))<Ni&&(Ni=t),t=10*(1073741822-kl()),t=Ni-t,wl(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Xi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zi||!zi.has(r)))return Ja(n,e=ki(n,e=ai(t,e),1073741823)),void Ji(n,1073741823);break;case 3:return Ja(n,e=wi(n,e=ai(t,e),1073741823)),void Ji(n,1073741823)}n=n.return}3===e.tag&&(Ja(e,n=wi(e,n=ai(t,e),1073741823)),Ji(e,1073741823))}function Gi(e,t){var n=a.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Ti&&!Li)r=Ri;else{switch(n){case a.unstable_ImmediatePriority:r=1073741823;break;case a.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case a.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case a.unstable_LowPriority:case a.unstable_IdlePriority:r=1;break;default:i("313")}null!==Pi&&r===Ri&&--r}return n===a.unstable_UserBlockingPriority&&(0===ll||r<ll)&&(ll=r),r}function Yi(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Pi&&Ri===n?Pi=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&El(e,n)))}function Qi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ji(e,t){null!==(e=Qi(e,t))&&(!Ti&&0!==Ri&&t>Ri&&Fi(),Zr(e,t),Ti&&!Li&&Pi===e||El(e,e.expirationTime),gl>vl&&(gl=0,i("185")))}function Zi(e,t,n,r,o){return a.unstable_runWithPriority(a.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var el=null,tl=null,nl=0,rl=void 0,ol=!1,al=null,il=0,ll=0,sl=!1,cl=null,ul=!1,dl=!1,fl=null,pl=a.unstable_now(),ml=1073741822-(pl/10|0),hl=ml,vl=50,gl=0,bl=null;function yl(){ml=1073741822-((a.unstable_now()-pl)/10|0)}function xl(e,t){if(0!==nl){if(t<nl)return;null!==rl&&a.unstable_cancelCallback(rl)}nl=t,e=a.unstable_now()-pl,rl=a.unstable_scheduleCallback(Tl,{timeout:10*(1073741822-t)-e})}function wl(e,t,n,r,o){e.expirationTime=r,0!==o||Ol()?0<o&&(e.timeoutHandle=yr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,yl(),hl=ml,Pl(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function kl(){return ol?hl:(Cl(),0!==il&&1!==il||(yl(),hl=ml),hl)}function El(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tl?(el=tl=e,e.nextScheduledRoot=e):(tl=tl.nextScheduledRoot=e).nextScheduledRoot=el):t>e.expirationTime&&(e.expirationTime=t),ol||(ul?dl&&(al=e,il=1073741823,Rl(e,1073741823,!1)):1073741823===t?jl(1073741823,!1):xl(e,t))}function Cl(){var e=0,t=null;if(null!==tl)for(var n=tl,r=el;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===tl)&&i("244"),r===r.nextScheduledRoot){el=tl=r.nextScheduledRoot=null;break}if(r===el)el=o=r.nextScheduledRoot,tl.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===tl){(tl=n).nextScheduledRoot=el,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===tl)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}al=t,il=e}var Sl=!1;function Ol(){return!!Sl||!!a.unstable_shouldYield()&&(Sl=!0)}function Tl(){try{if(!Ol()&&null!==el){yl();var e=el;do{var t=e.expirationTime;0!==t&&ml<=t&&(e.nextExpirationTimeToWorkOn=ml),e=e.nextScheduledRoot}while(e!==el)}jl(0,!0)}finally{Sl=!1}}function jl(e,t){if(Cl(),t)for(yl(),hl=ml;null!==al&&0!==il&&e<=il&&!(Sl&&ml>il);)Rl(al,il,ml>il),Cl(),yl(),hl=ml;else for(;null!==al&&0!==il&&e<=il;)Rl(al,il,!1),Cl();if(t&&(nl=0,rl=null),0!==il&&xl(al,il),gl=0,bl=null,null!==fl)for(e=fl,fl=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){sl||(sl=!0,cl=e)}}if(sl)throw e=cl,cl=null,sl=!1,e}function Pl(e,t){ol&&i("253"),al=e,il=t,Rl(e,t,!1),jl(1073741823,!1)}function Rl(e,t,n){if(ol&&i("245"),ol=!0,n){var r=e.finishedWork;null!==r?Nl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),Ki(e,n),null!==(r=e.finishedWork)&&(Ol()?e.finishedWork=r:Nl(e,r,t)))}else null!==(r=e.finishedWork)?Nl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),Ki(e,n),null!==(r=e.finishedWork)&&Nl(e,r,t));ol=!1}function Nl(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===fl?fl=[r]:fl.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===bl?gl++:(bl=e,gl=0),a.unstable_runWithPriority(a.unstable_ImmediatePriority,function(){$i(e,t)})}function Ml(e){null===al&&i("246"),al.expirationTime=0,sl||(sl=!0,cl=e)}function Al(e,t){var n=ul;ul=!0;try{return e(t)}finally{(ul=n)||ol||jl(1073741823,!1)}}function Ll(e,t){if(ul&&!dl){dl=!0;try{return e(t)}finally{dl=!1}}return e(t)}function Il(e,t,n){ul||ol||0===ll||(jl(ll,!1),ll=0);var r=ul;ul=!0;try{return a.unstable_runWithPriority(a.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(ul=r)||ol||jl(1073741823,!1)}}function _l(e,t,n,r,o){var a=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||i("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Lr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);i("171"),l=void 0}if(1===n.tag){var s=n.type;if(Lr(s)){n=zr(n,s,l);break e}}n=l}else n=Pr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Ya(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Hi(),Ja(a,o),Ji(a,r),r}function Dl(e,t,n,r){var o=t.current;return _l(e,t,n,o=Gi(kl(),o),r)}function zl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fl(e){var t=1073741822-25*(1+((1073741822-kl()+500)/25|0));t>=Oi&&(t=Oi-1),this._expirationTime=Oi=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Bl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wl(e,t,n){e={current:t=Vr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ul(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hl(e,t,n,r,o){var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=zl(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wl(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=zl(a._internalRoot);l.call(e)}}Ll(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return zl(a._internalRoot)}function $l(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ul(t)||i("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Xe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Oe=function(e,t,n){switch(t){case"input":if(kt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=z(r);o||i("90"),He(r),kt(r,o)}}}break;case"textarea":Qn(e,n);break;case"select":null!=(t=n.value)&&Xn(e,!!n.multiple,t,!1)}},Fl.prototype.render=function(e){this._defer||i("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Bl;return _l(e,t,null,n,r._onCommit),r},Fl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||i("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&i("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Pl(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Bl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Bl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&i("191",n),n()}}},Wl.prototype.render=function(e,t){var n=this._internalRoot,r=new Bl;return null!==(t=void 0===t?null:t)&&r.then(t),Dl(e,n,null,r._onCommit),r},Wl.prototype.unmount=function(e){var t=this._internalRoot,n=new Bl;return null!==(e=void 0===e?null:e)&&n.then(e),Dl(null,t,null,n._onCommit),n},Wl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Bl;return null!==(n=void 0===n?null:n)&&o.then(n),Dl(t,r,e,o._onCommit),o},Wl.prototype.createBatch=function(){var e=new Fl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Me=Al,Ae=Il,Le=function(){ol||0===ll||(jl(ll,!1),ll=0)};var Vl={createPortal:$l,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?i("188"):i("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Ul(t)||i("200"),Hl(null,e,t,!0,n)},render:function(e,t,n){return Ul(t)||i("200"),Hl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Ul(n)||i("200"),(null==e||void 0===e._reactInternalFiber)&&i("38"),Hl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ul(e)||i("40"),!!e._reactRootContainer&&(Ll(function(){Hl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return $l.apply(void 0,arguments)},unstable_batchedUpdates:Al,unstable_interactiveUpdates:Il,flushSync:function(e,t){ol&&i("187");var n=ul;ul=!0;try{return Zi(e,t)}finally{ul=n,jl(1073741823,!1)}},unstable_createRoot:function(e,t){return Ul(e)||i("299","unstable_createRoot"),new Wl(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=ul;ul=!0;try{Zi(e)}finally{(ul=t)||ol||jl(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[_,D,z,P.injectEventPluginsByName,b,$,function(e){O(e,H)},Re,Ne,jn,N]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wr=Hr(function(e){return t.onCommitFiberRoot(n,e)}),Ur=Hr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:$e.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:I,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var ql={default:Vl},Kl=ql&&Vl||ql;e.exports=Kl.default||Kl},function(e,t,n){"use strict";e.exports=n(172)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,a=-1,i=-1,l=!1,s=!1;function c(){if(!l){var e=n.expirationTime;s?E():s=!0,k(f,e)}}function u(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var a=o,l=i;o=e,i=t;try{var s=r()}finally{o=a,i=l}if("function"==typeof s)if(s={callback:s,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=s.next=s.previous=s;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=s,c()),(t=r.previous).next=r.previous=s,s.next=r,s.previous=t}}function d(){if(-1===a&&null!==n&&1===n.priorityLevel){l=!0;try{do{u()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?c():s=!1}}}function f(e){l=!0;var o=r;r=e;try{if(e)for(;null!==n;){var a=t.unstable_now();if(!(n.expirationTime<=a))break;do{u()}while(null!==n&&n.expirationTime<=a)}else if(null!==n)do{u()}while(null!==n&&!C())}finally{l=!1,r=o,null!==n?c():s=!1,d()}}var p,m,h=Date,v="function"==typeof setTimeout?setTimeout:void 0,g="function"==typeof clearTimeout?clearTimeout:void 0,b="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,y="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function x(e){p=b(function(t){g(m),e(t)}),m=v(function(){y(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return h.now()};var k,E,C,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var O=S._schedMock;k=O[0],E=O[1],C=O[2],t.unstable_now=O[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var T=null,j=function(e){if(null!==T)try{T(e)}finally{T=null}};k=function(e){null!==T?setTimeout(k,0,e):(T=e,setTimeout(j,0,!1))},E=function(){T=null},C=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof b&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var P=null,R=!1,N=-1,M=!1,A=!1,L=0,I=33,_=33;C=function(){return L<=t.unstable_now()};var D=new MessageChannel,z=D.port2;D.port1.onmessage=function(){R=!1;var e=P,n=N;P=null,N=-1;var r=t.unstable_now(),o=!1;if(0>=L-r){if(!(-1!==n&&n<=r))return M||(M=!0,x(F)),P=e,void(N=n);o=!0}if(null!==e){A=!0;try{e(o)}finally{A=!1}}};var F=function(e){if(null!==P){x(F);var t=e-L+_;t<_&&I<_?(8>t&&(t=8),_=t<I?I:t):I=t,L=e+_,R||(R=!0,z.postMessage(void 0))}else M=!1};k=function(e,t){P=e,N=t,A||0>t?z.postMessage(void 0):M||(M=!0,x(F))},E=function(){P=null,R=!1,N=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,i=a;o=e,a=t.unstable_now();try{return n()}finally{o=r,a=i,d()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,i=a;o=n,a=t.unstable_now();try{return e()}finally{o=r,a=i,d()}},t.unstable_scheduleCallback=function(e,r){var i=-1!==a?a:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=i+r.timeout;else switch(o){case 1:r=i+-1;break;case 2:r=i+250;break;case 5:r=i+1073741823;break;case 4:r=i+1e4;break;default:r=i+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{i=null;var l=n;do{if(l.expirationTime>r){i=l;break}l=l.next}while(l!==n);null===i?i=n:i===n&&(n=e,c()),(r=i.previous).next=i.previous=e,e.next=i,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,i=a;o=n,a=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,a=i,d()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<i||C())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(87))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(0),a=n(38),i=n(180),l=n(205),s=n(53),c=n(229);t.App=()=>{const[e,t]=o.useState("");return o.useEffect(()=>{const e=localStorage.getItem("token");if(null!=e){s.MessagesService.token=e;const n=localStorage.getItem("username");t(n),s.MessagesService.username=n}},[]),r.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",width:"100%",height:"100%",flexDirection:"column"}},r.createElement(l.default,null),r.createElement(a.default,{style:{display:"flex",alignItems:"center",justifyContent:"center",width:"100%",height:"100%",flexDirection:"row",flexWrap:"wrap"}},null==e||""==e?r.createElement(i.LoginForm,{setUsername:e=>t(e)}):r.createElement(c.Chat,null)))}},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t,n){"use strict";var r=n(176);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";e.exports=n(178)},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function g(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case f:case i:case s:case l:case m:return e;default:switch(e=e&&e.$$typeof){case u:case p:case c:return e;default:return t}}case v:case h:case a:return t}}}function b(e){return g(e)===f}t.typeOf=g,t.AsyncMode=d,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=h,t.Portal=a,t.Profiler=s,t.StrictMode=l,t.Suspense=m,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===s||e===l||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===c||e.$$typeof===u||e.$$typeof===p)},t.isAsyncMode=function(e){return b(e)||g(e)===d},t.isConcurrentMode=b,t.isContextConsumer=function(e){return g(e)===u},t.isContextProvider=function(e){return g(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return g(e)===p},t.isFragment=function(e){return g(e)===i},t.isLazy=function(e){return g(e)===v},t.isMemo=function(e){return g(e)===h},t.isPortal=function(e){return g(e)===a},t.isProfiler=function(e){return g(e)===s},t.isStrictMode=function(e){return g(e)===l},t.isSuspense=function(e){return g(e)===m}},function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,l)}s((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const o=n(67),a=n(0),i=n(0),l=n(46),s=n(53);t.LoginForm=e=>{const[t,n]=i.useState("");return a.createElement("div",{style:{display:"flex",alignItems:"center"}},a.createElement(o.default,{id:"outlined-username",label:"Username",value:t,onChange:e=>n(e.target.value),margin:"normal",variant:"outlined"}),a.createElement(l.default,{onClick:()=>r(this,void 0,void 0,function*(){const n=yield s.MessagesService.login(t);if(200===n.status){const r=n.data.accessToken;s.MessagesService.token=r,s.MessagesService.username=t,localStorage.setItem("token",r),localStorage.setItem("username",t),e.setUsername(t)}})},"Login"))}},function(e,t){e.exports=function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){e.exports=n(186)},function(e,t,n){"use strict";var r=n(34),o=n(115),a=n(188),i=n(88);function l(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var s=l(i);s.Axios=a,s.create=function(e){return l(r.merge(i,e))},s.Cancel=n(119),s.CancelToken=n(203),s.isCancel=n(118),s.all=function(e){return Promise.all(e)},s.spread=n(204),e.exports=s,e.exports.default=s},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(88),o=n(34),a=n(198),i=n(199);function l(e){this.defaults=e,this.interceptors={request:new a,response:new a}}l.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){l.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){l.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=l},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],u=!1,d=-1;function f(){u&&s&&(u=!1,s.length?c=s.concat(c):d=-1,c.length&&p())}function p(){if(!u){var e=l(f);u=!0;for(var t=c.length;t;){for(s=c,c=[];++d<t;)s&&s[d].run();d=-1,t=c.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||u||l(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(34);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(117);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(34);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))}))}),a=i.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},function(e,t,n){"use strict";var r=n(34),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(34);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,a=String(e),i="",l=0,s=r;a.charAt(0|l)||(s="=",l%1);i+=s.charAt(63&t>>8-l%1*8)){if((n=a.charCodeAt(l+=.75))>255)throw new o;t=t<<8|n}return i}},function(e,t,n){"use strict";var r=n(34);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(34);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(34),o=n(200),a=n(118),i=n(88),l=n(201),s=n(202);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!l(e.url)&&(e.url=s(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(34);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(119);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(0),a=n(54),i=n(123),l=n(89),s=n(31),c=n(63),u=n(207),d=n(208),f=n(211),p=a.createStyles({root:{flexGrow:1},grow:{flexGrow:1},menuButton:{marginLeft:-12,marginRight:20}});t.default=f.default(p)(function(e){const[t,n]=o.useState(!1),{classes:a}=e;return r.createElement("div",{className:a.root,style:{width:"100%"}},r.createElement(i.default,{position:"static"},r.createElement(l.default,null,r.createElement(c.default,{className:a.menuButton,color:"inherit","aria-label":"Menu",onClick:()=>n(!0)},r.createElement(u.default,null)),r.createElement(s.default,{variant:"h6",color:"inherit",className:a.grow},"Chat App"))),r.createElement(d.default,{open:t,toggle:()=>n(!t)}))})},function(e,t){e.exports=function(e,t){t||(t=[0,""]),e=String(e);var n=parseFloat(e,10);return t[0]=n,t[1]=e.match(/[\d.\-\+]*\s*(.*)/)[1]||"",t}},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(127)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),o.default.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"})),"Menu");t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(54),a=n(128),i=n(90),l=n(91),s=n(130),c=n(132),u=n(209),d=n(210);t.default=o.withStyles({list:{width:250},fullList:{width:"auto"}})(e=>{const{classes:t}=e,n=r.createElement("div",{className:t.list},r.createElement(i.default,null,r.createElement(l.default,{onClick:()=>{location.replace("https://github.com/adcostanza/chat-app")},button:!0},r.createElement(s.default,null,r.createElement(d.GitHub,null)),r.createElement(c.default,{primary:"GitHub"})),r.createElement(l.default,{onClick:()=>{localStorage.removeItem("token"),localStorage.removeItem("username"),location.reload()},button:!0},r.createElement(s.default,null,r.createElement(u.default,null)),r.createElement(c.default,{primary:"Logout"}))));return r.createElement("div",null,r.createElement(a.default,{open:e.open,onClose:e.toggle},r.createElement("div",{tabIndex:0,role:"button",onClick:e.toggle,onKeyDown:e.toggle},n)))})},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(127)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),o.default.createElement("path",{d:"M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"})),"ExitToApp");t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(134),o=n(0);t.GitHub=function(e){return o.createElement(r.SvgIcon,Object.assign({},e),o.createElement("path",{d:"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z"}))}},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(1)),a=n(39),i=r(n(212));var l=function(e,t){return(0,a.withStyles)(e,(0,o.default)({defaultTheme:i.default},t))};t.default=l},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(0,r(n(213)).default)();t.default=o},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;r(n(9));var o=r(n(1)),a=r(n(2)),i=r(n(33)),l=r(n(92)),s=(r(n(11)),r(n(214))),c=r(n(215)),u=r(n(216)),d=r(n(223)),f=r(n(224)),p=r(n(225)),m=r(n(226)),h=r(n(227)),v=r(n(228));var g=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,g=void 0===r?{}:r,b=e.palette,y=void 0===b?{}:b,x=e.shadows,w=e.spacing,k=e.typography,E=void 0===k?{}:k,C=(0,a.default)(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),S=(0,u.default)(y),O=(0,s.default)(n),T=(0,m.default)(w);return(0,o.default)({breakpoints:O,direction:"ltr",mixins:(0,c.default)(O,T,g),overrides:{},palette:S,props:{},shadows:x||f.default,typography:(0,d.default)(S,E),spacing:T},(0,i.default)({shape:p.default,transitions:h.default,zIndex:v.default},C,{isMergeableObject:l.default}))};t.default=g},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,l=void 0===r?"px":r,s=e.step,c=void 0===s?5:s,u=(0,a.default)(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function f(e,t){var r=i.indexOf(t)+1;return r===i.length?d(e):"@media (min-width:".concat(n[e]).concat(l,") and ")+"(max-width:".concat(n[i[r]]-c/100).concat(l,")")}return(0,o.default)({keys:i,values:n,up:d,down:function(e){var t=i.indexOf(e)+1,r=n[i[t]];if(t===i.length)return d("xs");return"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-c/100).concat(l,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},u)},t.keys=void 0;var o=r(n(1)),a=r(n(2)),i=["xs","sm","md","lg","xl"];t.keys=i},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r;return(0,a.default)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.default)({paddingLeft:t(2),paddingRight:t(2)},n,(0,o.default)({},e.up("sm"),(0,a.default)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,o.default)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,o.default)(r,e.up("sm"),{minHeight:64}),r)},n)};var o=r(n(9)),a=r(n(1))},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.primary,n=void 0===t?{light:l.default[300],main:l.default[500],dark:l.default[700]}:t,r=e.secondary,v=void 0===r?{light:s.default.A200,main:s.default.A400,dark:s.default.A700}:r,g=e.error,b=void 0===g?{light:u.default[300],main:u.default[500],dark:u.default[700]}:g,y=e.type,x=void 0===y?"light":y,w=e.contrastThreshold,k=void 0===w?3:w,E=e.tonalOffset,C=void 0===E?.2:E,S=(0,a.default)(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function O(e){var t=(0,f.getContrastRatio)(e,m.text.primary)>=k?m.text.primary:p.text.primary;return t}function T(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!(e=(0,o.default)({},e)).main&&e[t]&&(e.main=e[t]),h(e,"light",n,C),h(e,"dark",r,C),e.contrastText||(e.contrastText=O(e.main)),e}var j={dark:m,light:p};return(0,i.default)((0,o.default)({common:d.default,type:x,primary:T(n),secondary:T(v,"A400","A200","A700"),error:T(b),grey:c.default,contrastThreshold:k,getContrastText:O,augmentColor:T,tonalOffset:C},j[x]),S,{clone:!1})},t.dark=t.light=void 0;var o=r(n(1)),a=r(n(2)),i=(r(n(11)),r(n(33))),l=r(n(217)),s=r(n(218)),c=r(n(219)),u=r(n(220)),d=r(n(221)),f=n(222),p={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.default.white,default:c.default[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}};t.light=p;var m={text:{primary:d.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:c.default[800],default:"#303030"},action:{active:d.default.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function h(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,f.lighten)(e.main,r):"dark"===t&&(e.dark=(0,f.darken)(e.main,1.5*r)))}t.dark=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={black:"#000",white:"#fff"};t.default=r},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.hexToRgb=a,t.rgbToHex=function(e){if(0===e.indexOf("#"))return e;var t=l(e).values;return"#".concat(t.map(function(e){return 1===(t=e.toString(16)).length?"0".concat(t):t;var t}).join(""))},t.hslToRgb=i,t.decomposeColor=l,t.recomposeColor=s,t.getContrastRatio=function(e,t){var n=c(e),r=c(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.getLuminance=c,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return c(e)>.5?u(e,t):d(e,t)},t.fade=function(e,t){e=l(e),t=o(t),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,s(e)},t.darken=u,t.lighten=d;r(n(11));function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function a(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}function i(e){var t=(e=l(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-a*Math.max(Math.min(t-3,9-t,1),-1)},c="rgb",u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(c+="a",u.push(t[3])),s({type:c,values:u})}function l(e){if(e.type)return e;if("#"===e.charAt(0))return l(a(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(["Material-UI: unsupported `".concat(e,"` color."),"We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."].join("\n"));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function s(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map(function(e,t){return t<3?parseInt(e,10):e}):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function c(e){var t="hsl"===(e=l(e)).type?l(i(e)).values:e.values;return t=t.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e,t){if(e=l(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return s(e)}function d(e,t){if(e=l(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return s(e)}},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,u=void 0===r?c:r,d=n.fontSize,f=void 0===d?14:d,p=n.fontWeightLight,m=void 0===p?300:p,h=n.fontWeightRegular,v=void 0===h?400:h,g=n.fontWeightMedium,b=void 0===g?500:g,y=n.htmlFontSize,x=void 0===y?16:y,w=n.allVariants,k=(0,a.default)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","htmlFontSize","allVariants"]),E=f/14,C=function(e){return"".concat(e/x*E,"rem")},S=function(e,t,n,r,a){return(0,o.default)({fontFamily:u,fontWeight:e,fontSize:C(t),lineHeight:n},u===c?{letterSpacing:"".concat(l(r/t),"em")}:{},a,w)},O={h1:S(m,96,1,-1.5),h2:S(m,60,1,-.5),h3:S(v,48,1.04,0),h4:S(v,34,1.17,.25),h5:S(v,24,1.33,0),h6:S(b,20,1.6,.15),subtitle1:S(v,16,1.75,.15),subtitle2:S(b,14,1.57,.1),body1:S(v,16,1.5,.15),body2:S(v,14,1.43,.15),button:S(b,14,1.75,.4,s),caption:S(v,12,1.66,.4),overline:S(v,12,2.66,1,s)};return(0,i.default)((0,o.default)({htmlFontSize:x,pxToRem:C,round:l,fontFamily:u,fontSize:f,fontWeightLight:m,fontWeightRegular:v,fontWeightMedium:b},O),k,{clone:!1})};var o=r(n(1)),a=r(n(2)),i=r(n(33));function l(e){return Math.round(1e5*e)/1e5}var s={textTransform:"uppercase"},c='"Roboto", "Helvetica", "Arial", sans-serif'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=.2,o=.14,a=.12;function i(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(r,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(o,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(a,")")].join(",")}var l=["none",i(0,1,3,0,0,1,1,0,0,2,1,-1),i(0,1,5,0,0,2,2,0,0,3,1,-2),i(0,1,8,0,0,3,4,0,0,3,3,-2),i(0,2,4,-1,0,4,5,0,0,1,10,0),i(0,3,5,-1,0,5,8,0,0,1,14,0),i(0,3,5,-1,0,6,10,0,0,1,18,0),i(0,4,5,-2,0,7,10,1,0,2,16,1),i(0,5,5,-3,0,8,10,1,0,3,14,2),i(0,5,6,-3,0,9,12,1,0,3,16,2),i(0,6,6,-3,0,10,14,1,0,4,18,3),i(0,6,7,-4,0,11,15,1,0,4,20,3),i(0,7,8,-4,0,12,17,2,0,5,22,4),i(0,7,8,-4,0,13,19,2,0,5,24,4),i(0,7,9,-4,0,14,21,2,0,5,26,4),i(0,8,9,-5,0,15,22,2,0,6,28,5),i(0,8,10,-5,0,16,24,2,0,6,30,5),i(0,8,11,-5,0,17,26,2,0,6,32,5),i(0,9,11,-5,0,18,28,2,0,7,34,6),i(0,9,12,-6,0,19,29,2,0,7,36,6),i(0,10,13,-6,0,20,31,3,0,8,38,7),i(0,10,13,-6,0,21,33,3,0,8,40,7),i(0,10,14,-6,0,22,35,3,0,8,42,7),i(0,11,14,-7,0,23,36,3,0,9,44,8),i(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={borderRadius:4};t.default=r},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(t.mui)return t;e="function"==typeof t?t:function(e){return t*e};var n=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return 1===n.length?e(n[0]):n.map(function(t){var n=e(t);return"number"==typeof n?"".concat(n,"px"):n}).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return t}}),n.mui=!0,n};r(n(11))},function(e,t,n){"use strict";var r=n(32);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isNumber=t.isString=t.formatMs=t.duration=t.easing=void 0;var o=r(n(2)),a=(r(n(11)),{easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"});t.easing=a;var i={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};t.duration=i;var l=function(e){return"".concat(Math.round(e),"ms")};t.formatMs=l;t.isString=function(e){return"string"==typeof e};t.isNumber=function(e){return!isNaN(parseFloat(e))};var s={easing:a,duration:i,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?i.standard:n,s=t.easing,c=void 0===s?a.easeInOut:s,u=t.delay,d=void 0===u?0:u;(0,o.default)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:l(r)," ").concat(c," ").concat("string"==typeof d?d:l(d))}).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(230),a=n(233);t.Chat=()=>r.createElement(r.Fragment,null,r.createElement(a.ChatForm,null),r.createElement(o.Messages,null))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,l)}s((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(0),i=n(53),l=n(231);t.Messages=()=>{const[e,t]=a.useState([]),n=e.reduce((e,t)=>{if(t.fromUser===i.MessagesService.username){const n=t.toUsers[0];e[n]?e[n].push(t):e[t.toUsers[0]]=[t]}else e[t.fromUser]?e[t.fromUser].push(t):e[t.fromUser]=[t];return e},{}),s=()=>r(this,void 0,void 0,function*(){return t(yield i.MessagesService.getMessages())});return a.useEffect(()=>{s(),setInterval(()=>r(this,void 0,void 0,function*(){yield s()}),1e3)},[]),o.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",width:"100%",height:"100%",flexDirection:"row",flexWrap:"wrap"}},Object.keys(n).map(e=>o.createElement(l.MessageComponent,{key:e,messages:n[e]})))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(134),a=n(232),i=n(53);t.MessageComponent=e=>{let t=e.messages[0].fromUser;return t=t===i.MessagesService.username?e.messages[0].toUsers[0]:t,r.createElement(o.Paper,{elevation:2,style:{width:400,height:400,margin:12}},r.createElement("b",{style:{margin:20}},"Chat with ",t),r.createElement("div",{style:{display:"flex",flexDirection:"column",overflowY:"scroll",maxHeight:250,width:"100%",alignItems:"center"}},(()=>e.messages.map(e=>{const t=e.fromUser!==i.MessagesService.username?{backgroundColor:"#66cdaa",alignSelf:"flexStart",marginRight:"auto",marginLeft:10}:{backgroundColor:"#add8e6",alignSelf:"flexEnd",marginLeft:"auto",marginRight:10};return r.createElement("div",{style:Object.assign({maxWidth:"48%",padding:8,borderRadius:6,margin:4},t)},r.createElement("div",null,e.message))}))()),r.createElement(a.EmbeddedChatForm,{to:e.messages[0].fromUser}))}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,l)}s((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(0),i=n(67),l=n(46),s=n(53);t.EmbeddedChatForm=e=>{const[t,n]=a.useState("");return o.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",alignSelf:"flexEnd"}},o.createElement(i.default,{id:"outlined-message",label:"Message",value:t,onChange:e=>n(e.target.value),margin:"normal",variant:"outlined"}),o.createElement(l.default,{onClick:()=>r(this,void 0,void 0,function*(){yield s.MessagesService.writeMessage([e.to],t)})},"Send Message to ",e.to))}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function l(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,l)}s((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(0),i=n(67),l=n(46),s=n(53);t.ChatForm=()=>{const[e,t]=a.useState(""),[n,c]=a.useState("");return o.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column"}},o.createElement("h2",null,"Send a new message:"),o.createElement(i.default,{id:"outlined-to",label:"To",value:n,onChange:e=>c(e.target.value),margin:"normal",variant:"outlined"}),o.createElement(i.default,{id:"outlined-message",label:"Message",value:e,onChange:e=>t(e.target.value),margin:"normal",variant:"outlined"}),o.createElement(l.default,{onClick:()=>r(this,void 0,void 0,function*(){yield s.MessagesService.writeMessage([n],e)})},"Send Message"))}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(11),n(35)),u=n.n(c),d=n(96),f=n(236),p=n(94);t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,a=t.withTheme,l=void 0!==a&&a,c=t.name,m=i()(t,["defaultTheme","withTheme","name"]),h=c,v=Object(d.a)(e,o()({defaultTheme:r,Component:n,name:c||n.displayName,classNamePrefix:h},m)),g=s.a.forwardRef(function(e,t){e.classes;var a,u=e.innerRef,d=i()(e,["classes","innerRef"]),m=v(e),h=d;return("string"==typeof c||l)&&(a=Object(p.a)()||r,c&&(h=Object(f.a)({theme:a,name:c,props:d})),l&&!h.theme&&(h.theme=a)),s.a.createElement(n,o()({ref:u||t,classes:m},h))});return u()(g,n),g}}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});n(11);var r=n(73),o=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,a=e.productionPrefix,i=void 0===a?"jss":a,l=e.seed,s=void 0===l?"":l,c=""===s?"":"".concat(s,"-"),u=0;return function(e,t){u+=1;var a=t.options.name;if(a&&0===a.indexOf("Mui")&&!t.options.link&&!n){if(-1!==o.indexOf(e.key))return"Mui-".concat(e.key);var l="".concat(c).concat(a,"-").concat(e.key);return t.options.theme[r.a]&&""===s?"".concat(l,"-").concat(u):l}return"".concat(c).concat(i).concat(u)}}},function(e,t,n){"use strict";t.a=function(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,a=t.props[n];for(o in a)void 0===r[o]&&(r[o]=a[o]);return r}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(144),d=n(4),f=s.a.forwardRef(function(e,t){var n=e.disableUnderline,r=e.classes,a=e.fullWidth,l=void 0!==a&&a,d=e.inputComponent,f=void 0===d?"input":d,p=e.multiline,m=void 0!==p&&p,h=e.type,v=void 0===h?"text":h,g=i()(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return s.a.createElement(u.a,o()({classes:o()({},r,{root:Object(c.a)(r.root,!n&&r.underline),underline:null}),fullWidth:l,inputComponent:f,multiline:m,ref:t,type:v},g))});f.muiName="Input",t.a=Object(d.a)(function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},multiline:{padding:"27px 12px 10px"},input:{padding:"27px 12px 10px"},inputMarginDense:{paddingTop:24,paddingBottom:6},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}},{name:"MuiFilledInput"})(f)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(10),i=n.n(a),l=n(2),s=n.n(l),c=n(0),u=n.n(c),d=(n(5),n(3)),f=n(50),p=n(4),m=n(6),h=n(8),v=n(43),g=u.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.className,l=e.component,c=void 0===l?"div":l,p=e.disabled,g=void 0!==p&&p,b=e.error,y=void 0!==b&&b,x=e.fullWidth,w=void 0!==x&&x,k=e.margin,E=void 0===k?"none":k,C=e.required,S=void 0!==C&&C,O=e.variant,T=void 0===O?"standard":O,j=s()(e,["children","classes","className","component","disabled","error","fullWidth","margin","required","variant"]),P=u.a.useState(function(){var e=!1;return n&&u.a.Children.forEach(n,function(t){if(Object(h.a)(t,["Input","Select"])){var n=Object(h.a)(t,["Select"])?t.props.input:t;n&&Object(f.a)(n.props)&&(e=!0)}}),e}),R=i()(P,1)[0],N=u.a.useState(function(){var e=!1;return n&&u.a.Children.forEach(n,function(t){Object(h.a)(t,["Input","Select"])&&Object(f.b)(t.props,!0)&&(e=!0)}),e}),M=i()(N,2),A=M[0],L=M[1],I=u.a.useState(!1),_=i()(I,2),D=_[0],z=_[1];g&&D&&z(!1);var F={adornedStart:R,disabled:g,error:y,filled:A,focused:D,margin:E,onBlur:function(){z(!1)},onEmpty:function(){A&&L(!1)},onFilled:function(){A||L(!0)},onFocus:function(){z(!0)},required:S,variant:T};return u.a.createElement(v.a.Provider,{value:F},u.a.createElement(c,o()({className:Object(d.a)(r.root,"none"!==E&&r["margin".concat(Object(m.a)(E))],w&&r.fullWidth,a),ref:t},j),n))});t.a=Object(p.a)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(g)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(36),d=n(25),f=n(4),p=n(240),m=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.disableAnimation,l=void 0!==a&&a,d=(e.margin,e.muiFormControl),f=e.shrink,m=(e.variant,i()(e,["classes","className","disableAnimation","margin","muiFormControl","shrink","variant"])),h=f;void 0===h&&d&&(h=d.filled||d.focused||d.adornedStart);var v=Object(u.a)({props:e,muiFormControl:d,states:["margin","variant"]});return s.a.createElement(p.a,o()({"data-shrink":h,className:Object(c.a)(n.root,d&&n.formControl,!l&&n.animated,h&&n.shrink,"dense"===v.margin&&n.marginDense,"filled"===v.variant&&n.filled,"outlined"===v.variant&&n.outlined,r),classes:{focused:n.focused,disabled:n.disabled,error:n.error,required:n.required,asterisk:n.asterisk},ref:t},m))});t.a=Object(f.a)(function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 17px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}},{name:"MuiInputLabel"})(Object(d.a)(m))},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(1),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(36),d=n(25),f=n(4),p=s.a.forwardRef(function(e,t){var n=e.children,r=e.classes,a=e.className,l=e.component,d=void 0===l?"label":l,f=(e.disabled,e.error,e.filled,e.focused,e.muiFormControl),p=(e.required,o()(e,["children","classes","className","component","disabled","error","filled","focused","muiFormControl","required"])),m=Object(u.a)({props:e,muiFormControl:f,states:["required","focused","disabled","error","filled"]});return s.a.createElement(d,i()({className:Object(c.a)(r.root,m.disabled&&r.disabled,m.error&&r.error,m.filled&&r.filled,m.focused&&r.focused,m.required&&r.required,a),ref:t},p),n,m.required&&s.a.createElement("span",{className:Object(c.a)(r.asterisk,m.error&&r.error)}," ","*"))});t.a=Object(f.a)(function(e){return{root:i()({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary["light"===e.palette.type?"dark":"light"]},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}},{name:"MuiFormLabel"})(Object(d.a)(p))},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(19),s=n.n(l),c=n(20),u=n.n(c),d=n(27),f=n.n(d),p=n(28),m=n.n(p),h=n(29),v=n.n(h),g=n(0),b=n.n(g),y=(n(5),n(12)),x=n.n(y),w=(n(11),n(30)),k=n.n(w),E=n(59),C=n.n(E),S=n(3),O=n(21),T=n(78),j=n(6),P=n(44),R=n(4),N=n(143),M=n(243),A=n(64);function L(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function I(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function _(e){return[e.horizontal,e.vertical].map(function(e){return"number"==typeof e?"".concat(e,"px"):e}).join(" ")}function D(e){return"function"==typeof e?e():e}var z=function(e){function t(){var e;return s()(this,t),(e=f()(this,m()(t).call(this))).handleGetOffsetTop=L,e.handleGetOffsetLeft=I,e.componentWillUnmount=function(){e.handleResize.clear()},e.setPositioningStyles=function(t){var n=e.getPositioningStyle(t);null!==n.top&&(t.style.top=n.top),null!==n.left&&(t.style.left=n.left),t.style.transformOrigin=n.transformOrigin},e.getPositioningStyle=function(t){var n=e.props,r=n.anchorEl,o=n.anchorReference,a=n.marginThreshold,i=e.getContentAnchorOffset(t),l={width:t.offsetWidth,height:t.offsetHeight},s=e.getTransformOrigin(l,i);if("none"===o)return{top:null,left:null,transformOrigin:_(s)};var c=e.getAnchorOffset(i),u=c.top-s.vertical,d=c.left-s.horizontal,f=u+l.height,p=d+l.width,m=Object(T.a)(D(r)),h=m.innerHeight-a,v=m.innerWidth-a;if(u<a){var g=u-a;u-=g,s.vertical+=g}else if(f>h){var b=f-h;u-=b,s.vertical+=b}if(d<a){var y=d-a;d-=y,s.horizontal+=y}else if(p>v){var x=p-v;d-=x,s.horizontal+=x}return{top:"".concat(u,"px"),left:"".concat(d,"px"),transformOrigin:_(s)}},e.handleEntering=function(t){e.props.onEntering&&e.props.onEntering(t),e.setPositioningStyles(t)},"undefined"!=typeof window&&(e.handleResize=k()(function(){e.props.open&&e.setPositioningStyles(e.paperRef)},166)),e}return v()(t,e),u()(t,[{key:"componentDidMount",value:function(){this.props.action&&this.props.action({updatePosition:this.handleResize})}},{key:"getAnchorOffset",value:function(e){var t=this.props,n=t.anchorEl,r=t.anchorOrigin,o=t.anchorReference,a=t.anchorPosition;if("anchorPosition"===o)return a;var i=D(n),l=(i instanceof Element?i:Object(O.a)(this.paperRef).body).getBoundingClientRect(),s=0===e?r.vertical:"center";return{top:l.top+this.handleGetOffsetTop(l,s),left:l.left+this.handleGetOffsetLeft(l,r.horizontal)}}},{key:"getContentAnchorOffset",value:function(e){var t=this.props,n=t.getContentAnchorEl,r=t.anchorReference,o=0;if(n&&"anchorEl"===r){var a=n(e);if(a&&e.contains(a)){var i=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentNode).scrollTop;return r}(e,a);o=a.offsetTop+a.clientHeight/2-i||0}}return o}},{key:"getTransformOrigin",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.props.transformOrigin;return{vertical:this.handleGetOffsetTop(e,n.vertical)+t,horizontal:this.handleGetOffsetLeft(e,n.horizontal)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.action,t.anchorEl),r=(t.anchorOrigin,t.anchorPosition,t.anchorReference,t.children),a=t.classes,l=t.container,s=t.elevation,c=(t.getContentAnchorEl,t.innerRef),u=(t.marginThreshold,t.ModalClasses),d=t.onEnter,f=t.onEntered,p=(t.onEntering,t.onExit),m=t.onExited,h=t.onExiting,v=t.open,g=t.PaperProps,y=void 0===g?{}:g,w=(t.transformOrigin,t.TransitionComponent),k=t.transitionDuration,E=t.TransitionProps,T=void 0===E?{}:E,P=i()(t,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","container","elevation","getContentAnchorEl","innerRef","marginThreshold","ModalClasses","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),R=k;"auto"!==k||w.muiSupportAuto||(R=void 0);var M=l||(n?Object(O.a)(D(n)).body:void 0);return b.a.createElement(N.a,o()({classes:u,container:M,open:v,ref:c,BackdropProps:{invisible:!0}},P),b.a.createElement(w,o()({appear:!0,in:v,onEnter:d,onEntered:f,onExit:p,onExited:m,onExiting:h,timeout:R},T,{onEntering:Object(j.b)(this.handleEntering,T.onEntering)}),b.a.createElement(A.a,o()({elevation:s,ref:function(t){e.paperRef=x.a.findDOMNode(t)}},y,{className:Object(S.a)(a.paper,y.className)}),b.a.createElement(C.a,{target:"window",onResize:this.handleResize}),r)))}}]),t}(b.a.Component);z.defaultProps={anchorReference:"anchorEl",anchorOrigin:{vertical:"top",horizontal:"left"},elevation:8,marginThreshold:16,transformOrigin:{vertical:"top",horizontal:"left"},TransitionComponent:M.a,transitionDuration:"auto"},t.a=Object(R.a)({paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:"none"}},{name:"MuiPopover"})(Object(P.a)(z))},function(e,t,n){"use strict";n.d(t,"b",function(){return f});var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(35)),u=n.n(c),d=n(94);function f(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).defaultTheme;return function(t){var n=s.a.forwardRef(function(n,r){var a=n.innerRef,l=i()(n,["innerRef"]),c=Object(d.a)()||e;return s.a.createElement(t,o()({theme:c,ref:a||r},l))});return u()(n,t),n}}var p=f();t.a=p},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(95)),u=n(24),d=n(17),f=n(8);function p(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var m={entering:{opacity:1,transform:p(1)},entered:{opacity:1,transform:"".concat(p(1)," translateZ(0)")}},h=s.a.forwardRef(function(e,t){var n=e.children,r=e.in,a=e.onEnter,l=e.onExit,u=e.style,h=e.theme,v=e.timeout,g=void 0===v?"auto":v,b=i()(e,["children","in","onEnter","onExit","style","theme","timeout"]),y=s.a.useRef(),x=s.a.useRef(),w=Object(f.c)(n.ref,t);return s.a.useEffect(function(){return function(){clearTimeout(y.current)}},[]),s.a.createElement(c.a,o()({appear:!0,in:r,onEnter:function(e){Object(d.b)(e);var t=Object(d.a)({style:u,timeout:g},{mode:"enter"}),n=t.duration,r=t.delay,o=0;"auto"===g?(o=h.transitions.getAutoHeightDuration(e.clientHeight),x.current=o):o=n,e.style.transition=[h.transitions.create("opacity",{duration:o,delay:r}),h.transitions.create("transform",{duration:.666*o,delay:r})].join(","),a&&a(e)},onExit:function(e){var t=0,n=Object(d.a)({style:u,timeout:g},{mode:"exit"}),r=n.duration,o=n.delay;"auto"===g?(t=h.transitions.getAutoHeightDuration(e.clientHeight),x.current=t):t=r,e.style.transition=[h.transitions.create("opacity",{duration:t,delay:o}),h.transitions.create("transform",{duration:.666*t,delay:o||.333*t})].join(","),e.style.opacity="0",e.style.transform=p(.75),l&&l(e)},addEndListener:function(e,t){"auto"===g&&(y.current=setTimeout(t,x.current||0))},timeout:"auto"===g?null:g},b),function(e,t){return s.a.cloneElement(n,o()({style:o()({opacity:0,transform:p(.75),visibility:"exited"!==e||r?void 0:"hidden"},m[e],u,n.props.style),ref:w},t))})});h.muiSupportAuto=!0,t.a=Object(u.a)(h)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(12)),u=n.n(c),d=n(21),f=n(93),p=n(79),m=n(8);function h(e,t,n){return t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function v(e,t,n){return t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function g(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),void 0!==n&&(0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join(""))))}function b(e,t,n,r,o){for(var a=!1,i=r(e,t,!!t&&n);i;){if(i===e.firstChild){if(a)return!1;a=!0}if(i.hasAttribute("tabindex")&&!i.disabled&&"true"!==i.getAttribute("aria-disabled")&&g(i,o))break;i=r(e,i,n)}return!!i&&(i.focus(),!0)}var y="undefined"==typeof window?s.a.useEffect:s.a.useLayoutEffect,x=s.a.forwardRef(function(e,t){var n=e.actions,r=e.autoFocus,a=e.className,l=e.onKeyDown,c=e.disableListWrap,x=void 0!==c&&c,w=i()(e,["actions","autoFocus","className","onKeyDown","disableListWrap"]),k=s.a.useRef(null),E=s.a.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});y(function(){r&&k.current.focus()},[r]),s.a.useImperativeHandle(n,function(){return{adjustStyleForScrollbar:function(e,t){var n=!k.current.style.width;if(e.clientHeight<k.current.clientHeight&&n){var r="".concat(Object(p.a)(!0),"px");k.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,k.current.style.width="calc(100% + ".concat(r,")")}return k.current}}},[]);var C=s.a.useCallback(function(e){k.current=u.a.findDOMNode(e)},[]),S=Object(m.c)(C,t);return s.a.createElement(f.a,o()({role:"menu",ref:S,className:a,onKeyDown:function(e){var t=k.current,n=e.key,r=Object(d.a)(t).activeElement;if("ArrowUp"!==n&&"ArrowDown"!==n||r&&(!r||t.contains(r))){if("ArrowDown"===n)e.preventDefault(),b(t,r,x,h);else if("ArrowUp"===n)e.preventDefault(),b(t,r,x,v);else if("Home"===n)e.preventDefault(),b(t,null,x,h);else if("End"===n)e.preventDefault(),b(t,null,x,v);else if(1===n.length){var o=E.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);var s=r&&!o.repeating&&g(r,o);o.previousKeyMatched&&(s||b(t,r,!1,h,o))?e.preventDefault():o.previousKeyMatched=!1}}else b(t,null,x,h);l&&l(e)},tabIndex:r?0:-1},w))});t.a=x},function(e,t,n){"use strict";var r=n(2),o=n.n(r),a=n(1),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(36),d=n(25),f=n(4),p=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.component,l=void 0===a?"p":a,d=(e.disabled,e.error,e.filled,e.focused,e.margin,e.muiFormControl),f=(e.required,e.variant,o()(e,["classes","className","component","disabled","error","filled","focused","margin","muiFormControl","required","variant"])),p=Object(u.a)({props:e,muiFormControl:d,states:["variant","margin","disabled","error","filled","focused","required"]});return s.a.createElement(l,i()({className:Object(c.a)(n.root,("filled"===p.variant||"outlined"===p.variant)&&n.contained,"dense"===p.margin&&n.marginDense,p.disabled&&n.disabled,p.error&&n.error,p.filled&&n.filled,p.focused&&n.focused,p.required&&n.required,r),ref:t},f))});t.a=Object(f.a)(function(e){return{root:i()({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:8,lineHeight:"1em",minHeight:"1em",margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{margin:"8px 12px 0"},focused:{},filled:{},required:{}}},{name:"MuiFormHelperText"})(Object(d.a)(p))},function(e,t,n){"use strict";function r(e){return e}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(0),i=n.n(a),l=(n(5),n(11),n(72)),s=n(94),c=n(73);t.a=function(e){var t=e.children,n=e.theme,r=Object(s.a)(),a=i.a.useMemo(function(){var e=null===r?n:function(e,t){return"function"==typeof t?t(e):o()({},e,t)}(r,n);return null!==r&&e&&(e[c.a]=!0),e},[n,r]);return i.a.createElement(l.a.Provider,{value:a},t)}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=n(3),u=(n(11),n(5),n(35)),d=n.n(u),f=n(96);t.a=function(e){return function(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=r.name,l=i()(r,["name"]),u=a,p="function"==typeof t?function(e){return{root:function(n){return t(o()({theme:e},n))}}}:{root:t},m=Object(f.a)(p,o()({Component:e,name:a||e.displayName,classNamePrefix:u},l));t.filterProps&&(n=t.filterProps,delete t.filterProps),t.propTypes&&(t.propTypes,delete t.propTypes);var h=s.a.forwardRef(function(t,r){var a=t.children,l=t.className,u=t.clone,d=t.component,f=i()(t,["children","className","clone","component"]),p=m(t),h=Object(c.a)(p.root,l);if(u)return s.a.cloneElement(a,{className:Object(c.a)(a.props.className,h)});var v,g,b,y=f;if(n&&(v=y,g=n,b={},Object.keys(v).forEach(function(e){-1===g.indexOf(e)&&(b[e]=v[e])}),y=b),"function"==typeof a)return a(o()({className:h},y));var x=d||e;return s.a.createElement(x,o()({ref:r,className:h},y),a)});return d()(h,e),h}}},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(12)),u=n.n(c),d=n(30),f=n.n(d),p=n(95),m=n(8),h=n(24),v=n(14),g=n(17),b=24;function y(e,t){var n=function(e,t){var n,r=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var o=window.getComputedStyle(t);n=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform")}var a=0,i=0;if(n&&"none"!==n&&"string"==typeof n){var l=n.split("(")[1].split(")")[0].split(",");a=parseInt(l[4],10),i=parseInt(l[5],10)}return"left"===e?"translateX(100vw) translateX(-".concat(r.left-a,"px)"):"right"===e?"translateX(-".concat(r.left+r.width+b-a,"px)"):"up"===e?"translateY(100vh) translateY(-".concat(r.top-i,"px)"):"translateY(-".concat(r.top+r.height+b-i,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var x={enter:v.b.enteringScreen,exit:v.b.leavingScreen},w=s.a.forwardRef(function(e,t){var n=e.children,r=e.direction,a=void 0===r?"down":r,l=e.in,c=e.onEnter,d=e.onEntering,h=e.onExit,v=e.onExited,b=e.style,w=e.theme,k=e.timeout,E=void 0===k?x:k,C=i()(e,["children","direction","in","onEnter","onEntering","onExit","onExited","style","theme","timeout"]),S=s.a.useRef(null),O=s.a.useCallback(function(e){S.current=u.a.findDOMNode(e)},[]),T=Object(m.c)(n.ref,O),j=Object(m.c)(T,t),P=s.a.useCallback(function(){S.current&&y(a,S.current)},[a]);return s.a.useEffect(function(){if(!l&&"down"!==a&&"right"!==a){var e=f()(function(){S.current&&y(a,S.current)},166);return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}},[a,l]),s.a.useEffect(function(){l||P()},[l,P]),s.a.createElement(p.a,o()({onEnter:function(){var e=S.current;y(a,e),Object(g.b)(e),c&&c(e)},onEntering:function(){var e=S.current,t=Object(g.a)({timeout:E,style:b},{mode:"enter"});e.style.webkitTransition=w.transitions.create("-webkit-transform",o()({},t,{easing:w.transitions.easing.easeOut})),e.style.transition=w.transitions.create("transform",o()({},t,{easing:w.transitions.easing.easeOut})),e.style.webkitTransform="translate(0, 0)",e.style.transform="translate(0, 0)",d&&d(e)},onExit:function(){var e=S.current,t=Object(g.a)({timeout:E,style:b},{mode:"exit"});e.style.webkitTransition=w.transitions.create("-webkit-transform",o()({},t,{easing:w.transitions.easing.sharp})),e.style.transition=w.transitions.create("transform",o()({},t,{easing:w.transitions.easing.sharp})),y(a,e),h&&h(e)},onExited:function(){var e=S.current;e.style.webkitTransition="",e.style.transition="",v&&v(e)},appear:!0,in:l,timeout:E},C),function(e,t){return s.a.cloneElement(n,o()({ref:j,style:o()({visibility:"exited"!==e||l?void 0:"hidden"},b,n.props.style)},t))})});t.a=Object(h.a)(w)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(4),d=n(251),f=s.a.forwardRef(function(e,t){var n=e.classes,r=e.className,a=e.invisible,l=void 0!==a&&a,u=e.open,f=e.transitionDuration,p=i()(e,["classes","className","invisible","open","transitionDuration"]);return s.a.createElement(d.a,o()({in:u,timeout:f},p),s.a.createElement("div",{className:Object(c.a)(n.root,l&&n.invisible,r),"aria-hidden":!0,ref:t}))});t.a=Object(u.a)({root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",touchAction:"none"},invisible:{backgroundColor:"transparent"}},{name:"MuiBackdrop"})(f)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(95)),u=n(14),d=n(24),f=n(17),p=n(8),m={entering:{opacity:1},entered:{opacity:1}},h={enter:u.b.enteringScreen,exit:u.b.leavingScreen},v=s.a.forwardRef(function(e,t){var n=e.children,r=e.in,a=e.onEnter,l=e.onExit,u=e.style,d=e.theme,v=e.timeout,g=void 0===v?h:v,b=i()(e,["children","in","onEnter","onExit","style","theme","timeout"]),y=Object(p.c)(n.ref,t);return s.a.createElement(c.a,o()({appear:!0,in:r,onEnter:function(e){Object(f.b)(e);var t=Object(f.a)({style:u,timeout:g},{mode:"enter"});e.style.webkitTransition=d.transitions.create("opacity",t),e.style.transition=d.transitions.create("opacity",t),a&&a(e)},onExit:function(e){var t=Object(f.a)({style:u,timeout:g},{mode:"exit"});e.style.webkitTransition=d.transitions.create("opacity",t),e.style.transition=d.transitions.create("opacity",t),l&&l(e)},timeout:g},b),function(e,t){return s.a.cloneElement(n,o()({style:o()({opacity:0,visibility:"exited"!==e||r?void 0:"hidden"},m[e],u,n.props.style),ref:y},t))})});t.a=Object(d.a)(v)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(3)),u=n(144),d=n(9),f=n.n(d),p=n(4),m=n(6),h=s.a.forwardRef(function(e,t){e.children;var n=e.classes,r=e.className,a=e.labelWidth,l=e.notched,u=e.style,d=e.theme,p=i()(e,["children","classes","className","labelWidth","notched","style","theme"]),h="rtl"===d.direction?"right":"left",v=a>0?.75*a+8:0;return s.a.createElement("fieldset",o()({"aria-hidden":!0,style:o()(f()({},"padding".concat(Object(m.a)(h)),8+(l?0:v/2)),u),className:Object(c.a)(n.root,r),ref:t},p),s.a.createElement("legend",{className:n.legend,style:{width:l?v:.01}},s.a.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}),v=Object(p.a)(function(e){var t="rtl"===e.direction?"right":"left";return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:0,pointerEvents:"none",borderRadius:e.shape.borderRadius,borderStyle:"solid",borderWidth:1,transition:e.transitions.create(["padding-".concat(t),"border-color","border-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}}},{name:"PrivateNotchedOutline",withTheme:!0})(h),g=s.a.forwardRef(function(e,t){var n=e.classes,r=e.fullWidth,a=void 0!==r&&r,l=e.inputComponent,d=void 0===l?"input":l,f=e.labelWidth,p=void 0===f?0:f,m=e.multiline,h=void 0!==m&&m,g=e.notched,b=e.type,y=void 0===b?"text":b,x=i()(e,["classes","fullWidth","inputComponent","labelWidth","multiline","notched","type"]);return s.a.createElement(u.a,o()({renderPrefix:function(e){return s.a.createElement(v,{className:n.notchedOutline,labelWidth:p,notched:void 0!==g?g:Boolean(e.startAdornment||e.filled||e.focused)})},classes:o()({},n,{root:Object(c.a)(n.root,n.underline),notchedOutline:null}),fullWidth:a,inputComponent:d,multiline:h,ref:t,type:y},x))});g.muiName="Input";t.a=Object(p.a)(function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative","& $notchedOutline":{borderColor:t},"&:hover $notchedOutline":{borderColor:e.palette.text.primary,"@media (hover: none)":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},multiline:{padding:"18.5px 14px"},notchedOutline:{},input:{padding:"18.5px 14px"},inputMarginDense:{paddingTop:15,paddingBottom:15},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}},{name:"MuiOutlinedInput"})(g)},function(e,t,n){"use strict";var r=n(1),o=n.n(r),a=n(2),i=n.n(a),l=n(0),s=n.n(l),c=(n(5),n(330)),u=n(23),d=n.n(u),f=n(10),p=n.n(f),m=n(47),h=n.n(m),v=n(3),g=(n(11),n(136)),b=n(50),y=n(8);function x(e,t){return"object"===h()(t)&&null!==t?e===t:String(e)===String(t)}var w=s.a.forwardRef(function(e,t){var n=e.autoFocus,r=e.autoWidth,a=e.children,l=e.classes,c=e.className,u=e.disabled,f=e.displayEmpty,m=e.IconComponent,h=e.inputRef,w=e.MenuProps,k=void 0===w?{}:w,E=e.multiple,C=e.name,S=e.onBlur,O=e.onChange,T=e.onClose,j=e.onFocus,P=e.onOpen,R=e.open,N=e.readOnly,M=e.renderValue,A=(e.required,e.SelectDisplayProps),L=e.tabIndex,I=e.type,_=void 0===I?"hidden":I,D=e.value,z=e.variant,F=i()(e,["autoFocus","autoWidth","children","classes","className","disabled","displayEmpty","IconComponent","inputRef","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","required","SelectDisplayProps","tabIndex","type","value","variant"]),B=s.a.useRef(null),W=s.a.useRef(!1),U=s.a.useRef(null!=e.open).current,H=s.a.useState(),$=p()(H,2),V=$[0],q=$[1],K=s.a.useState(!1),X=p()(K,2),G=X[0],Y=X[1],Q=s.a.useState(0),J=p()(Q,2)[1],Z=Object(y.c)(t,h);s.a.useImperativeHandle(Z,function(){return{focus:function(){B.current.focus()},node:h?h.current:null,value:D}},[h,D]),s.a.useEffect(function(){U&&R&&(B.current.focus(),J(function(e){return!e})),n&&B.current.focus()},[n,U,R]);var ee,te=function(e,t){e?P&&P(t):T&&T(t),U||(q(r?null:B.current.clientWidth),Y(e))},ne=function(e){return function(t){if(E||te(!1,t),O){var n;if(E){n=Array.isArray(D)?d()(D):[];var r=D.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;t.persist(),t.target={value:n,name:C},O(t,e)}}},re=U&&B.current?R:G;delete F["aria-invalid"];var oe="",ae=[],ie=!1;(Object(b.b)(e)||f)&&(M?ee=M(D):ie=!0);var le=s.a.Children.map(a,function(e){if(!s.a.isValidElement(e))return null;var t;if(E){if(!Array.isArray(D))throw new Error("Material-UI: the `value` property must be an array when using the `Select` component with `multiple`.");(t=D.some(function(t){return x(t,e.props.value)}))&&ie&&ae.push(e.props.children)}else(t=x(D,e.props.value))&&ie&&(oe=e.props.children);return s.a.cloneElement(e,{onClick:ne(e),role:"option",selected:t,value:void 0,"data-value":e.props.value})});ie&&(ee=E?ae.join(", "):oe);var se,ce=V;return!r&&U.current&&B.current&&(ce=B.current.clientWidth),se=void 0!==L?L:u?null:0,s.a.createElement("div",{className:l.root},s.a.createElement("div",o()({className:Object(v.a)(l.select,l.selectMenu,u&&l.disabled,"filled"===z&&l.filled,"outlined"===z&&l.outlined,c),ref:B,"aria-pressed":re?"true":"false",tabIndex:se,role:"button","aria-owns":re?"menu-".concat(C||""):void 0,"aria-haspopup":"true",onKeyDown:function(e){N||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),W.current=!0,te(!0,e))},onBlur:function(e){if(!0===W.current)return e.stopPropagation(),void(W.current=!1);S&&(e.persist(),e.target={value:D,name:C},S(e))},onClick:u||N?null:function(e){W.current=!0,te(!0,e)},onFocus:j,id:C?"select-".concat(C):void 0},A),null!=ee?ee:s.a.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})),s.a.createElement("input",o()({value:Array.isArray(D)?D.join(","):D,name:C,ref:Z,type:_,autoFocus:n},F)),s.a.createElement(m,{className:l.icon}),s.a.createElement(g.a,o()({id:"menu-".concat(C||""),anchorEl:B.current,open:re,onClose:function(e){te(!1,e)}},k,{MenuListProps:o()({role:"listbox",disableListWrap:!0},k.MenuListProps),PaperProps:o()({},k.PaperProps,{style:o()({minWidth:ce},null!=k.PaperProps?k.PaperProps.style:null)})}),le))}),k=n(36),E=n(25),C=n(4),S=n(75),O=n(141),T=n(135),j=n(77),P=T.b,R=s.a.createElement(O.a,null),N=s.a.forwardRef(function e(t,n){var r=t.autoWidth,a=void 0!==r&&r,l=t.children,u=t.classes,d=t.displayEmpty,f=void 0!==d&&d,p=t.IconComponent,m=void 0===p?S.a:p,h=t.input,v=void 0===h?R:h,g=t.inputProps,b=t.MenuProps,y=t.muiFormControl,x=t.multiple,E=void 0!==x&&x,C=t.native,O=void 0!==C&&C,T=t.onClose,P=t.onOpen,N=t.open,M=t.renderValue,A=t.SelectDisplayProps,L=(t.variant,i()(t,["autoWidth","children","classes","displayEmpty","IconComponent","input","inputProps","MenuProps","muiFormControl","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"])),I=O?j.a:w,_=Object(k.a)({props:t,muiFormControl:y,states:["variant"]});return s.a.cloneElement(v,o()({inputComponent:I,inputProps:o()({children:l,IconComponent:m,variant:_.variant,type:void 0,multiple:E},O?{}:{autoWidth:a,displayEmpty:f,MenuProps:b,onClose:T,onOpen:P,open:N,renderValue:M,SelectDisplayProps:A},g,{classes:g?Object(c.a)({baseClasses:u,newClasses:g.classes,Component:e}):u},v?v.props.inputProps:{}),ref:n},L))});N.muiName="Select";t.a=Object(C.a)(P,{name:"MuiSelect"})(Object(E.a)(N))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(1),o=n.n(r);n(11);t.a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=o()({},t);return Object.keys(n).forEach(function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))}),r}},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r,o=n(1),a=n.n(o),i=n(2),l=n.n(i),s=n(0),c=n.n(s),u=(n(5),n(11),n(235)),d=n(22),f=n(142),p=Object(d.c)(Object(f.a)()),m={disableGeneration:!1,generateClassName:Object(u.a)(),jss:p,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},h=c.a.createContext(m);function v(e){var t=e.children,n=e.injectFirst,o=l()(e,["children","injectFirst"]),i=c.a.useContext(h),s=a()({},i,o);if(!s.jss.options.insertionPoint&&n&&"undefined"!=typeof window){if(!r){var u=document.head;r=document.createComment("mui-inject-first"),u.insertBefore(r,u.firstChild)}s.jss=Object(d.c)({plugins:Object(f.a)().plugins,insertionPoint:r})}return c.a.createElement(h.Provider,{value:s},t)}v.defaultProps={disableGeneration:!1,injectFirst:!1},t.b=v},function(e,t,n){"use strict";var r=n(10),o=n.n(r),a=n(0),i=n.n(a),l=n(12),s=n.n(l),c=(n(5),n(8));var u="undefined"!=typeof window?i.a.useLayoutEffect:i.a.useEffect,d=i.a.forwardRef(function(e,t){var n=e.children,r=e.container,a=e.disablePortal,l=e.onRendered,d=i.a.useState(null),f=o()(d,2),p=f[0],m=f[1],h=i.a.useRef(null),v=Object(c.c)(n.ref,h);return u(function(){a||m(function(e){return e="function"==typeof e?e():e,s.a.findDOMNode(e)}(r)||document.body)},[r,a]),i.a.useEffect(function(){l&&p&&l()},[p,l]),i.a.useImperativeHandle(t,function(){return p||h.current},[p]),a?(i.a.Children.only(n),i.a.cloneElement(n,{ref:v})):p?s.a.createPortal(n,p):p});d.defaultProps={disablePortal:!1},t.a=d},function(e,t,n){"use strict";var r=n(10),o=n.n(r),a=n(0),i=n.n(a),l=(n(5),"undefined"!=typeof window?i.a.useLayoutEffect:i.a.useEffect);t.a=function(e){var t=e.children,n=e.defer,r=void 0!==n&&n,a=e.fallback,s=void 0===a?null:a,c=i.a.useState(!1),u=o()(c,2),d=u[0],f=u[1];return l(function(){r||f(!0)},[r]),i.a.useEffect(function(){r&&f(!0)},[r]),i.a.createElement(i.a.Fragment,null,d?t:s)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3JlYWN0SGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy90cmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdHJhbnNpdGlvbnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvZGlzdC9qc3MuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL3dpdGhGb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9EcmF3ZXIvRHJhd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVHlwb2dyYXBoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L3VtZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9QYXBlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vU2VydmVyU3R5bGVTaGVldHMvU2VydmVyU3R5bGVTaGVldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvd2l0aEZvcndhcmRlZFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL21hbmFnZUFyaWFIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWVzc2FnZXNTZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2Nzc1V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3Jlc3BvbnNpdmVGb250U2l6ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL2Rpc3QvcmVhY3QtZXZlbnQtbGlzdGVuZXIuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1pbi1icm93c2VyL2Rpc3QvbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JY29uQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UZXh0RmllbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS13YXJuaW5nL2Rpc3QvdGlueS13YXJuaW5nLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS1zY3JvbGwtbGVmdC9saWIvbWFpbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1wbGFpbi1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL2dldFN0eWxlc0NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL21ha2VTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGV4dEZpZWxkL1RleHRGaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL011aVRoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9BcHBCYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9BcHBCYXIvQXBwQmFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVG9vbGJhci9Ub29sYmFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RyYXdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtL0xpc3RJdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdEl0ZW1JY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdEl0ZW1JY29uL0xpc3RJdGVtSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtVGV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtVGV4dC9MaXN0SXRlbVRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcHVycGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2RlZXBQdXJwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvY3lhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy90ZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2xpZ2h0R3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvbGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy95ZWxsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2RlZXBPcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYnJvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYmx1ZUdyZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9BdmF0YXIvQXZhdGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQmFkZ2UvQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Cb3R0b21OYXZpZ2F0aW9uL0JvdHRvbU5hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uL0JvdHRvbU5hdmlnYXRpb25BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vZGlzcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vZmxleGJveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vcG9zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zaGFkb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Cb3gvQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvc3ZnLWljb25zL01vcmVIb3Jpei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0JyZWFkY3J1bWJzL0JyZWFkY3J1bWJDb2xsYXBzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CcmVhZGNydW1icy9CcmVhZGNydW1iU2VwYXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnJlYWRjcnVtYnMvQnJlYWRjcnVtYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkL0NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkQWN0aW9uQXJlYS9DYXJkQWN0aW9uQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRBY3Rpb25zL0NhcmRBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZENvbnRlbnQvQ2FyZENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkSGVhZGVyL0NhcmRIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DYXJkTWVkaWEvQ2FyZE1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvU3dpdGNoQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveE91dGxpbmVCbGFuay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9JbmRldGVybWluYXRlQ2hlY2tCb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DaGVja2JveC9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DaGlwL0NoaXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DaXJjdWxhclByb2dyZXNzL0NpcmN1bGFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DbGlja0F3YXlMaXN0ZW5lci9DbGlja0F3YXlMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NvbGxhcHNlL0NvbGxhcHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ29udGFpbmVyL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Nzc0Jhc2VsaW5lL0Nzc0Jhc2VsaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRGlhbG9nL0RpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ0FjdGlvbnMvRGlhbG9nQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ0NvbnRlbnQvRGlhbG9nQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ0NvbnRlbnRUZXh0L0RpYWxvZ0NvbnRlbnRUZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRGlhbG9nVGl0bGUvRGlhbG9nVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9EaXZpZGVyL0RpdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9FeHBhbnNpb25QYW5lbC9FeHBhbnNpb25QYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0V4cGFuc2lvblBhbmVsQWN0aW9ucy9FeHBhbnNpb25QYW5lbEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9FeHBhbnNpb25QYW5lbERldGFpbHMvRXhwYW5zaW9uUGFuZWxEZXRhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRXhwYW5zaW9uUGFuZWxTdW1tYXJ5L0V4cGFuc2lvblBhbmVsU3VtbWFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0ZhYi9GYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbExhYmVsL0Zvcm1Db250cm9sTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtR3JvdXAvRm9ybUdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vR3JpZC9HcmlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vR3JpZExpc3QvR3JpZExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9HcmlkTGlzdFRpbGUvR3JpZExpc3RUaWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vR3JpZExpc3RUaWxlQmFyL0dyaWRMaXN0VGlsZUJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3dpdGhXaWR0aC93aXRoV2lkdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9IaWRkZW4vSGlkZGVuSnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9IaWRkZW4vSGlkZGVuQ3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSGlkZGVuL0hpZGRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0ljb24vSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QWRvcm5tZW50L0lucHV0QWRvcm5tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGluZWFyUHJvZ3Jlc3MvTGluZWFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9MaW5rL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9MaXN0SXRlbUF2YXRhci9MaXN0SXRlbUF2YXRhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uL0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdFN1YmhlYWRlci9MaXN0U3ViaGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTWVudUl0ZW0vTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2JpbGVTdGVwcGVyL01vYmlsZVN0ZXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Qb3BwZXIvUG9wcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1JhZGlvQnV0dG9uVW5jaGVja2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1JhZGlvQnV0dG9uQ2hlY2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1JhZGlvL1JhZGlvQnV0dG9uSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1JhZGlvR3JvdXAvUmFkaW9Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9SYWRpby9SYWRpby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1JhZGlvR3JvdXAvUmFkaW9Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1Jvb3RSZWYvUm9vdFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NuYWNrYmFyQ29udGVudC9TbmFja2JhckNvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TbmFja2Jhci9TbmFja2Jhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N0ZXAvU3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9XYXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3RlcEljb24vU3RlcEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdGVwTGFiZWwvU3RlcExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3RlcEJ1dHRvbi9TdGVwQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3RlcENvbm5lY3Rvci9TdGVwQ29ubmVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3RlcENvbnRlbnQvU3RlcENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdGVwcGVyL1N0ZXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Td2lwZWFibGVEcmF3ZXIvU3dpcGVBcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3dpcGVhYmxlRHJhd2VyL1N3aXBlYWJsZURyYXdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N3aXRjaC9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWIvVGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGVDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZS9UYWJsZWx2bDJDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVCb2R5L1RhYmxlQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlQ2VsbC9UYWJsZUNlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZUZvb3Rlci9UYWJsZUZvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlSGVhZC9UYWJsZUhlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVQYWdpbmF0aW9uL1RhYmxlUGFnaW5hdGlvbkFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZVBhZ2luYXRpb24vVGFibGVQYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVSb3cvVGFibGVSb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEb3dud2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlU29ydExhYmVsL1RhYmxlU29ydExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvYW5pbWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYnMvU2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYnMvVGFiSW5kaWNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9UYWJTY3JvbGxCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJzL1RhYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sdGlwL1Rvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS93aXRoTW9iaWxlRGlhbG9nL3dpdGhNb2JpbGVEaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9ab29tL1pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9NZW51L01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0FycmF5LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9pc0Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzSUUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRSb290LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZmluZENvbW1vbk9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzT2Zmc2V0Q29udGFpbmVyLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0U2Nyb2xsLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0Qm9yZGVyc1NpemUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRXaW5kb3dTaXplcy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldENsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9pbmNsdWRlU2Nyb2xsLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldEJvdW5kYXJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9pc0ZpeGVkLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRSZWZlcmVuY2VPZmZzZXRzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0T3V0ZXJTaXplcy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0UG9wcGVyT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9ydW5Nb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9maW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9pc01vZGlmaWVyRW5hYmxlZC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldFdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL3NldHVwRXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tZXRob2RzL2Rpc2FibGVFdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL3JlbW92ZUV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvc2V0U3R5bGVzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21ldGhvZHMvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2Nsb2Nrd2lzZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9mbGlwLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL29mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21ldGhvZHMvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tb2RpZmllcnMvc2hpZnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2tlZXBUb2dldGhlci5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9hcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2lubmVyLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRSb3VuZGVkT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9hcHBseVN0eWxlLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvc2V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbWV0aG9kcy91cGRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tZXRob2RzL2Rlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tZXRob2RzL2VuYWJsZUV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvaXNPdmVyZmxvd2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0L0lucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24vZGlzdC9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24uZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWdsb2JhbC9kaXN0L2pzcy1wbHVnaW4tZ2xvYmFsLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1uZXN0ZWQvZGlzdC9qc3MtcGx1Z2luLW5lc3RlZC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWNhbWVsLWNhc2UvZGlzdC9qc3MtcGx1Z2luLWNhbWVsLWNhc2UuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC9kaXN0L2pzcy1wbHVnaW4tZGVmYXVsdC11bml0LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2Rpc3QvY3NzLXZlbmRvci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyL2Rpc3QvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9qc3NQcmVzZXQvanNzUHJlc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvVHJhcEZvY3VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvU2ltcGxlQmFja2Ryb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS9UZXh0YXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybS50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwQmFyLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtdW5pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTmF2RHJhd2VyLnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0V4aXRUb0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9HaXRIdWIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvaW5kaWdvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9zaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy90cmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGF0LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTWVzc2FnZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRW1iZWRkZWRDaGF0Rm9ybS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEZvcm0udHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS93aXRoU3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GaWxsZWRJbnB1dC9GaWxsZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXRMYWJlbC9JbnB1dExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUxhYmVsL0Zvcm1MYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BvcG92ZXIvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFRoZW1lL3dpdGhUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01lbnVMaXN0L01lbnVMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUhlbHBlclRleHQvRm9ybUhlbHBlclRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZVN0eWxlcy9jcmVhdGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1RoZW1lUHJvdmlkZXIvVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vc3R5bGVkL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NsaWRlL1NsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQmFja2Ryb3AvQmFja2Ryb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vT3V0bGluZWRJbnB1dC9PdXRsaW5lZElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU2VsZWN0L1NlbGVjdElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU2VsZWN0L1NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWVyZ2VDbGFzc2VzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vU3R5bGVzUHJvdmlkZXIvU3R5bGVzUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Qb3J0YWwvUG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTm9Tc3IvTm9Tc3IuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwidGhpcyIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b1ZhbCIsIm1peCIsImsiLCJ5Iiwic3RyIiwicHVzaCIsIl9fd2VicGFja19leHBvcnRzX18iLCJ4IiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19leHRlbmRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2V4dGVuZHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiX21hdGVyaWFsX3VpX3N0eWxlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2RlZmF1bHRUaGVtZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwic3R5bGVzT3JDcmVhdG9yIiwib3B0aW9ucyIsImRlZmF1bHRUaGVtZSIsImNhcGl0YWxpemUiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiX2xlbiIsImZ1bmNzIiwiQXJyYXkiLCJfa2V5IiwicmVkdWNlIiwiYWNjIiwiZnVuYyIsIl9sZW4yIiwiYXJncyIsIl9rZXkyIiwiaGV4VG9SZ2IiLCJyZ2JUb0hleCIsImhzbFRvUmdiIiwiZGVjb21wb3NlQ29sb3IiLCJyZWNvbXBvc2VDb2xvciIsImdldENvbnRyYXN0UmF0aW8iLCJnZXRMdW1pbmFuY2UiLCJlbXBoYXNpemUiLCJmYWRlIiwiZGFya2VuIiwibGlnaHRlbiIsImNsYW1wIiwibWluIiwidW5kZWZpbmVkIiwibWF4IiwiY29sb3IiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbmNhdCIsImNvbG9ycyIsIm1hdGNoIiwibWFwIiwicGFyc2VJbnQiLCJqb2luIiwidmFsdWVzIiwiaGV4IiwidG9TdHJpbmciLCJoIiwiYSIsIk1hdGgiLCJmIiwidHlwZSIsInJnYiIsInJvdW5kIiwibWFya2VyIiwic3Vic3RyaW5nIiwiRXJyb3IiLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCIsImx1bUEiLCJsdW1CIiwidmFsIiwicG93IiwiTnVtYmVyIiwidG9GaXhlZCIsImNvZWZmaWNpZW50IiwiaXNNdWlFbGVtZW50Iiwic2V0UmVmIiwidXNlRm9ya1JlZiIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJlbGVtZW50IiwibXVpTmFtZXMiLCJpc1ZhbGlkRWxlbWVudCIsIm11aU5hbWUiLCJyZWYiLCJjdXJyZW50IiwicmVmQSIsInJlZkIiLCJ1c2VNZW1vIiwicmVmVmFsdWUiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJub25JdGVyYWJsZVJlc3QiLCJhcnIiLCJ3YXJuaW5nIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJlYXNpbmciLCJkdXJhdGlvbiIsImZvcm1hdE1zIiwiaXNTdHJpbmciLCJpc051bWJlciIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJtaWxsaXNlY29uZHMiLCJpc05hTiIsInByb3BzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJpc0FycmF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiaGVpZ2h0IiwiY29uc3RhbnQiLCJjcmVhdGVTdmdJY29uIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIl9TdmdJY29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJwYXRoIiwiZGlzcGxheU5hbWUiLCJDb21wb25lbnQiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImNyZWF0ZUVsZW1lbnQiLCJrZXlzIiwiY3JlYXRlQnJlYWtwb2ludHMiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsImJyZWFrcG9pbnRzIiwiX2JyZWFrcG9pbnRzJHZhbHVlcyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJfYnJlYWtwb2ludHMkdW5pdCIsInVuaXQiLCJfYnJlYWtwb2ludHMkc3RlcCIsInN0ZXAiLCJvdGhlciIsInVwIiwiYmV0d2VlbiIsInN0YXJ0IiwiZW5kIiwiZW5kSW5kZXgiLCJkb3duIiwidXBwZXJib3VuZCIsIm9ubHkiLCJ3aWR0aCIsInJlZmxvdyIsImdldFRyYW5zaXRpb25Qcm9wcyIsIm5vZGUiLCJzY3JvbGxUb3AiLCJ0aW1lb3V0IiwiX3Byb3BzJHN0eWxlIiwic3R5bGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiZ2xvYmFsIiwiaGFzQ1NTVE9NU3VwcG9ydCIsImdldER5bmFtaWNTdHlsZXMiLCJ0b0Nzc1ZhbHVlIiwiY3JlYXRlUnVsZSIsIlNoZWV0c1JlZ2lzdHJ5IiwiUnVsZUxpc3QiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9leHRlbmRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJpc19pbl9icm93c2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19lc21faW5oZXJpdHNMb29zZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19lc21fYXNzZXJ0VGhpc0luaXRpYWxpemVkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJwbGFpbk9iamVjdENvbnN0cnVyY3RvciIsImNvbnN0cnVjdG9yIiwiY2xvbmVTdHlsZSIsIm5ld1N0eWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInJlc3VsdCIsImlnbm9yZUltcG9ydGFudCIsImNzc1ZhbHVlIiwiaW5kZW50U3RyIiwiaW5kZW50IiwiaW5kZXgiLCJ0b0NzcyIsInNlbGVjdG9yIiwiX29wdGlvbnMkaW5kZW50IiwiZmFsbGJhY2tzIiwiZmFsbGJhY2siLCJwcm9wIiwiX3Byb3AiLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiYWxsb3dFbXB0eSIsImVzY2FwZSIsIkJhc2VTdHlsZVJ1bGUiLCJpc1Byb2Nlc3NlZCIsInJlbmRlcmVyIiwicmVuZGVyYWJsZSIsInNoZWV0IiwiUmVuZGVyZXIiLCJmb3JjZSIsIm5ld1ZhbHVlIiwicHJvY2VzcyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwiU3R5bGVSdWxlIiwiX0Jhc2VTdHlsZVJ1bGUiLCJfdGhpcyIsInNlbGVjdG9yVGV4dCIsImlkIiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsIl9wcm90bzIiLCJhcHBseVRvIiwianNvbiIsInRvSlNPTiIsIm9wdHMiLCJsaW5rIiwic2V0Iiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJjaGlsZHJlbiIsImF0UmVnRXhwIiwiQ29uZGl0aW9uYWxSdWxlIiwic3R5bGVzIiwiYXQiLCJydWxlcyIsImF0TWF0Y2giLCJhZGQiLCJfcHJvdG8iLCJnZXRSdWxlIiwiYWRkUnVsZSIsIm9uUHJvY2Vzc1J1bGUiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJ0ZXN0IiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxIiwibmFtZVJlZ0V4cCIsIktleWZyYW1lc1J1bGUiLCJmcmFtZXMiLCJuYW1lTWF0Y2giLCJrZXlSZWdFeHAkMSIsInJlZlJlZ0V4cCIsImZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUiLCJrZXlmcmFtZXMiLCJyZXBsYWNlIiwicmVwbGFjZVJlZiIsInJlZktleWZyYW1lIiwicGx1Z2luIiwib25Qcm9jZXNzU3R5bGUiLCJLZXlmcmFtZVJ1bGUiLCJwbHVnaW5LZXlmcmFtZVJ1bGUiLCJGb250RmFjZVJ1bGUiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsIkBjaGFyc2V0IiwiQGltcG9ydCIsIkBuYW1lc3BhY2UiLCJkZWZhdWx0VXBkYXRlT3B0aW9ucyIsImZvcmNlVXBkYXRlT3B0aW9ucyIsInJhdyIsImNsYXNzZXMiLCJydWxlT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMiLCJyZWdpc3RlciIsInNwbGljZSIsInVucmVnaXN0ZXIiLCJwbHVnaW5zJCQxIiwiZm9yRWFjaCIsInVwZGF0ZSIsImRhdGEiLCJvblVwZGF0ZSIsIl90aGlzJG9wdGlvbnMyIiwic3R5bGVSdWxlIiwibmV4dFZhbHVlIiwiX25leHRWYWx1ZSIsIl9wcmV2VmFsdWUiLCJjc3MiLCJTdHlsZVNoZWV0IiwiZGVwbG95ZWQiLCJxdWV1ZSIsImF0dGFjaCIsImRlcGxveSIsImRldGFjaCIsImluc2VydFJ1bGUiLCJhZGRSdWxlcyIsImFkZGVkIiwiZGVsZXRlUnVsZSIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiaW50ZXJuYWwiLCJleHRlcm5hbCIsInJlZ2lzdHJ5Iiwib25Qcm9jZXNzU2hlZXQiLCJwcm9jZXNzZWRWYWx1ZSIsInVzZSIsIm5ld1BsdWdpbiIsInJlc2V0IiwiZmlsdGVyIiwic2hlZXRzIiwiZ2xvYmFsJDEiLCJzZWxmIiwid2luZG93IiwiY3JlYXRlR2VuZXJhdGVJZERlZmF1bHQiLCJydWxlQ291bnRlciIsInByZWZpeCIsImpzc0lkIiwiY2xhc3NOYW1lUHJlZml4IiwibWVtb2l6ZSIsImZuIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNzc1J1bGUiLCJhdHRyaWJ1dGVTdHlsZU1hcCIsImRlbGV0ZSIsImdldEhlYWQiLCJxdWVyeVNlbGVjdG9yIiwiZmluZFByZXZOb2RlIiwiaW5zZXJ0aW9uUG9pbnQiLCJmaW5kSGlnaGVyU2hlZXQiLCJwYXJlbnROb2RlIiwiZmluZEhpZ2hlc3RTaGVldCIsIm5leHRTaWJsaW5nIiwiY29tbWVudCIsInRleHQiLCJoZWFkIiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwidHJpbSIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiZ2V0QXR0cmlidXRlIiwiX2luc2VydFJ1bGUiLCJjb250YWluZXIiLCJjc3NSdWxlcyIsImFwcGVuZFJ1bGUiLCJjcmVhdGVTdHlsZSIsImVsIiwidGV4dENvbnRlbnQiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJfcmVmIiwibWVkaWEiLCJtZXRhIiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJuZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0U3R5bGUiLCJyZW1vdmVDaGlsZCIsImluc2VydFJ1bGVzIiwibmF0aXZlUGFyZW50IiwibGF0ZXN0TmF0aXZlUGFyZW50IiwicnVsZVN0ciIsIm5hdGl2ZVJ1bGUiLCJnZXRSdWxlcyIsImluc3RhbmNlQ291bnRlciIsIkpzcyIsInZlcnNpb24iLCJjcmVhdGVHZW5lcmF0ZUlkIiwic2V0dXAiLCJjcmVhdGVTdHlsZVNoZWV0IiwicmVtb3ZlU3R5bGVTaGVldCIsInRvIiwiZXh0cmFjdGVkIiwiQ1NTIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsIl9tYXRlcmlhbF91aV9zdHlsZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9kZWZhdWx0VGhlbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIndpdGhUaGVtZSIsIndpdGhGb3JtQ29udHJvbENvbnRleHQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiX0Zvcm1Db250cm9sQ29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiRW5oYW5jZWRDb21wb25lbnQiLCJDb25zdW1lciIsImNvbnRleHQiLCJtdWlGb3JtQ29udHJvbCIsImlzSG9yaXpvbnRhbCIsImdldEFuY2hvciIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJjbHN4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfTW9kYWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIl9CYWNrZHJvcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiX3N0eWxlc193aXRoU3R5bGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfU2xpZGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl9QYXBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwiX3V0aWxzX2hlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18iLCJfc3R5bGVzX3RyYW5zaXRpb25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fIiwib3Bwb3NpdGVEaXJlY3Rpb24iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJhbmNob3IiLCJ0aGVtZSIsImRpcmVjdGlvbiIsImRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24iLCJlbnRlciIsImV4aXQiLCJEcmF3ZXIiLCJfcHJvcHMkYW5jaG9yIiwiYW5jaG9yUHJvcCIsIkJhY2tkcm9wUHJvcHMiLCJjbGFzc05hbWUiLCJfcHJvcHMkZWxldmF0aW9uIiwiZWxldmF0aW9uIiwiX3Byb3BzJE1vZGFsUHJvcHMiLCJNb2RhbFByb3BzIiwiQmFja2Ryb3BQcm9wc1Byb3AiLCJvbkNsb3NlIiwiX3Byb3BzJG9wZW4iLCJvcGVuIiwiUGFwZXJQcm9wcyIsIlNsaWRlUHJvcHMiLCJfcHJvcHMkdHJhbnNpdGlvbkR1cmEiLCJfcHJvcHMkdmFyaWFudCIsInZhcmlhbnQiLCJtb3VudGVkIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiZHJhd2VyIiwic3F1YXJlIiwicGFwZXIiLCJyb290IiwiZG9ja2VkIiwic2xpZGluZ0RyYXdlciIsImluIiwiYXBwZWFyIiwiQmFja2Ryb3BDb21wb25lbnQiLCJtb2RhbCIsImZsZXgiLCJvdmVyZmxvd1kiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsInpJbmRleCIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwicG9zaXRpb24iLCJvdXRsaW5lIiwicGFwZXJBbmNob3JMZWZ0IiwicGFwZXJBbmNob3JSaWdodCIsInBhcGVyQW5jaG9yVG9wIiwibWF4SGVpZ2h0IiwicGFwZXJBbmNob3JCb3R0b20iLCJwYXBlckFuY2hvckRvY2tlZExlZnQiLCJib3JkZXJSaWdodCIsInBhbGV0dGUiLCJkaXZpZGVyIiwicGFwZXJBbmNob3JEb2NrZWRUb3AiLCJib3JkZXJCb3R0b20iLCJwYXBlckFuY2hvckRvY2tlZFJpZ2h0IiwiYm9yZGVyTGVmdCIsInBhcGVyQW5jaG9yRG9ja2VkQm90dG9tIiwiYm9yZGVyVG9wIiwiZmxpcCIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiZGVib3VuY2UiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZXN0YW1wIiwibGF0ZXIiLCJsYXN0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJkZWJvdW5jZWQiLCJjYWxsTm93IiwiY2xlYXIiLCJjbGVhclRpbWVvdXQiLCJmbHVzaCIsIl9UeXBvZ3JhcGh5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJkZWZhdWx0IiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImNsb25lIiwiZGVlcG1lcmdlIiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJtZXJnZU9iamVjdCIsImRlc3RpbmF0aW9uIiwiY3VzdG9tTWVyZ2UiLCJnZXRNZXJnZUZ1bmN0aW9uIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJ0YXJnZXRJc0FycmF5Iiwic291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCIsImFsbCIsImFycmF5IiwicHJldiIsIm5leHQiLCJmYWN0b3J5IiwiaXNCdWZmZXIiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwiZXh0ZW5kIiwiYiIsInRoaXNBcmciLCJSZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImUiLCJmb3JtQ29udHJvbFN0YXRlIiwic3RhdGVzIiwic3RhdGUiLCJfUGFwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImVzbV9TZXJ2ZXJTdHlsZVNoZWV0c19TZXJ2ZXJTdHlsZVNoZWV0cyIsIlNlcnZlclN0eWxlU2hlZXRzIiwiY2xhc3NDYWxsQ2hlY2tfZGVmYXVsdCIsImNyZWF0ZUNsYXNzX2RlZmF1bHQiLCJzaGVldHNNYW5hZ2VyIiwiTWFwIiwic2hlZXRzUmVnaXN0cnkiLCJqc3NfZXNtIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInJlYWN0X2RlZmF1bHQiLCJTdHlsZXNQcm92aWRlciIsImV4dGVuZHNfZGVmYXVsdCIsInNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjcmVhdGVTdHlsZXMiLCJnZXRUaGVtZVByb3BzIiwianNzUHJlc2V0IiwibWFrZVN0eWxlcyIsIm1lcmdlQ2xhc3NlcyIsInN0eWxlZCIsIlRoZW1lUHJvdmlkZXIiLCJ1c2VUaGVtZSIsIndpdGhTdHlsZXMiLCJfY3JlYXRlTXVpVGhlbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIkxpc3RDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIlJlZmVyZW5jZUVycm9yIiwiRm9ybUNvbnRyb2xDb250ZXh0Iiwid2l0aEZvcndhcmRlZFJlZiIsIkZvcndhcmRSZWZDb21wb25lbnQiLCJpbm5lclJlZiIsImFyaWFIaWRkZW4iLCJhcmlhSGlkZGVuU2libGluZ3MiLCJCTEFDS0xJU1QiLCJzaWJsaW5ncyIsIm1vdW50IiwiY3VycmVudE5vZGUiLCJjYWxsYmFjayIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImlzSGlkZWFibGUiLCJzaG93IiwicmVtb3ZlQXR0cmlidXRlIiwibW91bnROb2RlIiwiX0J1dHRvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3R5cGVvZjIiLCJpdGVyYXRvciIsIl9pbmhlcml0c0xvb3NlIiwiYmxhY2siLCJ3aGl0ZSIsImhhc1ZhbHVlIiwiaXNGaWxsZWQiLCJTU1IiLCJkZWZhdWx0VmFsdWUiLCJpc0Fkb3JuZWRTdGFydCIsInN0YXJ0QWRvcm5tZW50IiwiYXhpb3NfMSIsIk1lc3NhZ2VzU2VydmljZSIsIkJBU0VfVVJMIiwibG9naW4iLCJ1c2VybmFtZSIsIl9fYXdhaXRlciIsInBvc3QiLCJnZXRNZXNzYWdlcyIsImhlYWRlcnMiLCJ0b2tlbiIsIm1lc3NhZ2VzIiwid3JpdGVNZXNzYWdlIiwidG9Vc2VycyIsIm1lc3NhZ2UiLCJmb250R3JpZCIsIl9yZWYyIiwibGluZUhlaWdodCIsInBpeGVscyIsImh0bWxGb250U2l6ZSIsImlzVW5pdGxlc3MiLCJTdHJpbmciLCJyZXNwb25zaXZlRm9udFNpemVzIiwidGhlbWVJbnB1dCIsIl9vcHRpb25zJGJyZWFrcG9pbnRzIiwiX29wdGlvbnMkZGlzYWJsZUFsaWduIiwiZGlzYWJsZUFsaWduIiwiX29wdGlvbnMkZmFjdG9yIiwiZmFjdG9yIiwiX29wdGlvbnMkdmFyaWFudHMiLCJ2YXJpYW50cyIsInR5cG9ncmFwaHkiLCJjb252ZXJ0IiwiZGlzdF9kZWZhdWx0IiwiYnJlYWtwb2ludFZhbHVlcyIsInJlbUZvbnRTaXplIiwiZm9udFNpemUiLCJtYXhGb250U2l6ZSIsIm1pbkZvbnRTaXplIiwidHJhbnNmb3JtIiwic2l6ZSIsImdyaWQiLCJzaXplQmVsb3ciLCJzaXplQWJvdmUiLCJfcmVmMyIsImNzc1Byb3BlcnR5IiwiX3JlZjMkdW5pdCIsIl9yZWYzJGJyZWFrcG9pbnRzIiwiX3JlZjMkdHJhbnNmb3JtIiwib3V0cHV0IiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsImJyZWFrcG9pbnQiLCJyZXNwb25zaXZlUHJvcGVydHkiLCJ1c2VUaGVtZV91c2VUaGVtZSIsImNvbG9yTWFuaXB1bGF0b3IiLCJjcmVhdGVNdWlUaGVtZSIsIk11aVRoZW1lUHJvdmlkZXIiLCJ0cmFuc2l0aW9ucyIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfaW5oZXJpdHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJSZWFjdCIsImNhY2hlIiwicGFzc2l2ZU9wdGlvbiIsImF0dHIiLCJzdXBwb3J0c1Bhc3NpdmVPcHRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiZGVmYXVsdEV2ZW50T3B0aW9ucyIsImNhcHR1cmUiLCJwYXNzaXZlIiwibWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zIiwiZ2V0RXZlbnRMaXN0ZW5lckFyZ3MiLCJldmVudE5hbWUiLCJvbiIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJFdmVudExpc3RlbmVyIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJhcHBseUxpc3RlbmVycyIsInByZXZQcm9wcyIsIm9uT3JPZmYiLCJpdGVyYXRlZSIsImV2ZW50UHJvcHMiLCJoYW5kbGVyIiwiZm9yRWFjaExpc3RlbmVyIiwiUHVyZUNvbXBvbmVudCIsIndpdGhPcHRpb25zIiwiaXNCcm93c2VyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9zdHlsZXNfd2l0aFN0eWxlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX3V0aWxzX2hlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJUeXBvZ3JhcGh5IiwiX3Byb3BzJGFsaWduIiwiYWxpZ24iLCJfcHJvcHMkY29sb3IiLCJfcHJvcHMkZGlzcGxheSIsIl9wcm9wcyRndXR0ZXJCb3R0b20iLCJndXR0ZXJCb3R0b20iLCJfcHJvcHMkbm9XcmFwIiwibm9XcmFwIiwiX3Byb3BzJHBhcmFncmFwaCIsInBhcmFncmFwaCIsIl9wcm9wcyR2YXJpYW50TWFwcGluZyIsInZhcmlhbnRNYXBwaW5nIiwibWFyZ2luIiwiY2FwdGlvbiIsImJ1dHRvbiIsIm92ZXJsaW5lIiwic3JPbmx5Iiwib3ZlcmZsb3ciLCJhbGlnbkxlZnQiLCJ0ZXh0QWxpZ24iLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwibWFyZ2luQm90dG9tIiwiY29sb3JJbmhlcml0IiwiY29sb3JQcmltYXJ5IiwicHJpbWFyeSIsIm1haW4iLCJjb2xvclNlY29uZGFyeSIsInNlY29uZGFyeSIsImNvbG9yVGV4dFByaW1hcnkiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJjb2xvckVycm9yIiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsIl9JY29uQnV0dG9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2V4dGVuZHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZXh0ZW5kc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJfc3R5bGVzX3dpdGhTdHlsZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIlBhcGVyIiwiY2xhc3NOYW1lUHJvcCIsIl9wcm9wcyRjb21wb25lbnQiLCJfcHJvcHMkc3F1YXJlIiwicm91bmRlZCIsImVsZXZhdGlvbnMiLCJzaGFkb3dzIiwic2hhZG93IiwiYm94U2hhZG93IiwiYmFja2dyb3VuZENvbG9yIiwidHJhbnNpdGlvbiIsImJvcmRlclJhZGl1cyIsInNoYXBlIiwiX1RleHRGaWVsZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX1N2Z0ljb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNvbXBvbmVudENyZWF0b3IiLCJjcmVhdGVNaXhpbnMiLCJzcGFjaW5nIiwiX3Rvb2xiYXIiLCJndXR0ZXJzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ0b29sYmFyIiwibWluSGVpZ2h0IiwibGlnaHQiLCJkaXNhYmxlZCIsImhpbnQiLCJjb21tb24iLCJncmV5IiwiYWN0aW9uIiwiYWN0aXZlIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZCIsImRpc2FibGVkQmFja2dyb3VuZCIsImRhcmsiLCJpY29uIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc19kZWZhdWx0IiwiY29lZiIsInB4VG9SZW0iLCJidWlsZFZhcmlhbnQiLCJmb250V2VpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInVtZF9kZWZhdWx0Iiwic2hhZG93S2V5VW1icmFPcGFjaXR5Iiwic2hhZG93S2V5UGVudW1icmFPcGFjaXR5Iiwic2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkiLCJjcmVhdGVTaGFkb3ciLCJzdHlsZXNfc2hhZG93cyIsInN0eWxlc19zaGFwZSIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzaGFkb3dzSW5wdXQiLCJzcGFjaW5nSW5wdXQiLCJfb3B0aW9ucyR0eXBvZ3JhcGh5IiwidHlwb2dyYXBoeUlucHV0IiwiX3BhbGV0dGUkcHJpbWFyeSIsImluZGlnbyIsIl9wYWxldHRlJHNlY29uZGFyeSIsInBpbmsiLCJfcGFsZXR0ZSRlcnJvciIsInJlZCIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsImNvbnRyYXN0VGV4dCIsInR5cGVzIiwiY3JlYXRlUGFsZXR0ZSIsIm11aSIsImNyZWF0ZVNwYWNpbmciLCJvdmVycmlkZXMiLCJpc19wbGFpbl9vYmplY3RfZGVmYXVsdCIsImlzUHJvZHVjdGlvbiIsImNvbmRpdGlvbiIsIndhcm4iLCJUaGVtZUNvbnRleHQiLCJoYXNTeW1ib2wiLCJtb2JpbGVTdGVwcGVyIiwiYXBwQmFyIiwic25hY2tiYXIiLCJ0b29sdGlwIiwiX2NyZWF0ZVN2Z0ljb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIlN2Z0ljb24iLCJfcHJvcHMkZm9udFNpemUiLCJodG1sQ29sb3IiLCJ0aXRsZUFjY2VzcyIsIl9wcm9wcyR2aWV3Qm94Iiwidmlld0JveCIsImZvY3VzYWJsZSIsImFyaWEtaGlkZGVuIiwicm9sZSIsInVzZXJTZWxlY3QiLCJmaWxsIiwiZmxleFNocmluayIsImNvbG9yQWN0aW9uIiwiY29sb3JEaXNhYmxlZCIsImZvbnRTaXplSW5oZXJpdCIsImZvbnRTaXplU21hbGwiLCJmb250U2l6ZUxhcmdlIiwiTmF0aXZlU2VsZWN0SW5wdXQiLCJJY29uQ29tcG9uZW50IiwiaW5wdXRSZWYiLCJvbkNoYW5nZSIsInNlbGVjdCIsImZpbGxlZCIsIm91dGxpbmVkIiwiX293bmVyRG9jdW1lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImRvYyIsImRlZmF1bHRWaWV3IiwicGFyZW50VmlldyIsInNjcm9sbERpdiIsImJvZHkiLCJzY3JvbGxiYXJTaXplIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlS2V5cyIsInVzZUlzRm9jdXNWaXNpYmxlIiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInNlYXJjaCIsInVybCIsInRlbCIsImVtYWlsIiwicGFzc3dvcmQiLCJudW1iZXIiLCJkYXRlIiwibW9udGgiLCJ3ZWVrIiwidGltZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwiaXNGb2N1c1Zpc2libGUiLCJldmVudCIsIm1hdGNoZXMiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFuZGxlQmx1clZpc2libGUiLCJvbkJsdXJWaXNpYmxlIiwidXNlQ2FsbGJhY2siLCJmaW5kRE9NTm9kZSIsImNhY2hlZFR5cGUiLCJpbkRPTSIsImRldGVjdFNjcm9sbFR5cGUiLCJkdW1teSIsImNyZWF0ZVRleHROb2RlIiwiZGlyIiwic2Nyb2xsTGVmdCIsIl9zZXRTY3JvbGxUeXBlIiwiZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQiLCJOYU4iLCJzY3JvbGxXaWR0aCIsInNldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0IiwiZyIsIkZ1bmN0aW9uIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJKU09OIiwic3RyaW5naWZ5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJBY2NlcHQiLCJtZXRob2QiLCJfVG9vbGJhcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX0xpc3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9MaXN0SXRlbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiaXNPYmplY3RPYmplY3QiLCJjdG9yIiwicHJvdCIsIl9MaXN0Q29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiTGlzdCIsIl9wcm9wcyRkZW5zZSIsImRlbnNlIiwiX3Byb3BzJGRpc2FibGVQYWRkaW5nIiwiZGlzYWJsZVBhZGRpbmciLCJzdWJoZWFkZXIiLCJQcm92aWRlciIsInBhZGRpbmciLCJsaXN0U3R5bGUiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIl9UaGVtZUNvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInVzZUNvbnRleHQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9pbmhlcml0c0xvb3NlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0IiwiX1RyYW5zaXRpb25Hcm91cENvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIlRyYW5zaXRpb24iLCJfUmVhY3QkQ29tcG9uZW50IiwiaW5pdGlhbFN0YXR1cyIsImlzTW91bnRpbmciLCJhcHBlYXJTdGF0dXMiLCJ1bm1vdW50T25FeGl0IiwibW91bnRPbkVudGVyIiwibmV4dENhbGxiYWNrIiwicHJldlN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJ1cGRhdGVTdGF0dXMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJuZXh0U3RhdHVzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJzZXRTdGF0ZSIsIl90aGlzMiIsImFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwib25FbnRlciIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJvbkV4aXRlZCIsImNhbmNlbCIsIm5leHRTdGF0ZSIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl90aGlzJHByb3BzIiwiY2hpbGRQcm9wcyIsImNoaWxkIiwiQ2hpbGRyZW4iLCJjbG9uZUVsZW1lbnQiLCJub29wIiwiRVhJVElORyIsIm1ha2VTdHlsZXNfbXVsdGlLZXlTdG9yZSIsImtleTEiLCJrZXkyIiwic3ViQ2FjaGUiLCJpbmRleENvdW50ZXIiLCJnZXRTdHlsZXNDcmVhdG9yX2dldFN0eWxlc0NyZWF0b3IiLCJ0aGVtaW5nRW5hYmxlZCIsInN0eWxlc1dpdGhPdmVycmlkZXMiLCJnZXRTdHlsZXNDcmVhdG9yX25vb3BUaGVtZSIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwic3R5bGVzQ3JlYXRvciIsImxpc3RlblRvVGhlbWUiLCJzdHlsZXNPcHRpb25zIiwic2hvdWxkVXBkYXRlIiwidXNlU3luY2hyb25vdXNFZmZlY3QiLCJkaXNhYmxlR2VuZXJhdGlvbiIsInNoZWV0TWFuYWdlciIsInJlZnMiLCJzdGF0aWNTaGVldCIsImR5bmFtaWNTdHlsZXMiLCJzaGVldHNDYWNoZSIsImR5bmFtaWNTaGVldCIsImJhc2VDbGFzc2VzIiwibmV3Q2xhc3NlcyIsIl9yZWY0IiwiY2FjaGVDbGFzc2VzIiwibGFzdFByb3AiLCJsYXN0SlNTIiwiZ2VuZXJhdGUiLCJnZXRDbGFzc2VzIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJyZWFjdCIsIm1hcHBlciIsImdldFByb3AiLCJnZXROZXh0Q2hpbGRNYXBwaW5nIiwibmV4dFByb3BzIiwicHJldkNoaWxkTWFwcGluZyIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiVHJhbnNpdGlvbkdyb3VwX1RyYW5zaXRpb25Hcm91cCIsIlRyYW5zaXRpb25Hcm91cCIsImhhbmRsZUV4aXRlZCIsImNvbnRleHRWYWx1ZSIsImZpcnN0UmVuZGVyIiwiaW5oZXJpdHNMb29zZSIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJlc21fZXh0ZW5kcyIsImNoaWxkRmFjdG9yeSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJlc21fVHJhbnNpdGlvbkdyb3VwIiwiQnV0dG9uQmFzZV9SaXBwbGUiLCJfcHJvcHMkcHVsc2F0ZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJzbGljZWRUb0FycmF5X2RlZmF1bHQiLCJ2aXNpYmxlIiwic2V0VmlzaWJsZSIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0IiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJjbHN4X20iLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwiRFVSQVRJT04iLCJERUxBWV9SSVBQTEUiLCJUb3VjaFJpcHBsZV9Ub3VjaFJpcHBsZSIsIlRvdWNoUmlwcGxlIiwiX2dldFByb3RvdHlwZU9mMiIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fZGVmYXVsdCIsImdldFByb3RvdHlwZU9mX2RlZmF1bHQiLCJyaXBwbGVzIiwiY3JlYXRlUmVmIiwiY2IiLCJfb3B0aW9ucyRwdWxzYXRlIiwiX29wdGlvbnMkY2VudGVyIiwiY2VudGVyIiwiX29wdGlvbnMkZmFrZUVsZW1lbnQiLCJmYWtlRWxlbWVudCIsImlnbm9yaW5nTW91c2VEb3duIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJjbGllbnRZIiwidG91Y2hlcyIsInNxcnQiLCJzaXplWCIsImFicyIsInNpemVZIiwiY2xpZW50SGVpZ2h0Iiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwic3RhcnRUaW1lciIsInBhcmFtcyIsInRvQ29uc3VtYWJsZUFycmF5X2RlZmF1bHQiLCJzdG9wIiwicGVyc2lzdCIsImluaGVyaXRzX2RlZmF1bHQiLCJCdXR0b25CYXNlX1RvdWNoUmlwcGxlIiwicG9pbnRlckV2ZW50cyIsIm9wYWNpdHkiLCJhbmltYXRpb24iLCJhbmltYXRpb25OYW1lIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXIiLCIwJSIsIjEwMCUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCIsIkBrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlIiwiNTAlIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VFdmVudENhbGxiYWNrIiwiQnV0dG9uQmFzZV9CdXR0b25CYXNlIiwiYnV0dG9uUmVmUHJvcCIsImJ1dHRvblJlZiIsIl9wcm9wcyRjZW50ZXJSaXBwbGUiLCJjZW50ZXJSaXBwbGUiLCJfcHJvcHMkZGlzYWJsZVJpcHBsZSIsImRpc2FibGVSaXBwbGUiLCJfcHJvcHMkZGlzYWJsZVRvdWNoUmkiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJfcHJvcHMkZm9jdXNSaXBwbGUiLCJmb2N1c1JpcHBsZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsIm9uQmx1ciIsIm9uQ2xpY2siLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJfcHJvcHMkdGFiSW5kZXgiLCJ0YWJJbmRleCIsIlRvdWNoUmlwcGxlUHJvcHMiLCJfcHJvcHMkdHlwZSIsInJpcHBsZVJlZiIsImZvY3VzVmlzaWJsZSIsInNldEZvY3VzVmlzaWJsZSIsIl91c2VJc0ZvY3VzVmlzaWJsZSIsInV0aWxzX2ZvY3VzVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInVzZVJpcHBsZUhhbmRsZXIiLCJyaXBwbGVBY3Rpb24iLCJldmVudENhbGxiYWNrIiwic2tpcFJpcHBsZUFjdGlvbiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiZm9jdXMiLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoRW5kIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiY3VycmVudFRhcmdldCIsImtleWRvd25SZWYiLCJyZWFjdF9kb21fZGVmYXVsdCIsImhyZWYiLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVVzZXJSZWYiLCJyZWFjdEhlbHBlcnMiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJOb1NzciIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwiYm9yZGVyIiwiY3Vyc29yIiwidmVydGljYWxBbGlnbiIsIi1tb3otYXBwZWFyYW5jZSIsIi13ZWJraXQtYXBwZWFyYW5jZSIsInRleHREZWNvcmF0aW9uIiwiJjo6LW1vei1mb2N1cy1pbm5lciIsImJvcmRlclN0eWxlIiwiJiRkaXNhYmxlZCIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvT2JqZWN0IiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19zbGljZWRUb0FycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX3NsaWNlZFRvQXJyYXlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19vYmplY3RXaXRob3V0UHJvcGVydGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19vYmplY3RXaXRob3V0UHJvcGVydGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJjbHN4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfSW5wdXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl9GaWxsZWRJbnB1dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwiX091dGxpbmVkSW5wdXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18iLCJfSW5wdXRMYWJlbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyIsIl9Gb3JtQ29udHJvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyIsIl9Gb3JtSGVscGVyVGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfXyIsIl9TZWxlY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X18iLCJfc3R5bGVzX3dpdGhTdHlsZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18iLCJ2YXJpYW50Q29tcG9uZW50IiwiVGV4dEZpZWxkIiwiYXV0b0NvbXBsZXRlIiwiYXV0b0ZvY3VzIiwiRm9ybUhlbHBlclRleHRQcm9wcyIsImZ1bGxXaWR0aCIsImhlbHBlclRleHQiLCJJbnB1dExhYmVsUHJvcHMiLCJpbnB1dFByb3BzIiwiSW5wdXRQcm9wcyIsImxhYmVsIiwibXVsdGlsaW5lIiwicGxhY2Vob2xkZXIiLCJfcHJvcHMkcmVxdWlyZWQiLCJyZXF1aXJlZCIsInJvd3MiLCJyb3dzTWF4IiwiX3Byb3BzJHNlbGVjdCIsIlNlbGVjdFByb3BzIiwibGFiZWxXaWR0aCIsInNldExhYmVsV2lkdGgiLCJsYWJlbFJlZiIsImxhYmVsTm9kZSIsIklucHV0TW9yZSIsInNocmluayIsIm5vdGNoZWQiLCJoZWxwZXJUZXh0SWQiLCJJbnB1dENvbXBvbmVudCIsIklucHV0RWxlbWVudCIsImFyaWEtZGVzY3JpYmVkYnkiLCJodG1sRm9yIiwiaW5wdXQiLCJpdGVyIiwiX3N0eWxlc19jb2xvck1hbmlwdWxhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfQnV0dG9uQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX3V0aWxzX2hlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIkJ1dHRvbiIsIl9wcm9wcyRkaXNhYmxlZCIsIl9wcm9wcyRkaXNhYmxlRm9jdXNSaSIsImRpc2FibGVGb2N1c1JpcHBsZSIsIl9wcm9wcyRmdWxsV2lkdGgiLCJfcHJvcHMkc2l6ZSIsImNvbnRhaW5lZCIsIm91dGxpbmVkUHJpbWFyeSIsIm91dGxpbmVkU2Vjb25kYXJ5IiwidGV4dFNlY29uZGFyeSIsImNvbnRhaW5lZFNlY29uZGFyeSIsInRleHRQcmltYXJ5IiwiY29udGFpbmVkUHJpbWFyeSIsImJveFNpemluZyIsIm1pbldpZHRoIiwiJjpob3ZlciIsIkBtZWRpYSAoaG92ZXI6IG5vbmUpIiwiJiRmb2N1c1Zpc2libGUiLCImOmFjdGl2ZSIsImJvcmRlckNvbG9yIiwic2l6ZVNtYWxsIiwic2l6ZUxhcmdlIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJBdXRob3JpemF0aW9uIiwicGFyYW1zU2VyaWFsaXplciIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsIiwiX0FwcEJhcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX1BhcGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJBcHBCYXIiLCJfcHJvcHMkcG9zaXRpb24iLCJiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0IiwicG9zaXRpb25GaXhlZCIsInBvc2l0aW9uQWJzb2x1dGUiLCJwb3NpdGlvblN0aWNreSIsInBvc2l0aW9uU3RhdGljIiwicG9zaXRpb25SZWxhdGl2ZSIsImNvbG9yRGVmYXVsdCIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZGVmaW5lUHJvcGVydHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZGVmaW5lUHJvcGVydHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiY2xzeF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiVG9vbGJhciIsIl9wcm9wcyRkaXNhYmxlR3V0dGVycyIsImRpc2FibGVHdXR0ZXJzIiwicmVndWxhciIsIkljb25CdXR0b24iLCJfcHJvcHMkZWRnZSIsImVkZ2UiLCJlZGdlU3RhcnQiLCJlZGdlRW5kIiwibWFyZ2luTGVmdCIsIiRzaXplU21hbGwmIiwibWFyZ2luUmlnaHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0IiwiX1N2Z0ljb24iLCJfZXh0ZW5kczIiLCJfRHJhd2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfQnV0dG9uQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiX3V0aWxzX3JlYWN0SGVscGVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX0xpc3RfTGlzdENvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19fZGVmYXVsdCIsIkxpc3RJdGVtIiwiX3Byb3BzJGFsaWduSXRlbXMiLCJfcHJvcHMkYnV0dG9uIiwiY2hpbGRyZW5Qcm9wIiwiY29tcG9uZW50UHJvcCIsIl9wcm9wcyRDb250YWluZXJDb21wbyIsIkNvbnRhaW5lckNvbXBvbmVudCIsIl9wcm9wcyRDb250YWluZXJQcm9wcyIsIkNvbnRhaW5lclByb3BzIiwiQ29udGFpbmVyQ2xhc3NOYW1lIiwiX3Byb3BzJGRpdmlkZXIiLCJfcHJvcHMkc2VsZWN0ZWQiLCJjaGlsZENvbnRleHQiLCJsaXN0SXRlbVJlZiIsInRvQXJyYXkiLCJoYXNTZWNvbmRhcnlBY3Rpb24iLCJjb21wb25lbnRQcm9wcyIsImFsaWduSXRlbXNGbGV4U3RhcnQiLCJzZWNvbmRhcnlBY3Rpb24iLCJwb3AiLCImJHNlbGVjdGVkLCAmJHNlbGVjdGVkOmhvdmVyIiwiYmFja2dyb3VuZENsaXAiLCJfTGlzdEl0ZW1JY29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJMaXN0SXRlbUljb24iLCJfTGlzdEl0ZW1UZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfVHlwb2dyYXBoeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiX0xpc3RfTGlzdENvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyIsIkxpc3RJdGVtVGV4dCIsIl9wcm9wcyRkaXNhYmxlVHlwb2dyYSIsImRpc2FibGVUeXBvZ3JhcGh5IiwiX3Byb3BzJGluc2V0IiwiaW5zZXQiLCJwcmltYXJ5UHJvcCIsInByaW1hcnlUeXBvZ3JhcGh5UHJvcHMiLCJzZWNvbmRhcnlQcm9wIiwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzIiwibWFyZ2luVG9wIiwiY29sb3JzX3B1cnBsZSIsImNvbG9yc19kZWVwUHVycGxlIiwiY29sb3JzX2JsdWUiLCJjb2xvcnNfbGlnaHRCbHVlIiwiY29sb3JzX2N5YW4iLCJjb2xvcnNfdGVhbCIsImNvbG9yc19ncmVlbiIsImNvbG9yc19saWdodEdyZWVuIiwiY29sb3JzX2xpbWUiLCJjb2xvcnNfeWVsbG93IiwiY29sb3JzX2FtYmVyIiwiY29sb3JzX29yYW5nZSIsImNvbG9yc19kZWVwT3JhbmdlIiwiY29sb3JzX2Jyb3duIiwiY29sb3JzX2JsdWVHcmV5IiwiQXZhdGFyX0F2YXRhciIsImFsdCIsImNoaWxkcmVuQ2xhc3NOYW1lUHJvcCIsImNoaWxkcmVuQ2xhc3NOYW1lIiwiaW1nUHJvcHMiLCJzaXplcyIsInNyYyIsInNyY1NldCIsImltZyIsInN5c3RlbSIsImVzbV9BdmF0YXJfQXZhdGFyIiwib2JqZWN0Rml0IiwiQmFkZ2VfQmFkZ2UiLCJiYWRnZUNvbnRlbnQiLCJpbnZpc2libGVQcm9wIiwiaW52aXNpYmxlIiwiX3Byb3BzJG1heCIsIl9wcm9wcyRzaG93WmVybyIsInNob3daZXJvIiwiZGlzcGxheVZhbHVlIiwiYmFkZ2UiLCJoZWxwZXJzIiwiZG90IiwiZXNtX0JhZGdlX0JhZGdlIiwiZmxleFdyYXAiLCJhbGlnbkNvbnRlbnQiLCJSQURJVVMiLCJ0ZXh0Q29sb3IiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJCb3R0b21OYXZpZ2F0aW9uX0JvdHRvbU5hdmlnYXRpb24iLCJfcHJvcHMkc2hvd0xhYmVscyIsInNob3dMYWJlbHMiLCJjaGlsZEluZGV4IiwiY2hpbGRWYWx1ZSIsInNob3dMYWJlbCIsImVzbV9Cb3R0b21OYXZpZ2F0aW9uX0JvdHRvbU5hdmlnYXRpb24iLCJCb3R0b21OYXZpZ2F0aW9uQWN0aW9uX0JvdHRvbU5hdmlnYXRpb25BY3Rpb24iLCJCdXR0b25CYXNlIiwiaWNvbk9ubHkiLCJ3cmFwcGVyIiwiZXNtX0JvdHRvbU5hdmlnYXRpb25BY3Rpb25fQm90dG9tTmF2aWdhdGlvbkFjdGlvbiIsIm1heFdpZHRoIiwiJiRpY29uT25seSIsIiYkc2VsZWN0ZWQiLCJlc21fbWVyZ2UiLCJpdGVtIiwiZXNtX2NzcyIsInN0eWxlRnVuY3Rpb24iLCJuZXdTdHlsZUZ1bmN0aW9uIiwiZmllbGRzIiwib21pdCIsImZpbHRlclByb3BzIiwiZXNtX2NvbXBvc2UiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJ0eXBlb2ZfZGVmYXVsdCIsIl90aGVtZUJyZWFrcG9pbnRzIiwiZ2V0UGF0aCIsImVzbV9zdHlsZSIsIl9vcHRpb25zJGNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJ0aGVtZU1hcHBpbmciLCJwcm9wVmFsdWVGaW5hbCIsImdldEJvcmRlciIsImVzbV9ib3JkZXJzIiwiQG1lZGlhIHByaW50IiwiZXNtX2ZsZXhib3giLCJwb3NpdGlvbnMiLCJlc21fcGFsZXR0ZSIsInNpemluZ190cmFuc2Zvcm0iLCJzaXppbmdfd2lkdGgiLCJzaXppbmdfbWF4V2lkdGgiLCJzaXppbmdfaGVpZ2h0IiwiZXNtX3NpemluZyIsInByb3BlcnRpZXMiLCJkaXJlY3Rpb25zIiwiZ2V0Q3NzUHJvcGVydGllcyIsIl9wcm9wJHNwbGl0IiwiX3Byb3Akc3BsaXQyIiwiYXJnIiwic3BhY2luZ0tleXMiLCJnZXRTdHlsZUZyb21Qcm9wVmFsdWUiLCJjc3NQcm9wZXJ0aWVzIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lZCIsImdldFZhbHVlIiwic3BhY2luZ19zcGFjaW5nIiwidGhlbWVTcGFjaW5nIiwiZ2V0VHJhbnNmb3JtZXIiLCJlc21fc3BhY2luZyIsIkJveF9zdHlsZUZ1bmN0aW9uIiwiQm94X0JveCIsIk1vcmVIb3JpeiIsIkJyZWFkY3J1bWJzX0JyZWFkY3J1bWJDb2xsYXBzZWQiLCImOmhvdmVyLCAmOmZvY3VzIiwiQnJlYWRjcnVtYnNfQnJlYWRjcnVtYlNlcGFyYXRvciIsIkJyZWFkY3J1bWJzX0JyZWFkY3J1bWJzIiwiX3Byb3BzJGl0ZW1zQWZ0ZXJDb2xsIiwiaXRlbXNBZnRlckNvbGxhcHNlIiwiX3Byb3BzJGl0ZW1zQmVmb3JlQ29sIiwiaXRlbXNCZWZvcmVDb2xsYXBzZSIsIl9wcm9wcyRtYXhJdGVtcyIsIm1heEl0ZW1zIiwiX3Byb3BzJHNlcGFyYXRvciIsInNlcGFyYXRvciIsImV4cGFuZGVkIiwic2V0RXhwYW5kZWQiLCJhbGxJdGVtcyIsImxpIiwib2wiLCJpdGVtcyIsImluc2VydFNlcGFyYXRvcnMiLCJyZW5kZXJJdGVtc0JlZm9yZUFuZEFmdGVyIiwiZXNtX0JyZWFkY3J1bWJzX0JyZWFkY3J1bWJzIiwiQ2FyZF9DYXJkIiwiX3Byb3BzJHJhaXNlZCIsInJhaXNlZCIsImVzbV9DYXJkX0NhcmQiLCJDYXJkQWN0aW9uQXJlYV9DYXJkQWN0aW9uQXJlYSIsImZvY3VzSGlnaGxpZ2h0IiwiZXNtX0NhcmRBY3Rpb25BcmVhX0NhcmRBY3Rpb25BcmVhIiwiJjpob3ZlciAkZm9jdXNIaWdobGlnaHQiLCImJGZvY3VzVmlzaWJsZSAkZm9jdXNIaWdobGlnaHQiLCJDYXJkQWN0aW9uc19DYXJkQWN0aW9ucyIsIl9wcm9wcyRkaXNhYmxlU3BhY2luZyIsImRpc2FibGVTcGFjaW5nIiwiZXNtX0NhcmRBY3Rpb25zX0NhcmRBY3Rpb25zIiwiJiA+ICogKyAqIiwiQ2FyZENvbnRlbnRfQ2FyZENvbnRlbnQiLCJlc21fQ2FyZENvbnRlbnRfQ2FyZENvbnRlbnQiLCImOmxhc3QtY2hpbGQiLCJDYXJkSGVhZGVyX0NhcmRIZWFkZXIiLCJhdmF0YXIiLCJzdWJoZWFkZXJQcm9wIiwic3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzIiwidGl0bGVQcm9wIiwidGl0bGUiLCJ0aXRsZVR5cG9ncmFwaHlQcm9wcyIsImNvbnRlbnQiLCJlc21fQ2FyZEhlYWRlcl9DYXJkSGVhZGVyIiwiYWxpZ25TZWxmIiwiTUVESUFfQ09NUE9ORU5UUyIsIkNhcmRNZWRpYV9DYXJkTWVkaWEiLCJpbWFnZSIsImlzTWVkaWFDb21wb25lbnQiLCJjb21wb3NlZFN0eWxlIiwiYmFja2dyb3VuZEltYWdlIiwiZXNtX0NhcmRNZWRpYV9DYXJkTWVkaWEiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJTd2l0Y2hCYXNlX1N3aXRjaEJhc2UiLCJjaGVja2VkUHJvcCIsImNoZWNrZWQiLCJjaGVja2VkSWNvbiIsImRlZmF1bHRDaGVja2VkIiwiZGlzYWJsZWRQcm9wIiwiaXNDb250cm9sbGVkIiwiQm9vbGVhbiIsImNoZWNrZWRTdGF0ZSIsInNldENoZWNrZWRTdGF0ZSIsImhhc0xhYmVsRm9yIiwiaW50ZXJuYWxfU3dpdGNoQmFzZSIsIkNoZWNrQm94T3V0bGluZUJsYW5rIiwiQ2hlY2tCb3giLCJJbmRldGVybWluYXRlQ2hlY2tCb3giLCJkZWZhdWx0Q2hlY2tlZEljb24iLCJkZWZhdWx0SWNvbiIsImRlZmF1bHRJbmRldGVybWluYXRlSWNvbiIsIkNoZWNrYm94X0NoZWNrYm94IiwiX3Byb3BzJGNoZWNrZWRJY29uIiwiX3Byb3BzJGljb24iLCJfcHJvcHMkaW5kZXRlcm1pbmF0ZSIsImluZGV0ZXJtaW5hdGUiLCJfcHJvcHMkaW5kZXRlcm1pbmF0ZUkiLCJpbmRldGVybWluYXRlSWNvbiIsImRhdGEtaW5kZXRlcm1pbmF0ZSIsImVzbV9DaGVja2JveF9DaGVja2JveCIsIiYkY2hlY2tlZCIsIkNoaXBfQ2hpcCIsImF2YXRhclByb3AiLCJjbGlja2FibGVQcm9wIiwiY2xpY2thYmxlIiwiZGVsZXRlSWNvblByb3AiLCJkZWxldGVJY29uIiwiaWNvblByb3AiLCJvbkRlbGV0ZSIsImNoaXBSZWYiLCJoYW5kbGVEZWxldGVJY29uQ2xpY2siLCJzdG9wUHJvcGFnYXRpb24iLCJkZWxldGFibGUiLCJjdXN0b21DbGFzc2VzIiwiYXZhdGFyQ2hpbGRyZW4iLCJibHVyIiwiZXNtX0NoaXBfQ2hpcCIsImRlbGV0ZUljb25Db2xvciIsImNsaWNrYWJsZUNvbG9yUHJpbWFyeSIsImNsaWNrYWJsZUNvbG9yU2Vjb25kYXJ5IiwiJjpmb2N1cyIsImRlbGV0YWJsZUNvbG9yUHJpbWFyeSIsImRlbGV0YWJsZUNvbG9yU2Vjb25kYXJ5IiwiJGNsaWNrYWJsZSY6aG92ZXIsICRjbGlja2FibGUmOmZvY3VzLCAkZGVsZXRhYmxlJjpmb2N1cyIsIiYgJGF2YXRhciIsImF2YXRhckNvbG9yUHJpbWFyeSIsImF2YXRhckNvbG9yU2Vjb25kYXJ5IiwiaWNvbkNvbG9yUHJpbWFyeSIsImljb25Db2xvclNlY29uZGFyeSIsImRlbGV0ZUljb25Db2xvclByaW1hcnkiLCImOmhvdmVyLCAmOmFjdGl2ZSIsImRlbGV0ZUljb25Db2xvclNlY29uZGFyeSIsImRlbGV0ZUljb25PdXRsaW5lZENvbG9yUHJpbWFyeSIsImRlbGV0ZUljb25PdXRsaW5lZENvbG9yU2Vjb25kYXJ5IiwiQ2lyY3VsYXJQcm9ncmVzc19DaXJjdWxhclByb2dyZXNzIiwiX3Byb3BzJGRpc2FibGVTaHJpbmsiLCJkaXNhYmxlU2hyaW5rIiwiX3Byb3BzJHRoaWNrbmVzcyIsInRoaWNrbmVzcyIsIl9wcm9wcyR2YWx1ZSIsImNpcmNsZVN0eWxlIiwicm9vdFN0eWxlIiwicm9vdFByb3BzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0YXRpYyIsInN2ZyIsIlNJWkUiLCJjaXJjbGUiLCJjaXJjbGVJbmRldGVybWluYXRlIiwiY2lyY2xlU3RhdGljIiwiY2lyY2xlRGlzYWJsZVNocmluayIsImN4IiwiY3kiLCJzdHJva2VXaWR0aCIsImVzbV9DaXJjdWxhclByb2dyZXNzX0NpcmN1bGFyUHJvZ3Jlc3MiLCJzdHJva2UiLCJAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1yb3RhdGUiLCJAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1kYXNoIiwibWFwRXZlbnRQcm9wVG9FdmVudCIsImV2ZW50UHJvcCIsIkNsaWNrQXdheUxpc3RlbmVyX0NsaWNrQXdheUxpc3RlbmVyIiwiX3Byb3BzJG1vdXNlRXZlbnQiLCJtb3VzZUV2ZW50IiwiX3Byb3BzJHRvdWNoRXZlbnQiLCJ0b3VjaEV2ZW50Iiwib25DbGlja0F3YXkiLCJtb3VudGVkUmVmIiwidXNlTW91bnRlZFJlZiIsIm1vdmVkUmVmIiwibm9kZVJlZiIsImhhbmRsZUNsaWNrQXdheSIsImRvY3VtZW50RWxlbWVudCIsImNvbnRhaW5zIiwibWFwcGVkVG91Y2hFdmVudCIsIm1hcHBlZE1vdXNlRXZlbnQiLCJGcmFnbWVudCIsIkNvbGxhcHNlX0NvbGxhcHNlIiwiX3Byb3BzJGNvbGxhcHNlZEhlaWdoIiwiY29sbGFwc2VkSGVpZ2h0IiwiaW5Qcm9wIiwiX3Byb3BzJHRpbWVvdXQiLCJ0aW1lciIsIndyYXBwZXJSZWYiLCJhdXRvVHJhbnNpdGlvbkR1cmF0aW9uIiwid3JhcHBlckhlaWdodCIsImR1cmF0aW9uMiIsIl8iLCJlbnRlcmVkIiwiaGlkZGVuIiwid3JhcHBlcklubmVyIiwibXVpU3VwcG9ydEF1dG8iLCJlc21fQ29sbGFwc2VfQ29sbGFwc2UiLCJ2aXNpYmlsaXR5IiwiQ29udGFpbmVyX0NvbnRhaW5lciIsIl9wcm9wcyRmaXhlZCIsImZpeGVkIiwiX3Byb3BzJG1heFdpZHRoIiwiZXNtX0NvbnRhaW5lcl9Db250YWluZXIiLCJfcm9vdCIsIm1heFdpZHRoWHMiLCJtYXhXaWR0aFNtIiwibWF4V2lkdGhNZCIsIm1heFdpZHRoTGciLCJtYXhXaWR0aFhsIiwidXNlU3R5bGVzIiwiQGdsb2JhbCIsImh0bWwiLCJXZWJraXRGb250U21vb3RoaW5nIiwiTW96T3N4Rm9udFNtb290aGluZyIsIiosICo6OmJlZm9yZSwgKjo6YWZ0ZXIiLCJzdHJvbmcsIGIiLCJDc3NCYXNlbGluZV9Dc3NCYXNlbGluZSIsIl9wcm9wcyRjaGlsZHJlbiIsIkRpYWxvZ19EaWFsb2ciLCJfcHJvcHMkZGlzYWJsZUJhY2tkcm8iLCJkaXNhYmxlQmFja2Ryb3BDbGljayIsIl9wcm9wcyRkaXNhYmxlRXNjYXBlSyIsImRpc2FibGVFc2NhcGVLZXlEb3duIiwiX3Byb3BzJGZ1bGxTY3JlZW4iLCJmdWxsU2NyZWVuIiwib25CYWNrZHJvcENsaWNrIiwib25Fc2NhcGVLZXlEb3duIiwiX3Byb3BzJFBhcGVyQ29tcG9uZW50IiwiUGFwZXJDb21wb25lbnQiLCJfcHJvcHMkUGFwZXJQcm9wcyIsIl9wcm9wcyRzY3JvbGwiLCJzY3JvbGwiLCJfcHJvcHMkVHJhbnNpdGlvbkNvbXAiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwiRmFkZSIsIlRyYW5zaXRpb25Qcm9wcyIsIm1vdXNlRG93blRhcmdldCIsIk1vZGFsIiwiQmFja2Ryb3AiLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsInBhcGVyRnVsbFNjcmVlbiIsInBhcGVyRnVsbFdpZHRoIiwiZXNtX0RpYWxvZ19EaWFsb2ciLCJzY3JvbGxQYXBlciIsInNjcm9sbEJvZHkiLCJvdmVyZmxvd1giLCJwYXBlclNjcm9sbFBhcGVyIiwicGFwZXJTY3JvbGxCb2R5IiwicGFwZXJXaWR0aEZhbHNlIiwiJiRwYXBlclNjcm9sbEJvZHkiLCJwYXBlcldpZHRoWHMiLCJwYXBlcldpZHRoU20iLCJwYXBlcldpZHRoTWQiLCJwYXBlcldpZHRoTGciLCJwYXBlcldpZHRoWGwiLCJEaWFsb2dBY3Rpb25zX0RpYWxvZ0FjdGlvbnMiLCJlc21fRGlhbG9nQWN0aW9uc19EaWFsb2dBY3Rpb25zIiwiRGlhbG9nQ29udGVudF9EaWFsb2dDb250ZW50IiwiX3Byb3BzJGRpdmlkZXJzIiwiZGl2aWRlcnMiLCJlc21fRGlhbG9nQ29udGVudF9EaWFsb2dDb250ZW50IiwiRGlhbG9nQ29udGVudFRleHRfRGlhbG9nQ29udGVudFRleHQiLCJlc21fRGlhbG9nQ29udGVudFRleHRfRGlhbG9nQ29udGVudFRleHQiLCJEaWFsb2dUaXRsZV9EaWFsb2dUaXRsZSIsImVzbV9EaWFsb2dUaXRsZV9EaWFsb2dUaXRsZSIsIkRpdmlkZXJfRGl2aWRlciIsIl9wcm9wcyRhYnNvbHV0ZSIsImFic29sdXRlIiwiX3Byb3BzJGxpZ2h0IiwibWlkZGxlIiwiZXNtX0RpdmlkZXJfRGl2aWRlciIsIkV4cGFuc2lvblBhbmVsX0V4cGFuc2lvblBhbmVsIiwiX3Byb3BzJGRlZmF1bHRFeHBhbmRlIiwiZGVmYXVsdEV4cGFuZGVkIiwiZXhwYW5kZWRQcm9wIiwiZXhwYW5kZWRTdGF0ZSIsInNldEV4cGFuZGVkU3RhdGUiLCJfUmVhY3QkQ2hpbGRyZW4kdG9BcnIiLCJfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyIiwidG9BcnJheV9kZWZhdWx0Iiwic3VtbWFyeSIsImFyaWEtbGFiZWxsZWRieSIsImVzbV9FeHBhbnNpb25QYW5lbF9FeHBhbnNpb25QYW5lbCIsIiY6YmVmb3JlIiwiJjpmaXJzdC1jaGlsZCIsIiYkZXhwYW5kZWQiLCImJGV4cGFuZGVkICsgJiIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIkBzdXBwb3J0cyAoLW1zLWltZS1hbGlnbjogYXV0bykiLCJFeHBhbnNpb25QYW5lbEFjdGlvbnNfRXhwYW5zaW9uUGFuZWxBY3Rpb25zIiwiZXNtX0V4cGFuc2lvblBhbmVsQWN0aW9uc19FeHBhbnNpb25QYW5lbEFjdGlvbnMiLCJFeHBhbnNpb25QYW5lbERldGFpbHNfRXhwYW5zaW9uUGFuZWxEZXRhaWxzIiwiZXNtX0V4cGFuc2lvblBhbmVsRGV0YWlsc19FeHBhbnNpb25QYW5lbERldGFpbHMiLCJFeHBhbnNpb25QYW5lbFN1bW1hcnlfRXhwYW5zaW9uUGFuZWxTdW1tYXJ5IiwiZXhwYW5kSWNvbiIsIkljb25CdXR0b25Qcm9wcyIsImZvY3VzZWRTdGF0ZSIsInNldEZvY3VzZWRTdGF0ZSIsImFyaWEtZXhwYW5kZWQiLCJmb2N1c2VkIiwiZXNtX0V4cGFuc2lvblBhbmVsU3VtbWFyeV9FeHBhbnNpb25QYW5lbFN1bW1hcnkiLCImOmhvdmVyOm5vdCgkZGlzYWJsZWQpIiwiJiRmb2N1c2VkIiwiZmxleEdyb3ciLCJGYWJfRmFiIiwiZXh0ZW5kZWQiLCJlc21fRmFiX0ZhYiIsIiYkc2l6ZVNtYWxsIiwiJiRzaXplTWVkaXVtIiwic2l6ZU1lZGl1bSIsIkZvcm1Db250cm9sTGFiZWxfRm9ybUNvbnRyb2xMYWJlbCIsImNvbnRyb2wiLCJfcHJvcHMkbGFiZWxQbGFjZW1lbnQiLCJsYWJlbFBsYWNlbWVudCIsImNvbnRyb2xQcm9wcyIsImVzbV9Gb3JtQ29udHJvbExhYmVsX0Zvcm1Db250cm9sTGFiZWwiLCJsYWJlbFBsYWNlbWVudFN0YXJ0IiwibGFiZWxQbGFjZW1lbnRUb3AiLCJsYWJlbFBsYWNlbWVudEJvdHRvbSIsIkZvcm1Hcm91cF9Gb3JtR3JvdXAiLCJfcHJvcHMkcm93Iiwicm93IiwiZXNtX0Zvcm1Hcm91cF9Gb3JtR3JvdXAiLCJTUEFDSU5HUyIsIkdSSURfU0laRVMiLCJHcmlkIiwiX3Byb3BzJGFsaWduQ29udGVudCIsIl9wcm9wcyRjb250YWluZXIiLCJfcHJvcHMkZGlyZWN0aW9uIiwiX3Byb3BzJGl0ZW0iLCJfcHJvcHMkanVzdGlmeSIsImp1c3RpZnkiLCJfcHJvcHMkbGciLCJfcHJvcHMkbWQiLCJfcHJvcHMkc20iLCJfcHJvcHMkc3BhY2luZyIsIl9wcm9wcyR3cmFwIiwid3JhcCIsIl9wcm9wcyR4bCIsIl9wcm9wcyR4cyIsIl9wcm9wcyR6ZXJvTWluV2lkdGgiLCJ6ZXJvTWluV2lkdGgiLCJHcmlkX0dyaWQiLCJkaXJlY3Rpb24teHMtY29sdW1uIiwiZGlyZWN0aW9uLXhzLWNvbHVtbi1yZXZlcnNlIiwiZGlyZWN0aW9uLXhzLXJvdy1yZXZlcnNlIiwid3JhcC14cy1ub3dyYXAiLCJ3cmFwLXhzLXdyYXAtcmV2ZXJzZSIsImFsaWduLWl0ZW1zLXhzLWNlbnRlciIsImFsaWduLWl0ZW1zLXhzLWZsZXgtc3RhcnQiLCJhbGlnbi1pdGVtcy14cy1mbGV4LWVuZCIsImFsaWduLWl0ZW1zLXhzLWJhc2VsaW5lIiwiYWxpZ24tY29udGVudC14cy1jZW50ZXIiLCJhbGlnbi1jb250ZW50LXhzLWZsZXgtc3RhcnQiLCJhbGlnbi1jb250ZW50LXhzLWZsZXgtZW5kIiwiYWxpZ24tY29udGVudC14cy1zcGFjZS1iZXR3ZWVuIiwiYWxpZ24tY29udGVudC14cy1zcGFjZS1hcm91bmQiLCJqdXN0aWZ5LXhzLWNlbnRlciIsImp1c3RpZnkteHMtZmxleC1lbmQiLCJqdXN0aWZ5LXhzLXNwYWNlLWJldHdlZW4iLCJqdXN0aWZ5LXhzLXNwYWNlLWFyb3VuZCIsImp1c3RpZnkteHMtc3BhY2UtZXZlbmx5IiwiJiA+ICRpdGVtIiwiZ2VuZXJhdGVHdXR0ZXIiLCJhY2N1bXVsYXRvciIsImdsb2JhbFN0eWxlcyIsImZsZXhCYXNpcyIsImdlbmVyYXRlR3JpZCIsIkdyaWRMaXN0X0dyaWRMaXN0IiwiX3Byb3BzJGNlbGxIZWlnaHQiLCJjZWxsSGVpZ2h0IiwiX3Byb3BzJGNvbHMiLCJjb2xzIiwiY2hpbGRDb2xzIiwiY2hpbGRSb3dzIiwiZXNtX0dyaWRMaXN0X0dyaWRMaXN0IiwiR3JpZExpc3RUaWxlX2ZpdCIsImltZ0VsIiwiX2ltZ0VsJGNsYXNzTGlzdCIsIl9pbWdFbCRjbGFzc0xpc3QyIiwiX2ltZ0VsJGNsYXNzTGlzdDMiLCJfaW1nRWwkY2xhc3NMaXN0NCIsImNvbXBsZXRlIiwib2Zmc2V0SGVpZ2h0IiwiY2xhc3NMaXN0IiwiaW1nRnVsbFdpZHRoIiwiaW1nRnVsbEhlaWdodCIsIkdyaWRMaXN0VGlsZV9HcmlkTGlzdFRpbGUiLCJpbWdSZWYiLCJlbnN1cmVJbWFnZUNvdmVyIiwiaGFuZGxlUmVzaXplIiwiZGVib3VuY2VfZGVmYXVsdCIsInRpbGUiLCJlc21fR3JpZExpc3RUaWxlX0dyaWRMaXN0VGlsZSIsIkdyaWRMaXN0VGlsZUJhcl9HcmlkTGlzdFRpbGVCYXIiLCJhY3Rpb25JY29uIiwiX3Byb3BzJGFjdGlvblBvc2l0aW9uIiwiYWN0aW9uUG9zaXRpb24iLCJzdWJ0aXRsZSIsIl9wcm9wcyR0aXRsZVBvc2l0aW9uIiwidGl0bGVQb3NpdGlvbiIsImFjdGlvblBvcyIsInRpdGxlUG9zaXRpb25Cb3R0b20iLCJ0aXRsZVBvc2l0aW9uVG9wIiwicm9vdFN1YnRpdGxlIiwidGl0bGVXcmFwQ2xhc3NOYW1lIiwidGl0bGVXcmFwIiwidGl0bGVXcmFwQWN0aW9uUG9zTGVmdCIsInRpdGxlV3JhcEFjdGlvblBvc1JpZ2h0IiwiYWN0aW9uSWNvbkFjdGlvblBvc0xlZnQiLCJlc21fR3JpZExpc3RUaWxlQmFyX0dyaWRMaXN0VGlsZUJhciIsIm9yZGVyIiwid2l0aFdpZHRoX2lzV2lkdGhVcCIsIndpdGhXaWR0aF9pc1dpZHRoRG93biIsImVzbV93aXRoV2lkdGhfd2l0aFdpZHRoIiwiX29wdGlvbnMkd2l0aFRoZW1lIiwid2l0aFRoZW1lT3B0aW9uIiwiX29wdGlvbnMkbm9TU1IiLCJub1NTUiIsImluaXRpYWxXaWR0aE9wdGlvbiIsImluaXRpYWxXaWR0aCIsIl9vcHRpb25zJHJlc2l6ZUludGVydiIsInJlc2l6ZUludGVydmFsIiwiV2l0aFdpZHRoIiwiZ2V0V2lkdGgiLCJ3aWR0aDIiLCJpbm5lcldpZHRoIiwiY3VycmVudFdpZHRoIiwiX2dldFRoZW1lUHJvcHMiLCJtb3JlIiwicmVhY3RfZXZlbnRfbGlzdGVuZXJfY2pzX2RlZmF1bHQiLCJvblJlc2l6ZSIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2Nqc19kZWZhdWx0IiwiSGlkZGVuSnMiLCJfaSIsIl9icmVha3BvaW50IiwiYnJlYWtwb2ludFVwIiwiYnJlYWtwb2ludERvd24iLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJpbXBsZW1lbnRhdGlvbiIsIm9uZU9mIiwibGdEb3duIiwiYm9vbCIsImxnVXAiLCJtZERvd24iLCJtZFVwIiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsInNtRG93biIsInNtVXAiLCJpc1JlcXVpcmVkIiwieGxEb3duIiwieGxVcCIsInhzRG93biIsInhzVXAiLCJIaWRkZW5fSGlkZGVuSnMiLCJIaWRkZW5fSGlkZGVuQ3NzIiwiY2xzeCIsIkhpZGRlbiIsIkhpZGRlbl9IaWRkZW4iLCJJY29uX0ljb24iLCJlc21fSWNvbl9JY29uIiwiSW5wdXRBZG9ybm1lbnRfSW5wdXRBZG9ybm1lbnQiLCJfcHJvcHMkZGlzYWJsZVBvaW50ZXIiLCJkaXNhYmxlUG9pbnRlckV2ZW50cyIsInZhcmlhbnRQcm9wIiwicG9zaXRpb25TdGFydCIsInBvc2l0aW9uRW5kIiwiZXNtX0lucHV0QWRvcm5tZW50X0lucHV0QWRvcm5tZW50IiwiJiRwb3NpdGlvblN0YXJ0IiwiTGluZWFyUHJvZ3Jlc3NfTGluZWFyUHJvZ3Jlc3MiLCJ2YWx1ZUJ1ZmZlciIsImRldGVybWluYXRlIiwicXVlcnkiLCJkYXNoZWRDbGFzcyIsImRhc2hlZCIsImRhc2hlZENvbG9yUHJpbWFyeSIsImRhc2hlZENvbG9yU2Vjb25kYXJ5IiwiYmFyMUNsYXNzTmFtZSIsImJhciIsImJhckNvbG9yUHJpbWFyeSIsImJhckNvbG9yU2Vjb25kYXJ5IiwiYmFyMUluZGV0ZXJtaW5hdGUiLCJiYXIxRGV0ZXJtaW5hdGUiLCJiYXIxQnVmZmVyIiwiYmFyMkNsYXNzTmFtZSIsImJhcjJJbmRldGVybWluYXRlIiwiYmFyMkJ1ZmZlciIsImlubGluZVN0eWxlcyIsImJhcjEiLCJiYXIyIiwiZXNtX0xpbmVhclByb2dyZXNzX0xpbmVhclByb2dyZXNzIiwiYW5pbWF0aW9uRGVsYXkiLCJAa2V5ZnJhbWVzIG11aS1pbmRldGVybWluYXRlMSIsIjYwJSIsIkBrZXlmcmFtZXMgbXVpLWluZGV0ZXJtaW5hdGUyIiwiQGtleWZyYW1lcyBidWZmZXIiLCJMaW5rX0xpbmsiLCJUeXBvZ3JhcGh5Q2xhc3NlcyIsIl9wcm9wcyR1bmRlcmxpbmUiLCJ1bmRlcmxpbmUiLCJlc21fTGlua19MaW5rIiwidW5kZXJsaW5lTm9uZSIsInVuZGVybGluZUhvdmVyIiwidW5kZXJsaW5lQWx3YXlzIiwiTGlzdEl0ZW1BdmF0YXJfTGlzdEl0ZW1BdmF0YXIiLCJlc21fTGlzdEl0ZW1BdmF0YXJfTGlzdEl0ZW1BdmF0YXIiLCJMaXN0SXRlbVNlY29uZGFyeUFjdGlvbl9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbiIsImVzbV9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbl9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbiIsIkxpc3RTdWJoZWFkZXJfTGlzdFN1YmhlYWRlciIsIl9wcm9wcyRkaXNhYmxlU3RpY2t5IiwiZGlzYWJsZVN0aWNreSIsInN0aWNreSIsImVzbV9MaXN0U3ViaGVhZGVyX0xpc3RTdWJoZWFkZXIiLCJNZW51SXRlbV9NZW51SXRlbSIsIl9wcm9wcyRyb2xlIiwidGFiSW5kZXhQcm9wIiwiZXNtX01lbnVJdGVtX01lbnVJdGVtIiwiTW9iaWxlU3RlcHBlcl9Nb2JpbGVTdGVwcGVyIiwiX3Byb3BzJGFjdGl2ZVN0ZXAiLCJhY3RpdmVTdGVwIiwiYmFja0J1dHRvbiIsIkxpbmVhclByb2dyZXNzUHJvcHMiLCJuZXh0QnV0dG9uIiwic3RlcHMiLCJkb3RzIiwiZG90QWN0aXZlIiwicHJvZ3Jlc3MiLCJjZWlsIiwiZXNtX01vYmlsZVN0ZXBwZXJfTW9iaWxlU3RlcHBlciIsInBvc2l0aW9uQm90dG9tIiwicG9zaXRpb25Ub3AiLCJmbGlwUGxhY2VtZW50IiwicGxhY2VtZW50IiwiZXNtX1BvcHBlcl9Qb3BwZXIiLCJhbmNob3JFbCIsIl9wcm9wcyRkaXNhYmxlUG9ydGFsIiwiZGlzYWJsZVBvcnRhbCIsIl9wcm9wcyRrZWVwTW91bnRlZCIsImtlZXBNb3VudGVkIiwibW9kaWZpZXJzIiwiX3Byb3BzJHBsYWNlbWVudCIsInBsYWNlbWVudFByb3BzIiwiX3Byb3BzJHBvcHBlck9wdGlvbnMiLCJwb3BwZXJPcHRpb25zIiwiX3Byb3BzJHRyYW5zaXRpb24iLCJ0b29sdGlwUmVmIiwicG9wcGVyUmVmIiwiZXhpdGVkIiwic2V0RXhpdGVkIiwic2V0UGxhY2VtZW50IiwiaGFuZGxlT3BlbiIsImhhbmRsZVBvcHBlclVwZGF0ZSIsInBvcHBlck5vZGUiLCJkZXN0cm95IiwicG9wcGVyIiwiZ2V0QW5jaG9yRWwiLCJwcmV2ZW50T3ZlcmZsb3ciLCJib3VuZGFyaWVzRWxlbWVudCIsIm9uQ3JlYXRlIiwiaGFuZGxlQ2xvc2UiLCJQb3J0YWwiLCJvblJlbmRlcmVkIiwiUmFkaW9CdXR0b25VbmNoZWNrZWQiLCJSYWRpb0J1dHRvbkNoZWNrZWQiLCJSYWRpb0J1dHRvbkljb25fcmVmIiwiUmFkaW9fUmFkaW9CdXR0b25JY29uIiwiJiRjaGVja2VkICRsYXllciIsImxheWVyIiwiUmFkaW9Hcm91cF9SYWRpb0dyb3VwQ29udGV4dCIsIlJhZGlvX2RlZmF1bHRDaGVja2VkSWNvbiIsIlJhZGlvX2RlZmF1bHRJY29uIiwiUmFkaW9fUmFkaW8iLCJuYW1lUHJvcCIsIm9uQ2hhbmdlUHJvcCIsInJhZGlvR3JvdXAiLCJlc21fUmFkaW9fUmFkaW8iLCJlc21fUmFkaW9Hcm91cF9SYWRpb0dyb3VwIiwiYWN0aW9ucyIsInZhbHVlUHJvcCIsInJvb3RSZWYiLCJ2YWx1ZVN0YXRlIiwic2V0VmFsdWUiLCJlc21fUm9vdFJlZl9Sb290UmVmIiwiUm9vdFJlZiIsIlNuYWNrYmFyQ29udGVudF9TbmFja2JhckNvbnRlbnQiLCJlc21fU25hY2tiYXJDb250ZW50X1NuYWNrYmFyQ29udGVudCIsImVtcGhhc2lzIiwiU25hY2tiYXJfU25hY2tiYXIiLCJfcHJvcHMkYW5jaG9yT3JpZ2luIiwiYW5jaG9yT3JpZ2luIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwiYXV0b0hpZGVEdXJhdGlvbiIsIkNsaWNrQXdheUxpc3RlbmVyUHJvcHMiLCJDb250ZW50UHJvcHMiLCJkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyIiwib25Nb3VzZUVudGVyIiwicmVzdW1lSGlkZUR1cmF0aW9uIiwidGltZXJBdXRvSGlkZSIsInNldEF1dG9IaWRlVGltZXIiLCJhdXRvSGlkZUR1cmF0aW9uUGFyYW0iLCJhdXRvSGlkZUR1cmF0aW9uQmVmb3JlIiwiaGFuZGxlUGF1c2UiLCJoYW5kbGVSZXN1bWUiLCJHcm93IiwiZXNtX1NuYWNrYmFyX1NuYWNrYmFyIiwidG9wMSIsImJvdHRvbTEiLCJ0b3AzIiwiYm90dG9tMyIsInJpZ2h0MyIsImxlZnQzIiwiYW5jaG9yT3JpZ2luVG9wQ2VudGVyIiwiYW5jaG9yT3JpZ2luQm90dG9tQ2VudGVyIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHQiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodCIsImFuY2hvck9yaWdpblRvcExlZnQiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0IiwiU3RlcF9TdGVwIiwiX3Byb3BzJGFjdGl2ZSIsImFsdGVybmF0aXZlTGFiZWwiLCJfcHJvcHMkY29tcGxldGVkIiwiY29tcGxldGVkIiwiY29ubmVjdG9yIiwib3JpZW50YXRpb24iLCJlc21fU3RlcF9TdGVwIiwiQ2hlY2tDaXJjbGUiLCJXYXJuaW5nIiwiU3RlcEljb25fcmVmIiwiU3RlcEljb25fU3RlcEljb24iLCJfcHJvcHMkZXJyb3IiLCJ0ZXh0QW5jaG9yIiwiZXNtX1N0ZXBJY29uX1N0ZXBJY29uIiwiJiRhY3RpdmUiLCImJGNvbXBsZXRlZCIsIiYkZXJyb3IiLCJTdGVwTGFiZWxfU3RlcExhYmVsIiwiX3Byb3BzJGFsdGVybmF0aXZlTGFiIiwib3B0aW9uYWwiLCJfcHJvcHMkb3JpZW50YXRpb24iLCJTdGVwSWNvbkNvbXBvbmVudFByb3AiLCJTdGVwSWNvbkNvbXBvbmVudCIsIlN0ZXBJY29uUHJvcHMiLCJpY29uQ29udGFpbmVyIiwibGFiZWxDb250YWluZXIiLCJlc21fU3RlcExhYmVsX1N0ZXBMYWJlbCIsIiYkYWx0ZXJuYXRpdmVMYWJlbCIsIlN0ZXBCdXR0b25fU3RlcEJ1dHRvbiIsInRvdWNoUmlwcGxlIiwiZXNtX1N0ZXBCdXR0b25fU3RlcEJ1dHRvbiIsIlN0ZXBDb25uZWN0b3JfU3RlcENvbm5lY3RvciIsImxpbmUiLCJsaW5lSG9yaXpvbnRhbCIsImxpbmVWZXJ0aWNhbCIsImVzbV9TdGVwQ29ubmVjdG9yX1N0ZXBDb25uZWN0b3IiLCJib3JkZXJUb3BTdHlsZSIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdFdpZHRoIiwiU3RlcENvbnRlbnRfU3RlcENvbnRlbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiZXNtX1N0ZXBDb250ZW50X1N0ZXBDb250ZW50IiwiZGVmYXVsdENvbm5lY3RvciIsIlN0ZXBwZXJfU3RlcHBlciIsIl9wcm9wcyRjb25uZWN0b3IiLCJjb25uZWN0b3JQcm9wIiwiX3Byb3BzJG5vbkxpbmVhciIsIm5vbkxpbmVhciIsImNoaWxkcmVuQXJyYXkiLCJlc21fU3RlcHBlcl9TdGVwcGVyIiwiU3dpcGVBcmVhX1N3aXBlQXJlYSIsIlN3aXBlYWJsZURyYXdlcl9Td2lwZUFyZWEiLCJhbmNob3JMZWZ0IiwiYW5jaG9yUmlnaHQiLCJhbmNob3JUb3AiLCJhbmNob3JCb3R0b20iLCJVTkNFUlRBSU5UWV9USFJFU0hPTEQiLCJub2RlVGhhdENsYWltZWRUaGVTd2lwZSIsIlN3aXBlYWJsZURyYXdlcl9Td2lwZWFibGVEcmF3ZXIiLCJTd2lwZWFibGVEcmF3ZXIiLCJpc1N3aXBpbmciLCJzd2lwZUFyZWFSZWYiLCJwYXBlclJlZiIsImhhbmRsZUJvZHlUb3VjaFN0YXJ0IiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkX2RlZmF1bHQiLCJkaXNhYmxlRGlzY292ZXJ5IiwiZGlzYWJsZVN3aXBlVG9PcGVuIiwic3dpcGVBcmVhV2lkdGgiLCJjdXJyZW50WCIsInBhZ2VYIiwiY3VycmVudFkiLCJpbm5lckhlaWdodCIsInN0YXJ0WCIsInN0YXJ0WSIsIm1heWJlU3dpcGluZyIsInNldFBvc2l0aW9uIiwiZ2V0TWF4VHJhbnNsYXRlIiwiY2hhbmdlVHJhbnNpdGlvbiIsInZlbG9jaXR5IiwibGFzdFRpbWUiLCJsYXN0VHJhbnNsYXRlIiwiaGFuZGxlQm9keVRvdWNoTW92ZSIsImhhbmRsZUJvZHlUb3VjaEVuZCIsImhvcml6b250YWxTd2lwZSIsImR4IiwiZHkiLCJ0cmFuc2xhdGUiLCJnZXRUcmFuc2xhdGUiLCJwZXJmb3JtYW5jZSIsInJlbW92ZUJvZHlUb3VjaExpc3RlbmVycyIsImNoYW5nZWRUb3VjaGVzIiwidHJhbnNsYXRlUmF0aW8iLCJtaW5GbGluZ1ZlbG9jaXR5IiwiaHlzdGVyZXNpcyIsIm9uT3BlbiIsImhhbmRsZUJhY2tkcm9wUmVmIiwiYmFja2Ryb3BSZWYiLCJoYW5kbGVQYXBlclJlZiIsImxpc3RlblRvdWNoU3RhcnQiLCJwcmV2VmFyaWFudCIsInJlbW92ZVRvdWNoU3RhcnQiLCJfb3B0aW9ucyRtb2RlIiwiX29wdGlvbnMkY2hhbmdlVHJhbnNpIiwicnRsVHJhbnNsYXRlTXVsdGlwbGllciIsImRyYXdlclN0eWxlIiwid2Via2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNpdGlvbiIsImRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24iLCJoaWRlQmFja2Ryb3AiLCJiYWNrZHJvcFN0eWxlIiwiX3RoaXMkcHJvcHMyIiwiX3RoaXMkcHJvcHMyJE1vZGFsUHJvIiwiTW9kYWxQcm9wc1Byb3AiLCJfdGhpcyRwcm9wczIkUGFwZXJQcm8iLCJTd2lwZUFyZWFQcm9wcyIsInVzZXJBZ2VudCIsImVzbV9Td2lwZWFibGVEcmF3ZXJfU3dpcGVhYmxlRHJhd2VyIiwiU3dpdGNoX1N3aXRjaCIsInRodW1iIiwic3dpdGNoQmFzZSIsInRyYWNrIiwiZXNtX1N3aXRjaF9Td2l0Y2giLCImJGNoZWNrZWQgKyAkdHJhY2siLCImJGRpc2FibGVkICsgJHRyYWNrIiwiVGFiX1RhYiIsImluZGljYXRvciIsIl9wcm9wcyR0ZXh0Q29sb3IiLCJfcHJvcHMkd3JhcHBlZCIsIndyYXBwZWQiLCJsYWJlbEljb24iLCJhcmlhLXNlbGVjdGVkIiwiZXNtX1RhYl9UYWIiLCImICR3cmFwcGVyID4gKjpmaXJzdC1jaGlsZCIsInRleHRDb2xvckluaGVyaXQiLCJ0ZXh0Q29sb3JQcmltYXJ5IiwidGV4dENvbG9yU2Vjb25kYXJ5IiwiVGFibGVfVGFibGVDb250ZXh0IiwiVGFibGVfVGFibGUiLCJfcHJvcHMkcGFkZGluZyIsInRhYmxlIiwiZXNtX1RhYmxlX1RhYmxlIiwiYm9yZGVyQ29sbGFwc2UiLCJib3JkZXJTcGFjaW5nIiwiVGFibGVfVGFibGVsdmwyQ29udGV4dCIsIlRhYmxlQm9keV90YWJsZWx2bDIiLCJUYWJsZUJvZHlfVGFibGVCb2R5IiwiZXNtX1RhYmxlQm9keV9UYWJsZUJvZHkiLCJUYWJsZUNlbGxfVGFibGVDZWxsIiwicGFkZGluZ1Byb3AiLCJzY29wZVByb3AiLCJzY29wZSIsInNpemVQcm9wIiwic29ydERpcmVjdGlvbiIsInRhYmxlbHZsMiIsImFyaWFTb3J0IiwiZm9vdGVyIiwiYXJpYS1zb3J0IiwiZXNtX1RhYmxlQ2VsbF9UYWJsZUNlbGwiLCImJHBhZGRpbmdDaGVja2JveCIsIiYgPiAqIiwicGFkZGluZ0NoZWNrYm94IiwicGFkZGluZ05vbmUiLCJUYWJsZUZvb3Rlcl90YWJsZWx2bDIiLCJUYWJsZUZvb3Rlcl9UYWJsZUZvb3RlciIsImVzbV9UYWJsZUZvb3Rlcl9UYWJsZUZvb3RlciIsIlRhYmxlSGVhZF90YWJsZWx2bDIiLCJUYWJsZUhlYWRfVGFibGVIZWFkIiwiZXNtX1RhYmxlSGVhZF9UYWJsZUhlYWQiLCJLZXlib2FyZEFycm93TGVmdCIsIktleWJvYXJkQXJyb3dSaWdodCIsIlRhYmxlUGFnaW5hdGlvbkFjdGlvbnNfcmVmIiwiVGFibGVQYWdpbmF0aW9uQWN0aW9uc19UYWJsZVBhZ2luYXRpb25BY3Rpb25zIiwiYmFja0ljb25CdXR0b25Qcm9wcyIsImNvdW50IiwibmV4dEljb25CdXR0b25Qcm9wcyIsIm9uQ2hhbmdlUGFnZSIsInBhZ2UiLCJyb3dzUGVyUGFnZSIsIlRhYmxlUGFnaW5hdGlvbl9UYWJsZVBhZ2luYXRpb25BY3Rpb25zIiwiZGVmYXVsdExhYmVsRGlzcGxheWVkUm93cyIsImRlZmF1bHRSb3dzUGVyUGFnZU9wdGlvbnMiLCJUYWJsZVBhZ2luYXRpb25fVGFibGVQYWdpbmF0aW9uIiwiY29sU3BhbiIsIl9wcm9wcyRBY3Rpb25zQ29tcG9uZSIsIkFjdGlvbnNDb21wb25lbnQiLCJjb2xTcGFuUHJvcCIsIl9wcm9wcyRsYWJlbERpc3BsYXllZCIsImxhYmVsRGlzcGxheWVkUm93cyIsIl9wcm9wcyRsYWJlbFJvd3NQZXJQYSIsImxhYmVsUm93c1BlclBhZ2UiLCJvbkNoYW5nZVJvd3NQZXJQYWdlIiwiX3Byb3BzJHJvd3NQZXJQYWdlT3B0Iiwicm93c1BlclBhZ2VPcHRpb25zIiwiX3Byb3BzJFNlbGVjdFByb3BzIiwiTWVudUl0ZW1Db21wb25lbnQiLCJuYXRpdmUiLCJzcGFjZXIiLCJTZWxlY3QiLCJzZWxlY3RSb290Iiwic2VsZWN0SWNvbiIsIklucHV0QmFzZSIsInJvd3NQZXJQYWdlT3B0aW9uIiwibWVudUl0ZW0iLCJlc21fVGFibGVQYWdpbmF0aW9uX1RhYmxlUGFnaW5hdGlvbiIsInRleHRBbGlnbkxhc3QiLCJUYWJsZVJvd19UYWJsZVJvdyIsIl9wcm9wcyRob3ZlciIsImVzbV9UYWJsZVJvd19UYWJsZVJvdyIsIiYkaG92ZXI6aG92ZXIiLCJBcnJvd0Rvd253YXJkIiwiVGFibGVTb3J0TGFiZWxfVGFibGVTb3J0TGFiZWwiLCJfcHJvcHMkaGlkZVNvcnRJY29uIiwiaGlkZVNvcnRJY29uIiwiX3Byb3BzJEljb25Db21wb25lbnQiLCJlc21fVGFibGVTb3J0TGFiZWxfVGFibGVTb3J0TGFiZWwiLCImICRpY29uIiwiJiYgJGljb24iLCJpY29uRGlyZWN0aW9uRGVzYyIsImljb25EaXJlY3Rpb25Bc2MiLCJlYXNlSW5PdXRTaW4iLCJzaW4iLCJpbnRlcm5hbF9hbmltYXRlIiwiX29wdGlvbnMkZWFzZSIsImVhc2UiLCJjYW5jZWxsZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJTY3JvbGxiYXJTaXplX3N0eWxlcyIsIlNjcm9sbGJhclNpemUiLCJzY3JvbGxiYXJIZWlnaHQiLCJzZXRNZWFzdXJlbWVudHMiLCJwcmV2SGVpZ2h0IiwiVGFiSW5kaWNhdG9yX1RhYkluZGljYXRvciIsIlRhYnNfVGFiSW5kaWNhdG9yIiwiVGFiU2Nyb2xsQnV0dG9uX3JlZiIsIlRhYlNjcm9sbEJ1dHRvbl9yZWYyIiwiVGFiU2Nyb2xsQnV0dG9uX1RhYlNjcm9sbEJ1dHRvbiIsIl9wcm9wcyR2aXNpYmxlIiwiVGFic19UYWJTY3JvbGxCdXR0b24iLCJUYWJzX1RhYnMiLCJUYWJzIiwiaW5kaWNhdG9yU3R5bGUiLCJzY3JvbGxlclN0eWxlIiwic2hvd0xlZnRTY3JvbGwiLCJzaG93UmlnaHRTY3JvbGwiLCJnZXRDb25kaXRpb25hbEVsZW1lbnRzIiwiU2Nyb2xsQnV0dG9uQ29tcG9uZW50Iiwic2Nyb2xsQnV0dG9ucyIsIl90aGlzJHN0YXRlIiwiY29uZGl0aW9uYWxFbGVtZW50cyIsInNjcm9sbGFibGUiLCJzY3JvbGxiYXJTaXplTGlzdGVuZXIiLCJoYW5kbGVTY3JvbGxiYXJTaXplQ2hhbmdlIiwic2hvd1Njcm9sbEJ1dHRvbnMiLCJzY3JvbGxCdXR0b25MZWZ0IiwiaGFuZGxlTGVmdFNjcm9sbENsaWNrIiwic2Nyb2xsQnV0dG9uc0Rlc2t0b3AiLCJzY3JvbGxCdXR0b25SaWdodCIsImhhbmRsZVJpZ2h0U2Nyb2xsQ2xpY2siLCJnZXRUYWJzTWV0YSIsInRhYnNNZXRhIiwidGFiTWV0YSIsInRhYnNSZWYiLCJzY3JvbGxMZWZ0Tm9ybWFsaXplZCIsInRhYiIsInZhbHVlVG9JbmRleCIsIm1vdmVUYWJzU2Nyb2xsIiwiaGFuZGxlVGFic1JlZiIsImRlbHRhIiwibXVsdGlwbGllciIsIm5leHRTY3JvbGxMZWZ0IiwiaW52ZXJ0Iiwic2Nyb2xsU2VsZWN0ZWRJbnRvVmlldyIsIl90aGlzJGdldFRhYnNNZXRhIiwiX25leHRTY3JvbGxMZWZ0IiwidXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUiLCJfdGhpcyRwcm9wczMiLCJfdGhpcyR0YWJzUmVmIiwidXBkYXRlSW5kaWNhdG9yU3RhdGUiLCJoYW5kbGVUYWJzU2Nyb2xsIiwidXBkYXRlSW5kaWNhdG9yIiwiX3RoaXMkZ2V0VGFic01ldGEyIiwiY29ycmVjdGlvbiIsIl90aGlzJHByb3BzNCIsImNlbnRlcmVkIiwiaW5kaWNhdG9yQ29sb3IiLCJfdGhpcyRwcm9wczQkVGFiSW5kaWMiLCJUYWJJbmRpY2F0b3JQcm9wcyIsImZsZXhDb250YWluZXIiLCJzY3JvbGxlciIsIm9uU2Nyb2xsIiwiZXNtX1RhYnNfVGFicyIsInNjcm9sbGJhcldpZHRoIiwiJjo6LXdlYmtpdC1zY3JvbGxiYXIiLCJUb29sdGlwX1Rvb2x0aXAiLCJwb3BwZXJJbnRlcmFjdGl2ZSIsInRvdWNoIiwidG9vbHRpcFBsYWNlbWVudExlZnQiLCJ0b29sdGlwUGxhY2VtZW50UmlnaHQiLCJ0b29sdGlwUGxhY2VtZW50VG9wIiwidG9vbHRpcFBsYWNlbWVudEJvdHRvbSIsIl9wcm9wcyRkaXNhYmxlRm9jdXNMaSIsImRpc2FibGVGb2N1c0xpc3RlbmVyIiwiX3Byb3BzJGRpc2FibGVIb3ZlckxpIiwiZGlzYWJsZUhvdmVyTGlzdGVuZXIiLCJfcHJvcHMkZGlzYWJsZVRvdWNoTGkiLCJkaXNhYmxlVG91Y2hMaXN0ZW5lciIsIl9wcm9wcyRlbnRlckRlbGF5IiwiZW50ZXJEZWxheSIsIl9wcm9wcyRlbnRlclRvdWNoRGVsYSIsImVudGVyVG91Y2hEZWxheSIsIl9wcm9wcyRpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlIiwiX3Byb3BzJGxlYXZlRGVsYXkiLCJsZWF2ZURlbGF5IiwiX3Byb3BzJGxlYXZlVG91Y2hEZWxhIiwibGVhdmVUb3VjaERlbGF5Iiwib3BlblByb3AiLCJQb3BwZXJQcm9wcyIsIm9wZW5TdGF0ZSIsInNldE9wZW5TdGF0ZSIsImZvcmNlVXBkYXRlIiwiX1JlYWN0JHVzZVN0YXRlNSIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJjaGlsZE5vZGUiLCJzZXRDaGlsZE5vZGUiLCJpZ25vcmVOb25Ub3VjaEV2ZW50cyIsImRlZmF1bHRJZCIsImNsb3NlVGltZXIiLCJlbnRlclRpbWVyIiwibGVhdmVUaW1lciIsInRvdWNoVGltZXIiLCJyYW5kb20iLCJoYW5kbGVFbnRlciIsImNoaWxkcmVuUHJvcHMiLCJvbk1vdXNlT3ZlciIsIl9SZWFjdCR1c2VTdGF0ZTciLCJfUmVhY3QkdXNlU3RhdGU4IiwiY2hpbGRJc0ZvY3VzVmlzaWJsZSIsInNldENoaWxkSXNGb2N1c1Zpc2libGUiLCJoYW5kbGVMZWF2ZSIsInNob3VsZFNob3dOYXRpdmVUaXRsZSIsImludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycyIsInBsYWNlbWVudElubmVyIiwiVHJhbnNpdGlvblByb3BzSW5uZXIiLCJlc21fd2l0aE1vYmlsZURpYWxvZ193aXRoTW9iaWxlRGlhbG9nIiwiX29wdGlvbnMkYnJlYWtwb2ludCIsIlpvb21fc3R5bGVzIiwiZW50ZXJpbmciLCJkZWZhdWx0VGltZW91dCIsIlpvb21fWm9vbSIsInRyYW5zaXRpb25Qcm9wcyIsImVzbV9ab29tX1pvb20iLCJjb2xvcnNfbmFtZXNwYWNlT2JqZWN0IiwiRmlsbGVkSW5wdXQiLCJGb3JtQ29udHJvbCIsIkZvcm1IZWxwZXJUZXh0IiwiRm9ybUxhYmVsIiwiSW5wdXQiLCJJbnB1dExhYmVsIiwiTWVudSIsIk1lbnVMaXN0IiwiTW9kYWxNYW5hZ2VyIiwiTmF0aXZlU2VsZWN0IiwiT3V0bGluZWRJbnB1dCIsIlBvcG92ZXIiLCJTbGlkZSIsIl9OYXRpdmVTZWxlY3RJbnB1dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX0Zvcm1Db250cm9sX2Zvcm1Db250cm9sU3RhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl9Gb3JtQ29udHJvbF93aXRoRm9ybUNvbnRyb2xDb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfaW50ZXJuYWxfc3ZnX2ljb25zX0Fycm93RHJvcERvd25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl9JbnB1dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwiJjo6LW1zLWV4cGFuZCIsIiZbbXVsdGlwbGVdIiwiJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCIsInNlbGVjdE1lbnUiLCJwb2ludGVyLWV2ZW50cyIsImRlZmF1bHRJbnB1dCIsIl9wcm9wcyRpbnB1dCIsImZjcyIsImlucHV0Q29tcG9uZW50IiwiX1BvcG92ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl9NZW51TGlzdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX3V0aWxzX3JlYWN0SGVscGVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXyIsIlJUTF9PUklHSU4iLCJMVFJfT1JJR0lOIiwiYXV0b0ZvY3VzUHJvcCIsIl9wcm9wcyRkaXNhYmxlQXV0b0ZvYyIsImRpc2FibGVBdXRvRm9jdXNJdGVtIiwiX3Byb3BzJE1lbnVMaXN0UHJvcHMiLCJNZW51TGlzdFByb3BzIiwiUG9wb3ZlckNsYXNzZXMiLCJtZW51TGlzdEFjdGlvbnNSZWYiLCJmaXJzdFZhbGlkSXRlbVJlZiIsImZpcnN0U2VsZWN0ZWRJdGVtUmVmIiwiZmlyc3RWYWxpZEVsZW1lbnRJbmRleCIsImZpcnN0U2VsZWN0ZWRJbmRleCIsIm5ld0NoaWxkUHJvcHMiLCJnZXRDb250ZW50QW5jaG9yRWwiLCJhZGp1c3RTdHlsZUZvclNjcm9sbGJhciIsImxpc3QiLCJjb25zdCIsInBhcnNlVW5pdCIsInJlcXVpcmUiLCJ1bml0TGVzcyIsImJhc2VGb250U2l6ZSIsInRvVW5pdCIsImZyb21Db250ZXh0IiwidG9Db250ZXh0IiwiZnJvbVVuaXQiLCJsZXQiLCJweExlbmd0aCIsIm91dHB1dExlbmd0aCIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsImNhbGxlZCIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQYXJlbnROb2RlIiwibm9kZU5hbWUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJpc0lFIiwiZ2V0T2Zmc2V0UGFyZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRSb290IiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJob3JpelNjcm9sbGJhciIsInZlcnRTY3JvbGxiYXIiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJmaXhlZFBvc2l0aW9uIiwicnVuSXNJRSIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInJlZmVyZW5jZSIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwic29ydCIsImFyZWEiLCJmaWx0ZXJlZEFyZWFzIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJmaW5kIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJlbmRzIiwiZmluZEluZGV4IiwiY3VyIiwiZW5hYmxlZCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwidG9DaGVjayIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInNjaGVkdWxlVXBkYXRlIiwiaXNOdW1lcmljIiwiaXNGaW5pdGUiLCJzZXRTdHlsZXMiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJyZXZlcnNlIiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJvZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwicHJpb3JpdHkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwiZmxvb3IiLCJvcFNpZGUiLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwiYXJyb3ciLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiZmxpcHBlZCIsIm9yaWdpbmFsUGxhY2VtZW50IiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJiZWhhdmlvciIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb25CeVJlZiIsImZsaXBWYXJpYXRpb25zIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBWYXJpYXRpb25zQnlDb250ZW50IiwiZmxpcHBlZFZhcmlhdGlvbiIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImhpZGUiLCJhdHRyaWJ1dGVzIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInYiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJhcnJvd1N0eWxlcyIsIm1vZGlmaWVyT3B0aW9ucyIsIlBvcHBlciIsImpxdWVyeSIsIm9uTG9hZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwiaXNEZXN0cm95ZWQiLCJpc0NyZWF0ZWQiLCJyZW1vdmVPbkRlc3Ryb3kiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiaXNPdmVyZmxvd2luZyIsIndpbiIsIm93bmVyV2luZG93Iiwic2Nyb2xsSGVpZ2h0IiwiZmluZEluZGV4T2YiLCJpZHgiLCJnZXRQYWRkaW5nUmlnaHQiLCJNb2RhbE1hbmFnZXJfTW9kYWxNYW5hZ2VyIiwiX29wdGlvbnMkaGlkZVNpYmxpbmdOIiwiaGlkZVNpYmxpbmdOb2RlcyIsIl9vcHRpb25zJGhhbmRsZUNvbnRhaSIsImhhbmRsZUNvbnRhaW5lck92ZXJmbG93IiwibW9kYWxzIiwibW9kYWxJZHgiLCJtb2RhbFJlZiIsIm1hbmFnZUFyaWFIaWRkZW4iLCJjb250YWluZXJJZHgiLCJvdmVyZmxvd2luZyIsInByZXZQYWRkaW5ncyIsImdldFNjcm9sbGJhclNpemUiLCJmaXhlZE5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldENvbnRhaW5lclN0eWxlIiwicmVtb3ZlQ29udGFpbmVyU3R5bGUiLCJuZXh0VG9wIiwiX0lucHV0QmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiZGlzYWJsZVVuZGVybGluZSIsIl9wcm9wcyRpbnB1dENvbXBvbmVudCIsIl9wcm9wcyRtdWx0aWxpbmUiLCJib3R0b21MaW5lQ29sb3IiLCJmb3JtQ29udHJvbCIsImxhYmVsICsgJiIsIiY6YWZ0ZXIiLCImJGZvY3VzZWQ6YWZ0ZXIiLCImJGVycm9yOmFmdGVyIiwiYm9yZGVyQm90dG9tQ29sb3IiLCImOmhvdmVyOm5vdCgkZGlzYWJsZWQpOmJlZm9yZSIsIiYkZGlzYWJsZWQ6YmVmb3JlIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJpbnB1dE1hcmdpbkRlbnNlIiwiaW5wdXRNdWx0aWxpbmUiLCJpbnB1dFR5cGVTZWFyY2giLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJqc3NfcGx1Z2luX3J1bGVfdmFsdWVfZnVuY3Rpb25fZXNtIiwiZm5WYWx1ZXMiLCJmblJ1bGUiLCJhdFByZWZpeCIsImpzc19wbHVnaW5fZ2xvYmFsX2VzbV9HbG9iYWxDb250YWluZXJSdWxlIiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsImpzc19wbHVnaW5fZ2xvYmFsX2VzbV9HbG9iYWxQcmVmaXhlZFJ1bGUiLCJHbG9iYWxQcmVmaXhlZFJ1bGUiLCJzZXBhcmF0b3JSZWdFeHAiLCJhZGRTY29wZSIsInBhcnRzIiwianNzX3BsdWdpbl9nbG9iYWxfZXNtIiwiaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZSIsImhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZSIsImpzc19wbHVnaW5fbmVzdGVkX2VzbV9zZXBhcmF0b3JSZWdFeHAiLCJwYXJlbnRSZWdFeHAiLCJqc3NfcGx1Z2luX25lc3RlZF9lc20iLCJnZXRSZXBsYWNlUmVmIiwicmVwbGFjZVBhcmVudFJlZnMiLCJuZXN0ZWRQcm9wIiwicGFyZW50UHJvcCIsInBhcmVudFNlbGVjdG9ycyIsIm5lc3RlZFNlbGVjdG9ycyIsImoiLCJuZXN0ZWQiLCJnZXRPcHRpb25zIiwibmVzdGluZ0xldmVsIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJoeXBoZW5hdGVfc3R5bGVfbmFtZSIsImhOYW1lIiwiY29udmVydENhc2UiLCJjb252ZXJ0ZWQiLCJqc3NfcGx1Z2luX2NhbWVsX2Nhc2VfZXNtIiwiaHlwaGVuYXRlZFByb3AiLCJweCIsIm1zIiwicGVyY2VudCIsImFkZENhbWVsQ2FzZWRWZXJzaW9uIiwicmVnRXhwIiwibmV3T2JqIiwidW5pdHMiLCJhbmltYXRpb24tZGVsYXkiLCJhbmltYXRpb24tZHVyYXRpb24iLCJiYWNrZ3JvdW5kLXBvc2l0aW9uIiwiYmFja2dyb3VuZC1wb3NpdGlvbi14IiwiYmFja2dyb3VuZC1wb3NpdGlvbi15IiwiYmFja2dyb3VuZC1zaXplIiwiYm9yZGVyLWJvdHRvbSIsImJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMiLCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyIsImJvcmRlci1ib3R0b20td2lkdGgiLCJib3JkZXItbGVmdCIsImJvcmRlci1sZWZ0LXdpZHRoIiwiYm9yZGVyLXJhZGl1cyIsImJvcmRlci1yaWdodCIsImJvcmRlci1yaWdodC13aWR0aCIsImJvcmRlci10b3AiLCJib3JkZXItdG9wLWxlZnQtcmFkaXVzIiwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMiLCJib3JkZXItdG9wLXdpZHRoIiwiYm9yZGVyLXdpZHRoIiwibWFyZ2luLWJvdHRvbSIsIm1hcmdpbi1sZWZ0IiwibWFyZ2luLXJpZ2h0IiwibWFyZ2luLXRvcCIsInBhZGRpbmctYm90dG9tIiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsInBhZGRpbmctdG9wIiwibWFzay1wb3NpdGlvbi14IiwibWFzay1wb3NpdGlvbi15IiwibWFzay1zaXplIiwibWluLWhlaWdodCIsIm1heC1oZWlnaHQiLCJtaW4td2lkdGgiLCJtYXgtd2lkdGgiLCJib3gtc2hhZG93IiwidGV4dC1zaGFkb3ciLCJjb2x1bW4tZ2FwIiwiY29sdW1uLXJ1bGUiLCJjb2x1bW4tcnVsZS13aWR0aCIsImNvbHVtbi13aWR0aCIsImZvbnQtc2l6ZSIsImZvbnQtc2l6ZS1kZWx0YSIsImxldHRlci1zcGFjaW5nIiwidGV4dC1pbmRlbnQiLCJ0ZXh0LXN0cm9rZSIsInRleHQtc3Ryb2tlLXdpZHRoIiwid29yZC1zcGFjaW5nIiwibW90aW9uIiwibW90aW9uLW9mZnNldCIsIm91dGxpbmUtb2Zmc2V0Iiwib3V0bGluZS13aWR0aCIsInBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUtb3JpZ2luLXgiLCJwZXJzcGVjdGl2ZS1vcmlnaW4teSIsInRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luLXgiLCJ0cmFuc2Zvcm0tb3JpZ2luLXkiLCJ0cmFuc2Zvcm0tb3JpZ2luLXoiLCJ0cmFuc2l0aW9uLWRlbGF5IiwidHJhbnNpdGlvbi1kdXJhdGlvbiIsInZlcnRpY2FsLWFsaWduIiwiZmxleC1iYXNpcyIsInNoYXBlLW1hcmdpbiIsImdyaWQtZ2FwIiwiZ3JpZC1yb3ctZ2FwIiwiZ3JpZC1jb2x1bW4tZ2FwIiwiZ3JpZC10ZW1wbGF0ZS1yb3dzIiwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zIiwiZ3JpZC1hdXRvLXJvd3MiLCJncmlkLWF1dG8tY29sdW1ucyIsImJveC1zaGFkb3cteCIsImJveC1zaGFkb3cteSIsImJveC1zaGFkb3ctYmx1ciIsImJveC1zaGFkb3ctc3ByZWFkIiwiZm9udC1saW5lLWhlaWdodCIsInRleHQtc2hhZG93LXgiLCJ0ZXh0LXNoYWRvdy15IiwidGV4dC1zaGFkb3ctYmx1ciIsIml0ZXJhdGUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwianNzX3BsdWdpbl9kZWZhdWx0X3VuaXRfZXNtIiwiY2FtZWxDYXNlZE9wdGlvbnMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImpzIiwidmVuZG9yIiwiYnJvd3NlciIsImRpc3RfbW9kdWxlIiwianNDc3NNYXAiLCJNb3oiLCJPIiwiV2Via2l0IiwiY3NzX3ZlbmRvcl9lc21fc3R5bGUiLCJjc3NfdmVuZG9yX2VzbV9rZXkiLCJhcHBlYXJlbmNlIiwibm9QcmVmaWxsIiwic3VwcG9ydGVkUHJvcGVydHkiLCJ0b1VwcGVyIiwiY2FtZWxpemUiLCJwYXNjYWxpemUiLCJicmVha1Byb3BzT2xkIiwidGV4dERlY29yYXRpb25Ta2lwSW5rIiwiY29sb3JBZGp1c3QiLCJwcm9wTWFwIiwiZmxleC1ncm93IiwiZmxleC1kaXJlY3Rpb24iLCJhbGlnbi1pdGVtcyIsImZsZXgtZmxvdyIsImp1c3RpZnktY29udGVudCIsInByb3BLZXlzIiwicHJlZml4Q3NzIiwicHJvcE1hcCQxIiwiZmxleC1zaHJpbmsiLCJhbGlnbi1jb250ZW50IiwibmV3UHJvcCIsInBhc2NhbGl6ZWQiLCJtdWx0aXBsZSIsInByb3BlcnR5RGV0ZWN0b3JzIiwiY3NzX3ZlbmRvcl9lc21fY2FjaGUiLCJjb21wdXRlZCIsImtleSQxIiwiZWwkMSIsImNhY2hlJDEiLCJ0cmFuc2l0aW9uUHJvcGVydGllcyIsInRyYW5zaXRpb24tcHJvcGVydHkiLCItd2Via2l0LXRyYW5zaXRpb24iLCItd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHkiLCJ0cmFuc1Byb3BzUmVnRXhwIiwicHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrIiwicDEiLCJwMiIsInN1cHBvcnRlZFZhbHVlIiwicHJlZml4ZWRWYWx1ZSIsImNhY2hlS2V5IiwianNzX3BsdWdpbl92ZW5kb3JfcHJlZml4ZXJfZXNtIiwiYXRSdWxlIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlJCQxIiwianNzX3BsdWdpbl9wcm9wc19zb3J0X2VzbSIsInByb3AwIiwicHJvcDEiLCJNb2RhbF9UcmFwRm9jdXMiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiX3Byb3BzJGRpc2FibGVFbmZvcmNlIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsIl9wcm9wcyRkaXNhYmxlUmVzdG9yZSIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXREb2MiLCJpc0VuYWJsZWQiLCJpZ25vcmVOZXh0RW5mb3JjZUZvY3VzIiwic2VudGluZWxTdGFydCIsInNlbnRpbmVsRW5kIiwibGFzdEZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsImVuZm9yY2VGb2N1cyIsImxvb3BGb2N1cyIsImtleUNvZGUiLCJzaGlmdEtleSIsImRhdGEtdGVzdCIsInRvdWNoQWN0aW9uIiwiU2ltcGxlQmFja2Ryb3BfU2ltcGxlQmFja2Ryb3AiLCJNb2RhbF9TaW1wbGVCYWNrZHJvcCIsImdldEhhc1RyYW5zaXRpb24iLCJNb2RhbF9Nb2RhbCIsImdldENvbnRhaW5lciIsIm1hbmFnZXIiLCJoYW5kbGVPcGVuZWQiLCJoYW5kbGVSZW5kZXJlZCIsInJlYXNvbiIsImhhbmRsZUJhY2tkcm9wQ2xpY2siLCJpc1RvcE1vZGFsIiwiaGFuZGxlUG9ydGFsUmVmIiwiaGFuZGxlTW9kYWxSZWYiLCJoYXNUcmFuc2l0aW9uIiwic3R5bGVzUmVuZGVyIiwiTW9kYWxfc3R5bGVzIiwiZ2V0U3R5bGVWYWx1ZSIsIklucHV0QmFzZV9UZXh0YXJlYSIsInNoYWRvd1JlZiIsInN5bmNIZWlnaHQiLCJpbnB1dFNoYWxsb3ciLCJzaW5nbGVSb3dIZWlnaHQiLCJvdXRlckhlaWdodCIsIklucHV0QmFzZV9JbnB1dEJhc2UiLCJhcmlhRGVzY3JpYmVkYnkiLCJlbmRBZG9ybm1lbnQiLCJfcHJvcHMkaW5wdXRQcm9wcyIsImlucHV0UHJvcHNDbGFzc05hbWUiLCJpbnB1dFByb3BzUHJvcCIsImlucHV0UmVmUHJvcCIsIm9uRW1wdHkiLCJvbkZpbGxlZCIsInJlbmRlclByZWZpeCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UHJvcHNSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWYiLCJzZXRGb2N1c2VkIiwiY2hlY2tEaXJ0eSIsIm1hcmdpbkRlbnNlIiwiYWRvcm5lZFN0YXJ0IiwiYWRvcm5lZEVuZCIsImFyaWEtaW52YWxpZCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwicGxhY2Vob2xkZXJIaWRkZW4iLCJwbGFjZWhvbGRlclZpc2libGUiLCJmb250IiwiJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciIsIiY6Oi1tb3otcGxhY2Vob2xkZXIiLCImOi1tcy1pbnB1dC1wbGFjZWhvbGRlciIsIiY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciIsIiY6aW52YWxpZCIsIiY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24iLCJsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAkZm9ybUNvbnRyb2wgJiIsIiY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyIiwiJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCJyZXNpemUiLCJSZWFjdERPTSIsIkFwcF8xIiwiQXBwIiwiZ2V0RWxlbWVudEJ5SWQiLCJxIiwidSIsInciLCJ6IiwiYWEiLCJiYSIsIkEiLCJCIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZnJhbWVzVG9Qb3AiLCJjYSIsIkMiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRCIsIkUiLCJ1cGRhdGVyIiwiRiIsIkciLCJpc1JlYWN0Q29tcG9uZW50IiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsIkoiLCJLIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsIl9vd25lciIsIk4iLCJQIiwiUSIsImtleVByZWZpeCIsIlIiLCJVIiwiUyIsIlQiLCJkb25lIiwiPSIsIjoiLCJlYSIsImZhIiwiViIsImRhIiwiVyIsIlgiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlRGVidWdWYWx1ZSIsInVzZVJlZHVjZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjcmVhdGVGYWN0b3J5IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJrYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwidGFnIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImliIiwiZXZlbnRQb29sIiwiamIiLCJkZXN0cnVjdG9yIiwiaGIiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwicGIiLCJxYiIsInJiIiwic2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwidGIiLCJ1YiIsInZiIiwiZGV0YWlsIiwid2IiLCJ6YiIsImxvY2FsZSIsIndoaWNoIiwieGIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ5YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJPYiIsIlBiIiwiUmIiLCJfdmFsdWVUcmFja2VyIiwic3RvcFRyYWNraW5nIiwiUWIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwia2MiLCJsYyIsIm1jIiwibmMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwicmMiLCJzYyIsInRjIiwicGMiLCJxYyIsIm9jIiwic2V0QXR0cmlidXRlTlMiLCJ1YyIsInZjIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsImNoYW5nZSIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJkZXRhY2hFdmVudCIsIktjIiwiTGMiLCJhdHRhY2hFdmVudCIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIlFjIiwidmlldyIsIlJjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlNjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsInNjcmVlblgiLCJzY3JlZW5ZIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiWmMiLCJwb2ludGVySWQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiJGMiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImFkIiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiYmQiLCJjZCIsImRkIiwiZWQiLCJlZmZlY3RUYWciLCJmZCIsImhkIiwic2libGluZyIsImdkIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiamQiLCJjbGlwYm9hcmREYXRhIiwia2QiLCJsZCIsImNoYXJDb2RlIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwibmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0Iiwib2QiLCJsb2NhdGlvbiIsInJlcGVhdCIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJ0YXJnZXRUb3VjaGVzIiwicmQiLCJzZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwidGQiLCJ1ZCIsInZkIiwid2QiLCJpc0ludGVyYWN0aXZlIiwieGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJ5ZCIsInpkIiwiQWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiZmlyc3RDaGlsZCIsIkxkIiwiTmQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJPZCIsImNvbnRlbnRFZGl0YWJsZSIsIlFkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIk1kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJSZCIsIlNkIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwib25TZWxlY3QiLCIkZCIsIlpkIiwiYWUiLCJkZWZhdWx0U2VsZWN0ZWQiLCJiZSIsImNlIiwiZGUiLCJlZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJmZSIsIm1hdGhtbCIsImdlIiwiaGUiLCJpZSIsImplIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImtlIiwibGFzdENoaWxkIiwibGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleFBvc2l0aXZlIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImxpbmVDbGFtcCIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsIm1lIiwibmUiLCJvZSIsInBlIiwibWVudWl0ZW0iLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwia2V5Z2VuIiwicGFyYW0iLCJ3YnIiLCJxZSIsImlzIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkJlIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJEZSIsIkVlIiwiU2V0IiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIktlIiwiTGUiLCJNZSIsIk5lIiwiZ2V0Q2hpbGRDb250ZXh0IiwiT2UiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVWUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlZlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwicGVuZGluZ0NoaWxkcmVuIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwid2YiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ4ZiIsInlmIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiemYiLCJBZiIsIl9zdHJpbmdSZWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJIZiIsIklmIiwiSmYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIm1nIiwiYmFzZVVwZGF0ZSIsIm5nIiwib2ciLCJwZyIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJkaXNwYXRjaCIsInFnIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwicmciLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJRZyIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJUZyIsIlVnIiwiaGYiLCJXZSIsImh5ZHJhdGUiLCJmaXJzdCIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJzdGFjayIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJvbmNsaWNrIiwicGgiLCJXZWFrU2V0IiwicWgiLCJyaCIsInNoIiwidGgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwiQ2UiLCJ1aCIsImhpIiwiWGgiLCJoYXMiLCJCaCIsIldlYWtNYXAiLCJDaCIsIkRoIiwiRWgiLCJjb21wb25lbnREaWRDYXRjaCIsIkZoIiwiY29tcG9uZW50U3RhY2siLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZoIiwiWmgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJlZiIsIlBkIiwiWWgiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZpbmlzaGVkV29yayIsIiRoIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJiaSIsImNpIiwiZGkiLCJtYXhEdXJhdGlvbiIsInBpbmdDYWNoZSIsImVpIiwiZmkiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImdpIiwiaWkiLCJqaSIsImtpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVuc3RhYmxlX25vdyIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsInRpbWVvdXRIYW5kbGUiLCJCaSIsIkNpIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJEaSIsIkVpIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIkZpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsIkdpIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk5pIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiT2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiUGkiLCJfaW50ZXJuYWxSb290IiwiUWkiLCJTaSIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIlJpIiwiVGkiLCJNaSIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiVGUiLCJvdmVycmlkZVByb3BzIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiV2kiLCJYaSIsInByZXZpb3VzIiwicHJpb3JpdHlMZXZlbCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInJlYWN0XzEiLCJQYXBlcl8xIiwiTG9naW5Gb3JtXzEiLCJBcHBCYXJfMSIsIm1lc3NhZ2VzU2VydmljZV8xIiwiQ2hhdF8xIiwic2V0VXNlcm5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiX3VzZXJuYW1lIiwiTG9naW5Gb3JtIiwiQ2hhdCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJzeW1ib2wiLCJhbnkiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQcm9maWxlciIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIlRleHRGaWVsZF8xIiwiQnV0dG9uXzEiLCJhY2Nlc3NUb2tlbiIsInNldEl0ZW0iLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfc2V0UHJvdG90eXBlT2YiLCJBeGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJyZWFkRmxvYXRMRSIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwibm9ybWFsaXplZE5hbWUiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwidG9JU09TdHJpbmciLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsImNoYXJzIiwiYmxvY2siLCJjaGFyQ29kZUF0Iiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJoYW5kbGVycyIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsImZucyIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInN0eWxlc18xIiwiVG9vbGJhcl8xIiwiVHlwb2dyYXBoeV8xIiwiSWNvbkJ1dHRvbl8xIiwiTWVudV8xIiwiTmF2RHJhd2VyXzEiLCJ3aXRoU3R5bGVzXzEiLCJncm93IiwibWVudUJ1dHRvbiIsIm5hdkFjdGl2ZSIsInNldE5hdkFjdGl2ZSIsImFyaWEtbGFiZWwiLCJ0b2dnbGUiLCJvdXQiLCJudW0iLCJfZGVmYXVsdCIsIkRyYXdlcl8xIiwiTGlzdF8xIiwiTGlzdEl0ZW1fMSIsIkxpc3RJdGVtSWNvbl8xIiwiTGlzdEl0ZW1UZXh0XzEiLCJFeGl0VG9BcHBfMSIsIkdpdEh1Yl8xIiwiZnVsbExpc3QiLCJzaWRlTGlzdCIsIkdpdEh1YiIsInJlbW92ZUl0ZW0iLCJyZWxvYWQiLCJjb3JlXzEiLCJfc3R5bGVzIiwiX2RlZmF1bHRUaGVtZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfZGVlcG1lcmdlIiwiX2lzUGxhaW5PYmplY3QiLCJfY3JlYXRlQnJlYWtwb2ludHMiLCJfY3JlYXRlTWl4aW5zIiwiX2NyZWF0ZVBhbGV0dGUiLCJfY3JlYXRlVHlwb2dyYXBoeSIsIl9zaGFkb3dzIiwiX3NoYXBlIiwiX2NyZWF0ZVNwYWNpbmciLCJfdHJhbnNpdGlvbnMiLCJfekluZGV4IiwiX2V4dGVuZHMzIiwiX2RlZmluZVByb3BlcnR5MiIsIl9pbmRpZ28iLCJfcGluayIsIl9yZWQiLCJfY29sb3JNYW5pcHVsYXRvciIsIl9jb21tb24iLCJfZ3JleSIsIk1lc3NhZ2VzXzEiLCJDaGF0Rm9ybV8xIiwiQ2hhdEZvcm0iLCJNZXNzYWdlcyIsIk1lc3NhZ2VfMSIsInNldE1lc3NhZ2VzIiwiZ3JvdXBlZE1lc3NhZ2VzIiwiZ3JvdXBlZCIsImZyb21Vc2VyIiwic2V0SW50ZXJ2YWwiLCJNZXNzYWdlQ29tcG9uZW50IiwiRW1iZWRkZWRDaGF0Rm9ybV8xIiwicmVuZGVyTWVzc2FnZXMiLCJFbWJlZGRlZENoYXRGb3JtIiwic2V0TWVzc2FnZSIsInNldFRvIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19fZGVmYXVsdCIsIl9tYWtlU3R5bGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfZ2V0VGhlbWVQcm9wc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX3VzZVRoZW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJXaXRoU3R5bGVzIiwiX1RoZW1lUHJvdmlkZXJfbmVzdGVkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJwc2V1ZG9DbGFzc2VzIiwiX29wdGlvbnMkZGlzYWJsZUdsb2JhIiwiZGlzYWJsZUdsb2JhbCIsIl9vcHRpb25zJHByb2R1Y3Rpb25QciIsInByb2R1Y3Rpb25QcmVmaXgiLCJfb3B0aW9ucyRzZWVkIiwic2VlZCIsInNlZWRQcmVmaXgiLCJzdHlsZVNoZWV0IiwiJjpob3ZlcjpiZWZvcmUiLCJfSW5wdXRCYXNlX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfdXRpbHNfcmVhY3RIZWxwZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18iLCJfRm9ybUNvbnRyb2xDb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fIiwiX3Byb3BzJG1hcmdpbiIsImluaXRpYWxBZG9ybmVkU3RhcnQiLCJpbml0aWFsRmlsbGVkIiwic2V0RmlsbGVkIiwibWFyZ2luTm9ybWFsIiwiX0Zvcm1Db250cm9sX2Zvcm1Db250cm9sU3RhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIl9Gb3JtQ29udHJvbF93aXRoRm9ybUNvbnRyb2xDb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfRm9ybUxhYmVsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJfcHJvcHMkZGlzYWJsZUFuaW1hdGkiLCJkaXNhYmxlQW5pbWF0aW9uIiwic2hyaW5rUHJvcCIsImRhdGEtc2hyaW5rIiwiYW5pbWF0ZWQiLCJhc3RlcmlzayIsIiYkbWFyZ2luRGVuc2UiLCImJHNocmluayIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2dldFByb3RvdHlwZU9mX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2dldFByb3RvdHlwZU9mX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19fZGVmYXVsdCIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfaW5oZXJpdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfaW5oZXJpdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX19kZWZhdWx0IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19fZGVmYXVsdCIsImRlYm91bmNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fIiwiZGVib3VuY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19fZGVmYXVsdCIsInJlYWN0X2V2ZW50X2xpc3RlbmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fIiwicmVhY3RfZXZlbnRfbGlzdGVuZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19fZGVmYXVsdCIsImNsc3hfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18iLCJfdXRpbHNfb3duZXJEb2N1bWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfXyIsIl91dGlsc19vd25lcldpbmRvd19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXyIsIl91dGlsc19oZWxwZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fIiwiX3V0aWxzX3dpdGhGb3J3YXJkZWRSZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X18iLCJfc3R5bGVzX3dpdGhTdHlsZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE4X18iLCJfTW9kYWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18iLCJfR3Jvd19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfXyIsIl9QYXBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjFfXyIsImdldE9mZnNldFRvcCIsImdldE9mZnNldExlZnQiLCJnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSIsImhhbmRsZUdldE9mZnNldFRvcCIsImhhbmRsZUdldE9mZnNldExlZnQiLCJzZXRQb3NpdGlvbmluZ1N0eWxlcyIsInBvc2l0aW9uaW5nIiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsImFuY2hvclJlZmVyZW5jZSIsIm1hcmdpblRocmVzaG9sZCIsImNvbnRlbnRBbmNob3JPZmZzZXQiLCJnZXRDb250ZW50QW5jaG9yT2Zmc2V0IiwiZWxlbVJlY3QiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJnZXRBbmNob3JPZmZzZXQiLCJjb250YWluZXJXaW5kb3ciLCJoZWlnaHRUaHJlc2hvbGQiLCJ3aWR0aFRocmVzaG9sZCIsImRpZmYiLCJfZGlmZiIsIl9kaWZmMiIsIl9kaWZmMyIsImhhbmRsZUVudGVyaW5nIiwidXBkYXRlUG9zaXRpb24iLCJhbmNob3JQb3NpdGlvbiIsInJlc29sdmVkQW5jaG9yRWwiLCJhbmNob3JSZWN0IiwiYW5jaG9yVmVydGljYWwiLCJjb250ZW50QW5jaG9yRWwiLCJvZmZzZXRUb3AiLCJjb250YWluZXJQcm9wIiwiTW9kYWxDbGFzc2VzIiwiX3RoaXMkcHJvcHM0JFBhcGVyUHJvIiwiX3RoaXMkcHJvcHM0JFRyYW5zaXRpIiwid2l0aFRoZW1lQ3JlYXRvciIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJfdXNlVGhlbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIldpdGhUaGVtZSIsInJlYWN0X3RyYW5zaXRpb25fZ3JvdXBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9zdHlsZXNfd2l0aFRoZW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfdHJhbnNpdGlvbnNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsImdldFNjYWxlIiwiYXV0b1RpbWVvdXQiLCJfZ2V0VHJhbnNpdGlvblByb3BzIiwiX2dldFRyYW5zaXRpb25Qcm9wczIiLCJfdXRpbHNfb3duZXJEb2N1bWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX0xpc3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl91dGlsc19nZXRTY3JvbGxiYXJTaXplX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfdXRpbHNfcmVhY3RIZWxwZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJuZXh0SXRlbSIsImRpc2FibGVMaXN0V3JhcCIsInByZXZpb3VzSXRlbSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJ0ZXh0Q3JpdGVyaWFNYXRjaGVzIiwibmV4dEZvY3VzIiwidGV4dENyaXRlcmlhIiwiaW5uZXJUZXh0IiwicmVwZWF0aW5nIiwibW92ZUZvY3VzIiwiY3VycmVudEZvY3VzIiwidHJhdmVyc2FsRnVuY3Rpb24iLCJ3cmFwcGVkT25jZSIsIl9wcm9wcyRkaXNhYmxlTGlzdFdyYSIsImxpc3RSZWYiLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJwcmV2aW91c0tleU1hdGNoZWQiLCJjb250YWluZXJFbGVtZW50Iiwibm9FeHBsaWNpdFdpZHRoIiwiY3JpdGVyaWEiLCJsb3dlcktleSIsImN1cnJUaW1lIiwia2VlcEZvY3VzT25DdXJyZW50IiwiX3VzZVRoZW1lX1RoZW1lQ29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX25lc3RlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwibG9jYWxUaGVtZSIsIm91dGVyVGhlbWUiLCJtZXJnZU91dGVyTG9jYWxUaGVtZSIsImNsc3hfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fX2RlZmF1bHQiLCJfbWFrZVN0eWxlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiU3R5bGVkQ29tcG9uZW50IiwiRmluYWxDb21wb25lbnQiLCJkZWJvdW5jZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiZGVib3VuY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX19kZWZhdWx0IiwicmVhY3RfdHJhbnNpdGlvbl9ncm91cF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiX3N0eWxlc193aXRoVGhlbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl9zdHlsZXNfdHJhbnNpdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyIsIl90cmFuc2l0aW9uc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXyIsIkdVVFRFUiIsInNldFRyYW5zbGF0ZVZhbHVlIiwiZmFrZVRyYW5zZm9ybSIsIm9mZnNldFgiLCJvZmZzZXRZIiwidHJhbnNmb3JtVmFsdWVzIiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJjaGlsZHJlblJlZiIsImhhbmRsZVJlZkludGVybWVkaWFyeSIsIl9GYWRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfcHJvcHMkaW52aXNpYmxlIiwiX3N0eWxlc190cmFuc2l0aW9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX3N0eWxlc193aXRoVGhlbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl90cmFuc2l0aW9uc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiTm90Y2hlZE91dGxpbmVfTm90Y2hlZE91dGxpbmUiLCJsYWJlbFdpZHRoUHJvcCIsImxlZ2VuZCIsIk91dGxpbmVkSW5wdXRfTm90Y2hlZE91dGxpbmUiLCJib3JkZXJXaWR0aCIsIk91dGxpbmVkSW5wdXRfT3V0bGluZWRJbnB1dCIsIl9wcm9wcyRsYWJlbFdpZHRoIiwibm90Y2hlZE91dGxpbmUiLCImICRub3RjaGVkT3V0bGluZSIsIiY6aG92ZXIgJG5vdGNoZWRPdXRsaW5lIiwiJiRmb2N1c2VkICRub3RjaGVkT3V0bGluZSIsIiYkZXJyb3IgJG5vdGNoZWRPdXRsaW5lIiwiJiRkaXNhYmxlZCAkbm90Y2hlZE91dGxpbmUiLCJhcmVFcXVhbFZhbHVlcyIsIlNlbGVjdF9TZWxlY3RJbnB1dCIsImF1dG9XaWR0aCIsImRpc3BsYXlFbXB0eSIsIl9wcm9wcyRNZW51UHJvcHMiLCJNZW51UHJvcHMiLCJyZW5kZXJWYWx1ZSIsIlNlbGVjdERpc3BsYXlQcm9wcyIsImRpc3BsYXlSZWYiLCJpZ25vcmVOZXh0Qmx1ciIsImlzT3BlbkNvbnRyb2xsZWQiLCJtZW51TWluV2lkdGhTdGF0ZSIsInNldE1lbnVNaW5XaWR0aFN0YXRlIiwiaGFuZGxlSXRlbUNsaWNrIiwiaXRlbUluZGV4IiwiZGlzcGxheVNpbmdsZSIsImRpc3BsYXlNdWx0aXBsZSIsImNvbXB1dGVEaXNwbGF5IiwiZGF0YS12YWx1ZSIsIm1lbnVNaW5XaWR0aCIsImFyaWEtcHJlc3NlZCIsImFyaWEtb3ducyIsImFyaWEtaGFzcG9wdXAiLCJTZWxlY3RfU2VsZWN0IiwiX3Byb3BzJGF1dG9XaWR0aCIsIl9wcm9wcyRkaXNwbGF5RW1wdHkiLCJBcnJvd0Ryb3BEb3duIiwiX3Byb3BzJG11bHRpcGxlIiwiX3Byb3BzJG5hdGl2ZSIsIm5leHRDbGFzc2VzIiwiU3R5bGVzQ29udGV4dCIsImluamVjdEZpcnN0Tm9kZSIsIl9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwianNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfanNzUHJlc2V0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJkZWZhdWx0T3B0aW9ucyIsImluamVjdEZpcnN0IiwibG9jYWxPcHRpb25zIiwib3V0ZXJPcHRpb25zIiwiY3JlYXRlQ29tbWVudCIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfc2xpY2VkVG9BcnJheV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19zbGljZWRUb0FycmF5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl91dGlsc19yZWFjdEhlbHBlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsInNldE1vdW50Tm9kZSIsImNoaWxkUmVmIiwiX3Byb3BzJGRlZmVyIiwiZGVmZXIiLCJfcHJvcHMkZmFsbGJhY2siLCJtb3VudGVkU3RhdGUiLCJzZXRNb3VudGVkU3RhdGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFB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QUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFdDRWUweEIsRUFoQmYsQ0FDQXZ5QixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsbUJDRWUyeEIsRUFoQmYsQ0FDQXh5QixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsV0NFZTR4QixFQWhCZixDQUNBenlCLEdBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxXQ0VlNnhCLEVBaEJmLENBQ0ExeUIsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFdDRWU4eEIsRUFoQmYsQ0FDQTN5QixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMs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QTZJLEVBQUE3SSxFQUFBNkksU0FDQWtzSSxFQUFBLzBJLEVBQUFnMUksTUFDQUEsT0FBQSxJQUFBRCxLQUNBRSxFQUFBajFJLEVBQUFrRyxTQUNBQSxPQUFBLElBQUErdUksRUFBQSxLQUFBQSxFQUVBL3hHLEVBQXdCcGlDLEVBQUFsRixFQUFLdW5DLFVBQUEsR0FDN0JDLEVBQXlCcXhHLElBQWN2eEcsRUFBQSxHQUN2Q2d5RyxFQUFBOXhHLEVBQUEsR0FDQSt4RyxFQUFBL3hHLEVBQUEsR0FhQSxPQVhBK0QsRUFBQSxXQUNBNnRHLEdBQ0FHLEdBQUEsSUFFRyxDQUFBSCxJQUNEbDBJLEVBQUFsRixFQUFLZ2EsVUFBQSxXQUNQby9ILEdBQ0FHLEdBQUEsSUFFRyxDQUFBSCxJQUVNbDBJLEVBQUFsRixFQUFLeUYsY0FBZVAsRUFBQWxGLEVBQUsrdEQsU0FBQSxLQUFBdXJGLEVBQUFyc0ksRUFBQTNDIiwiZmlsZSI6IjlkMTkyYWM0NDUxNjU0MjRkYmFjLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNDUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwidmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSByZXF1aXJlKFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzOyIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXHRpZiAobWl4KSB7XG5cdFx0aWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0XHRpZiAoISFtaXgucHVzaCkge1xuXHRcdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdGlmIChtaXhba10gJiYgKHkgPSB0b1ZhbChtaXhba10pKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yIChrIGluIG1peCkge1xuXHRcdFx0XHRcdGlmIChtaXhba10gJiYgKHkgPSB0b1ZhbChrKSkpIHtcblx0XHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0XHRzdHIgKz0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggIT09ICdib29sZWFuJyAmJiAhbWl4LmNhbGwpIHtcblx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRzdHIgKz0gbWl4O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHggPSB0b1ZhbChhcmd1bWVudHNbaSsrXSkpIHtcblx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRzdHIgKz0geFxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCB7IHdpdGhTdHlsZXMgYXMgd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7IC8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgYSB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogY2FwaXRhbGl6ZShzdHJpbmcpIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuJyk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufVxuLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZnVuYykge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJywgJ01hdGVyaWFsLVVJOiBpbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpIDogdm9pZCAwO1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIGZ1bmN0aW9uICgpIHt9KTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgPj0gbWluICYmIHZhbHVlIDw9IG1heCwgXCJNYXRlcmlhbC1VSTogdGhlIHZhbHVlIHByb3ZpZGVkIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgb3V0IG9mIHJhbmdlIFtcIikuY29uY2F0KG1pbiwgXCIsIFwiKS5jb25jYXQobWF4LCBcIl0uXCIpKSA6IHZvaWQgMDtcblxuICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG5cbiAgaWYgKHZhbHVlID4gbWF4KSB7XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnN1YnN0cigxKTtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIi57MSxcIi5jb25jYXQoY29sb3IubGVuZ3RoIC8gMywgXCJ9XCIpLCAnZycpO1xuICB2YXIgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuXG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiBuICsgbjtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcnMgPyBcInJnYihcIi5jb25jYXQoY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBwYXJzZUludChuLCAxNik7XG4gIH0pLmpvaW4oJywgJyksIFwiKVwiKSA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgdmFyIGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gXCIwXCIuY29uY2F0KGhleCkgOiBoZXg7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICB2YXIgX2RlY29tcG9zZUNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpLFxuICAgICAgdmFsdWVzID0gX2RlY29tcG9zZUNvbG9yLnZhbHVlcztcblxuICByZXR1cm4gXCIjXCIuY29uY2F0KHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaW50VG9IZXgobik7XG4gIH0pLmpvaW4oJycpKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgX2NvbG9yID0gY29sb3IsXG4gICAgICB2YWx1ZXMgPSBfY29sb3IudmFsdWVzO1xuICB2YXIgaCA9IHZhbHVlc1swXTtcbiAgdmFyIHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIHZhciBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICB2YXIgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cbiAgdmFyIGYgPSBmdW5jdGlvbiBmKG4pIHtcbiAgICB2YXIgayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogKG4gKyBoIC8gMzApICUgMTI7XG4gICAgcmV0dXJuIGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICB9O1xuXG4gIHZhciB0eXBlID0gJ3JnYic7XG4gIHZhciByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cblxuICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICB2YXIgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuXG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoW1wiTWF0ZXJpYWwtVUk6IHVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cIiksICdXZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCIpO1xuXG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0XCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAxID8gbGVuIC0gMSA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDE7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMV0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnOyAvLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cblxuZXhwb3J0IHZhciBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59OyAvLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcblxuZXhwb3J0IHZhciBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmV4cG9ydCB2YXIgZm9ybWF0TXMgPSBmdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn07XG5leHBvcnQgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59O1xuZXhwb3J0IHZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZWFzaW5nOiBlYXNpbmcsXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2FsbCddO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBfb3B0aW9ucyRkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIGR1cmF0aW9uT3B0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IGR1cmF0aW9uLnN0YW5kYXJkIDogX29wdGlvbnMkZHVyYXRpb24sXG4gICAgICAgIF9vcHRpb25zJGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nLFxuICAgICAgICBlYXNpbmdPcHRpb24gPSBfb3B0aW9ucyRlYXNpbmcgPT09IHZvaWQgMCA/IGVhc2luZy5lYXNlSW5PdXQgOiBfb3B0aW9ucyRlYXNpbmcsXG4gICAgICAgIF9vcHRpb25zJGRlbGF5ID0gb3B0aW9ucy5kZWxheSxcbiAgICAgICAgZGVsYXkgPSBfb3B0aW9ucyRkZWxheSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGRlbGF5LFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaXNTdHJpbmcocHJvcHMpIHx8IEFycmF5LmlzQXJyYXkocHJvcHMpLCAnTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pIHx8IGlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSwgXCJNYXRlcmlhbC1VSTogYXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSkgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc1N0cmluZyhlYXNpbmdPcHRpb24pLCAnTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGlzTnVtYmVyKGRlbGF5KSB8fCBpc1N0cmluZyhkZWxheSksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoID09PSAwLCBcIk1hdGVyaWFsLVVJOiB1bnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl1cIikpIDogdm9pZCAwO1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uLy4uL1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gUmVhY3QubWVtbyhSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnSWNvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZlxuICAgIH0pLCBwYXRoKTtcbiAgfSkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5tdWlOYW1lID0gU3ZnSWNvbi5tdWlOYW1lO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgdmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoYnJlYWtwb2ludHMsIFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KSArIDE7XG4gICAgdmFyIHVwcGVyYm91bmQgPSB2YWx1ZXNba2V5c1tlbmRJbmRleF1dO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgLy8geGwgZG93biBhcHBsaWVzIHRvIGFsbCBzaXplc1xuICAgICAgcmV0dXJuIHVwKCd4cycpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB1cHBlcmJvdW5kID09PSAnbnVtYmVyJyAmJiBlbmRJbmRleCA+IDAgPyB1cHBlcmJvdW5kIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKSArIDE7XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdXAoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNbc3RhcnRdKS5jb25jYXQodW5pdCwgXCIpIGFuZCBcIikgKyBcIihtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXlzW2VuZEluZGV4XV0gLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiB3aWR0aChrZXkpIHtcbiAgICByZXR1cm4gdmFsdWVzW2tleV07XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXM6IGtleXMsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgdXA6IHVwLFxuICAgIGRvd246IGRvd24sXG4gICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICBvbmx5OiBvbmx5LFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCBvdGhlcik7XG59IiwiZXhwb3J0IHZhciByZWZsb3cgPSBmdW5jdGlvbiByZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICBfcHJvcHMkc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHN0eWxlID0gX3Byb3BzJHN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRzdHlsZTtcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uIHx8IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0sXG4gICAgZGVsYXk6IHN0eWxlLnRyYW5zaXRpb25EZWxheVxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJmdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvd25lckRvY3VtZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cblxuXG5mdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufVxuXG4vKipcbiAqIEluZGVudCBhIHN0cmluZy5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5LWpvaW4tdnMtZm9yXG4gKi9cbmZ1bmN0aW9uIGluZGVudFN0cihzdHIsIGluZGVudCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGluZGVudDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCArPSAnICAnO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHN0cjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBSdWxlIHRvIENTUyBzdHJpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiB0b0NzcyhzZWxlY3Rvciwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKCFzdHlsZSkgcmV0dXJuIHJlc3VsdDtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGluZGVudCA9IF9vcHRpb25zLmluZGVudCxcbiAgICAgIGluZGVudCA9IF9vcHRpb25zJGluZGVudCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGluZGVudDtcbiAgdmFyIGZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcztcbiAgaWYgKHNlbGVjdG9yKSBpbmRlbnQrKzsgLy8gQXBwbHkgZmFsbGJhY2tzIGZpcnN0LlxuXG4gIGlmIChmYWxsYmFja3MpIHtcbiAgICAvLyBBcnJheSBzeW50YXgge2ZhbGxiYWNrczogW3twcm9wOiB2YWx1ZX1dfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1tpbmRleF07XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBmYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGZhbGxiYWNrW3Byb3BdO1xuXG4gICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKHByb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKHZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3Qgc3ludGF4IHtmYWxsYmFja3M6IHtwcm9wOiB2YWx1ZX19XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBmYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGZhbGxiYWNrc1tfcHJvcF07XG5cbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKF9wcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfcHJvcDIgaW4gc3R5bGUpIHtcbiAgICB2YXIgX3ZhbHVlMiA9IHN0eWxlW19wcm9wMl07XG5cbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKF9wcm9wMiArIFwiOiBcIiArIHRvQ3NzVmFsdWUoX3ZhbHVlMikgKyBcIjtcIiwgaW5kZW50KTtcbiAgICB9XG4gIH0gLy8gQWxsb3cgZW1wdHkgc3R5bGUgaW4gdGhpcyBjYXNlLCBiZWNhdXNlIHByb3BlcnRpZXMgd2lsbCBiZSBhZGRlZCBkeW5hbWljYWxseS5cblxuXG4gIGlmICghcmVzdWx0ICYmICFvcHRpb25zLmFsbG93RW1wdHkpIHJldHVybiByZXN1bHQ7IC8vIFdoZW4gcnVsZSBpcyBiZWluZyBzdHJpbmdpZmllZCBiZWZvcmUgc2VsZWN0b3Igd2FzIGRlZmluZWQuXG5cbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuIHJlc3VsdDtcbiAgaW5kZW50LS07XG4gIGlmIChyZXN1bHQpIHJlc3VsdCA9IFwiXFxuXCIgKyByZXN1bHQgKyBcIlxcblwiO1xuICByZXR1cm4gaW5kZW50U3RyKHNlbGVjdG9yICsgXCIge1wiICsgcmVzdWx0LCBpbmRlbnQpICsgaW5kZW50U3RyKCd9JywgaW5kZW50KTtcbn1cblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BcXHNdKS9nO1xudmFyIGVzY2FwZSA9IChmdW5jdGlvbiAoc3RyKSB7XG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gZXNjYXBlIGl0IGluIHByb2R1Y3Rpb24sIGJlY2F1c2Ugd2UgYXJlIG5vdCB1c2luZyB1c2VyJ3NcbiAgLy8gaW5wdXQgZm9yIHNlbGVjdG9ycywgd2UgYXJlIGdlbmVyYXRpbmcgYSB2YWxpZCBzZWxlY3Rvci5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHJldHVybiBzdHI7XG4gIHZhciBuYXRpdmVFc2NhcGUgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MuZXNjYXBlO1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdmFyIGF0TWF0Y2ggPSBrZXkubWF0Y2goYXRSZWdFeHApO1xuICAgIHRoaXMuYXQgPSBhdE1hdGNoID8gYXRNYXRjaFsxXSA6ICd1bmtub3duJztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLmtleSArIFwiIHtcXG5cIiArIGNoaWxkcmVuICsgXCJcXG59XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBuYW1lTWF0Y2ggPSBrZXkubWF0Y2gobmFtZVJlZ0V4cCk7XG5cbiAgICBpZiAobmFtZU1hdGNoICYmIG5hbWVNYXRjaFsxXSkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZU1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hbWUgPSAnbm9uYW1lJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KTtcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGZyYW1lcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgZnJhbWVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICBwYXJlbnQ6IHRoaXNcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVzUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDE7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdCArIFwiIFwiICsgdGhpcy5pZCArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICBpZiAoY2hpbGRyZW4pIGNoaWxkcmVuID0gXCJcXG5cIiArIGNoaWxkcmVuICsgXCJcXG5cIjtcbiAgICByZXR1cm4gdGhpcy5hdCArIFwiIFwiICsgdGhpcy5pZCArIFwiIHtcIiArIGNoaWxkcmVuICsgXCJ9XCI7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lc1J1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDEgPSAvQGtleWZyYW1lc1xccysvO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcblxudmFyIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUgPSBmdW5jdGlvbiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwga2V5ZnJhbWVzKSB7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWwucmVwbGFjZShyZWZSZWdFeHAsIGZ1bmN0aW9uIChtYXRjaCwgbmFtZSkge1xuICAgICAgaWYgKG5hbWUgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgIHJldHVybiBrZXlmcmFtZXNbbmFtZV07XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gUmVmZXJlbmNlZCBrZXlmcmFtZXMgcnVsZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59O1xuLyoqXG4gKiBSZXBsYWNlIHRoZSByZWZlcmVuY2UgZm9yIGEgYW5pbWF0aW9uIG5hbWUuXG4gKi9cblxuXG52YXIgcmVwbGFjZVJlZiA9IGZ1bmN0aW9uIHJlcGxhY2VSZWYoc3R5bGUsIHByb3AsIGtleWZyYW1lcykge1xuICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgdmFyIHJlZktleWZyYW1lID0gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWx1ZSwga2V5ZnJhbWVzKTtcblxuICBpZiAocmVmS2V5ZnJhbWUgIT09IHZhbHVlKSB7XG4gICAgc3R5bGVbcHJvcF0gPSByZWZLZXlmcmFtZTtcbiAgfVxufTtcblxudmFyIHBsdWdpbiA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5UmVnRXhwJDEudGVzdChrZXkpID8gbmV3IEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIDogbnVsbDtcbiAgfSxcbiAgLy8gQW5pbWF0aW9uIG5hbWUgcmVmIHJlcGxhY2VyLlxuICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJyB8fCAhc2hlZXQpIHJldHVybiBzdHlsZTtcbiAgICBpZiAoJ2FuaW1hdGlvbi1uYW1lJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbi1uYW1lJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICBpZiAoJ2FuaW1hdGlvbicgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24nLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcbiAgb25DaGFuZ2VWYWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWwsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoIXNoZWV0KSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBjYXNlICdhbmltYXRpb24tbmFtZSc6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBLZXlmcmFtZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CYXNlU3R5bGVSdWxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKEtleWZyYW1lUnVsZSwgX0Jhc2VTdHlsZVJ1bGUpO1xuXG4gIGZ1bmN0aW9uIEtleWZyYW1lUnVsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQmFzZVN0eWxlUnVsZS5jYWxsLmFwcGx5KF9CYXNlU3R5bGVSdWxlLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lUnVsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgIH0pIDogb3B0aW9ucztcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdHMpO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpbktleWZyYW1lUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG5ldyBLZXlmcmFtZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbnZhciBGb250RmFjZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdmb250LWZhY2UnO1xuICAgIHRoaXMuYXQgPSAnQGZvbnQtZmFjZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRm9udEZhY2VSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zdHlsZSkpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0ciArPSB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAZm9udC1mYWNlJyA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2UgbmVlZCB0byBzYXZlIHRoZSBvcmlnaW5hbCBkZWNsIGJlZm9yZSBjcmVhdGluZyB0aGUgcnVsZVxuICAgIC8vIGJlY2F1c2UgY2FjaGUgcGx1Z2luIG5lZWRzIHRvIHVzZSBpdCBhcyBhIGtleSB0byByZXR1cm4gYSBjYWNoZWQgcnVsZS5cblxuXG4gICAgdGhpcy5yYXdba2V5XSA9IGRlY2w7XG5cbiAgICBpZiAoa2V5IGluIHRoaXMuY2xhc3Nlcykge1xuICAgICAgLy8gRm9yIGUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyQkMSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zJCQxLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMkJDEpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgIGFuZCBgLmNsYXNzZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVcblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLm9uVXBkYXRlKGRhdGEsIHRoaXMuZ2V0KG5hbWUpLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMub25VcGRhdGUoZGF0YSwgdGhpcy5pbmRleFtpbmRleF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBwbHVnaW5zLCB1cGRhdGUgcnVsZSBwcm9wcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25VcGRhdGUgPSBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyQkMSA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zJCQxLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMkJDEub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgICBpZiAocnVsZS5zdHlsZSkgdGhpcy5vblByb2Nlc3NTdHlsZShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgcnVsZS5pc1Byb2Nlc3NlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1N0eWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU3R5bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZmlsdGVyKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgcmV0dXJuIHNoZWV0LmF0dGFjaGVkO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoc2hlZXQpIHtcbiAgICAgIHJldHVybiBzaGVldC50b1N0cmluZyhvcHRpb25zKTtcbiAgICB9KS5qb2luKCdcXG4nKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgc2hlZXRzID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbnZhciBnbG9iYWwkMSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6XG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbCQxW25zXSA9PSBudWxsKSBnbG9iYWwkMVtuc10gPSAwOyAvLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5cbnZhciBtb2R1bGVJZCA9IGdsb2JhbCQxW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbiAqIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXRlZC5cbiAqIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cblxudmFyIGNyZWF0ZUdlbmVyYXRlSWREZWZhdWx0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgdmFyIGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WO1xuICB2YXIgZGVmYXVsdFByZWZpeCA9IGVudiA9PT0gJ3Byb2R1Y3Rpb24nID8gJ2MnIDogJyc7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIHByZWZpeCA9IGRlZmF1bHRQcmVmaXg7XG4gICAgdmFyIGpzc0lkID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIHByZWZpeCA9IHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4IHx8IGRlZmF1bHRQcmVmaXg7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5qc3MuaWQgIT0gbnVsbCkganNzSWQgKz0gc2hlZXQub3B0aW9ucy5qc3MuaWQ7XG4gICAgfVxuXG4gICAgaWYgKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkICYmIFwiLVwiICsganNzSWQpICsgXCItXCIgKyBydWxlQ291bnRlcjtcbiAgfTtcbn0pO1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5cblxuZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5kZWxldGUocHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIERPTUV4Y2VwdGlvbiBcXFwiXCIgKyBlcnIubWVzc2FnZSArIFwiXFxcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXFxcIlwiICsgcHJvcCArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gIH1cbn1cbi8qKlxuICogU2V0IHRoZSBzZWxlY3Rvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYGhlYWRgIGVsZW1lbnQgdXBvbiB0aGUgZmlyc3QgY2FsbCBhbmQgY2FjaGVzIGl0LlxuICogV2UgYXNzdW1lIGl0IGNhbid0IGJlIG51bGwuXG4gKi9cblxuXG52YXIgZ2V0SGVhZCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xufSk7XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCBhbiBpbmRleCBoaWdoZXIgdGhhbiB0aGUgcGFzc2VkIG9uZS5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5kZXggPiBvcHRpb25zLmluZGV4ICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIHRoZSBoaWdoZXN0IGluZGV4LlxuICovXG5cblxuZnVuY3Rpb24gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gcmVnaXN0cnkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYSBjb21tZW50IHdpdGggXCJqc3NcIiBpbnNpZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kQ29tbWVudE5vZGUodGV4dCkge1xuICB2YXIgaGVhZCA9IGdldEhlYWQoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gaGVhZC5jaGlsZE5vZGVzW2ldO1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBiZWZvcmUgd2hpY2ggd2UgY2FuIGluc2VydCB0aGUgc2hlZXQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQcmV2Tm9kZShvcHRpb25zKSB7XG4gIHZhciByZWdpc3RyeSA9IHNoZWV0cy5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkubGVuZ3RoID4gMCkge1xuICAgIC8vIFRyeSB0byBpbnNlcnQgYmVmb3JlIHRoZSBuZXh0IGhpZ2hlciBzaGVldC5cbiAgICB2YXIgc2hlZXQgPSBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBJbnNlcnRpb24gcG9pbnQgXFxcIlwiICsgaW5zZXJ0aW9uUG9pbnQgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgdmFyIG5leHROb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChuZXh0Tm9kZSAhPT0gZmFsc2UgJiYgbmV4dE5vZGUucGFyZW50KSB7XG4gICAgbmV4dE5vZGUucGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dE5vZGUubm9kZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG5cblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cblxuXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIF9pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShjb250YWluZXIsIHJ1bGUsIGluZGV4KSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSBjb250YWluZXIuY3NzUnVsZXMubGVuZ3RoO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDYW4gbm90IGluc2VydCBhbiB1bnN1cHBvcnRlZCBydWxlIFxcblwiICsgcnVsZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHNoZWV0cy5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gYnJvd3NlcnMgcmVtb3ZlIHRob3NlIHJ1bGVzLlxuICAgIC8vIFRPRE8gZmlndXJlIG91dCBpZiBpdHMgYSBidWcgYW5kIGlmIGl0IGlzIGtub3duLlxuICAgIC8vIFdvcmthcm91bmQgaXMgdG8gcmVkZXBsb3kgdGhlIHNoZWV0LlxuXG4gICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcykge1xuICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgICB0aGlzLmRlcGxveSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHN0eWxlIGVsZW1lbnQgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlbmRlciB0aGUgY29udGFpbmVyIHdpdGhvdXQgY2hpbGRyZW4gZmlyc3QuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIGluZGV4KTtcblxuICAgICAgICBpZiAobGF0ZXN0TmF0aXZlUGFyZW50ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICBydWxlLnJlbmRlcmFibGUgPSBuYXRpdmVSdWxlO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgdmFyIGNzc1J1bGVzID0gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNzc1J1bGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGNzc1J1bGUgPT09IGNzc1J1bGVzW2luZGV4XSkgcmV0dXJuIGluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHJldHVybiB0aGlzLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIHJ1bGVzIGVsZW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG4gIH07XG5cbiAgcmV0dXJuIERvbVJlbmRlcmVyO1xufSgpO1xuXG52YXIgaW5zdGFuY2VDb3VudGVyID0gMDtcblxudmFyIEpzcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEpzcyhvcHRpb25zKSB7XG4gICAgdGhpcy5pZCA9IGluc3RhbmNlQ291bnRlcisrO1xuICAgIHRoaXMudmVyc2lvbiA9IFwiMTAuMC4wLWFscGhhLjE2XCI7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFBsdWdpbnNSZWdpc3RyeSgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWREZWZhdWx0LFxuICAgICAgUmVuZGVyZXI6IGlzSW5Ccm93c2VyID8gRG9tUmVuZGVyZXIgOiBudWxsLFxuICAgICAgcGx1Z2luczogW11cbiAgICB9O1xuICAgIHRoaXMuZ2VuZXJhdGVJZCA9IGNyZWF0ZUdlbmVyYXRlSWREZWZhdWx0KCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBjcmVhdGVHZW5lcmF0ZUlkID0gX29wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcblxuICAgIGlmIChjcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IGNyZWF0ZUdlbmVyYXRlSWQ7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9uczIgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zMi5pbmRleDtcblxuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICBpbmRleCA9IHNoZWV0cy5pbmRleCA9PT0gMCA/IDAgOiBzaGVldHMuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHNoZWV0cy5yZW1vdmUoc2hlZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBydWxlIHdpdGhvdXQgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zJCQxID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2lucyQkMVtfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zJCQxLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBpbmRleCA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQsIGNyZWF0ZSwgZ2V0RHluYW1pY1N0eWxlcywgdG9Dc3NWYWx1ZSwgY3JlYXRlUnVsZSwgU2hlZXRzUmVnaXN0cnksIFNoZWV0c01hbmFnZXIsIFJ1bGVMaXN0LCBzaGVldHMsIGNyZWF0ZUdlbmVyYXRlSWREZWZhdWx0IGFzIGNyZWF0ZUdlbmVyYXRlSWQgfTtcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJpbXBvcnQgeyB3aXRoVGhlbWVDcmVhdG9yIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbnZhciB3aXRoVGhlbWUgPSB3aXRoVGhlbWVDcmVhdG9yKHtcbiAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbn0pO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aEZvcm1Db250cm9sQ29udGV4dChDb21wb25lbnQpIHtcbiAgdmFyIEVuaGFuY2VkQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICBtdWlGb3JtQ29udHJvbDogY29udGV4dCxcbiAgICAgICAgcmVmOiByZWZcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgRW5oYW5jZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIldpdGhGb3JtQ29udHJvbENvbnRleHQoXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiKVwiKTtcbiAgfVxuXG4gIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKEVuaGFuY2VkQ29tcG9uZW50LCBDb21wb25lbnQpO1xuICByZXR1cm4gRW5oYW5jZWRDb21wb25lbnQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL0JhY2tkcm9wJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBTbGlkZSBmcm9tICcuLi9TbGlkZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInBlcm1hbmVudCBvciBwZXJzaXN0ZW50XCJgLiAqL1xuICAgIGRvY2tlZDoge1xuICAgICAgZmxleDogJzAgMCBhdXRvJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gICAgcGFwZXI6IHtcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGZsZXg6ICcxIDAgYXV0bycsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5kcmF3ZXIsXG4gICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuICAgICAgLy8gdGVtcG9yYXJ5IHN0eWxlXG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgICAvLyBBdCBzb21lIHBvaW50LCBpdCB3b3VsZCBiZSBiZXR0ZXIgdG8ga2VlcCBpdCBmb3Iga2V5Ym9hcmQgdXNlcnMuXG4gICAgICAvLyA6Zm9jdXMtcmluZyBDU1MgcHNldWRvLWNsYXNzIHdpbGwgaGVscC5cbiAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImxlZnRcImAuICovXG4gICAgcGFwZXJBbmNob3JMZWZ0OiB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cInJpZ2h0XCJgLiAqL1xuICAgIHBhcGVyQW5jaG9yUmlnaHQ6IHtcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwidG9wXCJgLiAqL1xuICAgIHBhcGVyQW5jaG9yVG9wOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICByaWdodDogMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgbWF4SGVpZ2h0OiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJib3R0b21cImAuICovXG4gICAgcGFwZXJBbmNob3JCb3R0b206IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImxlZnRcImAgJiBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRMZWZ0OiB7XG4gICAgICBib3JkZXJSaWdodDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJ0b3BcImAgJiBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRUb3A6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJyaWdodFwiYCAmIGB2YXJpYW50YCBpcyBub3QgXCJ0ZW1wb3JhcnlcIi4gKi9cbiAgICBwYXBlckFuY2hvckRvY2tlZFJpZ2h0OiB7XG4gICAgICBib3JkZXJMZWZ0OiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImJvdHRvbVwiYCAmIGB2YXJpYW50YCBpcyBub3QgXCJ0ZW1wb3JhcnlcIi4gKi9cbiAgICBwYXBlckFuY2hvckRvY2tlZEJvdHRvbToge1xuICAgICAgYm9yZGVyVG9wOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYE1vZGFsYCBjb21wb25lbnQuICovXG4gICAgbW9kYWw6IHt9XG4gIH07XG59O1xudmFyIG9wcG9zaXRlRGlyZWN0aW9uID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICB0b3A6ICdkb3duJyxcbiAgYm90dG9tOiAndXAnXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbChhbmNob3IpIHtcbiAgcmV0dXJuIFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYW5jaG9yKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpIHtcbiAgcmV0dXJuIHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgJiYgaXNIb3Jpem9udGFsKGFuY2hvcikgPyBvcHBvc2l0ZURpcmVjdGlvblthbmNob3JdIDogYW5jaG9yO1xufVxudmFyIGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIHByb3BlcnRpZXMgb2YgdGhlIFtNb2RhbF0oL2FwaS9tb2RhbC8pIGNvbXBvbmVudCBhcmUgYXZhaWxhYmxlXG4gKiB3aGVuIGB2YXJpYW50PVwidGVtcG9yYXJ5XCJgIGlzIHNldC5cbiAqL1xuXG52YXIgRHJhd2VyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEcmF3ZXIocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFuY2hvciA9IHByb3BzLmFuY2hvcixcbiAgICAgIGFuY2hvclByb3AgPSBfcHJvcHMkYW5jaG9yID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcHJvcHMkYW5jaG9yLFxuICAgICAgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMTYgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJE1vZGFsUHJvcHMgPSBwcm9wcy5Nb2RhbFByb3BzO1xuICBfcHJvcHMkTW9kYWxQcm9wcyA9IF9wcm9wcyRNb2RhbFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNb2RhbFByb3BzO1xuXG4gIHZhciBCYWNrZHJvcFByb3BzUHJvcCA9IF9wcm9wcyRNb2RhbFByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBNb2RhbFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcyRNb2RhbFByb3BzLCBbXCJCYWNrZHJvcFByb3BzXCJdKSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgX3Byb3BzJG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3BlbiA9IF9wcm9wcyRvcGVuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRvcGVuLFxuICAgICAgUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBTbGlkZVByb3BzID0gcHJvcHMuU2xpZGVQcm9wcyxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZW1wb3JhcnknIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYW5jaG9yXCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImVsZXZhdGlvblwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJTbGlkZVByb3BzXCIsIFwidGhlbWVcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJ2YXJpYW50XCJdKTsgLy8gTGV0J3MgYXNzdW1lIHRoYXQgdGhlIERyYXdlciB3aWxsIGFsd2F5cyBiZSByZW5kZXJlZCBvbiB1c2VyIHNwYWNlLlxuICAvLyBXZSB1c2UgdGhpcyBzdGF0ZSBpcyBvcmRlciB0byBza2lwIHRoZSBhcHBlYXIgdHJhbnNpdGlvbiBkdXJpbmcgdGhlXG4gIC8vIGluaXRpYWwgbW91bnQgb2YgdGhlIGNvbXBvbmVudC5cblxuXG4gIHZhciBtb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBtb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9LCBbXSk7XG4gIHZhciBhbmNob3IgPSBnZXRBbmNob3IodGhlbWUsIGFuY2hvclByb3ApO1xuICB2YXIgZHJhd2VyID0gUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgPyBlbGV2YXRpb24gOiAwLFxuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wYXBlciwgY2xhc3Nlc1tcInBhcGVyQW5jaG9yXCIuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yKSldLCB2YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiBjbGFzc2VzW1wicGFwZXJBbmNob3JEb2NrZWRcIi5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3IpKV0pXG4gIH0sIFBhcGVyUHJvcHMpLCBjaGlsZHJlbik7XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdwZXJtYW5lbnQnKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyKSwgZHJhd2VyKTtcbiAgfVxuXG4gIHZhciBzbGlkaW5nRHJhd2VyID0gUmVhY3QuY3JlYXRlRWxlbWVudChTbGlkZSwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgfSwgU2xpZGVQcm9wcyksIGRyYXdlcik7XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdwZXJzaXN0ZW50Jykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMuZG9ja2VkLCBjbGFzc05hbWUpXG4gICAgfSwgb3RoZXIpLCBzbGlkaW5nRHJhd2VyKTtcbiAgfSAvLyB2YXJpYW50ID09PSB0ZW1wb3JhcnlcblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsLCBfZXh0ZW5kcyh7XG4gICAgQmFja2Ryb3BQcm9wczogX2V4dGVuZHMoe30sIEJhY2tkcm9wUHJvcHMsIEJhY2tkcm9wUHJvcHNQcm9wLCB7XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0pLFxuICAgIEJhY2tkcm9wQ29tcG9uZW50OiBCYWNrZHJvcCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLm1vZGFsLCBjbGFzc05hbWUpLFxuICAgIG9wZW46IG9wZW4sXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwgTW9kYWxQcm9wcyksIHNsaWRpbmdEcmF3ZXIpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEcmF3ZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2lkZSBmcm9tIHdoaWNoIHRoZSBkcmF3ZXIgd2lsbCBhcHBlYXIuXG4gICAqL1xuICBhbmNob3I6IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBkcmF3ZXIuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIGRyYXdlci5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkcmF3ZXIgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BTbGlkZWBdKC9hcGkvc2xpZGUvKSBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydwZXJtYW5lbnQnLCAncGVyc2lzdGVudCcsICd0ZW1wb3JhcnknXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRHJhd2VyJyxcbiAgZmxpcDogZmFsc2UsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoRHJhd2VyKTsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gKiBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gKiBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAqIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuIFRoZSBmdW5jdGlvbiBhbHNvIGhhcyBhIHByb3BlcnR5ICdjbGVhcicgXG4gKiB0aGF0IGlzIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBjbGVhciB0aGUgdGltZXIgdG8gcHJldmVudCBwcmV2aW91c2x5IHNjaGVkdWxlZCBleGVjdXRpb25zLiBcbiAqXG4gKiBAc291cmNlIHVuZGVyc2NvcmUuanNcbiAqIEBzZWUgaHR0cDovL3Vuc2NyaXB0YWJsZS5jb20vMjAwOS8wMy8yMC9kZWJvdW5jaW5nLWphdmFzY3JpcHQtbWV0aG9kcy9cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uIHRvIHdyYXBcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IGluIG1zIChgMTAwYClcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0byBleGVjdXRlIGF0IHRoZSBiZWdpbm5pbmcgKGBmYWxzZWApXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpe1xuICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG4gIGlmIChudWxsID09IHdhaXQpIHdhaXQgPSAxMDA7XG5cbiAgZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgdmFyIGxhc3QgPSBEYXRlLm5vdygpIC0gdGltZXN0YW1wO1xuXG4gICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWJvdW5jZWQgPSBmdW5jdGlvbigpe1xuICAgIGNvbnRleHQgPSB0aGlzO1xuICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICBpZiAoY2FsbE5vdykge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIFxuICBkZWJvdW5jZWQuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIFxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59O1xuXG4vLyBBZGRzIGNvbXBhdGliaWxpdHkgZm9yIEVTIG1vZHVsZXNcbmRlYm91bmNlLmRlYm91bmNlID0gZGVib3VuY2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9UeXBvZ3JhcGh5JzsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5kZWVwbWVyZ2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSB7XG5cdGlmICghb3B0aW9ucy5jdXN0b21NZXJnZSkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2Vcblx0fVxuXHR2YXIgY3VzdG9tTWVyZ2UgPSBvcHRpb25zLmN1c3RvbU1lcmdlKGtleSk7XG5cdHJldHVybiB0eXBlb2YgY3VzdG9tTWVyZ2UgPT09ICdmdW5jdGlvbicgPyBjdXN0b21NZXJnZSA6IGRlZXBtZXJnZVxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0T2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmICghb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5yZXR1cm4gZGVlcG1lcmdlXzE7XG5cbn0pKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBfcmVmLm11aUZvcm1Db250cm9sO1xuICByZXR1cm4gc3RhdGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0ZSkge1xuICAgIGFjY1tzdGF0ZV0gPSBwcm9wc1tzdGF0ZV07XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9QYXBlcic7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTaGVldHNSZWdpc3RyeSB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgU3R5bGVzUHJvdmlkZXIgZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIGZyb20gJy4uL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJztcblxudmFyIFNlcnZlclN0eWxlU2hlZXRzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VydmVyU3R5bGVTaGVldHMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcnZlclN0eWxlU2hlZXRzKTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VydmVyU3R5bGVTaGVldHMsIFt7XG4gICAga2V5OiBcImNvbGxlY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29sbGVjdChjaGlsZHJlbikge1xuICAgICAgLy8gVGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gZGVkdXBsaWNhdGUgdGhlIGluamVjdGlvbiBvZiBDU1MgaW4gdGhlIHBhZ2UuXG4gICAgICB2YXIgc2hlZXRzTWFuYWdlciA9IG5ldyBNYXAoKTsgLy8gVGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gaW5qZWN0IHRoZSBjcml0aWNhbCBDU1MuXG5cbiAgICAgIHRoaXMuc2hlZXRzUmVnaXN0cnkgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTsgLy8gQSBuZXcgY2xhc3MgbmFtZSBnZW5lcmF0b3JcblxuICAgICAgdmFyIGdlbmVyYXRlQ2xhc3NOYW1lID0gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc1Byb3ZpZGVyLCBfZXh0ZW5kcyh7XG4gICAgICAgIHNoZWV0c01hbmFnZXI6IHNoZWV0c01hbmFnZXIsXG4gICAgICAgIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZSxcbiAgICAgICAgc2hlZXRzUmVnaXN0cnk6IHRoaXMuc2hlZXRzUmVnaXN0cnlcbiAgICAgIH0sIHRoaXMub3B0aW9ucyksIGNoaWxkcmVuKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaGVldHNSZWdpc3RyeSA/IHRoaXMuc2hlZXRzUmVnaXN0cnkudG9TdHJpbmcoKSA6ICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTdHlsZUVsZW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3R5bGVFbGVtZW50KHByb3BzKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgaWQ6ICdqc3Mtc2VydmVyLXNpZGUnLFxuICAgICAgICBrZXk6ICdqc3Mtc2VydmVyLXNpZGUnLFxuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgIF9faHRtbDogdGhpcy50b1N0cmluZygpXG4gICAgICAgIH1cbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNlcnZlclN0eWxlU2hlZXRzO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBTZXJ2ZXJTdHlsZVNoZWV0czsiLCIvKiogQGxpY2Vuc2UgTWF0ZXJpYWwtVUkgdjQuMC4xXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IHBvbnlmaWxsR2xvYmFsIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbi8qIFdhcm5pbmcgaWYgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mIEBtYXRlcmlhbC11aS9zdHlsZXMgKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0Jykge1xuICBwb255ZmlsbEdsb2JhbFsnX19AbWF0ZXJpYWwtdWkvc3R5bGVzLWluaXRfXyddID0gcG9ueWZpbGxHbG9iYWxbJ19fQG1hdGVyaWFsLXVpL3N0eWxlcy1pbml0X18nXSB8fCAwO1xuXG4gIGlmIChwb255ZmlsbEdsb2JhbFsnX19AbWF0ZXJpYWwtdWkvc3R5bGVzLWluaXRfXyddID09PSAxKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oWydJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiBgQG1hdGVyaWFsLXVpL3N0eWxlc2AgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4nLCAnVGhpcyBtYXkgY2F1c2UgdGhlbWUgcHJvcGFnYXRpb24gaXNzdWVzLCBicm9rZW4gY2xhc3MgbmFtZXMgJyArICdhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBhIGdvb2QgcmVhc29uLicsICcnLCAnU2VlIGh0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL2dldHRpbmctc3RhcnRlZC9mYXEjaS1oYXZlLXNldmVyYWwtaW5zdGFuY2VzLW9mLXN0eWxlcy1vbi10aGUtcGFnZSBmb3IgbW9yZSBpbmZvLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHBvbnlmaWxsR2xvYmFsWydfX0BtYXRlcmlhbC11aS9zdHlsZXMtaW5pdF9fJ10gKz0gMTtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSB9IGZyb20gJy4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVTdHlsZXMgfSBmcm9tICcuL2NyZWF0ZVN0eWxlcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdldFRoZW1lUHJvcHMgfSBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBqc3NQcmVzZXQgfSBmcm9tICcuL2pzc1ByZXNldCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1ha2VTdHlsZXMgfSBmcm9tICcuL21ha2VTdHlsZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZXJnZUNsYXNzZXMgfSBmcm9tICcuL21lcmdlQ2xhc3Nlcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNlcnZlclN0eWxlU2hlZXRzIH0gZnJvbSAnLi9TZXJ2ZXJTdHlsZVNoZWV0cyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0eWxlZCB9IGZyb20gJy4vc3R5bGVkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVzUHJvdmlkZXIgfSBmcm9tICcuL1N0eWxlc1Byb3ZpZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGhlbWVQcm92aWRlciB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZVRoZW1lIH0gZnJvbSAnLi91c2VUaGVtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdpdGhTdHlsZXMgfSBmcm9tICcuL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoVGhlbWUsIHdpdGhUaGVtZUNyZWF0b3IgfSBmcm9tICcuL3dpdGhUaGVtZSc7IiwiaW1wb3J0IGNyZWF0ZU11aVRoZW1lIGZyb20gJy4vY3JlYXRlTXVpVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZU11aVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTGlzdENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmV4cG9ydCBkZWZhdWx0IExpc3RDb250ZXh0OyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBGb3JtQ29udHJvbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuLyoqXG4gKiBFbmFibGVzIHJlZiBmb3J3YXJkaW5nIG9uIGEgZ2l2ZW4gY29tcG9uZW50IHRoYXQgdXNlcyBgaW5uZXJSZWZgIHRvIGZvcndhcmQgcmVmc1xuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudCBpbXBsZW1lbnRhdGlvbnMgdGhhdCBwcmVkYXRlIGBmb3J3YXJkUmVmYCBhbmRcbiAqIHVzZWQgb3RoZXIgcHJvcHMgdG8gZm9yd2FyZCByZWZzLlxuICpcbiAqIEluc3RlYWQgb2YgYDxDb21wb25lbnQgaW5uZXJSZWY9e3JlZn0gLz5gIHlvdSBjYW4gd3JpdGVcbiAqIGA8d2l0aEZvcndhcmRSZWYoQ29tcG9uZW50KSByZWY9e3JlZn0gLz5gLlxuICpcbiAqIFRoaXMgSE9DIGRvZXMgbm90IGhhbmRsZSBwcm9wIGNvbGxpc2lvbi4gSW5cbiAqIGA8d2l0aEZvcndhcmRSZWYoQ29tcG9uZW50KSByZWY9e3JlZn0gaW5uZXJSZWY9e2lubmVyUmVmfSAvPmAgYGlubmVyUmVmYCB3aWxsIGJlIGRyb3BwZWRcbiAqXG4gKiBPbmx5IGNvcGllcyBzdGF0aWNzIGZyb20gbWF0ZXJpYWwtdWkgb3Zlci5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbXBvbmVudFR5cGV9IENvbXBvbmVudFxuICogQHJldHVybnMge1JlYWN0LkZvcndhcmRSZWZDb21wb25lbnR9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aEZvcndhcmRlZFJlZihDb21wb25lbnQpIHtcbiAgdmFyIEZvcndhcmRSZWZDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuICgvLyBXZSBleHBlY3QgdGhpcyBjb21wb25lbnQgdG8gYmUgd3JhcHBlZCBpbiBgd2l0aFN0eWxlc2AgaW4gd2hpY2ggYGlubmVyUmVmYFxuICAgICAgLy8gaXMgYWxyZWFkeSBpbnRlcmNlcHRlZCBhbmQgdGhlcmVmb3JlIHdvbid0IGFwcGVhciBpbiBgcHJvcHNgIGhlcmUuXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGlubmVyUmVmOiByZWZcbiAgICAgIH0pKVxuICAgICk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgRm9yd2FyZFJlZkNvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiRm9yd2FyZFJlZihcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKEZvcndhcmRSZWZDb21wb25lbnQsIENvbXBvbmVudCk7XG59IiwidmFyIEJMQUNLTElTVCA9IFsndGVtcGxhdGUnLCAnc2NyaXB0JywgJ3N0eWxlJ107XG5cbmZ1bmN0aW9uIGlzSGlkZWFibGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBCTEFDS0xJU1QuaW5kZXhPZihub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xufVxuXG5mdW5jdGlvbiBzaWJsaW5ncyhjb250YWluZXIsIG1vdW50LCBjdXJyZW50Tm9kZSwgY2FsbGJhY2spIHtcbiAgdmFyIGJsYWNrbGlzdCA9IFttb3VudCwgY3VycmVudE5vZGVdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChibGFja2xpc3QuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgaXNIaWRlYWJsZShub2RlKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRkZW4obm9kZSwgc2hvdykge1xuICBpZiAoc2hvdykge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGN1cnJlbnROb2RlLCBzaG93KSB7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBjdXJyZW50Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gYXJpYUhpZGRlbihub2RlLCBzaG93KTtcbiAgfSk7XG59IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vQnV0dG9uJzsiLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwidmFyIGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufSAvLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsbGVkKG9iaikge1xuICB2YXIgU1NSID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59IC8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG9ybmVkU3RhcnQob2JqKSB7XG4gIHJldHVybiBvYmouc3RhcnRBZG9ybm1lbnQ7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IEF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2VzU2VydmljZSB7XG4gIGNvbnN0IEJBU0VfVVJMID0gXCJodHRwczovL3F1cml1bHRjMmguZXhlY3V0ZS1hcGkudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vcHJkL1wiO1xuXG4gIGV4cG9ydCBjb25zdCBsb2dpbiA9IGFzeW5jICh1c2VybmFtZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IEF4aW9zLnBvc3QoQkFTRV9VUkwgKyBcImxvZ2luXCIsIHsgdXNlcm5hbWUgfSk7XG4gIH07XG4gIGV4cG9ydCBjb25zdCBnZXRNZXNzYWdlcyA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gKGF3YWl0IEF4aW9zLmdldChCQVNFX1VSTCArIFwibWVzc2FnZXNcIiwgeyBoZWFkZXJzOiB7IHRva2VuIH0gfSkpLmRhdGFcbiAgICAgIC5tZXNzYWdlcztcbiAgfTtcbiAgZXhwb3J0IGNvbnN0IHdyaXRlTWVzc2FnZSA9IGFzeW5jICh0b1VzZXJzOiBzdHJpbmdbXSwgbWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IEF4aW9zLnBvc3QoXG4gICAgICBCQVNFX1VSTCArIFwibWVzc2FnZXNcIixcbiAgICAgIHsgdG9Vc2VycywgbWVzc2FnZSB9LFxuICAgICAgeyBoZWFkZXJzOiB7IHRva2VuIH0gfVxuICAgICk7XG4gIH07XG5cbiAgZXhwb3J0IGxldCB0b2tlbiA9IFwiXCI7XG4gIGV4cG9ydCBsZXQgdXNlcm5hbWUgPSBcIlwiO1xufVxuIiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGFsaWduUHJvcGVydHkoX3JlZikge1xuICB2YXIgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIGdyaWQgPSBfcmVmLmdyaWQ7XG4gIHZhciBzaXplQmVsb3cgPSBzaXplIC0gc2l6ZSAlIGdyaWQ7XG4gIHZhciBzaXplQWJvdmUgPSBzaXplQmVsb3cgKyBncmlkO1xuICByZXR1cm4gc2l6ZSAtIHNpemVCZWxvdyA8IHNpemVBYm92ZSAtIHNpemUgPyBzaXplQmVsb3cgOiBzaXplQWJvdmU7XG59IC8vIGZvbnRHcmlkIGZpbmRzIGEgbWluaW1hbCBncmlkIChpbiByZW0pIGZvciB0aGUgZm9udFNpemUgdmFsdWVzIHNvIHRoYXQgdGhlXG4vLyBsaW5lSGVpZ2h0IGZhbGxzIHVuZGVyIGEgeCBwaXhlbHMgZ3JpZCwgNHB4IGluIHRoZSBjYXNlIG9mIE1hdGVyaWFsIERlc2lnbixcbi8vIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHJlbGF0aXZlIGxpbmUgaGVpZ2h0XG5cbmV4cG9ydCBmdW5jdGlvbiBmb250R3JpZChfcmVmMikge1xuICB2YXIgbGluZUhlaWdodCA9IF9yZWYyLmxpbmVIZWlnaHQsXG4gICAgICBwaXhlbHMgPSBfcmVmMi5waXhlbHMsXG4gICAgICBodG1sRm9udFNpemUgPSBfcmVmMi5odG1sRm9udFNpemU7XG4gIHJldHVybiBwaXhlbHMgLyAobGluZUhlaWdodCAqIGh0bWxGb250U2l6ZSk7XG59XG4vKipcbiAqIGdlbmVyYXRlIGEgcmVzcG9uc2l2ZSB2ZXJzaW9uIG9mIGEgZ2l2ZW4gQ1NTIHByb3BlcnR5XG4gKiBAZXhhbXBsZVxuICogcmVzcG9uc2l2ZVByb3BlcnR5KHtcbiAqICAgY3NzUHJvcGVydHk6ICdmb250U2l6ZScsXG4gKiAgIG1pbjogMTUsXG4gKiAgIG1heDogMjAsXG4gKiAgIHVuaXQ6ICdweCcsXG4gKiAgIGJyZWFrcG9pbnRzOiBbMzAwLCA2MDBdLFxuICogfSlcbiAqXG4gKiAvLyB0aGlzIHJldHVybnNcbiAqXG4gKiB7XG4gKiAgIGZvbnRTaXplOiAnMTVweCcsXG4gKiAgICdAbWVkaWEgKG1pbi13aWR0aDozMDBweCknOiB7XG4gKiAgICAgZm9udFNpemU6ICcxNy41cHgnLFxuICogICB9LFxuICogICAnQG1lZGlhIChtaW4td2lkdGg6NjAwcHgpJzoge1xuICogICAgIGZvbnRTaXplOiAnMjBweCcsXG4gKiAgIH0sXG4gKiB9XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jc3NQcm9wZXJ0eSAtIFRoZSBDU1MgcHJvcGVydHkgdG8gYmUgbWFkZSByZXNwb25zaXZlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLm1pbiAtIFRoZSBzbWFsbGVzdCB2YWx1ZSBvZiB0aGUgQ1NTIHByb3BlcnR5XG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLm1heCAtIFRoZSBsYXJnZXN0IHZhbHVlIG9mIHRoZSBDU1MgcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnVuaXRdIC0gVGhlIHVuaXQgdG8gYmUgdXNlZCBmb3IgdGhlIENTUyBwcm9wZXJ0eVxuICogQHBhcmFtIHtBcnJheS5udW1iZXJ9IFtwYXJhbXMuYnJlYWtwb2ludHNdICAtIEFuIGFycmF5IG9mIGJyZWFrcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5hbGlnblN0ZXBdIC0gUm91bmQgc2NhbGVkIHZhbHVlIHRvIGZhbGwgdW5kZXIgdGhpcyBncmlkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZXNwb25zaXZlIHN0eWxlcyBmb3Ige3BhcmFtcy5jc3NQcm9wZXJ0eX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2l2ZVByb3BlcnR5KF9yZWYzKSB7XG4gIHZhciBjc3NQcm9wZXJ0eSA9IF9yZWYzLmNzc1Byb3BlcnR5LFxuICAgICAgbWluID0gX3JlZjMubWluLFxuICAgICAgbWF4ID0gX3JlZjMubWF4LFxuICAgICAgX3JlZjMkdW5pdCA9IF9yZWYzLnVuaXQsXG4gICAgICB1bml0ID0gX3JlZjMkdW5pdCA9PT0gdm9pZCAwID8gJ3JlbScgOiBfcmVmMyR1bml0LFxuICAgICAgX3JlZjMkYnJlYWtwb2ludHMgPSBfcmVmMy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzID0gX3JlZjMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IFs2MDAsIDk2MCwgMTI4MF0gOiBfcmVmMyRicmVha3BvaW50cyxcbiAgICAgIF9yZWYzJHRyYW5zZm9ybSA9IF9yZWYzLnRyYW5zZm9ybSxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYzJHRyYW5zZm9ybSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzJHRyYW5zZm9ybTtcblxuICB2YXIgb3V0cHV0ID0gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgXCJcIi5jb25jYXQobWluKS5jb25jYXQodW5pdCkpO1xuXG4gIHZhciBmYWN0b3IgPSAobWF4IC0gbWluKSAvIGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRzLmxlbmd0aCAtIDFdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChicmVha3BvaW50KSB7XG4gICAgdmFyIHZhbHVlID0gbWluICsgZmFjdG9yICogYnJlYWtwb2ludDtcblxuICAgIGlmICh0cmFuc2Zvcm0gIT09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlKTtcbiAgICB9XG5cbiAgICBvdXRwdXRbXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJweClcIildID0gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgXCJcIi5jb25jYXQoTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwKSAvIDEwMDAwKS5jb25jYXQodW5pdCkpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGNvbnZlcnRMZW5ndGggZnJvbSAnY29udmVydC1jc3MtbGVuZ3RoJztcbmltcG9ydCB7IHJlc3BvbnNpdmVQcm9wZXJ0eSwgYWxpZ25Qcm9wZXJ0eSwgZm9udEdyaWQgfSBmcm9tICcuL2Nzc1V0aWxzJztcblxuZnVuY3Rpb24gaXNVbml0bGVzcyh2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nKHBhcnNlRmxvYXQodmFsdWUpKS5sZW5ndGggPT09IFN0cmluZyh2YWx1ZSkubGVuZ3RoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNwb25zaXZlRm9udFNpemVzKHRoZW1lSW5wdXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHMgPSBfb3B0aW9ucyRicmVha3BvaW50cyA9PT0gdm9pZCAwID8gWydzbScsICdtZCcsICdsZyddIDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRkaXNhYmxlQWxpZ24gPSBvcHRpb25zLmRpc2FibGVBbGlnbixcbiAgICAgIGRpc2FibGVBbGlnbiA9IF9vcHRpb25zJGRpc2FibGVBbGlnbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkaXNhYmxlQWxpZ24sXG4gICAgICBfb3B0aW9ucyRmYWN0b3IgPSBvcHRpb25zLmZhY3RvcixcbiAgICAgIGZhY3RvciA9IF9vcHRpb25zJGZhY3RvciA9PT0gdm9pZCAwID8gMiA6IF9vcHRpb25zJGZhY3RvcixcbiAgICAgIF9vcHRpb25zJHZhcmlhbnRzID0gb3B0aW9ucy52YXJpYW50cyxcbiAgICAgIHZhcmlhbnRzID0gX29wdGlvbnMkdmFyaWFudHMgPT09IHZvaWQgMCA/IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMicsICdib2R5MScsICdib2R5MicsICdjYXB0aW9uJywgJ2J1dHRvbicsICdvdmVybGluZSddIDogX29wdGlvbnMkdmFyaWFudHM7XG5cbiAgdmFyIHRoZW1lID0gX2V4dGVuZHMoe30sIHRoZW1lSW5wdXQpO1xuXG4gIHRoZW1lLnR5cG9ncmFwaHkgPSBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeSk7XG4gIHZhciB0eXBvZ3JhcGh5ID0gdGhlbWUudHlwb2dyYXBoeTsgLy8gQ29udmVydCBiZXR3ZWVuIGNzcyBsZW5ndGhzIGUuZy4gZW0tPnB4IG9yIHB4LT5yZW1cbiAgLy8gU2V0IHRoZSBiYXNlRm9udFNpemUgZm9yIHlvdXIgcHJvamVjdC4gRGVmYXVsdHMgdG8gMTZweCAoYWxzbyB0aGUgYnJvd3NlciBkZWZhdWx0KS5cblxuICB2YXIgY29udmVydCA9IGNvbnZlcnRMZW5ndGgodHlwb2dyYXBoeS5odG1sRm9udFNpemUpO1xuICB2YXIgYnJlYWtwb2ludFZhbHVlcyA9IGJyZWFrcG9pbnRzLm1hcChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbeF07XG4gIH0pO1xuICB2YXJpYW50cy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYW50KSB7XG4gICAgdmFyIHN0eWxlID0gdHlwb2dyYXBoeVt2YXJpYW50XTtcbiAgICB2YXIgcmVtRm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbnZlcnQoc3R5bGUuZm9udFNpemUsICdyZW0nKSk7XG5cbiAgICBpZiAocmVtRm9udFNpemUgPD0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBtYXhGb250U2l6ZSA9IHJlbUZvbnRTaXplO1xuICAgIHZhciBtaW5Gb250U2l6ZSA9IDEgKyAobWF4Rm9udFNpemUgLSAxKSAvIGZhY3RvcjtcbiAgICB2YXIgbGluZUhlaWdodCA9IHN0eWxlLmxpbmVIZWlnaHQ7XG5cbiAgICBpZiAoIWlzVW5pdGxlc3MobGluZUhlaWdodCkgJiYgIWRpc2FibGVBbGlnbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFtcIk1hdGVyaWFsLVVJOiB1bnN1cHBvcnRlZCBub24tdW5pdGxlc3MgbGluZSBoZWlnaHQgd2l0aCBncmlkIGFsaWdubWVudC5cIiwgJ1VzZSB1bml0bGVzcyBsaW5lIGhlaWdodHMgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1VuaXRsZXNzKGxpbmVIZWlnaHQpKSB7XG4gICAgICAvLyBtYWtlIGl0IHVuaXRsZXNzXG4gICAgICBsaW5lSGVpZ2h0ID0gcGFyc2VGbG9hdChjb252ZXJ0KGxpbmVIZWlnaHQsICdyZW0nKSkgLyBwYXJzZUZsb2F0KHJlbUZvbnRTaXplKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtID0gbnVsbDtcblxuICAgIGlmICghZGlzYWJsZUFsaWduKSB7XG4gICAgICB0cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFsaWduUHJvcGVydHkoe1xuICAgICAgICAgIHNpemU6IHZhbHVlLFxuICAgICAgICAgIGdyaWQ6IGZvbnRHcmlkKHtcbiAgICAgICAgICAgIHBpeGVsczogNCxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHQsXG4gICAgICAgICAgICBodG1sRm9udFNpemU6IHR5cG9ncmFwaHkuaHRtbEZvbnRTaXplXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHR5cG9ncmFwaHlbdmFyaWFudF0gPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIHJlc3BvbnNpdmVQcm9wZXJ0eSh7XG4gICAgICBjc3NQcm9wZXJ0eTogJ2ZvbnRTaXplJyxcbiAgICAgIG1pbjogbWluRm9udFNpemUsXG4gICAgICBtYXg6IG1heEZvbnRTaXplLFxuICAgICAgdW5pdDogJ3JlbScsXG4gICAgICBicmVha3BvaW50czogYnJlYWtwb2ludFZhbHVlcyxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtXG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KCkgfHwgZGVmYXVsdFRoZW1lO1xufSIsImV4cG9ydCAqIGZyb20gJy4vY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZU11aVRoZW1lIH0gZnJvbSAnLi9jcmVhdGVNdWlUaGVtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVN0eWxlcyB9IGZyb20gJy4vY3JlYXRlU3R5bGVzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWFrZVN0eWxlcyB9IGZyb20gJy4vbWFrZVN0eWxlcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE11aVRoZW1lUHJvdmlkZXIgfSBmcm9tICcuL011aVRoZW1lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZXNwb25zaXZlRm9udFNpemVzIH0gZnJvbSAnLi9yZXNwb25zaXZlRm9udFNpemVzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R5bGVkIH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2l0aW9ucyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZVRoZW1lIH0gZnJvbSAnLi91c2VUaGVtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdpdGhTdHlsZXMgfSBmcm9tICcuL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoVGhlbWUgfSBmcm9tICcuL3dpdGhUaGVtZSc7IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIGluZGlnbyA9IHtcbiAgNTA6ICcjZThlYWY2JyxcbiAgMTAwOiAnI2M1Y2FlOScsXG4gIDIwMDogJyM5ZmE4ZGEnLFxuICAzMDA6ICcjNzk4NmNiJyxcbiAgNDAwOiAnIzVjNmJjMCcsXG4gIDUwMDogJyMzZjUxYjUnLFxuICA2MDA6ICcjMzk0OWFiJyxcbiAgNzAwOiAnIzMwM2Y5ZicsXG4gIDgwMDogJyMyODM1OTMnLFxuICA5MDA6ICcjMWEyMzdlJyxcbiAgQTEwMDogJyM4YzllZmYnLFxuICBBMjAwOiAnIzUzNmRmZScsXG4gIEE0MDA6ICcjM2Q1YWZlJyxcbiAgQTcwMDogJyMzMDRmZmUnXG59O1xuZXhwb3J0IGRlZmF1bHQgaW5kaWdvOyIsInZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG5leHBvcnQgZGVmYXVsdCBwaW5rOyIsInZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKSk7XG52YXIgX2NyZWF0ZUNsYXNzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKSk7XG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJykpO1xudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mJykpO1xudmFyIF9pbmhlcml0cyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJykpO1xudmFyIF90eXBlb2YgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YnKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKSk7XG52YXIgX2V4dGVuZHMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJykpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3JlYWN0JykpO1xudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdwcm9wLXR5cGVzJykpO1xudmFyIHdhcm5pbmcgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnd2FybmluZycpKTtcblxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgYXR0cikge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGF0dHIpO1xufSAvLyBQYXNzaXZlIG9wdGlvbnNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9kb20vcGFzc2l2ZWV2ZW50bGlzdGVuZXJzLmpzXG5cblxudmFyIHBhc3NpdmVPcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWNoZSA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhY2hlICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuXG4gICAgdmFyIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7Ly9cbiAgICB9XG5cbiAgICBjYWNoZSA9IHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbiAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlT3B0aW9uO1xuICB9KCk7XG59KCk7XG5cbnZhciBkZWZhdWx0RXZlbnRPcHRpb25zID0ge1xuICBjYXB0dXJlOiBmYWxzZSxcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdEV2ZW50T3B0aW9ucywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TGlzdGVuZXJBcmdzKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIGFyZ3MgPSBbZXZlbnROYW1lLCBjYWxsYmFja107XG4gIGFyZ3MucHVzaChwYXNzaXZlT3B0aW9uID8gb3B0aW9ucyA6IG9wdGlvbnMuY2FwdHVyZSk7XG4gIHJldHVybiBhcmdzO1xufVxuXG5mdW5jdGlvbiBvbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIG9mZih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hMaXN0ZW5lcihwcm9wcywgaXRlcmF0ZWUpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICB0YXJnZXQgPSBwcm9wcy50YXJnZXQsXG4gICAgICBldmVudFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcInRhcmdldFwiXSk7XG5cbiAgT2JqZWN0LmtleXMoZXZlbnRQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lLnN1YnN0cmluZygwLCAyKSAhPT0gJ29uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wID0gZXZlbnRQcm9wc1tuYW1lXTtcblxuICAgIHZhciB0eXBlID0gX3R5cGVvZihwcm9wKTtcblxuICAgIHZhciBpc09iamVjdCA9IHR5cGUgPT09ICdvYmplY3QnO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FwdHVyZSA9IG5hbWUuc3Vic3RyKC03KS50b0xvd2VyQ2FzZSgpID09PSAnY2FwdHVyZSc7XG4gICAgdmFyIGV2ZW50TmFtZSA9IG5hbWUuc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgZXZlbnROYW1lID0gY2FwdHVyZSA/IGV2ZW50TmFtZS5zdWJzdHJpbmcoMCwgZXZlbnROYW1lLmxlbmd0aCAtIDcpIDogZXZlbnROYW1lO1xuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICBpdGVyYXRlZShldmVudE5hbWUsIHByb3AuaGFuZGxlciwgcHJvcC5vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUoZXZlbnROYW1lLCBwcm9wLCBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMoe1xuICAgICAgICBjYXB0dXJlOiBjYXB0dXJlXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gd2l0aE9wdGlvbnMoaGFuZGxlciwgb3B0aW9ucykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG9wdGlvbnMsICdyZWFjdC1ldmVudC1saXN0ZW5lcjogc2hvdWxkIGJlIHNwZWNpZmllZCBvcHRpb25zIGluIHdpdGhPcHRpb25zLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgb3B0aW9uczogbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKG9wdGlvbnMpXG4gIH07XG59XG5cbnZhciBFdmVudExpc3RlbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRXZlbnRMaXN0ZW5lciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50TGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihFdmVudExpc3RlbmVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFdmVudExpc3RlbmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvZmYsIHByZXZQcm9wcyk7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9mZik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5TGlzdGVuZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TGlzdGVuZXJzKG9uT3JPZmYpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5wcm9wcztcbiAgICAgIHZhciB0YXJnZXQgPSBwcm9wcy50YXJnZXQ7XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0YXJnZXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHdpbmRvd1t0YXJnZXRdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaExpc3RlbmVyKHByb3BzLCBvbk9yT2ZmLmJpbmQobnVsbCwgZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRXZlbnRMaXN0ZW5lcjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkV2ZW50TGlzdGVuZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIGNoaWxkIHRvby5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIERPTSB0YXJnZXQgdG8gbGlzdGVuIHRvLlxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufSA6IHt9O1xuXG5leHBvcnRzLndpdGhPcHRpb25zID0gd2l0aE9wdGlvbnM7XG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudExpc3RlbmVyO1xuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTJcImAuICovXG4gICAgYm9keTI6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTFcImAuICovXG4gICAgYm9keTE6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnV0dG9uXCJgLiAqL1xuICAgIGJ1dHRvbjogdGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDFcImAuICovXG4gICAgaDE6IHRoZW1lLnR5cG9ncmFwaHkuaDEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDJcImAuICovXG4gICAgaDI6IHRoZW1lLnR5cG9ncmFwaHkuaDIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDNcImAuICovXG4gICAgaDM6IHRoZW1lLnR5cG9ncmFwaHkuaDMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDRcImAuICovXG4gICAgaDQ6IHRoZW1lLnR5cG9ncmFwaHkuaDQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDVcImAuICovXG4gICAgaDU6IHRoZW1lLnR5cG9ncmFwaHkuaDUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDZcImAuICovXG4gICAgaDY6IHRoZW1lLnR5cG9ncmFwaHkuaDYsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUxXCJgLiAqL1xuICAgIHN1YnRpdGxlMTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUyXCJgLiAqL1xuICAgIHN1YnRpdGxlMjogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3ZlcmxpbmVcImAuICovXG4gICAgb3ZlcmxpbmU6IHRoZW1lLnR5cG9ncmFwaHkub3ZlcmxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3JPbmx5XCJgLiBPbmx5IGFjY2Vzc2libGUgdG8gc2NyZWVuIHJlYWRlcnMuICovXG4gICAgc3JPbmx5OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibm93cmFwXCJgLiAqL1xuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZ3V0dGVyQm90dG9tPXt0cnVlfWAuICovXG4gICAgZ3V0dGVyQm90dG9tOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhcmFncmFwaD17dHJ1ZX1gLiAqL1xuICAgIHBhcmFncmFwaDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJpbmxpbmVcImAuICovXG4gICAgZGlzcGxheUlubGluZToge1xuICAgICAgZGlzcGxheTogJ2lubGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImJsb2NrXCJgLiAqL1xuICAgIGRpc3BsYXlCbG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJ1xufTtcbnZhciBUeXBvZ3JhcGh5ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgZGlzcGxheSA9IF9wcm9wcyRkaXNwbGF5ID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkZGlzcGxheSxcbiAgICAgIF9wcm9wcyRndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBndXR0ZXJCb3R0b20gPSBfcHJvcHMkZ3V0dGVyQm90dG9tID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRndXR0ZXJCb3R0b20sXG4gICAgICBfcHJvcHMkbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgbm9XcmFwID0gX3Byb3BzJG5vV3JhcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9XcmFwLFxuICAgICAgX3Byb3BzJHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHBhcmFncmFwaCA9IF9wcm9wcyRwYXJhZ3JhcGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHBhcmFncmFwaCxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdib2R5MScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIF9wcm9wcyR2YXJpYW50TWFwcGluZyA9IHByb3BzLnZhcmlhbnRNYXBwaW5nLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPT09IHZvaWQgMCA/IGRlZmF1bHRWYXJpYW50TWFwcGluZyA6IF9wcm9wcyR2YXJpYW50TWFwcGluZyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc3BsYXlcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ0aGVtZVwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHZhcmlhbnQgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW3ZhcmlhbnRdLCBjb2xvciAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBub1dyYXAgJiYgY2xhc3Nlcy5ub1dyYXAsIGd1dHRlckJvdHRvbSAmJiBjbGFzc2VzLmd1dHRlckJvdHRvbSwgcGFyYWdyYXBoICYmIGNsYXNzZXMucGFyYWdyYXBoLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBkaXNwbGF5ICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImRpc3BsYXlcIi5jb25jYXQoY2FwaXRhbGl6ZShkaXNwbGF5KSldLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFR5cG9ncmFwaHkucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAnZXJyb3InXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBCeSBkZWZhdWx0LCBpdCBtYXBzIHRoZSB2YXJpYW50IHRvIGEgZ29vZCBkZWZhdWx0IGhlYWRsaW5lIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgZGlzcGxheSB0eXBlXG4gICAqL1xuICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2Jsb2NrJywgJ2lubGluZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYW4gZWxsaXBzaXMuXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFdlIGFyZSBlbXBpcmljYWxseSBtYXBwaW5nIHRoZSB2YXJpYW50IHByb3BlcnR5IHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IERPTSBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3BlcnR5LlxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoVHlwb2dyYXBoeSk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vSWNvbkJ1dHRvbic7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH1cbiAgfSwgZWxldmF0aW9ucyk7XG59O1xudmFyIFBhcGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJHNxdWFyZSA9IHByb3BzLnNxdWFyZSxcbiAgICAgIHNxdWFyZSA9IF9wcm9wcyRzcXVhcmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNxdWFyZSxcbiAgICAgIF9wcm9wcyRlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb24sXG4gICAgICBlbGV2YXRpb24gPSBfcHJvcHMkZWxldmF0aW9uID09PSB2b2lkIDAgPyAxIDogX3Byb3BzJGVsZXZhdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwic3F1YXJlXCIsIFwiZWxldmF0aW9uXCJdKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGVsZXZhdGlvbiA+PSAwICYmIGVsZXZhdGlvbiA8IDI1LCBcIk1hdGVyaWFsLVVJOiB0aGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpIDogdm9pZCAwO1xuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sICFzcXVhcmUgJiYgY2xhc3Nlcy5yb3VuZGVkLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9UZXh0RmllbGQnOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1N2Z0ljb24nOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgeyBzdHlsZWQgYXMgc3R5bGVkV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50Q3JlYXRvciA9IHN0eWxlZFdpdGhvdXREZWZhdWx0KENvbXBvbmVudCk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tcG9uZW50Q3JlYXRvcihzdHlsZSwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgICB9LCBvcHRpb25zKSk7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbi8vIGltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgLy8gVG8gZGVwcmVjYXRlIGluIHY0LjFcbiAgICAgIC8vICAgICAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgICAgIGZhbHNlLFxuICAgICAgLy8gICAgICAgICBbXG4gICAgICAvLyAgICAgICAgICAgJ01hdGVyaWFsLVVJOiB0aGVtZS5taXhpbnMuZ3V0dGVycygpIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgIC8vICAgICAgICAgICAnWW91IGNhbiB1c2UgdGhlIHNvdXJjZSBvZiB0aGUgbWl4aW4gZGlyZWN0bHk6JyxcbiAgICAgIC8vICAgICAgICAgICBgXG4gICAgICAvLyBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIC8vICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vIH0sXG4gICAgICAvLyBgLFxuICAgICAgLy8gICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgLy8gICAgICAgKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMilcbiAgICAgIH0sIHN0eWxlcywgX2RlZmluZVByb3BlcnR5KHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDMpXG4gICAgICB9LCBzdHlsZXNbYnJlYWtwb2ludHMudXAoJ3NtJyldKSkpO1xuICAgIH0sXG4gICAgdG9vbGJhcjogKF90b29sYmFyID0ge1xuICAgICAgbWluSGVpZ2h0OiA1NlxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgXCJcIi5jb25jYXQoYnJlYWtwb2ludHMudXAoJ3hzJyksIFwiIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcIiksIHtcbiAgICAgIG1pbkhlaWdodDogNDhcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5cbmltcG9ydCBpbmRpZ28gZnJvbSAnLi4vY29sb3JzL2luZGlnbyc7XG5pbXBvcnQgcGluayBmcm9tICcuLi9jb2xvcnMvcGluayc7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCB7IGdldENvbnRyYXN0UmF0aW8sIGRhcmtlbiwgbGlnaHRlbiB9IGZyb20gJy4vY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBncmV5WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjE0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKSdcbiAgfVxufTtcbmV4cG9ydCB2YXIgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBoaW50OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogZ3JleVs4MDBdLFxuICAgIGRlZmF1bHQ6ICcjMzAzMDMwJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjEsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSBsaWdodGVuKGludGVudC5tYWluLCB0b25hbE9mZnNldCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0ICogMS41KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIHZhciBfcGFsZXR0ZSRwcmltYXJ5ID0gcGFsZXR0ZS5wcmltYXJ5LFxuICAgICAgcHJpbWFyeSA9IF9wYWxldHRlJHByaW1hcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogaW5kaWdvWzMwMF0sXG4gICAgbWFpbjogaW5kaWdvWzUwMF0sXG4gICAgZGFyazogaW5kaWdvWzcwMF1cbiAgfSA6IF9wYWxldHRlJHByaW1hcnksXG4gICAgICBfcGFsZXR0ZSRzZWNvbmRhcnkgPSBwYWxldHRlLnNlY29uZGFyeSxcbiAgICAgIHNlY29uZGFyeSA9IF9wYWxldHRlJHNlY29uZGFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBwaW5rLkEyMDAsXG4gICAgbWFpbjogcGluay5BNDAwLFxuICAgIGRhcms6IHBpbmsuQTcwMFxuICB9IDogX3BhbGV0dGUkc2Vjb25kYXJ5LFxuICAgICAgX3BhbGV0dGUkZXJyb3IgPSBwYWxldHRlLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcGFsZXR0ZSRlcnJvciA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICBtYWluOiByZWRbNTAwXSxcbiAgICBkYXJrOiByZWRbNzAwXVxuICB9IDogX3BhbGV0dGUkZXJyb3IsXG4gICAgICBfcGFsZXR0ZSR0eXBlID0gcGFsZXR0ZS50eXBlLFxuICAgICAgdHlwZSA9IF9wYWxldHRlJHR5cGUgPT09IHZvaWQgMCA/ICdsaWdodCcgOiBfcGFsZXR0ZSR0eXBlLFxuICAgICAgX3BhbGV0dGUkY29udHJhc3RUaHJlID0gcGFsZXR0ZS5jb250cmFzdFRocmVzaG9sZCxcbiAgICAgIGNvbnRyYXN0VGhyZXNob2xkID0gX3BhbGV0dGUkY29udHJhc3RUaHJlID09PSB2b2lkIDAgPyAzIDogX3BhbGV0dGUkY29udHJhc3RUaHJlLFxuICAgICAgX3BhbGV0dGUkdG9uYWxPZmZzZXQgPSBwYWxldHRlLnRvbmFsT2Zmc2V0LFxuICAgICAgdG9uYWxPZmZzZXQgPSBfcGFsZXR0ZSR0b25hbE9mZnNldCA9PT0gdm9pZCAwID8gMC4yIDogX3BhbGV0dGUkdG9uYWxPZmZzZXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhiYWNrZ3JvdW5kLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGJhY2tncm91bmQgYXJndW1lbnQgaW4gZ2V0Q29udHJhc3RUZXh0KFwiLmNvbmNhdChiYWNrZ3JvdW5kLCBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbnRyYXN0ID49IDMsIFtcIk1hdGVyaWFsLVVJOiB0aGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQUNHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvcikge1xuICAgIHZhciBtYWluU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDUwMDtcbiAgICB2YXIgbGlnaHRTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzAwO1xuICAgIHZhciBkYXJrU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDcwMDtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG5cbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbG9yLm1haW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiB0aGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLicsIFwiVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgYG1haW5gIHByb3BlcnR5IG9yIGEgYFwiLmNvbmNhdChtYWluU2hhZGUsIFwiYCBwcm9wZXJ0eS5cIildLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICB2YXIgdHlwZXMgPSB7XG4gICAgZGFyazogZGFyayxcbiAgICBsaWdodDogbGlnaHRcbiAgfTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlc1t0eXBlXSwgXCJNYXRlcmlhbC1VSTogdGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IGNvbW1vbixcbiAgICAvLyBUaGUgcGFsZXR0ZSB0eXBlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICB0eXBlOiB0eXBlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3IocHJpbWFyeSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3IoZXJyb3IpLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5OiBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlbiB0aGUgYmFja2dyb3VuZCBhbmRcbiAgICAvLyB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZDogY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZSBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybiB0aGUgY29sb3Igb2YgdGhlIHRleHQgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dDogZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yOiBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0OiB0b25hbE9mZnNldFxuICB9LCB0eXBlc1t0eXBlXSksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbnZhciBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG52YXIgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICB2YXIgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICBfcmVmJGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250RmFtaWx5ID0gX3JlZiRmb250RmFtaWx5ID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9udEZhbWlseSA6IF9yZWYkZm9udEZhbWlseSxcbiAgICAgIF9yZWYkZm9udFNpemUgPSBfcmVmLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcmVmJGZvbnRTaXplID09PSB2b2lkIDAgPyAxNCA6IF9yZWYkZm9udFNpemUsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRMaWdodCA9IF9yZWYuZm9udFdlaWdodExpZ2h0LFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gX3JlZiRmb250V2VpZ2h0TGlnaHQgPT09IHZvaWQgMCA/IDMwMCA6IF9yZWYkZm9udFdlaWdodExpZ2h0LFxuICAgICAgX3JlZiRmb250V2VpZ2h0UmVndWxhID0gX3JlZi5mb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gX3JlZiRmb250V2VpZ2h0UmVndWxhID09PSB2b2lkIDAgPyA0MDAgOiBfcmVmJGZvbnRXZWlnaHRSZWd1bGEsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmLmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gX3JlZiRmb250V2VpZ2h0TWVkaXVtID09PSB2b2lkIDAgPyA1MDAgOiBfcmVmJGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiXSk7XG5cbiAgdmFyIGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIHZhciBweFRvUmVtID0gZnVuY3Rpb24gcHhUb1JlbShzaXplKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNpemUgLyBodG1sRm9udFNpemUgKiBjb2VmLCBcInJlbVwiKTtcbiAgfTtcblxuICB2YXIgYnVpbGRWYXJpYW50ID0gZnVuY3Rpb24gYnVpbGRWYXJpYW50KGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAvLyBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMSwgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4wNCwgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMTcsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzLCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplOiBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW1cbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJ2YXIgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xudmFyIHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG52YXIgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coKSB7XG4gIHJldHVybiBbXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlVbWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA1ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzVdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA2ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzZdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA3ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzddLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA4ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzhdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA5ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzldLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDExID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzExXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHksIFwiKVwiKV0uam9pbignLCcpO1xufVxuXG52YXIgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAxLCAzLCAwLCAwLCAxLCAxLCAwLCAwLCAyLCAxLCAtMSksIGNyZWF0ZVNoYWRvdygwLCAxLCA1LCAwLCAwLCAyLCAyLCAwLCAwLCAzLCAxLCAtMiksIGNyZWF0ZVNoYWRvdygwLCAxLCA4LCAwLCAwLCAzLCA0LCAwLCAwLCAzLCAzLCAtMiksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCJ2YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5cbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2lzLXBsYWluLW9iamVjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuL3RyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzaGFkb3dzSW5wdXQgPSBvcHRpb25zLnNoYWRvd3MsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJwYWxldHRlXCIsIFwic2hhZG93c1wiLCBcInNwYWNpbmdcIiwgXCJ0eXBvZ3JhcGh5XCJdKTtcblxuICB2YXIgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgdmFyIGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuXG4gIHZhciBtdWlUaGVtZSA9IF9leHRlbmRzKHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHByb3BlcnRpZXNcbiAgICBzaGFkb3dzOiBzaGFkb3dzSW5wdXQgfHwgc2hhZG93cyxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZ1xuICB9LCBkZWVwbWVyZ2Uoe1xuICAgIHNoYXBlOiBzaGFwZSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSwgb3RoZXIsIHtcbiAgICBpc01lcmdlYWJsZU9iamVjdDogaXNQbGFpbk9iamVjdFxuICB9KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddO1xuXG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgcGFyZW50S2V5KSB7XG4gICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gICAgICB2YXIga2V5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ011aScpID09PSAwICYmIGNoaWxkKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCwga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBbXCJNYXRlcmlhbC1VSTogdGhlIGBcIi5jb25jYXQocGFyZW50S2V5LCBcImAgY29tcG9uZW50IGluY3JlYXNlcyBcIikgKyBcInRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIGBcIi5jb25jYXQoa2V5LCBcImAgaW50ZXJuYWwgc3RhdGUuXCIpLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsICdJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICRydWxlTmFtZSBzeW50YXg6JywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL2N1c3RvbWl6YXRpb24vY29tcG9uZW50cy8jcHNldWRvLWNsYXNzZXMnXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobXVpVGhlbWUuc2hhZG93cy5sZW5ndGggPT09IDI1LCAnTWF0ZXJpYWwtVUk6IHRoZSBzaGFkb3dzIGFycmF5IHByb3ZpZGVkIHRvIGNyZWF0ZU11aVRoZW1lIHNob3VsZCBzdXBwb3J0IDI1IGVsZXZhdGlvbnMuJykgOiB2b2lkIDA7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTXVpVGhlbWU7IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG52YXIgd2Fybk9uY2U7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBBbGwgY29tcG9uZW50cyBhbGlnbiB0byBhbiA4ZHAgc3F1YXJlIGJhc2VsaW5lIGdyaWQgZm9yIG1vYmlsZSwgdGFibGV0LCBhbmQgZGVza3RvcC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjcGl4ZWwtZGVuc2l0eVxuXG5cbiAgdmFyIHRyYW5zZm9ybTtcblxuICBpZiAodHlwZW9mIHNwYWNpbmdJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyYW5zZm9ybSA9IHNwYWNpbmdJbnB1dDtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBzcGFjaW5nSW5wdXQgPT09ICdudW1iZXInLCBbXCJNYXRlcmlhbC1VSTogdGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHNwYWNpbmdJbnB1dCwgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyIG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuXG4gICAgdHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtKGZhY3Rvcikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgZmFjdG9yID09PSAnbnVtYmVyJywgXCJFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGZhY3RvcikpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dCAqIGZhY3RvcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGFyZ3MubGVuZ3RoIDw9IDQsIFwiVG9vIG1hbnkgYXJndW1lbnRzLCBleHBlY3RlZCBbMSwgNF0sIGdvdCBcIi5jb25jYXQoYXJncy5sZW5ndGgpKSA6IHZvaWQgMDtcblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybShhcmdzWzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5tYXAoZnVuY3Rpb24gKGZhY3Rvcikge1xuICAgICAgdmFyIG91dHB1dCA9IHRyYW5zZm9ybShmYWN0b3IpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQob3V0cHV0LCBcInB4XCIpIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTsgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdG8gcmVtb3ZlIGluIHY1LlxuXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNwYWNpbmcsICd1bml0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh3YXJuT25jZSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnLCBbJ01hdGVyaWFsLVVJOiB0aGVtZS5zcGFjaW5nLnVuaXQgdXNhZ2UgaGFzIGJlZW4gZGVwcmVjYXRlZC4nLCAnSXQgd2lsbCBiZSByZW1vdmVkIGluIHY1LicsICdZb3UgY2FuIHJlcGxhY2UgYHRoZW1lLnNwYWNpbmcudW5pdCAqIHlgIHdpdGggYHRoZW1lLnNwYWNpbmcoeSlgLicsICcnLCAnWW91IGNhbiB1c2UgdGhlIGBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXRlcmlhbC11aS1jb2RlbW9kL1JFQURNRS5tZCN0aGVtZS1zcGFjaW5nLWFwaWAgbWlncmF0aW9uIGhlbHBlciB0byBtYWtlIHRoZSBwcm9jZXNzIHNtb290aGVyLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgd2Fybk9uY2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICAgIH1cbiAgfSk7XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWlzUHJvZHVjdGlvbikge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IFwiV2FybmluZzogXCIgKyBtZXNzYWdlO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aHJvdyBFcnJvcih0ZXh0KTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbic7XG5leHBvcnQgZGVmYXVsdCBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdtdWkubmVzdGVkJykgOiAnX19USEVNRV9ORVNURURfXyc7IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG52YXIgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbn0pLCAnQXJyb3dEcm9wRG93bicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdmaWxsJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJpbmhlcml0XCJgLiAqL1xuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwibGFyZ2VcImAuICovXG4gICAgZm9udFNpemVMYXJnZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzNSlcbiAgICB9XG4gIH07XG59O1xudmFyIFN2Z0ljb24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdzdmcnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcHJvcHMkZm9udFNpemUgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRmb250U2l6ZSxcbiAgICAgIGh0bWxDb2xvciA9IHByb3BzLmh0bWxDb2xvcixcbiAgICAgIHRpdGxlQWNjZXNzID0gcHJvcHMudGl0bGVBY2Nlc3MsXG4gICAgICBfcHJvcHMkdmlld0JveCA9IHByb3BzLnZpZXdCb3gsXG4gICAgICB2aWV3Qm94ID0gX3Byb3BzJHZpZXdCb3ggPT09IHZvaWQgMCA/ICcwIDAgMjQgMjQnIDogX3Byb3BzJHZpZXdCb3gsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcImh0bWxDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShmb250U2l6ZSkpXSwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBodG1sQ29sb3IsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0aXRsZUFjY2VzcyA/ICdmYWxzZScgOiAndHJ1ZScsXG4gICAgcm9sZTogdGl0bGVBY2Nlc3MgPyAnaW1nJyA6ICdwcmVzZW50YXRpb24nLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlQWNjZXNzKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3BlcnR5IHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2FjdGlvbicsICdlcnJvcicsICdkaXNhYmxlZCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnZGVmYXVsdCcsICdzbWFsbCcsICdsYXJnZSddKSxcblxuICAvKipcbiAgICogQXBwbGllcyBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBodG1sQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3ZnSWNvbidcbn0pKFN2Z0ljb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBOYXRpdmVTZWxlY3RJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcIm5hbWVcIiwgXCJvbkNoYW5nZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgdmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYgY2xhc3Nlcy5maWxsZWQsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgY2xhc3Nlcy5vdXRsaW5lZCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgY2xhc3NOYW1lKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIHJlZjogaW5wdXRSZWYgfHwgcmVmXG4gIH0sIG90aGVyKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBzZWxlY3QgZWxlbWVudC5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZVNlbGVjdElucHV0OyIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5cbmZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgdmFyIGZhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB3aW5kb3c7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRWaWV3IHx8IGZhbGxiYWNrO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvd25lcldpbmRvdzsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvM2ZmZTNhNWQ4MmY2ZjU2MWI4MmZmNzhkODJiMzJhN2QxNGFlZDU1OC9qcy9zcmMvbW9kYWwuanMjTDUxMi1MNTE5XG5mdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKCkge1xuICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgcmV0dXJuIHNjcm9sbGJhclNpemU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbGJhclNpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL3Y0LjEuNS9zcmMvZm9jdXMtdmlzaWJsZS5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xudmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcbnZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlLFxuICAgICAgdGFnTmFtZSA9IG5vZGUudGFnTmFtZTtcblxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICogQHBhcmFtIHtFdmVudH0gZVxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmUob3duZXJEb2N1bWVudCkge1xuICBvd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24ob3duZXJEb2N1bWVudCkge1xuICBvd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9IC8vIGJyb3dzZXJzIG5vdCBpbXBsZW1lbnRpbmcgOmZvY3VzLXZpc2libGUgd2lsbCB0aHJvdyBhIFN5bnRheEVycm9yXG4gIC8vIHdlIHVzZSBvdXIgb3duIGhldXJpc3RpYyBmb3IgdGhvc2UgYnJvd3NlcnNcbiAgLy8gcmV0aHJvdyBtaWdodCBiZSBiZXR0ZXIgaWYgaXQncyBub3QgdGhlIGV4cGVjdGVkIGVycm9yIGJ1dCBkbyB3ZSByZWFsbHlcbiAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIC8vIG5vIG5lZWQgZm9yIHZhbGlkRm9jdXNUYXJnZXQgY2hlY2suIHRoZSB1c2VyIGRvZXMgdGhhdCBieSBhdHRhY2hpbmcgaXQgdG9cbiAgLy8gZm9jdXNhYmxlIGV2ZW50cyBvbmx5XG5cblxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZCBvbiBhIGZvY3VzLXZpc2libGUgZWxlbWVudFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICB9LCAxMDApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICB2YXIgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG5cbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGU6IGlzRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1clZpc2libGU6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogcmVmXG4gIH07XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvZG9tLWhlbHBlcnMvYmxvYi9tYXN0ZXIvc3JjL3V0aWwvaW5ET00uanNcclxudmFyIGluRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcclxudmFyIGNhY2hlZFR5cGU7XHJcbmZ1bmN0aW9uIF9zZXRTY3JvbGxUeXBlKHR5cGUpIHtcclxuICAgIGNhY2hlZFR5cGUgPSB0eXBlO1xyXG59XHJcbmV4cG9ydHMuX3NldFNjcm9sbFR5cGUgPSBfc2V0U2Nyb2xsVHlwZTtcclxuLy8gQmFzZWQgb24gdGhlIGpxdWVyeSBwbHVnaW4gaHR0cHM6Ly9naXRodWIuY29tL290aHJlZS9qcXVlcnkucnRsLXNjcm9sbC10eXBlXHJcbmZ1bmN0aW9uIGRldGVjdFNjcm9sbFR5cGUoKSB7XHJcbiAgICBpZiAoY2FjaGVkVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWRUeXBlO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpbkRPTSB8fCAhd2luZG93LmRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgICByZXR1cm4gJ2luZGV0ZXJtaW5hdGUnO1xyXG4gICAgfVxyXG4gICAgdmFyIGR1bW15ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZHVtbXkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0FCQ0QnKSk7XHJcbiAgICBkdW1teS5kaXIgPSAncnRsJztcclxuICAgIGR1bW15LnN0eWxlLmZvbnRTaXplID0gJzE0cHgnO1xyXG4gICAgZHVtbXkuc3R5bGUud2lkdGggPSAnNHB4JztcclxuICAgIGR1bW15LnN0eWxlLmhlaWdodCA9ICcxcHgnO1xyXG4gICAgZHVtbXkuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgZHVtbXkuc3R5bGUudG9wID0gJy0xMDAwcHgnO1xyXG4gICAgZHVtbXkuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHVtbXkpO1xyXG4gICAgY2FjaGVkVHlwZSA9ICdyZXZlcnNlJztcclxuICAgIGlmIChkdW1teS5zY3JvbGxMZWZ0ID4gMCkge1xyXG4gICAgICAgIGNhY2hlZFR5cGUgPSAnZGVmYXVsdCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBkdW1teS5zY3JvbGxMZWZ0ID0gMTtcclxuICAgICAgICBpZiAoZHVtbXkuc2Nyb2xsTGVmdCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYWNoZWRUeXBlID0gJ25lZ2F0aXZlJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGR1bW15KTtcclxuICAgIHJldHVybiBjYWNoZWRUeXBlO1xyXG59XHJcbmV4cG9ydHMuZGV0ZWN0U2Nyb2xsVHlwZSA9IGRldGVjdFNjcm9sbFR5cGU7XHJcbi8vIEJhc2VkIG9uIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNDM5NDM3NlxyXG5mdW5jdGlvbiBnZXROb3JtYWxpemVkU2Nyb2xsTGVmdChlbGVtZW50LCBkaXJlY3Rpb24pIHtcclxuICAgIHZhciBzY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgLy8gUGVyZm9ybSB0aGUgY2FsY3VsYXRpb25zIG9ubHkgd2hlbiBkaXJlY3Rpb24gaXMgcnRsIHRvIGF2b2lkIG1lc3NpbmcgdXAgdGhlIGx0ciBiYWhhdmlvclxyXG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3J0bCcpIHtcclxuICAgICAgICByZXR1cm4gc2Nyb2xsTGVmdDtcclxuICAgIH1cclxuICAgIHZhciB0eXBlID0gZGV0ZWN0U2Nyb2xsVHlwZSgpO1xyXG4gICAgaWYgKHR5cGUgPT09ICdpbmRldGVybWluYXRlJykge1xyXG4gICAgICAgIHJldHVybiBOdW1iZXIuTmFOO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbmVnYXRpdmUnOlxyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxMZWZ0O1xyXG4gICAgICAgIGNhc2UgJ3JldmVyc2UnOlxyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjcm9sbExlZnQ7XHJcbn1cclxuZXhwb3J0cy5nZXROb3JtYWxpemVkU2Nyb2xsTGVmdCA9IGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0O1xyXG5mdW5jdGlvbiBzZXROb3JtYWxpemVkU2Nyb2xsTGVmdChlbGVtZW50LCBzY3JvbGxMZWZ0LCBkaXJlY3Rpb24pIHtcclxuICAgIC8vIFBlcmZvcm0gdGhlIGNhbGN1bGF0aW9ucyBvbmx5IHdoZW4gZGlyZWN0aW9uIGlzIHJ0bCB0byBhdm9pZCBtZXNzaW5nIHVwIHRoZSBsdHIgYmFoYXZpb3JcclxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdydGwnKSB7XHJcbiAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgdHlwZSA9IGRldGVjdFNjcm9sbFR5cGUoKTtcclxuICAgIGlmICh0eXBlID09PSAnaW5kZXRlcm1pbmF0ZScpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlICduZWdhdGl2ZSc6XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IGVsZW1lbnQuY2xpZW50V2lkdGggLSBlbGVtZW50LnNjcm9sbFdpZHRoICsgc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmV2ZXJzZSc6XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zZXROb3JtYWxpemVkU2Nyb2xsTGVmdCA9IHNldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0O1xyXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL1Rvb2xiYXInOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0xpc3QnOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0xpc3RJdGVtJzsiLCIvKiFcbiAqIGlzLXBsYWluLW9iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtcGxhaW4tb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJ2lzb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0T2JqZWN0KG8pIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG8pID09PSB0cnVlXG4gICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIGNvbnN0cnVjdG9yXG4gIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICBpZiAodHlwZW9mIGN0b3IgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG4gIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcbiAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQYWRkaW5nPXtmYWxzZX1gLiAqL1xuICBwYWRkaW5nOiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBkZW5zZS4gKi9cbiAgZGVuc2U6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYSBgc3ViaGVhZGVyYCBpcyBwcm92aWRlZC4gKi9cbiAgc3ViaGVhZGVyOiB7XG4gICAgcGFkZGluZ1RvcDogMFxuICB9XG59O1xudmFyIExpc3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3QocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICd1bCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRlbnNlID0gcHJvcHMuZGVuc2UsXG4gICAgICBkZW5zZSA9IF9wcm9wcyRkZW5zZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGVuc2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBhZGRpbmcgPSBwcm9wcy5kaXNhYmxlUGFkZGluZyxcbiAgICAgIGRpc2FibGVQYWRkaW5nID0gX3Byb3BzJGRpc2FibGVQYWRkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUGFkZGluZyxcbiAgICAgIHN1YmhlYWRlciA9IHByb3BzLnN1YmhlYWRlcixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVQYWRkaW5nXCIsIFwic3ViaGVhZGVyXCJdKTtcblxuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZW5zZTogZGVuc2VcbiAgICB9O1xuICB9LCBbZGVuc2VdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGRlbnNlICYmIGNsYXNzZXMuZGVuc2UsICFkaXNhYmxlUGFkZGluZyAmJiBjbGFzc2VzLnBhZGRpbmcsIHN1YmhlYWRlciAmJiBjbGFzc2VzLnN1YmhlYWRlciwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN1YmhlYWRlciwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wZXJ0eSBpcyBhdmFpbGFibGUgdG8gZGVzY2VuZGFudCBjb21wb25lbnRzIGFzIHRoZSBgZGVuc2VgIGNvbnRleHQuXG4gICAqL1xuICBkZW5zZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdmVydGljYWwgcGFkZGluZyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0J1xufSkoTGlzdCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuICgvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb24uY29udGV4dFR5cGUgPSBUcmFuc2l0aW9uR3JvdXBDb250ZXh0O1xuVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgLCBgJ3VubW91bnRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZSBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLlxuICAgKiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdCBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlXG4gICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZXJlIGFyZSBubyBzcGVjaWZpYyBcImFwcGVhclwiIHN0YXRlcy4gYGFwcGVhcmAgb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgYGVudGVyYCB0cmFuc2l0aW9uLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJzsgLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGluZGV4Q291bnRlciA8IDAsIFsnTWF0ZXJpYWwtVUk6IHlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGluZGV4Q291bnRlcjtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cblxuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7IC8vIFN1cHBvcnQgZm9yIHRoZSBqc3MtZXhwYW5kIHBsdWdpbi5cblxuZnVuY3Rpb24gYXJyYXlNZXJnZShkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gIHJldHVybiBzb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciB0aGVtaW5nRW5hYmxlZCA9IHR5cGVvZiBzdHlsZXNPckNyZWF0b3IgPT09ICdmdW5jdGlvbic7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoX3R5cGVvZihzdHlsZXNPckNyZWF0b3IpID09PSAnb2JqZWN0JyB8fCB0aGVtaW5nRW5hYmxlZCwgWydNYXRlcmlhbC1VSTogdGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBmdW5jdGlvbiBnZW5lcmF0aW5nIHRoZSBzdHlsZXMgb3IgYSBzdHlsZXMgb2JqZWN0LiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoZW1pbmdFbmFibGVkIHx8IHRoZW1lICE9PSBub29wVGhlbWUsIFsnTWF0ZXJpYWwtVUk6IHRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuYW1lIHx8ICF0aGVtZS5vdmVycmlkZXMgfHwgIXRoZW1lLm92ZXJyaWRlc1tuYW1lXSkge1xuICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3ZlcnJpZGVzID0gdGhlbWUub3ZlcnJpZGVzW25hbWVdO1xuXG4gICAgICB2YXIgc3R5bGVzV2l0aE92ZXJyaWRlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMpO1xuXG4gICAgICBPYmplY3Qua2V5cyhvdmVycmlkZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgWydNYXRlcmlhbC1VSTogeW91IGFyZSB0cnlpbmcgdG8gb3ZlcnJpZGUgYSBzdHlsZSB0aGF0IGRvZXMgbm90IGV4aXN0LicsIFwiRml4IHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGtleSBvZiBgdGhlbWUub3ZlcnJpZGVzLlwiKS5jb25jYXQobmFtZSwgXCJgLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSwge1xuICAgICAgICAgIGFycmF5TWVyZ2U6IGFycmF5TWVyZ2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge30sXG4gICAgdGhlbWluZ0VuYWJsZWQ6IHRoZW1pbmdFbmFibGVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN0eWxlc0NyZWF0b3I7IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGdldER5bmFtaWNTdHlsZXMgfSBmcm9tICdqc3MnO1xuaW1wb3J0IG1lcmdlQ2xhc3NlcyBmcm9tICcuLi9tZXJnZUNsYXNzZXMnO1xuaW1wb3J0IG11bHRpS2V5U3RvcmUgZnJvbSAnLi9tdWx0aUtleVN0b3JlJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBTdHlsZXNDb250ZXh0IH0gZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IHsgaW5jcmVtZW50IH0gZnJvbSAnLi9pbmRleENvdW50ZXInO1xuaW1wb3J0IGdldFN0eWxlc0NyZWF0b3IgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvcic7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhfcmVmLCBjbGFzc2VzLCBDb21wb25lbnQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmLnN0eWxlc09wdGlvbnM7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NlcyB8fCB7fTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY2FjaGVDbGFzc2VzKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgIGxhc3RKU1M6IHt9XG4gICAgfTtcbiAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gIHZhciBnZW5lcmF0ZSA9IGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5jbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTID0gc3RhdGUuY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZ2VuZXJhdGUpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWUgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTLFxuICAgICAgbmV3Q2xhc3NlczogY2xhc3NlcyxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmMi5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWYyLnN0eWxlc0NyZWF0b3IsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcblxuICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgIHJlZnM6IDAsXG4gICAgICBzdGF0aWNTaGVldDogbnVsbCxcbiAgICAgIGR5bmFtaWNTdHlsZXM6IG51bGxcbiAgICB9O1xuICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHNoZWV0TWFuYWdlcik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBzdHlsZXNDcmVhdG9yLm9wdGlvbnMsIHN0eWxlc09wdGlvbnMsIHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgZmxpcDogdHlwZW9mIHN0eWxlc09wdGlvbnMuZmxpcCA9PT0gJ2Jvb2xlYW4nID8gc3R5bGVzT3B0aW9ucy5mbGlwIDogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJ1xuICB9KTtcblxuICBvcHRpb25zLmdlbmVyYXRlSWQgPSBvcHRpb25zLnNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIHx8IG9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWU7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgdmFyIHN0YXRpY1NoZWV0O1xuXG4gICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBzdHlsZXNDcmVhdG9yLmNyZWF0ZSh0aGVtZSwgbmFtZSk7XG5cbiAgICBpZiAoIXN0YXRpY1NoZWV0KSB7XG4gICAgICBzdGF0aWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGxpbms6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgICBzdGF0aWNTaGVldC5hdHRhY2goKTtcblxuICAgICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHN0YXRpY1NoZWV0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChzdGF0aWNTaGVldCk7XG4gICAgfVxuXG4gICAgc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0ID0gc3RhdGljU2hlZXQ7XG4gICAgc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMgPSBnZXREeW5hbWljU3R5bGVzKHN0eWxlcyk7XG4gIH1cblxuICBpZiAoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMpIHtcbiAgICB2YXIgZHluYW1pY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgbGluazogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb3BzLCAnTWF0ZXJpYWwtVUk6IHByb3BlcnRpZXMgbWlzc2luZy4nKSA6IHZvaWQgMDtcbiAgICBkeW5hbWljU2hlZXQudXBkYXRlKHByb3BzKS5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0O1xuXG4gIGlmIChyZWYuY3VycmVudC5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlcztcbiAgICBvdXRwdXQgPSBmdW5jKCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh2YWx1ZXNbaV0gIT09IHJlZi5jdXJyZW50W2ldKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gdmFsdWVzO1xuICAgICAgICBvdXRwdXQgPSBmdW5jKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgb3V0cHV0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgdmFsdWVzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICk7XG59XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeE9wdGlvbiA9IG9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQsXG4gICAgICBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgIGRlZmF1bHRUaGVtZSA9IF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9PT0gdm9pZCAwID8gbm9vcFRoZW1lIDogX29wdGlvbnMkZGVmYXVsdFRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9uczIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiLCBcImNsYXNzTmFtZVByZWZpeFwiLCBcIkNvbXBvbmVudFwiLCBcImRlZmF1bHRUaGVtZVwiXSk7XG5cbiAgdmFyIHN0eWxlc0NyZWF0b3IgPSBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcik7XG4gIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lIHx8IGNsYXNzTmFtZVByZWZpeE9wdGlvbiB8fCAnbWFrZVN0eWxlcyc7XG4gIHN0eWxlc0NyZWF0b3Iub3B0aW9ucyA9IHtcbiAgICBpbmRleDogaW5jcmVtZW50KCksXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXRhOiBjbGFzc05hbWVQcmVmaXgsXG4gICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgfTtcbiAgdmFyIGxpc3RlblRvVGhlbWUgPSBzdHlsZXNDcmVhdG9yLnRoZW1pbmdFbmFibGVkIHx8IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciB0aGVtZSA9IChsaXN0ZW5Ub1RoZW1lID8gdXNlVGhlbWUoKSA6IG51bGwpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2V0Q2xhc3NlcyhpbnN0YW5jZS5jdXJyZW50LCBwcm9wcy5jbGFzc2VzLCBDb21wb25lbnQpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlU3R5bGVzOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBoYXNOZXh0ID0ga2V5IGluIG5leHRDaGlsZE1hcHBpbmc7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAgICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAgICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICAgKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAgICpcbiAgICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAgICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICAgKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAgICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICAgKiBpdGVtcy5cbiAgICovXG5cbn07XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmlwcGxlKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRwdWxzYXRlID0gcHJvcHMucHVsc2F0ZSxcbiAgICAgIHB1bHNhdGUgPSBfcHJvcHMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVggPSBwcm9wcy5yaXBwbGVYLFxuICAgICAgcmlwcGxlWSA9IHByb3BzLnJpcHBsZVksXG4gICAgICByaXBwbGVTaXplID0gcHJvcHMucmlwcGxlU2l6ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicHVsc2F0ZVwiLCBcInJpcHBsZVhcIiwgXCJyaXBwbGVZXCIsIFwicmlwcGxlU2l6ZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgdmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIGxlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0TGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgc2V0VmlzaWJsZSh0cnVlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXQoKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfTtcblxuICB2YXIgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJpcHBsZSwgdmlzaWJsZSAmJiBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCBjbGFzc05hbWUpO1xuICB2YXIgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgdmFyIGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdFxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IHJpcHBsZUNsYXNzTmFtZSxcbiAgICBzdHlsZTogcmlwcGxlU3R5bGVzXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gIH0pKSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFJpcHBsZSBmcm9tICcuL1JpcHBsZSc7XG52YXIgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgdmFyIERFTEFZX1JJUFBMRSA9IDgwO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHpJbmRleDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGU6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIm11aS1yaXBwbGUtZW50ZXIgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCksXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRtdWktcmlwcGxlLWVudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkYCBjbGFzcy4gKi9cbiAgICBjaGlsZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRMZWF2aW5nYCBjbGFzcy4gKi9cbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwibXVpLXJpcHBsZS1leGl0IFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpLFxuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJsZSBsb2dpYyBiZXR3ZWVuIEpTUyB2OSBhbmQgdjEwLlxuICAgICAgLy8gVG8gcmVtb3ZlIHdpdGggdGhlIHJlbGVhc2Ugb2YgTWF0ZXJpYWwtVUkgdjRcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckbXVpLXJpcHBsZS1leGl0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLXB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKSxcbiAgICAgIC8vIEJhY2t3YXJkIGNvbXBhdGlibGUgbG9naWMgYmV0d2VlbiBKU1MgdjkgYW5kIHYxMC5cbiAgICAgIC8vIFRvIHJlbW92ZSB3aXRoIHRoZSByZWxlYXNlIG9mIE1hdGVyaWFsLVVJIHY0XG4gICAgICBhbmltYXRpb25OYW1lOiAnJG11aS1yaXBwbGUtcHVsc2F0ZSdcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcmlwcGxlLWV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkyKSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxudmFyIFRvdWNoUmlwcGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVG91Y2hSaXBwbGUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb3VjaFJpcHBsZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb3VjaFJpcHBsZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUb3VjaFJpcHBsZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbmV4dEtleTogMCxcbiAgICAgIHJpcHBsZXM6IFtdXG4gICAgfTtcbiAgICBfdGhpcy5jb250YWluZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcblxuICAgIF90aGlzLnB1bHNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zdGFydCh7fSwge1xuICAgICAgICBwdWxzYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICAgIF9vcHRpb25zJGNlbnRlciA9IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gX3RoaXMucHJvcHMuY2VudGVyIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgICBfb3B0aW9ucyRmYWtlRWxlbWVudCA9IG9wdGlvbnMuZmFrZUVsZW1lbnQsXG4gICAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIF90aGlzLmlnbm9yaW5nTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLmlnbm9yaW5nTW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBfdGhpcy5pZ25vcmluZ01vdXNlRG93biA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogX3RoaXMuY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgICB2YXIgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDBcbiAgICAgIH07IC8vIEdldCB0aGUgc2l6ZSBvZiB0aGUgcmlwcGxlXG5cbiAgICAgIHZhciByaXBwbGVYO1xuICAgICAgdmFyIHJpcHBsZVk7XG4gICAgICB2YXIgcmlwcGxlU2l6ZTtcblxuICAgICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpO1xuICAgICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChyZWN0LmhlaWdodCAvIDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYID8gZXZlbnQuY2xpZW50WCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgdmFyIGNsaWVudFkgPSBldmVudC5jbGllbnRZID8gZXZlbnQuY2xpZW50WSA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjZW50ZXIpIHtcbiAgICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIE1hdGgucG93KHJlY3Qud2lkdGgsIDIpICsgTWF0aC5wb3cocmVjdC5oZWlnaHQsIDIpKSAvIDMpOyAvLyBGb3Igc29tZSByZWFzb24gdGhlIGFuaW1hdGlvbiBpcyBicm9rZW4gb24gTW9iaWxlIENocm9tZSBpZiB0aGUgc2l6ZSBpZiBldmVuLlxuXG4gICAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICAgIHJpcHBsZVNpemUgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgICAgdmFyIHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoTWF0aC5wb3coc2l6ZVgsIDIpICsgTWF0aC5wb3coc2l6ZVksIDIpKTtcbiAgICAgIH0gLy8gVG91Y2hlIGRldmljZXNcblxuXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICAvLyBQcmVwYXJlIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYjogY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuc3RhcnRUaW1lckNvbW1pdCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgIGNiOiBjYlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnRDb21taXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICAgIGNiID0gcGFyYW1zLmNiO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXh0S2V5OiBzdGF0ZS5uZXh0S2V5ICsgMSxcbiAgICAgICAgICByaXBwbGVzOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnJpcHBsZXMpLCBbUmVhY3QuY3JlYXRlRWxlbWVudChSaXBwbGUsIHtcbiAgICAgICAgICAgIGtleTogc3RhdGUubmV4dEtleSxcbiAgICAgICAgICAgIGNsYXNzZXM6IF90aGlzLnByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgICB0aW1lb3V0OiB7XG4gICAgICAgICAgICAgIGV4aXQ6IERVUkFUSU9OLFxuICAgICAgICAgICAgICBlbnRlcjogRFVSQVRJT05cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICAgICAgfSldKVxuICAgICAgICB9O1xuICAgICAgfSwgY2IpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdG9wID0gZnVuY3Rpb24gKGV2ZW50LCBjYikge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnN0YXJ0VGltZXIpO1xuICAgICAgdmFyIHJpcHBsZXMgPSBfdGhpcy5zdGF0ZS5yaXBwbGVzOyAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIF90aGlzLnN0YXJ0VGltZXJDb21taXQpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQoKTtcblxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnN0b3AoZXZlbnQsIGNiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IG51bGw7XG5cbiAgICAgIGlmIChyaXBwbGVzICYmIHJpcHBsZXMubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICByaXBwbGVzOiByaXBwbGVzLnNsaWNlKDEpXG4gICAgICAgIH0sIGNiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvdWNoUmlwcGxlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXJ0VGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjZW50ZXIgPSBfdGhpcyRwcm9wcy5jZW50ZXIsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiB0aGlzLmNvbnRhaW5lclxuICAgICAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cCwge1xuICAgICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICAgIGVudGVyOiB0cnVlLFxuICAgICAgICBleGl0OiB0cnVlXG4gICAgICB9LCB0aGlzLnN0YXRlLnJpcHBsZXMpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG91Y2hSaXBwbGU7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuVG91Y2hSaXBwbGUuZGVmYXVsdFByb3BzID0ge1xuICBjZW50ZXI6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKFRvdWNoUmlwcGxlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IE5vU3NyIGZyb20gJy4uL05vU3NyJztcbmltcG9ydCB7IHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnLi4vdXRpbHMvZm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfSxcbiAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGtleWJvYXJkIGZvY3VzZWQuICovXG4gIGZvY3VzVmlzaWJsZToge31cbn07XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNDQwMDEzODkyXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqL1xuXG5mdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gKDAsIHJlZi5jdXJyZW50KShldmVudCk7XG4gIH0sIFtdKTtcbn1cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cblxuXG52YXIgQnV0dG9uQmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBidXR0b25SZWZQcm9wID0gcHJvcHMuYnV0dG9uUmVmLFxuICAgICAgX3Byb3BzJGNlbnRlclJpcHBsZSA9IHByb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wcyRjZW50ZXJSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlclJpcHBsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmlwcGxlID0gcHJvcHMuZGlzYWJsZVJpcHBsZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJpcHBsZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9IHByb3BzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoUmksXG4gICAgICBfcHJvcHMkZm9jdXNSaXBwbGUgPSBwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gX3Byb3BzJGZvY3VzUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93biA9IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwID0gcHJvcHMub25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCA9IHByb3BzLm9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSA9IHByb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0ID0gcHJvcHMub25Ub3VjaFN0YXJ0LFxuICAgICAgX3Byb3BzJHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICB0YWJJbmRleCA9IF9wcm9wcyR0YWJJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyR0YWJJbmRleCxcbiAgICAgIFRvdWNoUmlwcGxlUHJvcHMgPSBwcm9wcy5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImJ1dHRvblJlZlwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl0pO1xuXG4gIHZhciBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gZ2V0QnV0dG9uTm9kZSgpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShidXR0b25SZWYuY3VycmVudCk7XG4gIH1cblxuICB2YXIgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXNWaXNpYmxlOiBmdW5jdGlvbiBmb2N1c1Zpc2libGUoKSB7XG4gICAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSkge1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGVdKTtcblxuICBmdW5jdGlvbiB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZUFjdGlvbiwgZXZlbnRDYWxsYmFjaykge1xuICAgIHZhciBza2lwUmlwcGxlQWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkaXNhYmxlVG91Y2hSaXBwbGU7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlnbm9yZSA9IGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICB2YXIgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICB2YXIgaGFuZGxlTW91c2VMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIHZhciBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgdmFyIGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIHZhciBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIG9uQmx1clZpc2libGUoZXZlbnQpO1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICB2YXIgaGFuZGxlRm9jdXMgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcblxuXG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcblxuICAgICAgaWYgKG9uRm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIG9uRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGJ1dHRvbiA9IGdldEJ1dHRvbk5vZGUoKTsgLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmIChldmVudC5rZXkgPT09ICcgJyB8fCBldmVudC5rZXkgPT09ICdFbnRlcicpICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCwgZm9jdXNWaXNpYmxlICYmIFtjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCk7XG4gIHZhciBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiBvdGhlci5ocmVmKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9ICdhJztcbiAgfVxuXG4gIHZhciBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgfVxuXG4gIHZhciBoYW5kbGVVc2VyUmVmID0gdXNlRm9ya1JlZihidXR0b25SZWZQcm9wLCByZWYpO1xuICB2YXIgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZVVzZXJSZWYsIGhhbmRsZU93blJlZik7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlOiBoYW5kbGVUb3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0OiBoYW5kbGVUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXhcbiAgfSwgYnV0dG9uUHJvcHMsIG90aGVyKSwgY2hpbGRyZW4sICFkaXNhYmxlUmlwcGxlICYmICFkaXNhYmxlZCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm9Tc3IsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG91Y2hSaXBwbGUsIF9leHRlbmRzKHtcbiAgICByZWY6IHJpcHBsZVJlZixcbiAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICB9LCBUb3VjaFJpcHBsZVByb3BzKSkpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbkJhc2UucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGByZWZgIGluc3RlYWRcbiAgICovXG4gIGJ1dHRvblJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGBmb2N1c1Zpc2libGVDbGFzc05hbWVgLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICogYGRpc2FibGVSaXBwbGVgIG11c3QgYWxzbyBiZSBgZmFsc2VgLlxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBoZWxwIGEgcGVyc29uIGtub3cgd2hpY2ggZWxlbWVudCBoYXMgdGhlIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWluIHRoZSBmb2N1cyB0aHJvdWdoIGEga2V5Ym9hcmQgaW50ZXJhY3Rpb24uXG4gICAqIEl0J3MgYSBwb2x5ZmlsbCBmb3IgdGhlIFtDU1MgOmZvY3VzLXZpc2libGUgc2VsZWN0b3JdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsZSBmb3IgdXNpbmcgdGhpcyBmZWF0dXJlIFtpcyBleHBsYWluZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaFN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNvbnRyb2wgdGhlIGJ1dHRvbidzIHB1cnBvc2UuXG4gICAqIFRoaXMgcHJvcGVydHkgcGFzc2VzIHRoZSB2YWx1ZSB0byB0aGUgYHR5cGVgIGF0dHJpYnV0ZSBvZiB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydzdWJtaXQnLCAncmVzZXQnLCAnYnV0dG9uJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG59KShCdXR0b25CYXNlKTsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5pbXBvcnQgSW5wdXRMYWJlbCBmcm9tICcuLi9JbnB1dExhYmVsJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUhlbHBlclRleHQgZnJvbSAnLi4vRm9ybUhlbHBlclRleHQnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9TZWxlY3QnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xudmFyIHZhcmlhbnRDb21wb25lbnQgPSB7XG4gIHN0YW5kYXJkOiBJbnB1dCxcbiAgZmlsbGVkOiBGaWxsZWRJbnB1dCxcbiAgb3V0bGluZWQ6IE91dGxpbmVkSW5wdXRcbn07XG52YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7fVxufTtcbi8qKlxuICogVGhlIGBUZXh0RmllbGRgIGlzIGEgY29udmVuaWVuY2Ugd3JhcHBlciBmb3IgdGhlIG1vc3QgY29tbW9uIGNhc2VzICg4MCUpLlxuICogSXQgY2Fubm90IGJlIGFsbCB0aGluZ3MgdG8gYWxsIHBlb3BsZSwgb3RoZXJ3aXNlIHRoZSBBUEkgd291bGQgZ3JvdyBvdXQgb2YgY29udHJvbC5cbiAqXG4gKiAjIyBBZHZhbmNlZCBDb25maWd1cmF0aW9uXG4gKlxuICogSXQncyBpbXBvcnRhbnQgdG8gdW5kZXJzdGFuZCB0aGF0IHRoZSB0ZXh0IGZpZWxkIGlzIGEgc2ltcGxlIGFic3RyYWN0aW9uXG4gKiBvbiB0b3Agb2YgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0Zvcm1Db250cm9sXSgvYXBpL2Zvcm0tY29udHJvbC8pXG4gKiAtIFtJbnB1dExhYmVsXSgvYXBpL2lucHV0LWxhYmVsLylcbiAqIC0gW0ZpbGxlZElucHV0XSgvYXBpL2ZpbGxlZC1pbnB1dC8pXG4gKiAtIFtPdXRsaW5lZElucHV0XSgvYXBpL291dGxpbmVkLWlucHV0LylcbiAqIC0gW0lucHV0XSgvYXBpL2lucHV0LylcbiAqIC0gW0Zvcm1IZWxwZXJUZXh0XSgvYXBpL2Zvcm0taGVscGVyLXRleHQvKVxuICpcbiAqIElmIHlvdSB3aXNoIHRvIGFsdGVyIHRoZSBwcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCwgeW91IGNhbiBkbyBzbyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAqICAgc3RlcDogMzAwLFxuICogfTtcbiAqXG4gKiByZXR1cm4gPFRleHRGaWVsZCBpZD1cInRpbWVcIiB0eXBlPVwidGltZVwiIGlucHV0UHJvcHM9e2lucHV0UHJvcHN9IC8+O1xuICogYGBgXG4gKlxuICogRm9yIGFkdmFuY2VkIGNhc2VzLCBwbGVhc2UgbG9vayBhdCB0aGUgc291cmNlIG9mIFRleHRGaWVsZCBieSBjbGlja2luZyBvbiB0aGVcbiAqIFwiRWRpdCB0aGlzIHBhZ2VcIiBidXR0b24gYWJvdmUuIENvbnNpZGVyIGVpdGhlcjpcbiAqXG4gKiAtIHVzaW5nIHRoZSB1cHBlciBjYXNlIHByb3BzIGZvciBwYXNzaW5nIHZhbHVlcyBkaXJlY3RseSB0byB0aGUgY29tcG9uZW50c1xuICogLSB1c2luZyB0aGUgdW5kZXJseWluZyBjb21wb25lbnRzIGRpcmVjdGx5IGFzIHNob3duIGluIHRoZSBkZW1vc1xuICovXG5cbnZhciBUZXh0RmllbGQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRGaWVsZChwcm9wcywgcmVmKSB7XG4gIHZhciBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIEZvcm1IZWxwZXJUZXh0UHJvcHMgPSBwcm9wcy5Gb3JtSGVscGVyVGV4dFByb3BzLFxuICAgICAgZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgaGVscGVyVGV4dCA9IHByb3BzLmhlbHBlclRleHQsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgSW5wdXRMYWJlbFByb3BzID0gcHJvcHMuSW5wdXRMYWJlbFByb3BzLFxuICAgICAgaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICBJbnB1dFByb3BzID0gcHJvcHMuSW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgX3Byb3BzJHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICByZXF1aXJlZCA9IF9wcm9wcyRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVxdWlyZWQsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgX3Byb3BzJHNlbGVjdCA9IHByb3BzLnNlbGVjdCxcbiAgICAgIHNlbGVjdCA9IF9wcm9wcyRzZWxlY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNlbGVjdCxcbiAgICAgIFNlbGVjdFByb3BzID0gcHJvcHMuU2VsZWN0UHJvcHMsXG4gICAgICB0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaWRcIiwgXCJJbnB1dExhYmVsUHJvcHNcIiwgXCJpbnB1dFByb3BzXCIsIFwiSW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZXF1aXJlZFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic2VsZWN0XCIsIFwiU2VsZWN0UHJvcHNcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoMCksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGxhYmVsV2lkdGggPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TGFiZWxXaWR0aCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGxhYmVsUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgdmFyIGxhYmVsTm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGxhYmVsUmVmLmN1cnJlbnQpO1xuICAgICAgc2V0TGFiZWxXaWR0aChsYWJlbE5vZGUgIT0gbnVsbCA/IGxhYmVsTm9kZS5vZmZzZXRXaWR0aCA6IDApO1xuICAgIH1cbiAgfSwgW3ZhcmlhbnQsIHJlcXVpcmVkXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXNlbGVjdCB8fCBCb29sZWFuKGNoaWxkcmVuKSwgJ01hdGVyaWFsLVVJOiBgY2hpbGRyZW5gIG11c3QgYmUgcGFzc2VkIHdoZW4gdXNpbmcgdGhlIGBUZXh0RmllbGRgIGNvbXBvbmVudCB3aXRoIGBzZWxlY3RgLicpIDogdm9pZCAwO1xuICB2YXIgSW5wdXRNb3JlID0ge307XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICBpZiAoSW5wdXRMYWJlbFByb3BzICYmIHR5cGVvZiBJbnB1dExhYmVsUHJvcHMuc2hyaW5rICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgSW5wdXRNb3JlLm5vdGNoZWQgPSBJbnB1dExhYmVsUHJvcHMuc2hyaW5rO1xuICAgIH1cblxuICAgIElucHV0TW9yZS5sYWJlbFdpZHRoID0gbGFiZWxXaWR0aDtcbiAgfVxuXG4gIHZhciBoZWxwZXJUZXh0SWQgPSBoZWxwZXJUZXh0ICYmIGlkID8gXCJcIi5jb25jYXQoaWQsIFwiLWhlbHBlci10ZXh0XCIpIDogdW5kZWZpbmVkO1xuICB2YXIgSW5wdXRDb21wb25lbnQgPSB2YXJpYW50Q29tcG9uZW50W3ZhcmlhbnRdO1xuICB2YXIgSW5wdXRFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByb3dzOiByb3dzLFxuICAgIHJvd3NNYXg6IHJvd3NNYXgsXG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgaWQ6IGlkLFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZixcbiAgICBvbkJsdXI6IG9uQmx1cixcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgaW5wdXRQcm9wczogaW5wdXRQcm9wc1xuICB9LCBJbnB1dE1vcmUsIElucHV0UHJvcHMpKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2wsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKSxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgcmVmOiByZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfSwgb3RoZXIpLCBsYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TGFiZWwsIF9leHRlbmRzKHtcbiAgICBodG1sRm9yOiBpZCxcbiAgICByZWY6IGxhYmVsUmVmXG4gIH0sIElucHV0TGFiZWxQcm9wcyksIGxhYmVsKSwgc2VsZWN0ID8gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpbnB1dDogSW5wdXRFbGVtZW50XG4gIH0sIFNlbGVjdFByb3BzKSwgY2hpbGRyZW4pIDogSW5wdXRFbGVtZW50LCBoZWxwZXJUZXh0ICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUhlbHBlclRleHQsIF9leHRlbmRzKHtcbiAgICBpZDogaGVscGVyVGV4dElkXG4gIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMpLCBoZWxwZXJUZXh0KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRGaWVsZC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BGb3JtSGVscGVyVGV4dGBdKC9hcGkvZm9ybS1oZWxwZXItdGV4dC8pIGVsZW1lbnQuXG4gICAqL1xuICBGb3JtSGVscGVyVGV4dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWxwZXIgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgaGVscGVyVGV4dDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBVc2UgdGhpcyBwcm9wZXJ0eSB0byBtYWtlIGBsYWJlbGAgYW5kIGBoZWxwZXJUZXh0YCBhY2Nlc3NpYmxlIGZvciBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgSW5wdXRMYWJlbGBdKC9hcGkvaW5wdXQtbGFiZWwvKSBlbGVtZW50LlxuICAgKi9cbiAgSW5wdXRMYWJlbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIElucHV0IGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgYmUgYSBbYEZpbGxlZElucHV0YF0oL2FwaS9maWxsZWQtaW5wdXQvKSxcbiAgICogW2BPdXRsaW5lZElucHV0YF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8pIG9yIFtgSW5wdXRgXSgvYXBpL2lucHV0LylcbiAgICogY29tcG9uZW50IGRlcGVuZGluZyBvbiB0aGUgYHZhcmlhbnRgIHByb3AgdmFsdWUuXG4gICAqL1xuICBJbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBjb250ZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ2RlbnNlJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZCBpbnN0ZWFkIG9mIGFuIGlucHV0LlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBhcyByZXF1aXJlZCBhbmQgdGhlIGBpbnB1dGAgZWxlbWVudGAgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIFtgU2VsZWN0YF0oL2FwaS9zZWxlY3QvKSBlbGVtZW50IHdoaWxlIHBhc3NpbmcgdGhlIElucHV0IGVsZW1lbnQgdG8gYFNlbGVjdGAgYXMgYGlucHV0YCBwYXJhbWV0ZXIuXG4gICAqIElmIHRoaXMgb3B0aW9uIGlzIHNldCB5b3UgbXVzdCBwYXNzIHRoZSBvcHRpb25zIG9mIHRoZSBzZWxlY3QgYXMgY2hpbGRyZW4uXG4gICAqL1xuICBzZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgU2VsZWN0YF0oL2FwaS9zZWxlY3QvKSBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGV4dEZpZWxkJ1xufSkoVGV4dEZpZWxkKTsiLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3Q7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7XG4gICAgICBsaW5lSGVpZ2h0OiAxLjc1XG4gICAgfSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWluV2lkdGg6IDY0LFxuICAgICAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnYmFja2dyb3VuZC1jb2xvcicsICdib3gtc2hhZG93JywgJ2JvcmRlciddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNwYW4gZWxlbWVudCB0aGF0IHdyYXBzIHRoZSBjaGlsZHJlbi4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIEVuc3VyZSB0aGUgY29ycmVjdCB3aWR0aCBmb3IgaU9TIFNhZmFyaVxuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0OiB7XG4gICAgICBwYWRkaW5nOiAnNnB4IDhweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgdGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIHRleHRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBwYWRkaW5nOiAnNXB4IDE2cHgnLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBvdXRsaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4pLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdKSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0sXG4gICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s2XVxuICAgICAgfSxcbiAgICAgICcmOmFjdGl2ZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzhdXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29udGFpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbnRhaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgQnV0dG9uQmFzZSByb290IGVsZW1lbnQgaWYgdGhlIGJ1dHRvbiBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzVmlzaWJsZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBib3JkZXJDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCA4cHgnLFxuICAgICAgbWluV2lkdGg6IDY0LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIHNpemVMYXJnZToge1xuICAgICAgcGFkZGluZzogJzhweCAyNHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgY29udGFpbmVkID0gdmFyaWFudCA9PT0gJ2NvbnRhaW5lZCc7XG4gIHZhciB0ZXh0ID0gdmFyaWFudCA9PT0gJ3RleHQnO1xuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgW2NsYXNzZXMub3V0bGluZWQsIGNvbG9yID09PSAncHJpbWFyeScgJiYgY2xhc3Nlcy5vdXRsaW5lZFByaW1hcnksIGNvbG9yID09PSAnc2Vjb25kYXJ5JyAmJiBjbGFzc2VzLm91dGxpbmVkU2Vjb25kYXJ5XSwgY29sb3IgPT09ICdzZWNvbmRhcnknICYmIFt0ZXh0ICYmIGNsYXNzZXMudGV4dFNlY29uZGFyeSwgY29udGFpbmVkICYmIGNsYXNzZXMuY29udGFpbmVkU2Vjb25kYXJ5XSwgY29sb3IgPT09ICdwcmltYXJ5JyAmJiBbdGV4dCAmJiBjbGFzc2VzLnRleHRQcmltYXJ5LCBjb250YWluZWQgJiYgY2xhc3Nlcy5jb250YWluZWRQcmltYXJ5XSwgdGV4dCAmJiBjbGFzc2VzLnRleHQsIGNvbnRhaW5lZCAmJiBjbGFzc2VzLmNvbnRhaW5lZCwgc2l6ZSAhPT0gJ21lZGl1bScgJiYgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsIGNvbG9yID09PSAnaW5oZXJpdCcgJiYgY2xhc3Nlcy5jb2xvckluaGVyaXQpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gbGluayB0byB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogSWYgZGVmaW5lZCwgYW4gYGFgIGVsZW1lbnQgd2lsbCBiZSB1c2VkIGFzIHRoZSByb290IG5vZGUuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWyd0ZXh0JywgJ291dGxpbmVkJywgJ2NvbnRhaW5lZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nXG59KShCdXR0b24pOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgYnRvYSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYnRvYSAmJiB3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdykpIHx8IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idG9hJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGxvYWRFdmVudCA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xuICAgIHZhciB4RG9tYWluID0gZmFsc2U7XG5cbiAgICAvLyBGb3IgSUUgOC85IENPUlMgc3VwcG9ydFxuICAgIC8vIE9ubHkgc3VwcG9ydHMgUE9TVCBhbmQgR0VUIGNhbGxzIGFuZCBkb2Vzbid0IHJldHVybnMgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkgJiZcbiAgICAgICAgIWlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcbiAgICAgIGxvYWRFdmVudCA9ICdvbmxvYWQnO1xuICAgICAgeERvbWFpbiA9IHRydWU7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge307XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdFtsb2FkRXZlbnRdID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAvLyBJRSBzZW5kcyAxMjIzIGluc3RlYWQgb2YgMjA0IChodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIvLyBpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVN0eWxlcyBhcyBjcmVhdGVTdHlsZXNPcmlnaW5hbCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnOyAvLyBsZXQgd2Fybk9uY2UgPSBmYWxzZTtcbi8vIFRvIHJlbW92ZSBpbiB2NVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoc3R5bGVzKSB7XG4gIC8vIHdhcm5pbmcoXG4gIC8vICAgd2Fybk9uY2UsXG4gIC8vICAgW1xuICAvLyAgICAgJ01hdGVyaWFsLVVJOiBjcmVhdGVTdHlsZXMgZnJvbSBAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMgaXMgZGVwcmVjYXRlZC4nLFxuICAvLyAgICAgJ1BsZWFzZSB1c2UgQG1hdGVyaWFsLXVpL3N0eWxlcy9jcmVhdGVTdHlsZXMnLFxuICAvLyAgIF0uam9pbignXFxuJyksXG4gIC8vICk7XG4gIC8vIHdhcm5PbmNlID0gdHJ1ZTtcbiAgcmV0dXJuIGNyZWF0ZVN0eWxlc09yaWdpbmFsKHN0eWxlcyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCB7IG1ha2VTdHlsZXMgYXMgbWFrZVN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gbWFrZVN0eWxlc1dpdGhvdXREZWZhdWx0KHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFrZVN0eWxlczsiLCJpbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVQcm92aWRlcjsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9BcHBCYXInOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzEwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbOTAwXTtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggdGhlIE1vZGFsIGFuZCBmaXhlZCBwb3NpdGlvbmVkIEFwcEJhci5cbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LmFwcEJhcixcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJmaXhlZFwiYC4gKi9cbiAgICBwb3NpdGlvbkZpeGVkOiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiYWJzb2x1dGVcImAuICovXG4gICAgcG9zaXRpb25BYnNvbHV0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0aWNreVwiYC4gKi9cbiAgICBwb3NpdGlvblN0aWNreToge1xuICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJzdGF0aWNcImAuICovXG4gICAgcG9zaXRpb25TdGF0aWM6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RhdGljJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInJlbGF0aXZlXCJgLiAqL1xuICAgIHBvc2l0aW9uUmVsYXRpdmU6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGVmYXVsdFwiYC4gKi9cbiAgICBjb2xvckRlZmF1bHQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yRGVmYXVsdCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9XG4gIH07XG59O1xudmFyIEFwcEJhciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ2ZpeGVkJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBzcXVhcmU6IHRydWUsXG4gICAgY29tcG9uZW50OiBcImhlYWRlclwiLFxuICAgIGVsZXZhdGlvbjogNCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wicG9zaXRpb25cIi5jb25jYXQoY2FwaXRhbGl6ZShwb3NpdGlvbikpXSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgcG9zaXRpb24gPT09ICdmaXhlZCcgJiYgJ211aS1maXhlZCcsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQXBwQmFyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZGVmYXVsdCddKSxcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uaW5nIHR5cGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkXG4gICAqIFtpbiB0aGUgTUROIHdlYiBkb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0xlYXJuL0NTUy9DU1NfbGF5b3V0L1Bvc2l0aW9uaW5nKS5cbiAgICogTm90ZTogYHN0aWNreWAgaXMgbm90IHVuaXZlcnNhbGx5IHN1cHBvcnRlZCBhbmQgd2lsbCBmYWxsIGJhY2sgdG8gYHN0YXRpY2Agd2hlbiB1bmF2YWlsYWJsZS5cbiAgICovXG4gIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydmaXhlZCcsICdhYnNvbHV0ZScsICdzdGlja3knLCAnc3RhdGljJywgJ3JlbGF0aXZlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUFwcEJhcidcbn0pKEFwcEJhcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMilcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJyZWd1bGFyXCJgLiAqL1xuICAgIHJlZ3VsYXI6IHRoZW1lLm1peGlucy50b29sYmFyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImRlbnNlXCJgLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfVxuICB9O1xufTtcbnZhciBUb29sYmFyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb29sYmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3JlZ3VsYXInIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW3ZhcmlhbnRdLCAhZGlzYWJsZUd1dHRlcnMgJiYgY2xhc3Nlcy5ndXR0ZXJzLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG9vbGJhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZGlzYWJsZXMgZ3V0dGVyIHBhZGRpbmcuXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3JlZ3VsYXInLCAnZGVuc2UnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVG9vbGJhcidcbn0pKFRvb2xiYXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICBwYWRkaW5nOiAxMixcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgLy8gRXhwbGljaXRseSBzZXQgdGhlIGRlZmF1bHQgdmFsdWUgdG8gc29sdmUgYSBidWcgb24gSUUgMTEuXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwic3RhcnRcImAuICovXG4gICAgZWRnZVN0YXJ0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiAtMTIsXG4gICAgICAnJHNpemVTbWFsbCYnOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IC0zXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVkZ2U9XCJlbmRcImAuICovXG4gICAgZWRnZUVuZDoge1xuICAgICAgbWFyZ2luUmlnaHQ6IC0xMixcbiAgICAgICckc2l6ZVNtYWxsJic6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC0zXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogMyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTgpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjaGlsZHJlbiBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvY29tcG9uZW50cy9pY29ucy8pIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb25cbiAqIHJlZ2FyZGluZyB0aGUgYXZhaWxhYmxlIGljb24gb3B0aW9ucy5cbiAqL1xuXG52YXIgSWNvbkJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbkJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkZWRnZSA9IHByb3BzLmVkZ2UsXG4gICAgICBlZGdlID0gX3Byb3BzJGVkZ2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVkZ2UsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZWRnZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJzaXplXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgc2l6ZSAhPT0gJ21lZGl1bScgJiYgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCBlZGdlID09PSAnc3RhcnQnICYmIGNsYXNzZXMuZWRnZVN0YXJ0LCBlZGdlID09PSAnZW5kJyAmJiBjbGFzc2VzLmVkZ2VFbmQsIGNsYXNzTmFtZSksXG4gICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZm91bmQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgcHJvdmlkaW5nIGFuIG9uQ2xpY2sgZXZlbnQgbGlzdGVuZXIgJyArICd0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ0ZpcmVmb3ggd2lsbCBuZXZlciB0cmlnZ2VyIHRoZSBldmVudC4nLCAnWW91IHNob3VsZCBtb3ZlIHRoZSBvbkNsaWNrIGxpc3RlbmVyIHRvIHRoZSBwYXJlbnQgYnV0dG9uIGVsZW1lbnQuJywgJ2h0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzk1NyddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgdHJ1ZS5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nXG59KShJY29uQnV0dG9uKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVTdmdJY29uO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQG1hdGVyaWFsLXVpL2NvcmUvU3ZnSWNvblwiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oX3JlYWN0LmRlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZlxuICAgIH0pLCBwYXRoKTtcbiAgfSkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5tdWlOYW1lID0gX1N2Z0ljb24uZGVmYXVsdC5tdWlOYW1lO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0RyYXdlcic7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB7IGlzTXVpRWxlbWVudCwgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgKG5vcm1hbGx5IHJvb3QpIGBjb21wb25lbnRgIGVsZW1lbnQuIE1heSBiZSB3cmFwcGVkIGJ5IGEgYGNvbnRhaW5lcmAuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nVG9wOiA4LFxuICAgICAgcGFkZGluZ0JvdHRvbTogOCxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZFxuICAgICAgfSxcbiAgICAgICcmJHNlbGVjdGVkLCAmJHNlbGVjdGVkOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbnRhaW5lcmAgZWxlbWVudCBpZiBgY2hpbGRyZW5gIGluY2x1ZGVzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmAuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAncyBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYCBwcm9wZXJ0eSBpZiBgYnV0dG9uPXt0cnVlfWAuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY29tcG9uZW50YCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXZpZGVyPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcjoge1xuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKSxcbiAgICAgIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTYsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBidXR0b249e3RydWV9YC4gKi9cbiAgICBidXR0b246IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIHNlY29uZGFyeUFjdGlvbjoge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogNDhcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge31cbiAgfTtcbn07XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogVXNlcyBhbiBhZGRpdGlvbmFsIGNvbnRhaW5lciBjb21wb25lbnQgaWYgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAqL1xuXG52YXIgTGlzdEl0ZW0gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbkl0ZW1zID0gcHJvcHMuYWxpZ25JdGVtcyxcbiAgICAgIGFsaWduSXRlbXMgPSBfcHJvcHMkYWxpZ25JdGVtcyA9PT0gdm9pZCAwID8gJ2NlbnRlcicgOiBfcHJvcHMkYWxpZ25JdGVtcyxcbiAgICAgIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIF9wcm9wcyRidXR0b24gPSBwcm9wcy5idXR0b24sXG4gICAgICBidXR0b24gPSBfcHJvcHMkYnV0dG9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRidXR0b24sXG4gICAgICBjaGlsZHJlblByb3AgPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50UHJvcCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRDb250YWluZXJDb21wbyA9IHByb3BzLkNvbnRhaW5lckNvbXBvbmVudCxcbiAgICAgIENvbnRhaW5lckNvbXBvbmVudCA9IF9wcm9wcyRDb250YWluZXJDb21wbyA9PT0gdm9pZCAwID8gJ2xpJyA6IF9wcm9wcyRDb250YWluZXJDb21wbyxcbiAgICAgIF9wcm9wcyRDb250YWluZXJQcm9wcyA9IHByb3BzLkNvbnRhaW5lclByb3BzO1xuICBfcHJvcHMkQ29udGFpbmVyUHJvcHMgPSBfcHJvcHMkQ29udGFpbmVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJENvbnRhaW5lclByb3BzO1xuXG4gIHZhciBDb250YWluZXJDbGFzc05hbWUgPSBfcHJvcHMkQ29udGFpbmVyUHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ29udGFpbmVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzJENvbnRhaW5lclByb3BzLCBbXCJjbGFzc05hbWVcIl0pLFxuICAgICAgZGVuc2UgPSBwcm9wcy5kZW5zZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkZGl2aWRlciA9IHByb3BzLmRpdmlkZXIsXG4gICAgICBkaXZpZGVyID0gX3Byb3BzJGRpdmlkZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpdmlkZXIsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkID0gX3Byb3BzJHNlbGVjdGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3RlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYnV0dG9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiQ29udGFpbmVyQ29tcG9uZW50XCIsIFwiQ29udGFpbmVyUHJvcHNcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXZpZGVyXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwic2VsZWN0ZWRcIl0pO1xuXG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIHZhciBjaGlsZENvbnRleHQgPSB7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtczogYWxpZ25JdGVtc1xuICB9O1xuICB2YXIgbGlzdEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobGlzdEl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnTWF0ZXJpYWwtVUk6IHVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBMaXN0SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICB2YXIgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG4gIHZhciBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgaXNNdWlFbGVtZW50KGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBbJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ10pO1xuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBsaXN0SXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZU93blJlZiwgcmVmKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2hpbGRDb250ZXh0LmRlbnNlICYmIGNsYXNzZXMuZGVuc2UsICFkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmd1dHRlcnMsIGRpdmlkZXIgJiYgY2xhc3Nlcy5kaXZpZGVyLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBidXR0b24gJiYgY2xhc3Nlcy5idXR0b24sIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiBjbGFzc2VzLmFsaWduSXRlbXNGbGV4U3RhcnQsIGhhc1NlY29uZGFyeUFjdGlvbiAmJiBjbGFzc2VzLnNlY29uZGFyeUFjdGlvbiwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCwgY2xhc3NOYW1lKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgfSwgb3RoZXIpO1xuXG4gIHZhciBDb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdsaSc7XG5cbiAgaWYgKGJ1dHRvbikge1xuICAgIGNvbXBvbmVudFByb3BzLmNvbXBvbmVudCA9IGNvbXBvbmVudFByb3AgfHwgJ2Rpdic7XG4gICAgY29tcG9uZW50UHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKTtcbiAgICBDb21wb25lbnQgPSBCdXR0b25CYXNlO1xuICB9XG5cbiAgaWYgKGhhc1NlY29uZGFyeUFjdGlvbikge1xuICAgIC8vIFVzZSBkaXYgYnkgZGVmYXVsdC5cbiAgICBDb21wb25lbnQgPSAhY29tcG9uZW50UHJvcHMuY29tcG9uZW50ICYmICFjb21wb25lbnRQcm9wID8gJ2RpdicgOiBDb21wb25lbnQ7IC8vIEF2b2lkIG5lc3Rpbmcgb2YgbGkgPiBsaS5cblxuICAgIGlmIChDb250YWluZXJDb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgIGlmIChDb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgICAgQ29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFByb3BzLmNvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgICBjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPSAnZGl2JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNoaWxkQ29udGV4dFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jb250YWluZXIsIENvbnRhaW5lckNsYXNzTmFtZSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIENvbnRhaW5lclByb3BzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCBjaGlsZHJlbiksIGNoaWxkcmVuLnBvcCgpKSk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHRcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBjb21wb25lbnRQcm9wcyksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlciddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgaXRlbSB3aWxsIGJlIGEgYnV0dG9uICh1c2luZyBgQnV0dG9uQmFzZWApLlxuICAgKi9cbiAgYnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC4gSWYgYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHVzZWQgaXQgbXVzdFxuICAgKiBiZSB0aGUgbGFzdCBjaGlsZC5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbik7IC8vIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZpbmRMYXN0SW5kZXgoaXNMaXN0SXRlbVNlY29uZGFyeUFjdGlvbilcblxuICAgIHZhciBzZWNvbmRhcnlBY3Rpb25JbmRleCA9IC0xO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGlzTXVpRWxlbWVudChjaGlsZCwgWydMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiddKSkge1xuICAgICAgICBzZWNvbmRhcnlBY3Rpb25JbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gIGlzIExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIHRoZSBsYXN0IGNoaWxkIG9mIExpc3RJdGVtXG5cblxuICAgIGlmIChzZWNvbmRhcnlBY3Rpb25JbmRleCAhPT0gLTEgJiYgc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IGNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiB5b3UgdXNlZCBhbiBlbGVtZW50IGFmdGVyIExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLiAnICsgJ0ZvciBMaXN0SXRlbSB0byBkZXRlY3QgdGhhdCBpdCBoYXMgYSBzZWNvbmRhcnkgYWN0aW9uICcgKyAneW91IG11c3QgcGFzcyBpdCBhcyB0aGUgbGFzdCBjaGlsZCB0byBMaXN0SXRlbS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBCeSBkZWZhdWx0LCBpdCdzIGEgYGxpYCB3aGVuIGBidXR0b25gIGlzIGBmYWxzZWAgYW5kIGEgYGRpdmAgd2hlbiBgYnV0dG9uYCBpcyBgdHJ1ZWAuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGNvbnRhaW5lciBjb21wb25lbnQgdXNlZCB3aGVuIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAgICovXG4gIENvbnRhaW5lckNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBjb21wb25lbnQgaWYgdXNlZC5cbiAgICovXG4gIENvbnRhaW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW0nXG59KShMaXN0SXRlbSk7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vTGlzdEl0ZW1JY29uJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBtaW5XaWR0aDogNTYsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBBIHNpbXBsZSB3cmFwcGVyIHRvIGFwcGx5IGBMaXN0YCBzdHlsZXMgdG8gYW4gYEljb25gIG9yIGBTdmdJY29uYC5cbiAqL1xuXG52YXIgTGlzdEl0ZW1JY29uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW1JY29uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBJY29uYCwgYFN2Z0ljb25gLFxuICAgKiBvciBhIGBAbWF0ZXJpYWwtdWkvaWNvbnNgIFNWRyBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbUljb24nXG59KShMaXN0SXRlbUljb24pOyIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0xpc3RJdGVtVGV4dCc7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICBtaW5XaWR0aDogMCxcbiAgICBtYXJnaW5Ub3A6IDQsXG4gICAgbWFyZ2luQm90dG9tOiA0XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnRzIGlmIHByaW1hcnkgYW5kIHNlY29uZGFyeSBhcmUgc2V0LiAqL1xuICBtdWx0aWxpbmU6IHtcbiAgICBtYXJnaW5Ub3A6IDYsXG4gICAgbWFyZ2luQm90dG9tOiA2XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnRzIGlmIGRlbnNlLiAqL1xuICBkZW5zZToge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW5zZXQ9e3RydWV9YC4gKi9cbiAgaW5zZXQ6IHtcbiAgICBwYWRkaW5nTGVmdDogNTZcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcHJpbWFyeSBgVHlwb2dyYXBoeWAgY29tcG9uZW50LiAqL1xuICBwcmltYXJ5OiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2Vjb25kYXJ5IGBUeXBvZ3JhcGh5YCBjb21wb25lbnQuICovXG4gIHNlY29uZGFyeToge31cbn07XG52YXIgTGlzdEl0ZW1UZXh0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbVRleHQocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVUeXBvZ3JhID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVR5cG9ncmEsXG4gICAgICBfcHJvcHMkaW5zZXQgPSBwcm9wcy5pbnNldCxcbiAgICAgIGluc2V0ID0gX3Byb3BzJGluc2V0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnNldCxcbiAgICAgIHByaW1hcnlQcm9wID0gcHJvcHMucHJpbWFyeSxcbiAgICAgIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy5wcmltYXJ5VHlwb2dyYXBoeVByb3BzLFxuICAgICAgc2Vjb25kYXJ5UHJvcCA9IHByb3BzLnNlY29uZGFyeSxcbiAgICAgIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyA9IHByb3BzLnNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcImluc2V0XCIsIFwicHJpbWFyeVwiLCBcInByaW1hcnlUeXBvZ3JhcGh5UHJvcHNcIiwgXCJzZWNvbmRhcnlcIiwgXCJzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpLFxuICAgICAgZGVuc2UgPSBfUmVhY3QkdXNlQ29udGV4dC5kZW5zZTtcblxuICB2YXIgcHJpbWFyeSA9IHByaW1hcnlQcm9wICE9IG51bGwgPyBwcmltYXJ5UHJvcCA6IGNoaWxkcmVuO1xuXG4gIGlmIChwcmltYXJ5ICE9IG51bGwgJiYgcHJpbWFyeS50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHByaW1hcnkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGRlbnNlID8gJ2JvZHkyJyA6ICdib2R5MScsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJpbWFyeSxcbiAgICAgIGNvbXBvbmVudDogXCJzcGFuXCJcbiAgICB9LCBwcmltYXJ5VHlwb2dyYXBoeVByb3BzKSwgcHJpbWFyeSk7XG4gIH1cblxuICB2YXIgc2Vjb25kYXJ5ID0gc2Vjb25kYXJ5UHJvcDtcblxuICBpZiAoc2Vjb25kYXJ5ICE9IG51bGwgJiYgc2Vjb25kYXJ5LnR5cGUgIT09IFR5cG9ncmFwaHkgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgc2Vjb25kYXJ5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiXG4gICAgfSwgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzKSwgc2Vjb25kYXJ5KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBkZW5zZSAmJiBjbGFzc2VzLmRlbnNlLCBpbnNldCAmJiBjbGFzc2VzLmluc2V0LCBwcmltYXJ5ICYmIHNlY29uZGFyeSAmJiBjbGFzc2VzLm11bHRpbGluZSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHByaW1hcnksIHNlY29uZGFyeSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtVGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgdGhlIGBwcmltYXJ5YCBwcm9wZXJ0eS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd29uJ3QgYmUgd3JhcHBlZCBieSBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgdG8gcmVuZGVyIGFuIGFsdGVybmF0aXZlIFR5cG9ncmFwaHkgdmFyaWFudCBieSB3cmFwcGluZ1xuICAgKiB0aGUgYGNoaWxkcmVuYCAob3IgYHByaW1hcnlgKSB0ZXh0LCBhbmQgb3B0aW9uYWwgYHNlY29uZGFyeWAgdGV4dFxuICAgKiB3aXRoIHRoZSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd2lsbCBiZSBpbmRlbnRlZC5cbiAgICogVGhpcyBzaG91bGQgYmUgdXNlZCBpZiB0aGVyZSBpcyBubyBsZWZ0IGF2YXRhciBvciBsZWZ0IGljb24uXG4gICAqL1xuICBpbnNldDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHByaW1hcnk6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgcHJpbWFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzZWNvbmRhcnkgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgc2Vjb25kYXJ5OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHNlY29uZGFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbVRleHQnXG59KShMaXN0SXRlbVRleHQpOyIsInZhciBwdXJwbGUgPSB7XG4gIDUwOiAnI2YzZTVmNScsXG4gIDEwMDogJyNlMWJlZTcnLFxuICAyMDA6ICcjY2U5M2Q4JyxcbiAgMzAwOiAnI2JhNjhjOCcsXG4gIDQwMDogJyNhYjQ3YmMnLFxuICA1MDA6ICcjOWMyN2IwJyxcbiAgNjAwOiAnIzhlMjRhYScsXG4gIDcwMDogJyM3YjFmYTInLFxuICA4MDA6ICcjNmExYjlhJyxcbiAgOTAwOiAnIzRhMTQ4YycsXG4gIEExMDA6ICcjZWE4MGZjJyxcbiAgQTIwMDogJyNlMDQwZmInLFxuICBBNDAwOiAnI2Q1MDBmOScsXG4gIEE3MDA6ICcjYWEwMGZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHB1cnBsZTsiLCJ2YXIgZGVlcFB1cnBsZSA9IHtcbiAgNTA6ICcjZWRlN2Y2JyxcbiAgMTAwOiAnI2QxYzRlOScsXG4gIDIwMDogJyNiMzlkZGInLFxuICAzMDA6ICcjOTU3NWNkJyxcbiAgNDAwOiAnIzdlNTdjMicsXG4gIDUwMDogJyM2NzNhYjcnLFxuICA2MDA6ICcjNWUzNWIxJyxcbiAgNzAwOiAnIzUxMmRhOCcsXG4gIDgwMDogJyM0NTI3YTAnLFxuICA5MDA6ICcjMzExYjkyJyxcbiAgQTEwMDogJyNiMzg4ZmYnLFxuICBBMjAwOiAnIzdjNGRmZicsXG4gIEE0MDA6ICcjNjUxZmZmJyxcbiAgQTcwMDogJyM2MjAwZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZGVlcFB1cnBsZTsiLCJ2YXIgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJ2YXIgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwidmFyIGN5YW4gPSB7XG4gIDUwOiAnI2UwZjdmYScsXG4gIDEwMDogJyNiMmViZjInLFxuICAyMDA6ICcjODBkZWVhJyxcbiAgMzAwOiAnIzRkZDBlMScsXG4gIDQwMDogJyMyNmM2ZGEnLFxuICA1MDA6ICcjMDBiY2Q0JyxcbiAgNjAwOiAnIzAwYWNjMScsXG4gIDcwMDogJyMwMDk3YTcnLFxuICA4MDA6ICcjMDA4MzhmJyxcbiAgOTAwOiAnIzAwNjA2NCcsXG4gIEExMDA6ICcjODRmZmZmJyxcbiAgQTIwMDogJyMxOGZmZmYnLFxuICBBNDAwOiAnIzAwZTVmZicsXG4gIEE3MDA6ICcjMDBiOGQ0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGN5YW47IiwidmFyIHRlYWwgPSB7XG4gIDUwOiAnI2UwZjJmMScsXG4gIDEwMDogJyNiMmRmZGInLFxuICAyMDA6ICcjODBjYmM0JyxcbiAgMzAwOiAnIzRkYjZhYycsXG4gIDQwMDogJyMyNmE2OWEnLFxuICA1MDA6ICcjMDA5Njg4JyxcbiAgNjAwOiAnIzAwODk3YicsXG4gIDcwMDogJyMwMDc5NmInLFxuICA4MDA6ICcjMDA2OTVjJyxcbiAgOTAwOiAnIzAwNGQ0MCcsXG4gIEExMDA6ICcjYTdmZmViJyxcbiAgQTIwMDogJyM2NGZmZGEnLFxuICBBNDAwOiAnIzFkZTliNicsXG4gIEE3MDA6ICcjMDBiZmE1J1xufTtcbmV4cG9ydCBkZWZhdWx0IHRlYWw7IiwidmFyIGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJ2YXIgbGlnaHRHcmVlbiA9IHtcbiAgNTA6ICcjZjFmOGU5JyxcbiAgMTAwOiAnI2RjZWRjOCcsXG4gIDIwMDogJyNjNWUxYTUnLFxuICAzMDA6ICcjYWVkNTgxJyxcbiAgNDAwOiAnIzljY2M2NScsXG4gIDUwMDogJyM4YmMzNGEnLFxuICA2MDA6ICcjN2NiMzQyJyxcbiAgNzAwOiAnIzY4OWYzOCcsXG4gIDgwMDogJyM1NThiMmYnLFxuICA5MDA6ICcjMzM2OTFlJyxcbiAgQTEwMDogJyNjY2ZmOTAnLFxuICBBMjAwOiAnI2IyZmY1OScsXG4gIEE0MDA6ICcjNzZmZjAzJyxcbiAgQTcwMDogJyM2NGRkMTcnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRHcmVlbjsiLCJ2YXIgbGltZSA9IHtcbiAgNTA6ICcjZjlmYmU3JyxcbiAgMTAwOiAnI2YwZjRjMycsXG4gIDIwMDogJyNlNmVlOWMnLFxuICAzMDA6ICcjZGNlNzc1JyxcbiAgNDAwOiAnI2Q0ZTE1NycsXG4gIDUwMDogJyNjZGRjMzknLFxuICA2MDA6ICcjYzBjYTMzJyxcbiAgNzAwOiAnI2FmYjQyYicsXG4gIDgwMDogJyM5ZTlkMjQnLFxuICA5MDA6ICcjODI3NzE3JyxcbiAgQTEwMDogJyNmNGZmODEnLFxuICBBMjAwOiAnI2VlZmY0MScsXG4gIEE0MDA6ICcjYzZmZjAwJyxcbiAgQTcwMDogJyNhZWVhMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGltZTsiLCJ2YXIgeWVsbG93ID0ge1xuICA1MDogJyNmZmZkZTcnLFxuICAxMDA6ICcjZmZmOWM0JyxcbiAgMjAwOiAnI2ZmZjU5ZCcsXG4gIDMwMDogJyNmZmYxNzYnLFxuICA0MDA6ICcjZmZlZTU4JyxcbiAgNTAwOiAnI2ZmZWIzYicsXG4gIDYwMDogJyNmZGQ4MzUnLFxuICA3MDA6ICcjZmJjMDJkJyxcbiAgODAwOiAnI2Y5YTgyNScsXG4gIDkwMDogJyNmNTdmMTcnLFxuICBBMTAwOiAnI2ZmZmY4ZCcsXG4gIEEyMDA6ICcjZmZmZjAwJyxcbiAgQTQwMDogJyNmZmVhMDAnLFxuICBBNzAwOiAnI2ZmZDYwMCdcbn07XG5leHBvcnQgZGVmYXVsdCB5ZWxsb3c7IiwidmFyIGFtYmVyID0ge1xuICA1MDogJyNmZmY4ZTEnLFxuICAxMDA6ICcjZmZlY2IzJyxcbiAgMjAwOiAnI2ZmZTA4MicsXG4gIDMwMDogJyNmZmQ1NGYnLFxuICA0MDA6ICcjZmZjYTI4JyxcbiAgNTAwOiAnI2ZmYzEwNycsXG4gIDYwMDogJyNmZmIzMDAnLFxuICA3MDA6ICcjZmZhMDAwJyxcbiAgODAwOiAnI2ZmOGYwMCcsXG4gIDkwMDogJyNmZjZmMDAnLFxuICBBMTAwOiAnI2ZmZTU3ZicsXG4gIEEyMDA6ICcjZmZkNzQwJyxcbiAgQTQwMDogJyNmZmM0MDAnLFxuICBBNzAwOiAnI2ZmYWIwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBhbWJlcjsiLCJ2YXIgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwidmFyIGRlZXBPcmFuZ2UgPSB7XG4gIDUwOiAnI2ZiZTllNycsXG4gIDEwMDogJyNmZmNjYmMnLFxuICAyMDA6ICcjZmZhYjkxJyxcbiAgMzAwOiAnI2ZmOGE2NScsXG4gIDQwMDogJyNmZjcwNDMnLFxuICA1MDA6ICcjZmY1NzIyJyxcbiAgNjAwOiAnI2Y0NTExZScsXG4gIDcwMDogJyNlNjRhMTknLFxuICA4MDA6ICcjZDg0MzE1JyxcbiAgOTAwOiAnI2JmMzYwYycsXG4gIEExMDA6ICcjZmY5ZTgwJyxcbiAgQTIwMDogJyNmZjZlNDAnLFxuICBBNDAwOiAnI2ZmM2QwMCcsXG4gIEE3MDA6ICcjZGQyYzAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGRlZXBPcmFuZ2U7IiwidmFyIGJyb3duID0ge1xuICA1MDogJyNlZmViZTknLFxuICAxMDA6ICcjZDdjY2M4JyxcbiAgMjAwOiAnI2JjYWFhNCcsXG4gIDMwMDogJyNhMTg4N2YnLFxuICA0MDA6ICcjOGQ2ZTYzJyxcbiAgNTAwOiAnIzc5NTU0OCcsXG4gIDYwMDogJyM2ZDRjNDEnLFxuICA3MDA6ICcjNWQ0MDM3JyxcbiAgODAwOiAnIzRlMzQyZScsXG4gIDkwMDogJyMzZTI3MjMnLFxuICBBMTAwOiAnI2Q3Y2NjOCcsXG4gIEEyMDA6ICcjYmNhYWE0JyxcbiAgQTQwMDogJyM4ZDZlNjMnLFxuICBBNzAwOiAnIzVkNDAzNydcbn07XG5leHBvcnQgZGVmYXVsdCBicm93bjsiLCJ2YXIgYmx1ZUdyZXkgPSB7XG4gIDUwOiAnI2VjZWZmMScsXG4gIDEwMDogJyNjZmQ4ZGMnLFxuICAyMDA6ICcjYjBiZWM1JyxcbiAgMzAwOiAnIzkwYTRhZScsXG4gIDQwMDogJyM3ODkwOWMnLFxuICA1MDA6ICcjNjA3ZDhiJyxcbiAgNjAwOiAnIzU0NmU3YScsXG4gIDcwMDogJyM0NTVhNjQnLFxuICA4MDA6ICcjMzc0NzRmJyxcbiAgOTAwOiAnIzI2MzIzOCcsXG4gIEExMDA6ICcjY2ZkOGRjJyxcbiAgQTIwMDogJyNiMGJlYzUnLFxuICBBNDAwOiAnIzc4OTA5YycsXG4gIEE3MDA6ICcjNDU1YTY0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWVHcmV5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgd2lkdGg6IDQwLFxuICAgICAgaGVpZ2h0OiA0MCxcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZXJlIGFyZSBjaGlsZHJlbiBhbmQgbm90IGBzcmNgIG9yIGBzcmNTZXRgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbWcgZWxlbWVudCBpZiBlaXRoZXIgYHNyY2Agb3IgYHNyY1NldGAgaXMgZGVmaW5lZC4gKi9cbiAgICBpbWc6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAvLyBIYW5kbGUgbm9uLXNxdWFyZSBpbWFnZS4gVGhlIHByb3BlcnR5IGlzbid0IHN1cHBvcnRlZCBieSBJRSAxMS5cbiAgICAgIG9iamVjdEZpdDogJ2NvdmVyJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgQXZhdGFyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBdmF0YXIocHJvcHMsIHJlZikge1xuICB2YXIgYWx0ID0gcHJvcHMuYWx0LFxuICAgICAgY2hpbGRyZW5Qcm9wID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjaGlsZHJlbkNsYXNzTmFtZVByb3AgPSBwcm9wcy5jaGlsZHJlbkNsYXNzTmFtZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBpbWdQcm9wcyA9IHByb3BzLmltZ1Byb3BzLFxuICAgICAgc2l6ZXMgPSBwcm9wcy5zaXplcyxcbiAgICAgIHNyYyA9IHByb3BzLnNyYyxcbiAgICAgIHNyY1NldCA9IHByb3BzLnNyY1NldCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbHRcIiwgXCJjaGlsZHJlblwiLCBcImNoaWxkcmVuQ2xhc3NOYW1lXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImltZ1Byb3BzXCIsIFwic2l6ZXNcIiwgXCJzcmNcIiwgXCJzcmNTZXRcIl0pO1xuXG4gIHZhciBjaGlsZHJlbiA9IG51bGw7XG4gIHZhciBpbWcgPSBzcmMgfHwgc3JjU2V0O1xuXG4gIGlmIChpbWcpIHtcbiAgICBjaGlsZHJlbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgX2V4dGVuZHMoe1xuICAgICAgYWx0OiBhbHQsXG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHNyY1NldDogc3JjU2V0LFxuICAgICAgc2l6ZXM6IHNpemVzLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmltZ1xuICAgIH0sIGltZ1Byb3BzKSk7XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5DbGFzc05hbWVQcm9wICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuUHJvcCkpIHtcbiAgICBjaGlsZHJlbiA9IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlblByb3AsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjaGlsZHJlbkNsYXNzTmFtZVByb3AsIGNoaWxkcmVuUHJvcC5wcm9wcy5jbGFzc05hbWUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlblByb3A7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLnN5c3RlbSwgIWltZyAmJiBjbGFzc2VzLmNvbG9yRGVmYXVsdCwgY2xhc3NOYW1lUHJvcCksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEF2YXRhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBVc2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYHNyY2Agb3IgYHNyY1NldGAgdG9cbiAgICogcHJvdmlkZSBhbiBhbHQgYXR0cmlidXRlIGZvciB0aGUgcmVuZGVyZWQgYGltZ2AgZWxlbWVudC5cbiAgICovXG4gIGFsdDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlZCB0byByZW5kZXIgaWNvbiBvciB0ZXh0IGVsZW1lbnRzIGluc2lkZSB0aGUgQXZhdGFyLlxuICAgKiBgc3JjYCBhbmQgYGFsdGAgcHJvcHMgd2lsbCBub3QgYmUgdXNlZCBhbmQgbm8gYGltZ2Agd2lsbFxuICAgKiBiZSByZW5kZXJlZCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBUaGlzIGNhbiBiZSBhbiBlbGVtZW50LCBvciBqdXN0IGEgc3RyaW5nLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFRoZSBjbGFzc05hbWUgb2YgdGhlIGNoaWxkIGVsZW1lbnQuXG4gICAqIFVzZWQgYnkgQ2hpcCBhbmQgTGlzdEl0ZW1JY29uIHRvIHN0eWxlIHRoZSBBdmF0YXIgaWNvbi5cbiAgICovXG4gIGNoaWxkcmVuQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBpbWdgIGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudFxuICAgKiBpcyB1c2VkIHRvIGRpc3BsYXkgYW4gaW1hZ2UuXG4gICAqL1xuICBpbWdQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGBzaXplc2AgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICovXG4gIHNpemVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgYHNyY2AgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICovXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGBzcmNTZXRgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzcmNTZXQ6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQXZhdGFyJ1xufSkoQXZhdGFyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbnZhciBSQURJVVMgPSAxMDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYWRnZSBgc3BhbmAgZWxlbWVudC4gKi9cbiAgICBiYWRnZToge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgYWxpZ25Db250ZW50OiAnY2VudGVyJyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMiksXG4gICAgICBtaW5XaWR0aDogUkFESVVTICogMixcbiAgICAgIHBhZGRpbmc6ICcwIDRweCcsXG4gICAgICBoZWlnaHQ6IFJBRElVUyAqIDIsXG4gICAgICBib3JkZXJSYWRpdXM6IFJBRElVUyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb2xvcixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHRDb2xvcixcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIC8vIFJlbmRlciB0aGUgYmFkZ2Ugb24gdG9wIG9mIHBvdGVudGlhbCByaXBwbGVzLlxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW5cbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IuY29udHJhc3RUZXh0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYWRnZSBgc3BhbmAgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gICAgaW52aXNpYmxlOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICAgICAgfSksXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCAtNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZG90XCJgLiAqL1xuICAgIGRvdDoge1xuICAgICAgaGVpZ2h0OiA2LFxuICAgICAgbWluV2lkdGg6IDYsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfVxuICB9O1xufTtcbnZhciBCYWRnZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFkZ2UocHJvcHMsIHJlZikge1xuICB2YXIgYmFkZ2VDb250ZW50ID0gcHJvcHMuYmFkZ2VDb250ZW50LFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudFByb3AgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3BhbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW52aXNpYmxlUHJvcCA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIF9wcm9wcyRtYXggPSBwcm9wcy5tYXgsXG4gICAgICBtYXggPSBfcHJvcHMkbWF4ID09PSB2b2lkIDAgPyA5OSA6IF9wcm9wcyRtYXgsXG4gICAgICBfcHJvcHMkc2hvd1plcm8gPSBwcm9wcy5zaG93WmVybyxcbiAgICAgIHNob3daZXJvID0gX3Byb3BzJHNob3daZXJvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzaG93WmVybyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImJhZGdlQ29udGVudFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiaW52aXNpYmxlXCIsIFwibWF4XCIsIFwic2hvd1plcm9cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgaW52aXNpYmxlID0gaW52aXNpYmxlUHJvcDtcblxuICBpZiAoaW52aXNpYmxlUHJvcCA9PSBudWxsICYmIChiYWRnZUNvbnRlbnQgPT09IDAgJiYgIXNob3daZXJvIHx8IGJhZGdlQ29udGVudCA9PSBudWxsICYmIHZhcmlhbnQgIT09ICdkb3QnKSkge1xuICAgIGludmlzaWJsZSA9IHRydWU7XG4gIH1cblxuICB2YXIgZGlzcGxheVZhbHVlID0gJyc7XG5cbiAgaWYgKHZhcmlhbnQgIT09ICdkb3QnKSB7XG4gICAgZGlzcGxheVZhbHVlID0gYmFkZ2VDb250ZW50ID4gbWF4ID8gXCJcIi5jb25jYXQobWF4LCBcIitcIikgOiBiYWRnZUNvbnRlbnQ7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYmFkZ2UsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIGludmlzaWJsZSAmJiBjbGFzc2VzLmludmlzaWJsZSwgdmFyaWFudCA9PT0gJ2RvdCcgJiYgY2xhc3Nlcy5kb3QpXG4gIH0sIGRpc3BsYXlWYWx1ZSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWRnZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCByZW5kZXJlZCB3aXRoaW4gdGhlIGJhZGdlLlxuICAgKi9cbiAgYmFkZ2VDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGJhZGdlIHdpbGwgYmUgYWRkZWQgcmVsYXRpdmUgdG8gdGhpcyBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWRnZSB3aWxsIGJlIGludmlzaWJsZS5cbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1heCBjb3VudCB0byBzaG93LlxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBiYWRnZSBpcyBoaWRkZW4gd2hlbiBgYmFkZ2VDb250ZW50YCBpcyB6ZXJvLlxuICAgKi9cbiAgc2hvd1plcm86IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdkb3QnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQmFkZ2UnXG59KShCYWRnZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBoZWlnaHQ6IDU2LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXJcbiAgICB9XG4gIH07XG59O1xudmFyIEJvdHRvbU5hdmlnYXRpb24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJvdHRvbU5hdmlnYXRpb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBfcHJvcHMkc2hvd0xhYmVscyA9IHByb3BzLnNob3dMYWJlbHMsXG4gICAgICBzaG93TGFiZWxzID0gX3Byb3BzJHNob3dMYWJlbHMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNob3dMYWJlbHMsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcIm9uQ2hhbmdlXCIsIFwic2hvd0xhYmVsc1wiLCBcInZhbHVlXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGNoaWxkSW5kZXgpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjaGlsZC50eXBlICE9PSBSZWFjdC5GcmFnbWVudCwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBCb3R0b21OYXZpZ2F0aW9uIGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgdmFyIGNoaWxkVmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkID8gY2hpbGRJbmRleCA6IGNoaWxkLnByb3BzLnZhbHVlO1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIHNlbGVjdGVkOiBjaGlsZFZhbHVlID09PSB2YWx1ZSxcbiAgICAgIHNob3dMYWJlbDogY2hpbGQucHJvcHMuc2hvd0xhYmVsICE9PSB1bmRlZmluZWQgPyBjaGlsZC5wcm9wcy5zaG93TGFiZWwgOiBzaG93TGFiZWxzLFxuICAgICAgdmFsdWU6IGNoaWxkVmFsdWUsXG4gICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICB9KTtcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCb3R0b21OYXZpZ2F0aW9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBXZSBkZWZhdWx0IHRvIHRoZSBpbmRleCBvZiB0aGUgY2hpbGRcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbGwgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gcyB3aWxsIHNob3cgdGhlaXIgbGFiZWxzLlxuICAgKiBCeSBkZWZhdWx0LCBvbmx5IHRoZSBzZWxlY3RlZCBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmAgd2lsbCBzaG93IGl0cyBsYWJlbC5cbiAgICovXG4gIHNob3dMYWJlbHM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uJ1xufSkoQm90dG9tTmF2aWdhdGlvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB1bnN1cHBvcnRlZFByb3AgZnJvbSAnLi4vdXRpbHMvdW5zdXBwb3J0ZWRQcm9wJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICdwYWRkaW5nLXRvcCddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgICAgfSksXG4gICAgICBwYWRkaW5nOiAnNnB4IDEycHggOHB4JyxcbiAgICAgIG1pbldpZHRoOiA4MCxcbiAgICAgIG1heFdpZHRoOiAxNjgsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZsZXg6ICcxJyxcbiAgICAgICcmJGljb25Pbmx5Jzoge1xuICAgICAgICBwYWRkaW5nVG9wOiAxNlxuICAgICAgfSxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiA2LFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBzZWxlY3RlZC4gKi9cbiAgICBzZWxlY3RlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaG93TGFiZWw9e2ZhbHNlfWAgYW5kIG5vdCBzZWxlY3RlZC4gKi9cbiAgICBpY29uT25seToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3BhbiBlbGVtZW50IHRoYXQgd3JhcHMgdGhlIGljb24gYW5kIGxhYmVsLiAqL1xuICAgIHdyYXBwZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGFiZWwncyBzcGFuIGVsZW1lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zaXRpb246ICdmb250LXNpemUgMC4ycywgb3BhY2l0eSAwLjJzJyxcbiAgICAgIHRyYW5zaXRpb25EZWxheTogJzAuMXMnLFxuICAgICAgJyYkaWNvbk9ubHknOiB7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogJzBzJ1xuICAgICAgfSxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgQm90dG9tTmF2aWdhdGlvbkFjdGlvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm90dG9tTmF2aWdhdGlvbkFjdGlvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICBzaG93TGFiZWwgPSBwcm9wcy5zaG93TGFiZWwsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJzZWxlY3RlZFwiLCBcInNob3dMYWJlbFwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHNlbGVjdGVkICYmIGNsYXNzZXMuc2VsZWN0ZWQsICFzaG93TGFiZWwgJiYgIXNlbGVjdGVkICYmIGNsYXNzZXMuaWNvbk9ubHksIGNsYXNzTmFtZSksXG4gICAgZm9jdXNSaXBwbGU6IHRydWUsXG4gICAgb25DbGljazogaGFuZGxlQ2hhbmdlXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53cmFwcGVyXG4gIH0sIGljb24sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCwgIXNob3dMYWJlbCAmJiAhc2VsZWN0ZWQgJiYgY2xhc3Nlcy5pY29uT25seSlcbiAgfSwgbGFiZWwpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJvdHRvbU5hdmlnYXRpb25BY3Rpb24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpc24ndCBzdXBwb3J0ZWQuXG4gICAqIFVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcGVydHkgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uYCB3aWxsIHNob3cgaXRzIGxhYmVsLlxuICAgKiBCeSBkZWZhdWx0LCBvbmx5IHRoZSBzZWxlY3RlZCBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmBcbiAgICogaW5zaWRlIGBCb3R0b21OYXZpZ2F0aW9uYCB3aWxsIHNob3cgaXRzIGxhYmVsLlxuICAgKi9cbiAgc2hvd0xhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIHlvdXIgb3duIHZhbHVlLiBPdGhlcndpc2UsIHdlIGZhbGxiYWNrIHRvIHRoZSBjaGlsZCBwb3NpdGlvbiBpbmRleC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nXG59KShCb3R0b21OYXZpZ2F0aW9uQWN0aW9uKTsiLCJpbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG5mdW5jdGlvbiBvbWl0KGlucHV0LCBmaWVsZHMpIHtcbiAgdmFyIG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhpbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChmaWVsZHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtwcm9wXSA9IGlucHV0W3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNzcyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBvdXRwdXQgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcblxuICAgIGlmIChwcm9wcy5jc3MpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbWVyZ2Uob3V0cHV0LCBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lXG4gICAgICB9LCBwcm9wcy5jc3MpKSksIG9taXQocHJvcHMuY3NzLCBbc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc10pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcywge1xuICAgIGNzczogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWydjc3MnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNzczsiLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3R5bGVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgICAgdmFyIG91dHB1dCA9IHN0eWxlKHByb3BzKTtcblxuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBvdXRwdXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTsgLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2ggdGhhdCBkb2Vzbid0IHlpZWxkIGFueSBwZXJmb3JtYW5jZSBnYWluLlxuICAvLyBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgLy8gICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAvLyAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gIC8vICAgfSk7XG4gIC8vICAgcmV0dXJuIGFjYztcbiAgLy8gfSwge30pO1xuICAvLyBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgLy8gICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gIC8vICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgLy8gICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHJldHVybiBhY2M7XG4gIC8vICAgfSwge30pO1xuICAvLyB9O1xuXG5cbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyk7XG4gIH0sIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJzsgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5cbnZhciB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICBzbTogNjAwLFxuICBtZDogOTYwLFxuICBsZzogMTI4MCxcbiAgeGw6IDE5MjBcbn07XG52YXIgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDogZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXldLCBcInB4KVwiKTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9wcy50aGVtZSwgJ0BtYXRlcmlhbC11aS9zeXN0ZW06IHlvdSBhcmUgY2FsbGluZyBhIHN0eWxlIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSB2YWx1ZS4nKSA6IHZvaWQgMDtcblxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSwgaW5kZXgpIHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgaWYgKF90eXBlb2YocHJvcFZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgX3RoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgYWNjW190aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICB2YXIgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lOiBwcm9wcy50aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcykpO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtKSB7XG4gICAgcmV0dXJuIGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsO1xuICB9LCBvYmopO1xufVxuXG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIHZhciBwcm9wID0gb3B0aW9ucy5wcm9wLFxuICAgICAgX29wdGlvbnMkY3NzUHJvcGVydHkgPSBvcHRpb25zLmNzc1Byb3BlcnR5LFxuICAgICAgY3NzUHJvcGVydHkgPSBfb3B0aW9ucyRjc3NQcm9wZXJ0eSA9PT0gdm9pZCAwID8gb3B0aW9ucy5wcm9wIDogX29wdGlvbnMkY3NzUHJvcGVydHksXG4gICAgICB0aGVtZUtleSA9IG9wdGlvbnMudGhlbWVLZXksXG4gICAgICB0cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICB2YXIgZm4gPSBmdW5jdGlvbiBmbihwcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgdmFyIHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcblxuICAgIHZhciBzdHlsZUZyb21Qcm9wVmFsdWUgPSBmdW5jdGlvbiBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlRmluYWwpIHtcbiAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoZW1lTWFwcGluZykpIHtcbiAgICAgICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHByb3BWYWx1ZUZpbmFsO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIGNzc1Byb3BlcnR5LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZGVmaW5lUHJvcGVydHkoe30sIHByb3AsIHJlc3BvbnNpdmVQcm9wVHlwZSkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcblxuZnVuY3Rpb24gZ2V0Qm9yZGVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlLCBcInB4IHNvbGlkXCIpLmNvbmNhdCh2YWx1ZSA9PT0gMCA/ICcgIWltcG9ydGFudCcgOiAnJyk7XG59XG5cbmV4cG9ydCB2YXIgYm9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJUb3AgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3AnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlclJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlckJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbScsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyTGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlckNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdCh2YWx1ZSwgXCIgIWltcG9ydGFudFwiKTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIGJvcmRlclJhZGl1cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJhZGl1cycsXG4gIHRoZW1lS2V5OiAnc2hhcGUnXG59KTtcbnZhciBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclJhZGl1cyk7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIGRpc3BsYXlSYXcgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5J1xufSk7XG5leHBvcnQgdmFyIGRpc3BsYXlQcmludCA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXlQcmludCcsXG4gIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoZGlzcGxheVJhdywgZGlzcGxheVByaW50KTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBmbGV4RGlyZWN0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleERpcmVjdGlvbidcbn0pO1xuZXhwb3J0IHZhciBmbGV4V3JhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhXcmFwJ1xufSk7XG5leHBvcnQgdmFyIGp1c3RpZnlDb250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUNvbnRlbnQnXG59KTtcbmV4cG9ydCB2YXIgYWxpZ25JdGVtcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduSXRlbXMnXG59KTtcbmV4cG9ydCB2YXIgYWxpZ25Db250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25Db250ZW50J1xufSk7XG5leHBvcnQgdmFyIG9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnb3JkZXInXG59KTtcbmV4cG9ydCB2YXIgZmxleCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXgnXG59KTtcbmV4cG9ydCB2YXIgZmxleEdyb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4R3Jvdydcbn0pO1xuZXhwb3J0IHZhciBmbGV4U2hyaW5rID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFNocmluaydcbn0pO1xuZXhwb3J0IHZhciBhbGlnblNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnblNlbGYnXG59KTtcbnZhciBmbGV4Ym94ID0gY29tcG9zZShmbGV4RGlyZWN0aW9uLCBmbGV4V3JhcCwganVzdGlmeUNvbnRlbnQsIGFsaWduSXRlbXMsIGFsaWduQ29udGVudCwgb3JkZXIsIGZsZXgsIGZsZXhHcm93LCBmbGV4U2hyaW5rLCBhbGlnblNlbGYpO1xuZXhwb3J0IGRlZmF1bHQgZmxleGJveDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBwb3NpdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3Bvc2l0aW9uJ1xufSk7XG5leHBvcnQgdmFyIHpJbmRleCA9IHN0eWxlKHtcbiAgcHJvcDogJ3pJbmRleCcsXG4gIHRoZW1lS2V5OiAnekluZGV4J1xufSk7XG5leHBvcnQgdmFyIHRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ3RvcCdcbn0pO1xuZXhwb3J0IHZhciByaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3JpZ2h0J1xufSk7XG5leHBvcnQgdmFyIGJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvdHRvbSdcbn0pO1xuZXhwb3J0IHZhciBsZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnbGVmdCdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShwb3NpdGlvbiwgekluZGV4LCB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCB2YXIgYmdjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JnY29sb3InLFxuICBjc3NQcm9wZXJ0eTogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xudmFyIHBhbGV0dGUgPSBjb21wb3NlKGNvbG9yLCBiZ2NvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xudmFyIGJveFNoYWRvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNoYWRvdycsXG4gIHRoZW1lS2V5OiAnc2hhZG93cydcbn0pO1xuZXhwb3J0IGRlZmF1bHQgYm94U2hhZG93OyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSA/IFwiXCIuY29uY2F0KHZhbHVlICogMTAwLCBcIiVcIikgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IHZhciB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtYXhXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heFdpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIG1heEhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heEhlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgc2l6ZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbnZhciBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG52YXIgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbnZhciBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG52YXIgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDMpIHtcbiAgICByZXR1cm4gW3Byb3BdO1xuICB9XG5cbiAgdmFyIF9wcm9wJHNwbGl0ID0gcHJvcC5zcGxpdCgnJyksXG4gICAgICBfcHJvcCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfcHJvcCRzcGxpdCwgMiksXG4gICAgICBhID0gX3Byb3Akc3BsaXQyWzBdLFxuICAgICAgYiA9IF9wcm9wJHNwbGl0MlsxXTtcblxuICB2YXIgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZnVuY3Rpb24gKGRpcikge1xuICAgIHJldHVybiBwcm9wZXJ0eSArIGRpcjtcbiAgfSkgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG52YXIgc3BhY2luZ0tleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdtYXJnaW4nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCddO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1lcih0aGVtZSkge1xuICB2YXIgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyB8fCA4O1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYWJzIDw9IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxLCBbXCJAbWF0ZXJpYWwtdWkvc3lzdGVtOiB0aGUgdmFsdWUgcHJvdmlkZWQgKFwiLmNvbmNhdChhYnMsIFwiKSBvdmVyZmxvd3MuXCIpLCBcIlRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyksIFwiLlwiKSwgXCJcIi5jb25jYXQoYWJzLCBcIiA+IFwiKS5jb25jYXQodGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEsIFwiLCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBbXCJAbWF0ZXJpYWwtdWkvc3lzdGVtOiB0aGUgYHRoZW1lLnNwYWNpbmdgIHZhbHVlIChcIi5jb25jYXQodGhlbWVTcGFjaW5nLCBcIikgaXMgaW52YWxpZC5cIiksICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIHZhciBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICB2YXIgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuXG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIHJldHVybiBcIi1cIi5jb25jYXQodHJhbnNmb3JtZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wVmFsdWUpIHtcbiAgICByZXR1cm4gY3NzUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3NzUHJvcGVydHkpIHtcbiAgICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgdHJhbnNmb3JtZXIgPSBnZXRUcmFuc2Zvcm1lcih0aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAxNCBpdGVtcyxcbiAgICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICAgIGlmIChzcGFjaW5nS2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICAgIHZhciBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBmb250RmFtaWx5ID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udEZhbWlseScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IHZhciBmb250U2l6ZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTaXplJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgdmFyIGZvbnRXZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250V2VpZ2h0JyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgdmFyIHRleHRBbGlnbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRBbGlnbidcbn0pO1xudmFyIHR5cG9ncmFwaHkgPSBjb21wb3NlKGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250V2VpZ2h0LCB0ZXh0QWxpZ24pO1xuZXhwb3J0IGRlZmF1bHQgdHlwb2dyYXBoeTsiLCJpbXBvcnQgeyBib3JkZXJzLCBjb21wb3NlLCBkaXNwbGF5LCBmbGV4Ym94LCBwYWxldHRlLCBwb3NpdGlvbnMsIHNoYWRvd3MsIHNpemluZywgc3BhY2luZywgdHlwb2dyYXBoeSwgY3NzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuZXhwb3J0IHZhciBzdHlsZUZ1bmN0aW9uID0gY3NzKGNvbXBvc2UoYm9yZGVycywgZGlzcGxheSwgZmxleGJveCwgcG9zaXRpb25zLCBwYWxldHRlLCBzaGFkb3dzLCBzaXppbmcsIHNwYWNpbmcsIHR5cG9ncmFwaHkpKTtcbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqL1xuXG52YXIgQm94ID0gc3R5bGVkKCdkaXYnKShzdHlsZUZ1bmN0aW9uLCB7XG4gIG5hbWU6ICdNdWlCb3gnXG59KTtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNiAxMGMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTEyIDBjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yem0tNiAwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnpcIlxufSksICdNb3JlSG9yaXonKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBlbXBoYXNpemUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgTW9yZUhvcml6SWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvTW9yZUhvcml6JztcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgd2lkdGg6IDI0LFxuICAgICAgaGVpZ2h0OiAxNixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzEwMF0sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0sXG4gICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nKDAuNSksXG4gICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZygwLjUpLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMjAwXVxuICAgICAgfSxcbiAgICAgICcmOmFjdGl2ZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLmdyZXlbMjAwXSwgMC4xMilcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxuZnVuY3Rpb24gQnJlYWRjcnVtYkNvbGxhcHNlZChwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3RcbiAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KE1vcmVIb3Jpekljb24sIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJyZWFkY3J1bWJDb2xsYXBzZWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVCcmVhZGNydW1iQ29sbGFwc2VkJ1xufSkoQnJlYWRjcnVtYkNvbGxhcHNlZCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG52YXIgc3R5bGVzID0ge1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICBtYXJnaW5MZWZ0OiA4LFxuICAgIG1hcmdpblJpZ2h0OiA4XG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gQnJlYWRjcnVtYlNlcGFyYXRvcihwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnJlYWRjcnVtYlNlcGFyYXRvci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlQnJlYWRjcnVtYlNlcGFyYXRvcidcbn0pKEJyZWFkY3J1bWJTZXBhcmF0b3IpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgQnJlYWRjcnVtYkNvbGxhcHNlZCBmcm9tICcuL0JyZWFkY3J1bWJDb2xsYXBzZWQnO1xuaW1wb3J0IEJyZWFkY3J1bWJTZXBhcmF0b3IgZnJvbSAnLi9CcmVhZGNydW1iU2VwYXJhdG9yJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgb2wgZWxlbWVudC4gKi9cbiAgb2w6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlc2V0XG4gICAgbWFyZ2luOiAwIC8vIFJlc2V0XG5cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGkgZWxlbWVudC4gKi9cbiAgbGk6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZXBhcmF0b3IgZWxlbWVudC4gKi9cbiAgc2VwYXJhdG9yOiB7fVxufTtcblxuZnVuY3Rpb24gaW5zZXJ0U2VwYXJhdG9ycyhpdGVtcywgY2xhc3NOYW1lLCBzZXBhcmF0b3IpIHtcbiAgcmV0dXJuIGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyZW50LCBpbmRleCkge1xuICAgIGlmIChpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgIGFjYyA9IGFjYy5jb25jYXQoY3VycmVudCwgUmVhY3QuY3JlYXRlRWxlbWVudChCcmVhZGNydW1iU2VwYXJhdG9yIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICwge1xuICAgICAgICBrZXk6IFwic2VwYXJhdG9yLVwiLmNvbmNhdChpbmRleCksXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9LCBzZXBhcmF0b3IpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjLnB1c2goY3VycmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pO1xufVxuXG52YXIgQnJlYWRjcnVtYnMgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJyZWFkY3J1bWJzKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnbmF2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkaXRlbXNBZnRlckNvbGwgPSBwcm9wcy5pdGVtc0FmdGVyQ29sbGFwc2UsXG4gICAgICBpdGVtc0FmdGVyQ29sbGFwc2UgPSBfcHJvcHMkaXRlbXNBZnRlckNvbGwgPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkaXRlbXNBZnRlckNvbGwsXG4gICAgICBfcHJvcHMkaXRlbXNCZWZvcmVDb2wgPSBwcm9wcy5pdGVtc0JlZm9yZUNvbGxhcHNlLFxuICAgICAgaXRlbXNCZWZvcmVDb2xsYXBzZSA9IF9wcm9wcyRpdGVtc0JlZm9yZUNvbCA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRpdGVtc0JlZm9yZUNvbCxcbiAgICAgIF9wcm9wcyRtYXhJdGVtcyA9IHByb3BzLm1heEl0ZW1zLFxuICAgICAgbWF4SXRlbXMgPSBfcHJvcHMkbWF4SXRlbXMgPT09IHZvaWQgMCA/IDggOiBfcHJvcHMkbWF4SXRlbXMsXG4gICAgICBfcHJvcHMkc2VwYXJhdG9yID0gcHJvcHMuc2VwYXJhdG9yLFxuICAgICAgc2VwYXJhdG9yID0gX3Byb3BzJHNlcGFyYXRvciA9PT0gdm9pZCAwID8gJy8nIDogX3Byb3BzJHNlcGFyYXRvcixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpdGVtc0FmdGVyQ29sbGFwc2VcIiwgXCJpdGVtc0JlZm9yZUNvbGxhcHNlXCIsIFwibWF4SXRlbXNcIiwgXCJzZXBhcmF0b3JcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGV4cGFuZGVkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEV4cGFuZGVkID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgcmVuZGVySXRlbXNCZWZvcmVBbmRBZnRlciA9IGZ1bmN0aW9uIHJlbmRlckl0ZW1zQmVmb3JlQW5kQWZ0ZXIoYWxsSXRlbXMpIHtcbiAgICB2YXIgaGFuZGxlQ2xpY2tFeHBhbmQgPSBmdW5jdGlvbiBoYW5kbGVDbGlja0V4cGFuZCgpIHtcbiAgICAgIHNldEV4cGFuZGVkKHRydWUpO1xuICAgIH07IC8vIFRoaXMgZGVmZW5kcyBhZ2FpbnN0IHNvbWVvbmUgcGFzc2luZyB3ZWlyZCBpbnB1dCwgdG8gZW5zdXJlIHRoYXQgaWYgYWxsXG4gICAgLy8gaXRlbXMgd291bGQgYmUgc2hvd24gYW55d2F5LCB3ZSBqdXN0IHNob3cgYWxsIGl0ZW1zIHdpdGhvdXQgdGhlIEVsbGlwc2lzSXRlbVxuXG5cbiAgICBpZiAoaXRlbXNCZWZvcmVDb2xsYXBzZSArIGl0ZW1zQWZ0ZXJDb2xsYXBzZSA+PSBhbGxJdGVtcy5sZW5ndGgpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFsnTWF0ZXJpYWwtVUk6IHlvdSBoYXZlIHByb3ZpZGVkIGFuIGludmFsaWQgY29tYmluYXRpb24gb2YgcHJvcGVydGllcyB0byB0aGUgQnJlYWRjcnVtYnMuJywgXCJpdGVtc0FmdGVyQ29sbGFwc2U9e1wiLmNvbmNhdChpdGVtc0FmdGVyQ29sbGFwc2UsIFwifSAraXRlbXNCZWZvcmVDb2xsYXBzZT17XCIpLmNvbmNhdChpdGVtc0JlZm9yZUNvbGxhcHNlLCBcIn0gPj0gbWF4SXRlbXM9e1wiKS5jb25jYXQobWF4SXRlbXMsIFwifVwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGFsbEl0ZW1zO1xuICAgIH1cblxuICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFsbEl0ZW1zLnNsaWNlKDAsIGl0ZW1zQmVmb3JlQ29sbGFwc2UpKSwgW1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnJlYWRjcnVtYkNvbGxhcHNlZCwge1xuICAgICAga2V5OiBcImVsbGlwc2lzXCIsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja0V4cGFuZFxuICAgIH0pXSwgX3RvQ29uc3VtYWJsZUFycmF5KGFsbEl0ZW1zLnNsaWNlKGFsbEl0ZW1zLmxlbmd0aCAtIGl0ZW1zQWZ0ZXJDb2xsYXBzZSwgYWxsSXRlbXMubGVuZ3RoKSkpO1xuICB9O1xuXG4gIHZhciBhbGxJdGVtcyA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpO1xuICB9KS5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIHJldHVybiAoLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxpLFxuICAgICAgICBrZXk6IFwiY2hpbGQtXCIuY29uY2F0KGluZGV4KVxuICAgICAgfSwgY2hpbGQpXG4gICAgKTtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICBjb2xvcjogXCJ0ZXh0U2Vjb25kYXJ5XCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLm9sXG4gIH0sIGluc2VydFNlcGFyYXRvcnMoZXhwYW5kZWQgfHwgbWF4SXRlbXMgJiYgYWxsSXRlbXMubGVuZ3RoIDw9IG1heEl0ZW1zID8gYWxsSXRlbXMgOiByZW5kZXJJdGVtc0JlZm9yZUFuZEFmdGVyKGFsbEl0ZW1zKSwgY2xhc3Nlcy5zZXBhcmF0b3IsIHNlcGFyYXRvcikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnJlYWRjcnVtYnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGJyZWFkY3J1bWIgY2hpbGRyZW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IG1hcHMgdGhlIHZhcmlhbnQgdG8gYSBnb29kIGRlZmF1bHQgaGVhZGxpbmUgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIG1heCBpdGVtcyBpcyBleGNlZWRlZCwgdGhlIG51bWJlciBvZiBpdGVtcyB0byBzaG93IGFmdGVyIHRoZSBlbGxpcHNpcy5cbiAgICovXG4gIGl0ZW1zQWZ0ZXJDb2xsYXBzZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSWYgbWF4IGl0ZW1zIGlzIGV4Y2VlZGVkLCB0aGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHNob3cgYmVmb3JlIHRoZSBlbGxpcHNpcy5cbiAgICovXG4gIGl0ZW1zQmVmb3JlQ29sbGFwc2U6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgYnJlYWRjcnVtYnMgdG8gZGlzcGxheS4gV2hlbiB0aGVyZSBhcmUgbW9yZVxuICAgKiB0aGFuIHRoZSBtYXhpbXVtIG51bWJlciwgb25seSB0aGUgZmlyc3QgYW5kIGxhc3Qgd2lsbCBiZSBzaG93biwgd2l0aCBhblxuICAgKiBlbGxpcHNpcyBpbiBiZXR3ZWVuLlxuICAgKi9cbiAgbWF4SXRlbXM6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEN1c3RvbSBzZXBhcmF0b3Igbm9kZS5cbiAgICovXG4gIHNlcGFyYXRvcjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnJlYWRjcnVtYnMnXG59KShCcmVhZGNydW1icyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfVxufTtcbnZhciBDYXJkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJHJhaXNlZCA9IHByb3BzLnJhaXNlZCxcbiAgICAgIHJhaXNlZCA9IF9wcm9wcyRyYWlzZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJhaXNlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicmFpc2VkXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxldmF0aW9uOiByYWlzZWQgPyA4IDogMSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNhcmQgd2lsbCB1c2UgcmFpc2VkIHN0eWxpbmcuXG4gICAqL1xuICByYWlzZWQ6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmQnXG59KShDYXJkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB0ZXh0QWxpZ246ICdpbmhlcml0JyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAnJjpob3ZlciAkZm9jdXNIaWdobGlnaHQnOiB7XG4gICAgICAgIG9wYWNpdHk6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eVxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSAkZm9jdXNIaWdobGlnaHQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuMTJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIEJ1dHRvbkJhc2Ugcm9vdCBlbGVtZW50IGlmIHRoZSBhY3Rpb24gYXJlYSBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzVmlzaWJsZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgb3ZlcmxheSB0aGF0IGNvdmVycyB0aGUgYWN0aW9uIGFyZWEgd2hlbiBpdCBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzSGlnaGxpZ2h0OiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRjb2xvcicsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbnZhciBDYXJkQWN0aW9uQXJlYSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEFjdGlvbkFyZWEocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGZvY3VzVmlzaWJsZUNsYXNzTmFtZSwgY2xhc3Nlcy5mb2N1c1Zpc2libGUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZm9jdXNIaWdobGlnaHRcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkQWN0aW9uQXJlYS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbkFyZWEnXG59KShDYXJkQWN0aW9uQXJlYSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgJy4uL0J1dHRvbic7IC8vIFNvIHdlIGRvbid0IGhhdmUgYW55IG92ZXJyaWRlIHByaW9yaXR5IGlzc3VlLlxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVNwYWNpbmc9e2ZhbHNlfWAuICovXG4gIHNwYWNpbmc6IHtcbiAgICAnJiA+ICogKyAqJzoge1xuICAgICAgbWFyZ2luTGVmdDogOFxuICAgIH1cbiAgfVxufTtcbnZhciBDYXJkQWN0aW9ucyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEFjdGlvbnMocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGRpc2FibGVTcGFjaW5nID0gcHJvcHMuZGlzYWJsZVNwYWNpbmcsXG4gICAgICBkaXNhYmxlU3BhY2luZyA9IF9wcm9wcyRkaXNhYmxlU3BhY2luZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNwYWNpbmcsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlU3BhY2luZ1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCAhZGlzYWJsZVNwYWNpbmcgJiYgY2xhc3Nlcy5zcGFjaW5nLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRBY3Rpb25zLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGFjdGlvbnMgZG8gbm90IGhhdmUgYWRkaXRpb25hbCBtYXJnaW4uXG4gICAqL1xuICBkaXNhYmxlU3BhY2luZzogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbnMnXG59KShDYXJkQWN0aW9ucyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIHBhZGRpbmc6IDE2LFxuICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICBwYWRkaW5nQm90dG9tOiAyNFxuICAgIH1cbiAgfVxufTtcbnZhciBDYXJkQ29udGVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZENvbnRlbnQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbn0pKENhcmRDb250ZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZzogMTZcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYXZhdGFyIGVsZW1lbnQuICovXG4gIGF2YXRhcjoge1xuICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgbWFyZ2luUmlnaHQ6IDE2XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFjdGlvbiBlbGVtZW50LiAqL1xuICBhY3Rpb246IHtcbiAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgIGFsaWduU2VsZjogJ2ZsZXgtc3RhcnQnLFxuICAgIG1hcmdpblRvcDogLTgsXG4gICAgbWFyZ2luUmlnaHQ6IC04XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgd3JhcHBlciBlbGVtZW50LiAqL1xuICBjb250ZW50OiB7XG4gICAgZmxleDogJzEgMSBhdXRvJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0aXRsZSBUeXBvZ3JhcGh5IGVsZW1lbnQuICovXG4gIHRpdGxlOiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3ViaGVhZGVyIFR5cG9ncmFwaHkgZWxlbWVudC4gKi9cbiAgc3ViaGVhZGVyOiB7fVxufTtcbnZhciBDYXJkSGVhZGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkSGVhZGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGF2YXRhciA9IHByb3BzLmF2YXRhcixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPSBwcm9wcy5kaXNhYmxlVHlwb2dyYXBoeSxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gX3Byb3BzJGRpc2FibGVUeXBvZ3JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSxcbiAgICAgIHN1YmhlYWRlclByb3AgPSBwcm9wcy5zdWJoZWFkZXIsXG4gICAgICBzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy5zdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICB0aXRsZVByb3AgPSBwcm9wcy50aXRsZSxcbiAgICAgIHRpdGxlVHlwb2dyYXBoeVByb3BzID0gcHJvcHMudGl0bGVUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uXCIsIFwiYXZhdGFyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVUeXBvZ3JhcGh5XCIsIFwic3ViaGVhZGVyXCIsIFwic3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzXCIsIFwidGl0bGVcIiwgXCJ0aXRsZVR5cG9ncmFwaHlQcm9wc1wiXSk7XG5cbiAgdmFyIHRpdGxlID0gdGl0bGVQcm9wO1xuXG4gIGlmICh0aXRsZSAhPSBudWxsICYmIHRpdGxlLnR5cGUgIT09IFR5cG9ncmFwaHkgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgdGl0bGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnaDUnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHRpdGxlVHlwb2dyYXBoeVByb3BzKSwgdGl0bGUpO1xuICB9XG5cbiAgdmFyIHN1YmhlYWRlciA9IHN1YmhlYWRlclByb3A7XG5cbiAgaWYgKHN1YmhlYWRlciAhPSBudWxsICYmIHN1YmhlYWRlci50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHN1YmhlYWRlciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogYXZhdGFyID8gJ2JvZHkyJyA6ICdib2R5MScsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ViaGVhZGVyLFxuICAgICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyksIHN1YmhlYWRlcik7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGF2YXRhciAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYXZhdGFyXG4gIH0sIGF2YXRhciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jb250ZW50XG4gIH0sIHRpdGxlLCBzdWJoZWFkZXIpLCBhY3Rpb24gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvblxuICB9LCBhY3Rpb24pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZEhlYWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkgaW4gdGhlIGNhcmQgaGVhZGVyLlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIEF2YXRhciBmb3IgdGhlIENhcmQgSGVhZGVyLlxuICAgKi9cbiAgYXZhdGFyOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd29uJ3QgYmUgd3JhcHBlZCBieSBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgdG8gcmVuZGVyIGFuIGFsdGVybmF0aXZlIFR5cG9ncmFwaHkgdmFyaWFudCBieSB3cmFwcGluZ1xuICAgKiB0aGUgYHRpdGxlYCB0ZXh0LCBhbmQgb3B0aW9uYWwgYHN1YmhlYWRlcmAgdGV4dFxuICAgKiB3aXRoIHRoZSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBzdWJoZWFkZXJcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBDYXJkIFRpdGxlLlxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgdGl0bGVcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICB0aXRsZVR5cG9ncmFwaHlQcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkSGVhZGVyJ1xufSkoQ2FyZEhlYWRlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29tcG9uZW50PVwidmlkZW8sIGF1ZGlvLCBwaWN0dXJlLCBpZnJhbWUsIG9yIGltZ1wiYC4gKi9cbiAgbWVkaWE6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIC8vIOKaoO+4jyBvYmplY3QtZml0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgb2JqZWN0Rml0OiAnY292ZXInXG4gIH1cbn07XG52YXIgTUVESUFfQ09NUE9ORU5UUyA9IFsndmlkZW8nLCAnYXVkaW8nLCAncGljdHVyZScsICdpZnJhbWUnLCAnaW1nJ107XG52YXIgQ2FyZE1lZGlhID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkTWVkaWEocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW1hZ2UgPSBwcm9wcy5pbWFnZSxcbiAgICAgIHNyYyA9IHByb3BzLnNyYyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImltYWdlXCIsIFwic3JjXCIsIFwic3R5bGVcIl0pO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoQm9vbGVhbihpbWFnZSB8fCBzcmMpLCAnTWF0ZXJpYWwtVUk6IGVpdGhlciBgaW1hZ2VgIG9yIGBzcmNgIHByb3BlcnR5IG11c3QgYmUgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICB2YXIgaXNNZWRpYUNvbXBvbmVudCA9IE1FRElBX0NPTVBPTkVOVFMuaW5kZXhPZihDb21wb25lbnQpICE9PSAtMTtcbiAgdmFyIGNvbXBvc2VkU3R5bGUgPSAhaXNNZWRpYUNvbXBvbmVudCAmJiBpbWFnZSA/IF9leHRlbmRzKHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFxcXCJcIi5jb25jYXQoaW1hZ2UsIFwiXFxcIilcIilcbiAgfSwgc3R5bGUpIDogc3R5bGU7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGlzTWVkaWFDb21wb25lbnQgJiYgY2xhc3Nlcy5tZWRpYSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogY29tcG9zZWRTdHlsZSxcbiAgICBzcmM6IGlzTWVkaWFDb21wb25lbnQgPyBpbWFnZSB8fCBzcmMgOiB1bmRlZmluZWRcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZE1lZGlhLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCBmb3IgcmVuZGVyaW5nIGltYWdlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSW1hZ2UgdG8gYmUgZGlzcGxheWVkIGFzIGEgYmFja2dyb3VuZCBpbWFnZS5cbiAgICogRWl0aGVyIGBpbWFnZWAgb3IgYHNyY2AgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC5cbiAgICogTm90ZSB0aGF0IGNhbGxlciBtdXN0IHNwZWNpZnkgaGVpZ2h0IG90aGVyd2lzZSB0aGUgaW1hZ2Ugd2lsbCBub3QgYmUgdmlzaWJsZS5cbiAgICovXG4gIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbiBhbGlhcyBmb3IgYGltYWdlYCBwcm9wZXJ0eS5cbiAgICogQXZhaWxhYmxlIG9ubHkgd2l0aCBtZWRpYSBjb21wb25lbnRzLlxuICAgKiBNZWRpYSBjb21wb25lbnRzOiBgdmlkZW9gLCBgYXVkaW9gLCBgcGljdHVyZWAsIGBpZnJhbWVgLCBgaW1nYC5cbiAgICovXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZE1lZGlhJ1xufSkoQ2FyZE1lZGlhKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC93aXRoRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL0ljb25CdXR0b24nO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIHJvb3Q6IHtcbiAgICBwYWRkaW5nOiA5XG4gIH0sXG4gIGNoZWNrZWQ6IHt9LFxuICBkaXNhYmxlZDoge30sXG4gIGlucHV0OiB7XG4gICAgY3Vyc29yOiAnaW5oZXJpdCcsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgb3BhY2l0eTogMCxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICBwYWRkaW5nOiAwXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFN3aXRjaEJhc2UgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN3aXRjaEJhc2UocHJvcHMsIHJlZikge1xuICB2YXIgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgY2hlY2tlZFByb3AgPSBwcm9wcy5jaGVja2VkLFxuICAgICAgY2hlY2tlZEljb24gPSBwcm9wcy5jaGVja2VkSWNvbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRDaGVja2VkID0gcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG11aUZvcm1Db250cm9sID0gcHJvcHMubXVpRm9ybUNvbnRyb2wsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgdGFiSW5kZXggPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvRm9jdXNcIiwgXCJjaGVja2VkXCIsIFwiY2hlY2tlZEljb25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdENoZWNrZWRcIiwgXCJkaXNhYmxlZFwiLCBcImljb25cIiwgXCJpZFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm11aUZvcm1Db250cm9sXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInJlYWRPbmx5XCIsIFwicmVxdWlyZWRcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoY2hlY2tlZFByb3AgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKEJvb2xlYW4oZGVmYXVsdENoZWNrZWQpKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgY2hlY2tlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldENoZWNrZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVJbnB1dENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcblxuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzZXRDaGVja2VkU3RhdGUoY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgY2hlY2tlZCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcblxuICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGlzYWJsZWQgPSBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hlY2tlZCA9IGlzQ29udHJvbGxlZCA/IGNoZWNrZWRQcm9wIDogY2hlY2tlZFN0YXRlO1xuICB2YXIgaGFzTGFiZWxGb3IgPSB0eXBlID09PSAnY2hlY2tib3gnIHx8IHR5cGUgPT09ICdyYWRpbyc7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25CdXR0b24sIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNoZWNrZWQgJiYgY2xhc3Nlcy5jaGVja2VkLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBjbGFzc05hbWVQcm9wKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgdGFiSW5kZXg6IG51bGwsXG4gICAgcm9sZTogdW5kZWZpbmVkLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoZWNrZWQgPyBjaGVja2VkSWNvbiA6IGljb24sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgY2hlY2tlZDogY2hlY2tlZFByb3AsXG4gICAgZGVmYXVsdENoZWNrZWQ6IGRlZmF1bHRDaGVja2VkLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbnB1dCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgaWQ6IGhhc0xhYmVsRm9yICYmIGlkLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICByZWY6IGlucHV0UmVmLFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSwgaW5wdXRQcm9wcykpKTtcbn0pOyAvLyBOQjogSWYgY2hhbmdlZCwgcGxlYXNlIHVwZGF0ZSBDaGVja2JveCwgU3dpdGNoIGFuZCBSYWRpb1xuLy8gc28gdGhhdCB0aGUgQVBJIGRvY3VtZW50YXRpb24gaXMgdXBkYXRlZC5cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3dpdGNoQmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZEljb246IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRDaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3dpdGNoIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLypcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hlY2tlZCBUaGUgYGNoZWNrZWRgIHZhbHVlIG9mIHRoZSBzd2l0Y2hcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGlucHV0IGNvbXBvbmVudCBwcm9wZXJ0eSBgdHlwZWAuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnUHJpdmF0ZVN3aXRjaEJhc2UnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KFN3aXRjaEJhc2UpKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgNXYxNEg1VjVoMTRtMC0ySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnpcIlxufSksICdDaGVja0JveE91dGxpbmVCbGFuaycpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOSAzSDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjExIDAgMi0uOSAyLTJWNWMwLTEuMS0uODktMi0yLTJ6bS05IDE0bC01LTUgMS40MS0xLjQxTDEwIDE0LjE3bDcuNTktNy41OUwxOSA4bC05IDl6XCJcbn0pLCAnQ2hlY2tCb3gnKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgM0g1Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6bS0yIDEwSDd2LTJoMTB2MnpcIlxufSksICdJbmRldGVybWluYXRlQ2hlY2tCb3gnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBTd2l0Y2hCYXNlIGZyb20gJy4uL2ludGVybmFsL1N3aXRjaEJhc2UnO1xuaW1wb3J0IENoZWNrQm94T3V0bGluZUJsYW5rSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQ2hlY2tCb3hPdXRsaW5lQmxhbmsnO1xuaW1wb3J0IENoZWNrQm94SWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQ2hlY2tCb3gnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBJbmRldGVybWluYXRlQ2hlY2tCb3hJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9JbmRldGVybWluYXRlQ2hlY2tCb3gnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNoZWNrZWQ9e3RydWV9YC4gKi9cbiAgICBjaGVja2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW5kZXRlcm1pbmF0ZT17dHJ1ZX1gLiAqL1xuICAgIGluZGV0ZXJtaW5hdGU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0Q2hlY2tlZEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrQm94SWNvbiwgbnVsbCk7XG52YXIgZGVmYXVsdEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrQm94T3V0bGluZUJsYW5rSWNvbiwgbnVsbCk7XG52YXIgZGVmYXVsdEluZGV0ZXJtaW5hdGVJY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChJbmRldGVybWluYXRlQ2hlY2tCb3hJY29uLCBudWxsKTtcbnZhciBDaGVja2JveCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2hlY2tib3gocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNoZWNrZWRJY29uID0gcHJvcHMuY2hlY2tlZEljb24sXG4gICAgICBjaGVja2VkSWNvbiA9IF9wcm9wcyRjaGVja2VkSWNvbiA9PT0gdm9pZCAwID8gZGVmYXVsdENoZWNrZWRJY29uIDogX3Byb3BzJGNoZWNrZWRJY29uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnc2Vjb25kYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGljb24gPSBfcHJvcHMkaWNvbiA9PT0gdm9pZCAwID8gZGVmYXVsdEljb24gOiBfcHJvcHMkaWNvbixcbiAgICAgIF9wcm9wcyRpbmRldGVybWluYXRlID0gcHJvcHMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgIGluZGV0ZXJtaW5hdGUgPSBfcHJvcHMkaW5kZXRlcm1pbmF0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5kZXRlcm1pbmF0ZSxcbiAgICAgIF9wcm9wcyRpbmRldGVybWluYXRlSSA9IHByb3BzLmluZGV0ZXJtaW5hdGVJY29uLFxuICAgICAgaW5kZXRlcm1pbmF0ZUljb24gPSBfcHJvcHMkaW5kZXRlcm1pbmF0ZUkgPT09IHZvaWQgMCA/IGRlZmF1bHRJbmRldGVybWluYXRlSWNvbiA6IF9wcm9wcyRpbmRldGVybWluYXRlSSxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoZWNrZWRJY29uXCIsIFwiY2xhc3Nlc1wiLCBcImNvbG9yXCIsIFwiaWNvblwiLCBcImluZGV0ZXJtaW5hdGVcIiwgXCJpbmRldGVybWluYXRlSWNvblwiLCBcImlucHV0UHJvcHNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN3aXRjaEJhc2UsIF9leHRlbmRzKHtcbiAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgY2hlY2tlZEljb246IGluZGV0ZXJtaW5hdGUgPyBpbmRldGVybWluYXRlSWNvbiA6IGNoZWNrZWRJY29uLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgaW5kZXRlcm1pbmF0ZSAmJiBjbGFzc2VzLmluZGV0ZXJtaW5hdGUpLFxuICAgICAgY2hlY2tlZDogY2xhc3Nlcy5jaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6IGNsYXNzZXMuZGlzYWJsZWRcbiAgICB9LFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAnZGF0YS1pbmRldGVybWluYXRlJzogaW5kZXRlcm1pbmF0ZVxuICAgIH0sIGlucHV0UHJvcHMpLFxuICAgIGljb246IGluZGV0ZXJtaW5hdGUgPyBpbmRldGVybWluYXRlSWNvbiA6IGljb24sXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hlY2tib3gucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdkZWZhdWx0J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgYXBwZWFycyBpbmRldGVybWluYXRlLlxuICAgKiBUaGlzIGRvZXMgbm90IHNldCB0aGUgbmF0aXZlIGlucHV0IGVsZW1lbnQgdG8gaW5kZXRlcm1pbmF0ZSBkdWVcbiAgICogdG8gaW5jb25zaXN0ZW50IGJlaGF2aW9yIGFjcm9zcyBicm93c2Vycy5cbiAgICogSG93ZXZlciwgd2Ugc2V0IGEgYGRhdGEtaW5kZXRlcm1pbmF0ZWAgYXR0cmlidXRlIG9uIHRoZSBpbnB1dC5cbiAgICovXG4gIGluZGV0ZXJtaW5hdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbmRldGVybWluYXRlLlxuICAgKi9cbiAgaW5kZXRlcm1pbmF0ZUljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LmNoZWNrZWRgLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNoZWNrZWQgVGhlIGBjaGVja2VkYCB2YWx1ZSBvZiB0aGUgc3dpdGNoXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCBjb21wb25lbnQgcHJvcGVydHkgYHR5cGVgLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuIFRoZSBET00gQVBJIGNhc3RzIHRoaXMgdG8gYSBzdHJpbmcuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDaGVja2JveCdcbn0pKENoZWNrYm94KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMkM2LjQ3IDIgMiA2LjQ3IDIgMTJzNC40NyAxMCAxMCAxMCAxMC00LjQ3IDEwLTEwUzE3LjUzIDIgMTIgMnptNSAxMy41OUwxNS41OSAxNyAxMiAxMy40MSA4LjQxIDE3IDcgMTUuNTkgMTAuNTkgMTIgNyA4LjQxIDguNDEgNyAxMiAxMC41OSAxNS41OSA3IDE3IDguNDEgMTMuNDEgMTIgMTcgMTUuNTl6XCJcbn0pLCAnQ2FuY2VsJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBDYW5jZWxJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZW1waGFzaXplLCBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgJy4uL0F2YXRhci9BdmF0YXInOyAvLyBTbyB3ZSBkb24ndCBoYXZlIGFueSBvdmVycmlkZSBwcmlvcml0eSBpc3N1ZS5cblxuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGhlaWdodCA9IDMyO1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXTtcbiAgdmFyIGRlbGV0ZUljb25Db2xvciA9IGZhZGUodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuMjYpO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMyksXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXJSYWRpdXM6IGhlaWdodCAvIDIsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdyddKSxcbiAgICAgIC8vIGxhYmVsIHdpbGwgaW5oZXJpdCB0aGlzIGZyb20gcm9vdCwgdGhlbiBgY2xpY2thYmxlYCBjbGFzcyBvdmVycmlkZXMgdGhpcyBmb3IgYm90aFxuICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgLy8gUmVtb3ZlIGBidXR0b25gIGJvcmRlclxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIC8vIFJlbW92ZSBgYnV0dG9uYCBwYWRkaW5nXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvbkNsaWNrYCBpcyBkZWZpbmVkIG9yIGBjbGlja2FibGU9e3RydWV9YC4gKi9cbiAgICBjbGlja2FibGU6IHtcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmhvdmVyLCAmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZShiYWNrZ3JvdW5kQ29sb3IsIDAuMDgpXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMV0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZW1waGFzaXplKGJhY2tncm91bmRDb2xvciwgMC4xMilcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb25DbGlja2AgYW5kIGBjb2xvcj1cInByaW1hcnlcImAgaXMgZGVmaW5lZCBvciBgY2xpY2thYmxlPXt0cnVlfWAuICovXG4gICAgY2xpY2thYmxlQ29sb3JQcmltYXJ5OiB7XG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBlbXBoYXNpemUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuMDgpXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgMC4xMilcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb25DbGlja2AgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYCBpcyBkZWZpbmVkIG9yIGBjbGlja2FibGU9e3RydWV9YC4gKi9cbiAgICBjbGlja2FibGVDb2xvclNlY29uZGFyeToge1xuICAgICAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZW1waGFzaXplKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuMDgpXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjEyKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvbkRlbGV0ZWAgaXMgZGVmaW5lZC4gKi9cbiAgICBkZWxldGFibGU6IHtcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZShiYWNrZ3JvdW5kQ29sb3IsIDAuMDgpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9uRGVsZXRlYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYCBpcyBkZWZpbmVkLiAqL1xuICAgIGRlbGV0YWJsZUNvbG9yUHJpbWFyeToge1xuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZW1waGFzaXplKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9uRGVsZXRlYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgIGlzIGRlZmluZWQuICovXG4gICAgZGVsZXRhYmxlQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKSxcbiAgICAgICckY2xpY2thYmxlJjpob3ZlciwgJGNsaWNrYWJsZSY6Zm9jdXMsICRkZWxldGFibGUmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgICAgIH0sXG4gICAgICAnJiAkYXZhdGFyJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAtMVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAnJGNsaWNrYWJsZSY6aG92ZXIsICRjbGlja2FibGUmOmZvY3VzLCAkZGVsZXRhYmxlJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4pLFxuICAgICAgJyRjbGlja2FibGUmOmhvdmVyLCAkY2xpY2thYmxlJjpmb2N1cywgJGRlbGV0YWJsZSY6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgYXZhdGFyYCBlbGVtZW50LiAqL1xuICAgIGF2YXRhcjoge1xuICAgICAgbWFyZ2luUmlnaHQ6IC00LFxuICAgICAgd2lkdGg6IGhlaWdodCxcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0sXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE2KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGF2YXRhcmAgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGF2YXRhckNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5kYXJrXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgYXZhdGFyYCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBhdmF0YXJDb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFya1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGF2YXRhcmAgZWxlbWVudHMgY2hpbGRyZW4uICovXG4gICAgYXZhdGFyQ2hpbGRyZW46IHtcbiAgICAgIHdpZHRoOiAxOSxcbiAgICAgIGhlaWdodDogMTlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpY29uYCBlbGVtZW50LiAqL1xuICAgIGljb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAtOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGljb25gIGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBpY29uQ29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaWNvbmAgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgaWNvbkNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBsYWJlbCBgc3BhbmAgZWxlbWVudGAuICovXG4gICAgbGFiZWw6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgcGFkZGluZ0xlZnQ6IDEyLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAxMixcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgY3Vyc29yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBkZWxldGVJY29uYCBlbGVtZW50LiAqL1xuICAgIGRlbGV0ZUljb246IHtcbiAgICAgIC8vIFJlbW92ZSBncmV5IGhpZ2hsaWdodFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBjb2xvcjogZGVsZXRlSWNvbkNvbG9yLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1hcmdpbjogJzAgNHB4IDAgLThweCcsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IGZhZGUoZGVsZXRlSWNvbkNvbG9yLCAwLjQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBkZWxldGVJY29uIGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYCBhbmQgYHZhcmlhbnQ9XCJkZWZhdWx0XCJgLiAqL1xuICAgIGRlbGV0ZUljb25Db2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsIDAuNyksXG4gICAgICAnJjpob3ZlciwgJjphY3RpdmUnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBkZWxldGVJY29uIGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgIGFuZCBgdmFyaWFudD1cImRlZmF1bHRcImAuICovXG4gICAgZGVsZXRlSWNvbkNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHQsIDAuNyksXG4gICAgICAnJjpob3ZlciwgJjphY3RpdmUnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGRlbGV0ZUljb24gZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIGRlbGV0ZUljb25PdXRsaW5lZENvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNyksXG4gICAgICAnJjpob3ZlciwgJjphY3RpdmUnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZGVsZXRlSWNvbiBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYCBhbmQgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBkZWxldGVJY29uT3V0bGluZWRDb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgMC43KSxcbiAgICAgICcmOmhvdmVyLCAmOmFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBDaGlwcyByZXByZXNlbnQgY29tcGxleCBlbnRpdGllcyBpbiBzbWFsbCBibG9ja3MsIHN1Y2ggYXMgYSBjb250YWN0LlxuICovXG5cbnZhciBDaGlwID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGlwKHByb3BzLCByZWYpIHtcbiAgdmFyIGF2YXRhclByb3AgPSBwcm9wcy5hdmF0YXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjbGlja2FibGVQcm9wID0gcHJvcHMuY2xpY2thYmxlLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGRlbGV0ZUljb25Qcm9wID0gcHJvcHMuZGVsZXRlSWNvbixcbiAgICAgIGljb25Qcm9wID0gcHJvcHMuaWNvbixcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRGVsZXRlID0gcHJvcHMub25EZWxldGUsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBvbktleVVwID0gcHJvcHMub25LZXlVcCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXZhdGFyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNsaWNrYWJsZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGVsZXRlSWNvblwiLCBcImljb25cIiwgXCJsYWJlbFwiLCBcIm9uQ2xpY2tcIiwgXCJvbkRlbGV0ZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgY2hpcFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgaGFuZGxlRGVsZXRlSWNvbkNsaWNrID0gZnVuY3Rpb24gaGFuZGxlRGVsZXRlSWNvbkNsaWNrKGV2ZW50KSB7XG4gICAgLy8gU3RvcCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byB0aGUgYENoaXBgXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAob25EZWxldGUpIHtcbiAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIElnbm9yZSBldmVudHMgZnJvbSBjaGlsZHJlbiBvZiBgQ2hpcGAuXG5cblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ICE9PSBldmVudC50YXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gZXZlbnQua2V5O1xuXG4gICAgaWYgKGtleSA9PT0gJyAnIHx8IGtleSA9PT0gJ0VudGVyJyB8fCBrZXkgPT09ICdCYWNrc3BhY2UnIHx8IGtleSA9PT0gJ0RlbGV0ZScgfHwga2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleVVwID0gZnVuY3Rpb24gaGFuZGxlS2V5VXAoZXZlbnQpIHtcbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfSAvLyBJZ25vcmUgZXZlbnRzIGZyb20gY2hpbGRyZW4gb2YgYENoaXBgLlxuXG5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCAhPT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IGV2ZW50LmtleTtcblxuICAgIGlmIChvbkNsaWNrICYmIChrZXkgPT09ICcgJyB8fCBrZXkgPT09ICdFbnRlcicpKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKG9uRGVsZXRlICYmIChrZXkgPT09ICdCYWNrc3BhY2UnIHx8IGtleSA9PT0gJ0RlbGV0ZScpKSB7XG4gICAgICBvbkRlbGV0ZShldmVudCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdFc2NhcGUnICYmIGNoaXBSZWYuY3VycmVudCkge1xuICAgICAgY2hpcFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNsaWNrYWJsZSA9IGNsaWNrYWJsZVByb3AgIT09IGZhbHNlICYmIG9uQ2xpY2sgPyB0cnVlIDogY2xpY2thYmxlUHJvcDtcbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wLCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIFtjbGFzc2VzLm91dGxpbmVkLCBjb2xvciA9PT0gJ3ByaW1hcnknICYmIGNsYXNzZXMub3V0bGluZWRQcmltYXJ5LCBjb2xvciA9PT0gJ3NlY29uZGFyeScgJiYgY2xhc3Nlcy5vdXRsaW5lZFNlY29uZGFyeV0sIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgW2NsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGlja2FibGUgJiYgY2xhc3Nlc1tcImNsaWNrYWJsZUNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIG9uRGVsZXRlICYmIGNsYXNzZXNbXCJkZWxldGFibGVDb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldXSwgY2xpY2thYmxlICYmIGNsYXNzZXMuY2xpY2thYmxlLCBvbkRlbGV0ZSAmJiBjbGFzc2VzLmRlbGV0YWJsZSk7XG4gIHZhciBkZWxldGVJY29uID0gbnVsbDtcblxuICBpZiAob25EZWxldGUpIHtcbiAgICB2YXIgY3VzdG9tQ2xhc3NlcyA9IGNsc3goY29sb3IgIT09ICdkZWZhdWx0JyAmJiBbdmFyaWFudCAhPT0gJ291dGxpbmVkJyAmJiBjbGFzc2VzW1wiZGVsZXRlSWNvbkNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgY2xhc3Nlc1tcImRlbGV0ZUljb25PdXRsaW5lZENvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV1dKTtcbiAgICBkZWxldGVJY29uID0gZGVsZXRlSWNvblByb3AgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZGVsZXRlSWNvblByb3ApID8gUmVhY3QuY2xvbmVFbGVtZW50KGRlbGV0ZUljb25Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goZGVsZXRlSWNvblByb3AucHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLmRlbGV0ZUljb24sIGN1c3RvbUNsYXNzZXMpLFxuICAgICAgb25DbGljazogaGFuZGxlRGVsZXRlSWNvbkNsaWNrXG4gICAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KENhbmNlbEljb24sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmRlbGV0ZUljb24sIGN1c3RvbUNsYXNzZXMpLFxuICAgICAgb25DbGljazogaGFuZGxlRGVsZXRlSWNvbkNsaWNrXG4gICAgfSk7XG4gIH1cblxuICB2YXIgYXZhdGFyID0gbnVsbDtcblxuICBpZiAoYXZhdGFyUHJvcCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChhdmF0YXJQcm9wKSkge1xuICAgIGF2YXRhciA9IFJlYWN0LmNsb25lRWxlbWVudChhdmF0YXJQcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hdmF0YXIsIGF2YXRhclByb3AucHJvcHMuY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJhdmF0YXJDb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldKSxcbiAgICAgIGNoaWxkcmVuQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXZhdGFyQ2hpbGRyZW4sIGF2YXRhclByb3AucHJvcHMuY2hpbGRyZW5DbGFzc05hbWUpXG4gICAgfSk7XG4gIH1cblxuICB2YXIgaWNvbiA9IG51bGw7XG5cbiAgaWYgKGljb25Qcm9wICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb25Qcm9wKSkge1xuICAgIGljb24gPSBSZWFjdC5jbG9uZUVsZW1lbnQoaWNvblByb3AsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiaWNvbkNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0pXG4gICAgfSk7XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFhdmF0YXIgfHwgIWljb24sICdNYXRlcmlhbC1VSTogdGhlIENoaXAgY29tcG9uZW50IGNhbiBub3QgaGFuZGxlIHRoZSBhdmF0YXIgJyArICdhbmQgdGhlIGljb24gcHJvcGVydHkgYXQgdGhlIHNhbWUgdGltZS4gUGljayBvbmUuJykgOiB2b2lkIDA7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaXBSZWYsIHJlZik7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IGNsaWNrYWJsZSB8fCBvbkRlbGV0ZSA/ICdidXR0b24nIDogdW5kZWZpbmVkLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHRhYkluZGV4OiBjbGlja2FibGUgfHwgb25EZWxldGUgPyAwIDogdW5kZWZpbmVkLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0sIG90aGVyKSwgYXZhdGFyIHx8IGljb24sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgbGFiZWwpLCBkZWxldGVJY29uKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hpcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBdmF0YXIgZWxlbWVudC5cbiAgICovXG4gIGF2YXRhcjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3BlcnR5IGlmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4gc3RydWN0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IHVuc3VwcG9ydGVkUHJvcCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGNoaXAgd2lsbCBhcHBlYXIgY2xpY2thYmxlLCBhbmQgd2lsbCByYWlzZSB3aGVuIHByZXNzZWQsXG4gICAqIGV2ZW4gaWYgdGhlIG9uQ2xpY2sgcHJvcGVydHkgaXMgbm90IGRlZmluZWQuXG4gICAqIElmIGZhbHNlLCB0aGUgY2hpcCB3aWxsIG5vdCBiZSBjbGlja2FibGUsIGV2ZW4gaWYgb25DbGljayBwcm9wZXJ0eSBpcyBkZWZpbmVkLlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSxcbiAgICogYWxvbmcgd2l0aCB0aGUgY29tcG9uZW50IHByb3BlcnR5IHRvIGluZGljYXRlIGFuIGFuY2hvciBDaGlwIGlzIGNsaWNrYWJsZS5cbiAgICovXG4gIGNsaWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBkZWxldGUgaWNvbiBlbGVtZW50LiBTaG93biBvbmx5IGlmIGBvbkRlbGV0ZWAgaXMgc2V0LlxuICAgKi9cbiAgZGVsZXRlSWNvbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBkZWxldGUgaWNvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBzZXQsIHRoZSBkZWxldGUgaWNvbiB3aWxsIGJlIHNob3duLlxuICAgKi9cbiAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdvdXRsaW5lZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDaGlwJ1xufSkoQ2hpcCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG52YXIgU0laRSA9IDQ0O1xuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVZhbHVlKHZhbHVlLCBtaW4sIG1heCkge1xuICB2YXIgY2xhbXBlZFZhbHVlID0gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG4gIHJldHVybiAoY2xhbXBlZFZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xufVxuXG5mdW5jdGlvbiBlYXNlT3V0KHQpIHtcbiAgdCA9IGdldFJlbGF0aXZlVmFsdWUodCwgMCwgMSk7IC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dyZS8xNjUwMjk0XG5cbiAgdCA9ICh0IC09IDEpICogdCAqIHQgKyAxO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gZWFzZUluKHQpIHtcbiAgcmV0dXJuIHQgKiB0O1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBsaW5lSGVpZ2h0OiAxIC8vIEtlZXAgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN0YXRpY1wiYC4gKi9cbiAgICBzdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImluZGV0ZXJtaW5hdGVcImAuICovXG4gICAgaW5kZXRlcm1pbmF0ZToge1xuICAgICAgYW5pbWF0aW9uOiAnbXVpLXByb2dyZXNzLWNpcmN1bGFyLXJvdGF0ZSAxLjRzIGxpbmVhciBpbmZpbml0ZScsXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRtdWktcHJvZ3Jlc3MtY2lyY3VsYXItcm90YXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgc3ZnYCBlbGVtZW50LiAqL1xuICAgIHN2Zzoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGguICovXG4gICAgY2lyY2xlOiB7XG4gICAgICBzdHJva2U6ICdjdXJyZW50Q29sb3InIC8vIFVzZSBidXR0IHRvIGZvbGxvdyB0aGUgc3BlY2lmaWNhdGlvbiwgYnkgY2hhbmNlLCBpdCdzIGFscmVhZHkgdGhlIGRlZmF1bHQgQ1NTIHZhbHVlLlxuICAgICAgLy8gc3Ryb2tlTGluZWNhcDogJ2J1dHQnLFxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgdmFyaWFudD1cInN0YXRpY1wiYC4gKi9cbiAgICBjaXJjbGVTdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlXCJgLiAqL1xuICAgIGNpcmNsZUluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIGFuaW1hdGlvbjogJ211aS1wcm9ncmVzcy1jaXJjdWxhci1kYXNoIDEuNHMgZWFzZS1pbi1vdXQgaW5maW5pdGUnLFxuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJsZSBsb2dpYyBiZXR3ZWVuIEpTUyB2OSBhbmQgdjEwLlxuICAgICAgLy8gVG8gcmVtb3ZlIHdpdGggdGhlIHJlbGVhc2Ugb2YgTWF0ZXJpYWwtVUkgdjRcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckbXVpLXByb2dyZXNzLWNpcmN1bGFyLWRhc2gnLFxuICAgICAgLy8gU29tZSBkZWZhdWx0IHZhbHVlIHRoYXQgbG9va3MgZmluZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGtpY2tzIGluLlxuICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnODBweCwgMjAwcHgnLFxuICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCcgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cblxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXByb2dyZXNzLWNpcmN1bGFyLXJvdGF0ZSc6IHtcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMzYwZGVnKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1kYXNoJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxMDBweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnLTE1cHgnXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHN0cm9rZURhc2hhcnJheTogJzEwMHB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICctMTI1cHgnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgZGlzYWJsZVNocmluaz17dHJ1ZX1gLiAqL1xuICAgIGNpcmNsZURpc2FibGVTaHJpbms6IHtcbiAgICAgIGFuaW1hdGlvbjogJ25vbmUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG52YXIgQ2lyY3VsYXJQcm9ncmVzcyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU2hyaW5rID0gcHJvcHMuZGlzYWJsZVNocmluayxcbiAgICAgIGRpc2FibGVTaHJpbmsgPSBfcHJvcHMkZGlzYWJsZVNocmluayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNocmluayxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gNDAgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGhpY2tuZXNzID0gcHJvcHMudGhpY2tuZXNzLFxuICAgICAgdGhpY2tuZXNzID0gX3Byb3BzJHRoaWNrbmVzcyA9PT0gdm9pZCAwID8gMy42IDogX3Byb3BzJHRoaWNrbmVzcyxcbiAgICAgIF9wcm9wcyR2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFsdWUgPSBfcHJvcHMkdmFsdWUgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkdmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdpbmRldGVybWluYXRlJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVTaHJpbmtcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0aGlja25lc3NcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBjaXJjbGVTdHlsZSA9IHt9O1xuICB2YXIgcm9vdFN0eWxlID0ge307XG4gIHZhciByb290UHJvcHMgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAnc3RhdGljJykge1xuICAgIHZhciBjaXJjdW1mZXJlbmNlID0gMiAqIE1hdGguUEkgKiAoKFNJWkUgLSB0aGlja25lc3MpIC8gMik7XG4gICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gY2lyY3VtZmVyZW5jZS50b0ZpeGVkKDMpO1xuICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG5cbiAgICBpZiAodmFyaWFudCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBcIlwiLmNvbmNhdCgoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyksIFwicHhcIik7XG4gICAgICByb290U3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgtOTBkZWcpJztcbiAgICB9IGVsc2Uge1xuICAgICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IFwiXCIuY29uY2F0KChlYXNlSW4oKDEwMCAtIHZhbHVlKSAvIDEwMCkgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpLCBcInB4XCIpO1xuICAgICAgcm9vdFN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKFwiLmNvbmNhdCgoZWFzZU91dCh2YWx1ZSAvIDcwKSAqIDI3MCkudG9GaXhlZCgzKSwgXCJkZWcpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCB2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgJiYgY2xhc3Nlcy5pbmRldGVybWluYXRlLCB2YXJpYW50ID09PSAnc3RhdGljJyAmJiBjbGFzc2VzLnN0YXRpYywgY2xhc3NOYW1lKSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9LCByb290U3R5bGUsIHN0eWxlKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdmcsXG4gICAgdmlld0JveDogXCJcIi5jb25jYXQoU0laRSAvIDIsIFwiIFwiKS5jb25jYXQoU0laRSAvIDIsIFwiIFwiKS5jb25jYXQoU0laRSwgXCIgXCIpLmNvbmNhdChTSVpFKVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jaXJjbGUsIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjbGFzc2VzLmNpcmNsZUluZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdzdGF0aWMnICYmIGNsYXNzZXMuY2lyY2xlU3RhdGljLCBkaXNhYmxlU2hyaW5rICYmIGNsYXNzZXMuY2lyY2xlRGlzYWJsZVNocmluayksXG4gICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgIGN4OiBTSVpFLFxuICAgIGN5OiBTSVpFLFxuICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlV2lkdGg6IHRoaWNrbmVzc1xuICB9KSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDaXJjdWxhclByb2dyZXNzLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVTaHJpbmsgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogeW91IGhhdmUgcHJvdmlkZWQgdGhlIGBkaXNhYmxlU2hyaW5rYCBwcm9wZXJ0eSAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY2lyY2xlLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHRoaWNrbmVzcyBvZiB0aGUgY2lyY2xlLlxuICAgKi9cbiAgdGhpY2tuZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIGFuZCBzdGF0aWMgdmFyaWFudHMuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogVXNlIGluZGV0ZXJtaW5hdGUgd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAnc3RhdGljJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBmbGlwOiBmYWxzZVxufSkoQ2lyY3VsYXJQcm9ncmVzcyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiB1c2VNb3VudGVkUmVmKCkge1xuICB2YXIgbW91bnRlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgbW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gbW91bnRlZFJlZjtcbn1cblxuZnVuY3Rpb24gbWFwRXZlbnRQcm9wVG9FdmVudChldmVudFByb3ApIHtcbiAgcmV0dXJuIGV2ZW50UHJvcC5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKTtcbn1cbi8qKlxuICogTGlzdGVuIGZvciBjbGljayBldmVudHMgdGhhdCBvY2N1ciBzb21ld2hlcmUgaW4gdGhlIGRvY3VtZW50LCBvdXRzaWRlIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqIEZvciBpbnN0YW5jZSwgaWYgeW91IG5lZWQgdG8gaGlkZSBhIG1lbnUgd2hlbiBwZW9wbGUgY2xpY2sgYW55d2hlcmUgZWxzZSBvbiB5b3VyIHBhZ2UuXG4gKi9cblxuXG5mdW5jdGlvbiBDbGlja0F3YXlMaXN0ZW5lcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRtb3VzZUV2ZW50ID0gcHJvcHMubW91c2VFdmVudCxcbiAgICAgIG1vdXNlRXZlbnQgPSBfcHJvcHMkbW91c2VFdmVudCA9PT0gdm9pZCAwID8gJ29uQ2xpY2snIDogX3Byb3BzJG1vdXNlRXZlbnQsXG4gICAgICBfcHJvcHMkdG91Y2hFdmVudCA9IHByb3BzLnRvdWNoRXZlbnQsXG4gICAgICB0b3VjaEV2ZW50ID0gX3Byb3BzJHRvdWNoRXZlbnQgPT09IHZvaWQgMCA/ICdvblRvdWNoRW5kJyA6IF9wcm9wcyR0b3VjaEV2ZW50LFxuICAgICAgb25DbGlja0F3YXkgPSBwcm9wcy5vbkNsaWNrQXdheTtcbiAgdmFyIG1vdW50ZWRSZWYgPSB1c2VNb3VudGVkUmVmKCk7XG4gIHZhciBtb3ZlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpOyAvLyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGRyb3Agc3VwcG9ydCBmb3Igbm9uIHJlZiBmb3J3YXJkaW5nIGNsYXNzIGNvbXBvbmVudHNcblxuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBub2RlUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBoYW5kbGVPd25SZWYpO1xuICB2YXIgaGFuZGxlQ2xpY2tBd2F5ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyB0aGF0IGhhdmUgYmVlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgbWFya2VkLlxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJRSAxMSBzdXBwb3J0LCB3aGljaCB0cmlnZ2VyIHRoZSBoYW5kbGVDbGlja0F3YXkgZXZlbiBhZnRlciB0aGUgdW5iaW5kXG5cblxuICAgIGlmICghbW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEbyBub3QgYWN0IGlmIHVzZXIgcGVyZm9ybWVkIHRvdWNobW92ZVxuXG5cbiAgICBpZiAobW92ZWRSZWYuY3VycmVudCkge1xuICAgICAgbW92ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub2RlID0gbm9kZVJlZi5jdXJyZW50OyAvLyBUaGUgY2hpbGQgbWlnaHQgcmVuZGVyIG51bGwuXG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcblxuICAgIGlmIChkb2MuZG9jdW1lbnRFbGVtZW50ICYmIGRvYy5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhbm9kZS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICBvbkNsaWNrQXdheShldmVudCk7XG4gICAgfVxuICB9LCBbbW91bnRlZFJlZiwgb25DbGlja0F3YXldKTtcbiAgdmFyIGhhbmRsZVRvdWNoTW92ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtb3ZlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0b3VjaEV2ZW50ICE9PSBmYWxzZSkge1xuICAgICAgdmFyIG1hcHBlZFRvdWNoRXZlbnQgPSBtYXBFdmVudFByb3BUb0V2ZW50KHRvdWNoRXZlbnQpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihtYXBwZWRUb3VjaEV2ZW50LCBoYW5kbGVDbGlja0F3YXkpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobWFwcGVkVG91Y2hFdmVudCwgaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2hhbmRsZUNsaWNrQXdheSwgaGFuZGxlVG91Y2hNb3ZlLCB0b3VjaEV2ZW50XSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1vdXNlRXZlbnQgIT09IGZhbHNlKSB7XG4gICAgICB2YXIgbWFwcGVkTW91c2VFdmVudCA9IG1hcEV2ZW50UHJvcFRvRXZlbnQobW91c2VFdmVudCk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKG1hcHBlZE1vdXNlRXZlbnQsIGhhbmRsZUNsaWNrQXdheSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG1hcHBlZE1vdXNlRXZlbnQsIGhhbmRsZUNsaWNrQXdheSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtoYW5kbGVDbGlja0F3YXksIG1vdXNlRXZlbnRdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2xpY2tBd2F5TGlzdGVuZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIHdyYXBwZWQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBtb3VzZSBldmVudCB0byBsaXN0ZW4gdG8uIFlvdSBjYW4gZGlzYWJsZSB0aGUgbGlzdGVuZXIgYnkgcHJvdmlkaW5nIGBmYWxzZWAuXG4gICAqL1xuICBtb3VzZUV2ZW50OiBQcm9wVHlwZXMub25lT2YoWydvbkNsaWNrJywgJ29uTW91c2VEb3duJywgJ29uTW91c2VVcCcsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBcImNsaWNrIGF3YXlcIiBldmVudCBpcyBkZXRlY3RlZC5cbiAgICovXG4gIG9uQ2xpY2tBd2F5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdG91Y2ggZXZlbnQgdG8gbGlzdGVuIHRvLiBZb3UgY2FuIGRpc2FibGUgdGhlIGxpc3RlbmVyIGJ5IHByb3ZpZGluZyBgZmFsc2VgLlxuICAgKi9cbiAgdG91Y2hFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnb25Ub3VjaFN0YXJ0JywgJ29uVG91Y2hFbmQnLCBmYWxzZV0pXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQ2xpY2tBd2F5TGlzdGVuZXJbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoQ2xpY2tBd2F5TGlzdGVuZXIucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xpY2tBd2F5TGlzdGVuZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnaGVpZ2h0JylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IHdoZW4gdGhlIHRyYW5zaXRpb24gaGFzIGVudGVyZWQuICovXG4gICAgZW50ZXJlZDoge1xuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBleGl0ZWQgYW5kIGBjb2xsYXBzZWRIZWlnaHRgICE9IDBweC4gKi9cbiAgICBoaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBvdXRlciB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgd3JhcHBlcjoge1xuICAgICAgLy8gSGFjayB0byBnZXQgY2hpbGRyZW4gd2l0aCBhIG5lZ2F0aXZlIG1hcmdpbiB0byBub3QgZmFsc2lmeSB0aGUgaGVpZ2h0IGNvbXB1dGF0aW9uLlxuICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgd3JhcHBlcklubmVyOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogVGhlIENvbGxhcHNlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGVcbiAqIFtWZXJ0aWNhbCBTdGVwcGVyXSgvY29tcG9uZW50cy9zdGVwcGVycy8jdmVydGljYWwtc3RlcHBlcikgU3RlcENvbnRlbnQgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgQ29sbGFwc2UgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbGxhcHNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xsYXBzZWRIZWlnaCA9IHByb3BzLmNvbGxhcHNlZEhlaWdodCxcbiAgICAgIGNvbGxhcHNlZEhlaWdodCA9IF9wcm9wcyRjb2xsYXBzZWRIZWlnaCA9PT0gdm9pZCAwID8gJzBweCcgOiBfcHJvcHMkY29sbGFwc2VkSGVpZ2gsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/IGR1cmF0aW9uLnN0YW5kYXJkIDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sbGFwc2VkSGVpZ2h0XCIsIFwiY29tcG9uZW50XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGhlbWVcIiwgXCJ0aW1lb3V0XCJdKTtcblxuICB2YXIgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHdyYXBwZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIobm9kZSkge1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gY29sbGFwc2VkSGVpZ2h0O1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyaW5nKG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlckhlaWdodCk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KGR1cmF0aW9uMiwgXCJtc1wiKTtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IFwiXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtc1wiKTtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHdyYXBwZXJIZWlnaHQsIFwicHhcIik7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmVkKG5vZGUpIHtcbiAgICBub2RlLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcblxuICAgIGlmIChvbkVudGVyZWQpIHtcbiAgICAgIG9uRW50ZXJlZChub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0KG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQod3JhcHBlckhlaWdodCwgXCJweFwiKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXRpbmcgPSBmdW5jdGlvbiBoYW5kbGVFeGl0aW5nKG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMyID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZHVyYXRpb247XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB2YXIgZHVyYXRpb24yID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKHdyYXBwZXJIZWlnaHQpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiLmNvbmNhdChkdXJhdGlvbjIsIFwibXNcIik7XG4gICAgICBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgPSBkdXJhdGlvbjI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHlwZW9mIHRyYW5zaXRpb25EdXJhdGlvbiA9PT0gJ3N0cmluZycgPyB0cmFuc2l0aW9uRHVyYXRpb24gOiBcIlwiLmNvbmNhdCh0cmFuc2l0aW9uRHVyYXRpb24sIFwibXNcIik7XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBjb2xsYXBzZWRIZWlnaHQ7XG5cbiAgICBpZiAob25FeGl0aW5nKSB7XG4gICAgICBvbkV4aXRpbmcobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKF8sIG5leHQpIHtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBhZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGFpbmVyLCBzdGF0ZSA9PT0gJ2VudGVyZWQnICYmIGNsYXNzZXMuZW50ZXJlZCwgc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgJiYgY29sbGFwc2VkSGVpZ2h0ID09PSAnMHB4JyAmJiBjbGFzc2VzLmhpZGRlbiwgY2xhc3NOYW1lKSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIG1pbkhlaWdodDogY29sbGFwc2VkSGVpZ2h0XG4gICAgICB9LCBzdHlsZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIGNoaWxkUHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53cmFwcGVyLFxuICAgICAgcmVmOiB3cmFwcGVyUmVmXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlcklubmVyXG4gICAgfSwgY2hpbGRyZW4pKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb2xsYXBzZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBub2RlIHRvIGJlIGNvbGxhcHNlZC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgY29udGFpbmVyIHdoZW4gY29sbGFwc2VkLlxuICAgKi9cbiAgY29sbGFwc2VkSGVpZ2h0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pLCBQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pXSlcbn0gOiB2b2lkIDA7XG5Db2xsYXBzZS5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICB3aXRoVGhlbWU6IHRydWUsXG4gIG5hbWU6ICdNdWlDb2xsYXBzZSdcbn0pKENvbGxhcHNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICcuLi9zdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBfcm9vdDtcblxuICByZXR1cm4ge1xuICAgIHJvb3Q6IChfcm9vdCA9IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1hcmdpblJpZ2h0OiAnYXV0bycsXG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKVxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfcm9vdCwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcm9vdCwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksIHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDQpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDQpXG4gICAgfSksIF9yb290KSxcbiAgICBmaXhlZDogT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuXG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgICBtYXhXaWR0aDogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSksXG4gICAgbWF4V2lkdGhYczogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneHMnKSwge1xuICAgICAgbWF4V2lkdGg6IE1hdGgubWF4KHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54cywgNDQ0KVxuICAgIH0pLFxuICAgIG1heFdpZHRoU206IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMuc21cbiAgICB9KSxcbiAgICBtYXhXaWR0aE1kOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXG4gICAgfSksXG4gICAgbWF4V2lkdGhMZzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbGcnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5sZ1xuICAgIH0pLFxuICAgIG1heFdpZHRoWGw6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hsJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueGxcbiAgICB9KVxuICB9O1xufTtcbnZhciBDb250YWluZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbnRhaW5lcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZml4ZWQgPSBwcm9wcy5maXhlZCxcbiAgICAgIGZpeGVkID0gX3Byb3BzJGZpeGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmaXhlZCxcbiAgICAgIF9wcm9wcyRtYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoLFxuICAgICAgbWF4V2lkdGggPSBfcHJvcHMkbWF4V2lkdGggPT09IHZvaWQgMCA/ICdsZycgOiBfcHJvcHMkbWF4V2lkdGgsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImZpeGVkXCIsIFwibWF4V2lkdGhcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGZpeGVkICYmIGNsYXNzZXMuZml4ZWQsIG1heFdpZHRoICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wibWF4V2lkdGhcIi5jb25jYXQoY2FwaXRhbGl6ZShTdHJpbmcobWF4V2lkdGgpKSldLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBtYXgtd2lkdGggb2YgdGhlIGNvbnRhaW5lci5cbiAgICogVGhlIGNvbnRhaW5lciB3aWR0aCBncm93cyB3aXRoIHRoZSBzaXplIG9mIHRoZSBzY3JlZW4uXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIGRpc2FibGUgYG1heFdpZHRoYC5cbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIGZhbHNlXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ29udGFpbmVyJ1xufSkoQ29udGFpbmVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG52YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhmdW5jdGlvbiAodGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAnQGdsb2JhbCc6IHtcbiAgICAgIGh0bWw6IHtcbiAgICAgICAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgICAgICAgLy8gQW50aWFsaWFzaW5nLlxuICAgICAgICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgICAgICAgLy8gQW50aWFsaWFzaW5nLlxuICAgICAgICAvLyBDaGFuZ2UgZnJvbSBgYm94LXNpemluZzogY29udGVudC1ib3hgIHNvIHRoYXQgYHdpZHRoYFxuICAgICAgICAvLyBpcyBub3QgYWZmZWN0ZWQgYnkgYHBhZGRpbmdgIG9yIGBib3JkZXJgLlxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcbiAgICAgICcqLCAqOjpiZWZvcmUsICo6OmFmdGVyJzoge1xuICAgICAgICBib3hTaXppbmc6ICdpbmhlcml0J1xuICAgICAgfSxcbiAgICAgICdzdHJvbmcsIGInOiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bVxuICAgICAgfSxcbiAgICAgIGJvZHk6IF9leHRlbmRzKHtcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgICAgfSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICAgIC8vIFNhdmUgcHJpbnRlciBpbmsuXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0sIHtcbiAgbmFtZTogJ011aUNzc0Jhc2VsaW5lJ1xufSk7XG4vKipcbiAqIEtpY2tzdGFydCBhbiBlbGVnYW50LCBjb25zaXN0ZW50LCBhbmQgc2ltcGxlIGJhc2VsaW5lIHRvIGJ1aWxkIHVwb24uXG4gKi9cblxuZnVuY3Rpb24gQ3NzQmFzZWxpbmUocHJvcHMpIHtcbiAgdmFyIF9wcm9wcyRjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2hpbGRyZW4gPSBfcHJvcHMkY2hpbGRyZW4gPT09IHZvaWQgMCA/IG51bGwgOiBfcHJvcHMkY2hpbGRyZW47XG4gIHVzZVN0eWxlcygpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDc3NCYXNlbGluZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3UgY2FuIHdyYXAgYSBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQ3NzQmFzZWxpbmVbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoQ3NzQmFzZWxpbmUucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3NzQmFzZWxpbmU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS1lbGVtZW50LWludGVyYWN0aW9ucyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgQmFja2Ryb3AgZnJvbSAnLi4vQmFja2Ryb3AnO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi4vRmFkZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNjcm9sbD1cInBhcGVyXCJgLiAqL1xuICAgIHNjcm9sbFBhcGVyOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzY3JvbGw9XCJib2R5XCJgLiAqL1xuICAgIHNjcm9sbEJvZHk6IHtcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgICB9LFxuICAgICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gICAgcGFwZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgbWFyZ2luOiA0OCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAvLyBGaXggSUUgMTEgaXNzdWUsIHRvIHJlbW92ZSBhdCBzb21lIHBvaW50LlxuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgb3ZlcmZsb3dZOiAndmlzaWJsZScsXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgc2Nyb2xsPVwicGFwZXJcImAuICovXG4gICAgcGFwZXJTY3JvbGxQYXBlcjoge1xuICAgICAgZmxleDogJzAgMSBhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDk2cHgpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYHNjcm9sbD1cImJvZHlcImAuICovXG4gICAgcGFwZXJTY3JvbGxCb2R5OiB7XG4gICAgICBtYXJnaW46ICc0OHB4IGF1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9ZmFsc2VgLiAqL1xuICAgIHBhcGVyV2lkdGhGYWxzZToge1xuICAgICAgJyYkcGFwZXJTY3JvbGxCb2R5Jzoge1xuICAgICAgICBtYXJnaW46IDQ4XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9XCJ4c1wiYC4gKi9cbiAgICBwYXBlcldpZHRoWHM6IHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NCksXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24oTWF0aC5tYXgodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhzLCA0NDQpICsgNDggKiAyKSwge1xuICAgICAgICBtYXJnaW46IDQ4XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYG1heFdpZHRoPVwic21cImAuICovXG4gICAgcGFwZXJXaWR0aFNtOiB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnNtLFxuICAgICAgJyYkcGFwZXJTY3JvbGxCb2R5JzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5kb3duKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbSArIDQ4ICogMiksIHtcbiAgICAgICAgbWFyZ2luOiA0OFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBtYXhXaWR0aD1cIm1kXCJgLiAqL1xuICAgIHBhcGVyV2lkdGhNZDoge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5tZCxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bih0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubWQgKyA0OCAqIDIpLCB7XG4gICAgICAgIG1hcmdpbjogNDhcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9XCJsZ1wiYC4gKi9cbiAgICBwYXBlcldpZHRoTGc6IHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubGcsXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24odGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLmxnICsgNDggKiAyKSwge1xuICAgICAgICBtYXJnaW46IDQ4XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYG1heFdpZHRoPVwieGxcImAuICovXG4gICAgcGFwZXJXaWR0aFhsOiB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhsLFxuICAgICAgJyYkcGFwZXJTY3JvbGxCb2R5JzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5kb3duKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54bCArIDQ4ICogMiksIHtcbiAgICAgICAgbWFyZ2luOiA0OFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBwYXBlckZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IHtcbiAgICAgICAgd2lkdGg6ICdpbml0aWFsJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGZ1bGxTY3JlZW49e3RydWV9YC4gKi9cbiAgICBwYXBlckZ1bGxTY3JlZW46IHtcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXhIZWlnaHQ6ICdub25lJyxcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IHtcbiAgICAgICAgbWFyZ2luOiAwXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIERpYWxvZ3MgYXJlIG92ZXJsYWlkIG1vZGFsIHBhcGVyIGJhc2VkIGNvbXBvbmVudHMgd2l0aCBhIGJhY2tkcm9wLlxuICovXG5cbnZhciBEaWFsb2cgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpYWxvZyhwcm9wcywgcmVmKSB7XG4gIHZhciBCYWNrZHJvcFByb3BzID0gcHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQmFja2RybyA9IHByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgICAgZGlzYWJsZUJhY2tkcm9wQ2xpY2sgPSBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVCYWNrZHJvLFxuICAgICAgX3Byb3BzJGRpc2FibGVFc2NhcGVLID0gcHJvcHMuZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IF9wcm9wcyRkaXNhYmxlRXNjYXBlSyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVzY2FwZUssXG4gICAgICBfcHJvcHMkZnVsbFNjcmVlbiA9IHByb3BzLmZ1bGxTY3JlZW4sXG4gICAgICBmdWxsU2NyZWVuID0gX3Byb3BzJGZ1bGxTY3JlZW4gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxTY3JlZW4sXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJG1heFdpZHRoID0gcHJvcHMubWF4V2lkdGgsXG4gICAgICBtYXhXaWR0aCA9IF9wcm9wcyRtYXhXaWR0aCA9PT0gdm9pZCAwID8gJ3NtJyA6IF9wcm9wcyRtYXhXaWR0aCxcbiAgICAgIG9uQmFja2Ryb3BDbGljayA9IHByb3BzLm9uQmFja2Ryb3BDbGljayxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9uRXNjYXBlS2V5RG93biA9IHByb3BzLm9uRXNjYXBlS2V5RG93bixcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRQYXBlckNvbXBvbmVudCA9IHByb3BzLlBhcGVyQ29tcG9uZW50LFxuICAgICAgUGFwZXJDb21wb25lbnQgPSBfcHJvcHMkUGFwZXJDb21wb25lbnQgPT09IHZvaWQgMCA/IFBhcGVyIDogX3Byb3BzJFBhcGVyQ29tcG9uZW50LFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgX3Byb3BzJHNjcm9sbCA9IHByb3BzLnNjcm9sbCxcbiAgICAgIHNjcm9sbCA9IF9wcm9wcyRzY3JvbGwgPT09IHZvaWQgMCA/ICdwYXBlcicgOiBfcHJvcHMkc2Nyb2xsLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IEZhZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBUcmFuc2l0aW9uUHJvcHMgPSBwcm9wcy5UcmFuc2l0aW9uUHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVCYWNrZHJvcENsaWNrXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJmdWxsU2NyZWVuXCIsIFwiZnVsbFdpZHRoXCIsIFwibWF4V2lkdGhcIiwgXCJvbkJhY2tkcm9wQ2xpY2tcIiwgXCJvbkNsb3NlXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkVzY2FwZUtleURvd25cIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9wZW5cIiwgXCJQYXBlckNvbXBvbmVudFwiLCBcIlBhcGVyUHJvcHNcIiwgXCJzY3JvbGxcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICB2YXIgbW91c2VEb3duVGFyZ2V0ID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIG1vdXNlRG93blRhcmdldC5jdXJyZW50ID0gZXZlbnQudGFyZ2V0O1xuICB9O1xuXG4gIHZhciBoYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gaGFuZGxlQmFja2Ryb3BDbGljayhldmVudCkge1xuICAgIC8vIElnbm9yZSB0aGUgZXZlbnRzIG5vdCBjb21pbmcgZnJvbSB0aGUgXCJiYWNrZHJvcFwiXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbG9zZSB0aGUgZGlhbG9nIHdoZW4gY2xpY2tpbmcgdGhlIGRpYWxvZyBjb250ZW50LlxuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgZXZlbnQgc3RhcnRzIGFuZCBlbmRzIG9uIHRoZSBzYW1lIERPTSBlbGVtZW50LlxuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBtb3VzZURvd25UYXJnZXQuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdXNlRG93blRhcmdldC5jdXJyZW50ID0gbnVsbDtcblxuICAgIGlmIChvbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgIG9uQmFja2Ryb3BDbGljayhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNhYmxlQmFja2Ryb3BDbGljayAmJiBvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgQmFja2Ryb3BDb21wb25lbnQ6IEJhY2tkcm9wLFxuICAgIEJhY2tkcm9wUHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgfSwgQmFja2Ryb3BQcm9wcyksXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb246IHRydWUsXG4gICAgZGlzYWJsZUJhY2tkcm9wQ2xpY2s6IGRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duOiBkaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICBvbkVzY2FwZUtleURvd246IG9uRXNjYXBlS2V5RG93bixcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJkaWFsb2dcIlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogb3BlbixcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgb25FbnRlcjogb25FbnRlcixcbiAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRXhpdDogb25FeGl0LFxuICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgIG9uRXhpdGVkOiBvbkV4aXRlZFxuICB9LCBUcmFuc2l0aW9uUHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jb250YWluZXIsIGNsYXNzZXNbXCJzY3JvbGxcIi5jb25jYXQoY2FwaXRhbGl6ZShzY3JvbGwpKV0pLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUJhY2tkcm9wQ2xpY2ssXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICByb2xlOiBcImRvY3VtZW50XCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlckNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogMjRcbiAgfSwgUGFwZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBjbGFzc2VzW1wicGFwZXJTY3JvbGxcIi5jb25jYXQoY2FwaXRhbGl6ZShzY3JvbGwpKV0sIGNsYXNzZXNbXCJwYXBlcldpZHRoXCIuY29uY2F0KGNhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSkpXSwgZnVsbFNjcmVlbiAmJiBjbGFzc2VzLnBhcGVyRnVsbFNjcmVlbiwgZnVsbFdpZHRoICYmIGNsYXNzZXMucGFwZXJGdWxsV2lkdGgsIFBhcGVyUHJvcHMuY2xhc3NOYW1lKVxuICB9KSwgY2hpbGRyZW4pKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2cucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogRGlhbG9nIGNoaWxkcmVuLCB1c3VhbGx5IHRoZSBpbmNsdWRlZCBzdWItY29tcG9uZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNsaWNraW5nIHRoZSBiYWNrZHJvcCB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaWFsb2cgd2lsbCBiZSBmdWxsLXNjcmVlblxuICAgKi9cbiAgZnVsbFNjcmVlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpYWxvZyBzdHJldGNoZXMgdG8gYG1heFdpZHRoYC5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBkaWFsb2cuXG4gICAqIFRoZSBkaWFsb2cgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqL1xuICBtYXhXaWR0aDogUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOmBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImBcbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGRpYWxvZyBlbnRlcnMuXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGlhbG9nIGhhcyBlbnRlcmVkLlxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGlhbG9nIGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCxcbiAgICogYGRpc2FibGVLZXlib2FyZGAgaXMgZmFsc2UgYW5kIHRoZSBtb2RhbCBpcyBpbiBmb2N1cy5cbiAgICovXG4gIG9uRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgZGlhbG9nIGV4aXRzLlxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGlhbG9nIGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGRpYWxvZyBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgRGlhbG9nIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcmVuZGVyIHRoZSBib2R5IG9mIHRoZSBkaWFsb2cuXG4gICAqL1xuICBQYXBlckNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgY29udGFpbmVyIGZvciBzY3JvbGxpbmcgdGhlIGRpYWxvZy5cbiAgICovXG4gIHNjcm9sbDogUHJvcFR5cGVzLm9uZU9mKFsnYm9keScsICdwYXBlciddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBUcmFuc2l0aW9uYCBlbGVtZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpYWxvZydcbn0pKERpYWxvZyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgJy4uL0J1dHRvbic7IC8vIFNvIHdlIGRvbid0IGhhdmUgYW55IG92ZXJyaWRlIHByaW9yaXR5IGlzc3VlLlxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiA4LFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVNwYWNpbmc9e2ZhbHNlfWAuICovXG4gIHNwYWNpbmc6IHtcbiAgICAnJiA+ICogKyAqJzoge1xuICAgICAgbWFyZ2luTGVmdDogOFxuICAgIH1cbiAgfVxufTtcbnZhciBEaWFsb2dBY3Rpb25zID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dBY3Rpb25zKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRkaXNhYmxlU3BhY2luZyA9IHByb3BzLmRpc2FibGVTcGFjaW5nLFxuICAgICAgZGlzYWJsZVNwYWNpbmcgPSBfcHJvcHMkZGlzYWJsZVNwYWNpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTcGFjaW5nLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZGlzYWJsZVNwYWNpbmdcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVTcGFjaW5nICYmIGNsYXNzZXMuc3BhY2luZywgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2dBY3Rpb25zLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGFjdGlvbnMgZG8gbm90IGhhdmUgYWRkaXRpb25hbCBtYXJnaW4uXG4gICAqL1xuICBkaXNhYmxlU3BhY2luZzogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQWN0aW9ucydcbn0pKERpYWxvZ0FjdGlvbnMpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICBwYWRkaW5nOiAnOHB4IDI0cHgnLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpdmlkZXJzPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcnM6IHtcbiAgICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlciksXG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9O1xufTtcbnZhciBEaWFsb2dDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dDb250ZW50KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpdmlkZXJzID0gcHJvcHMuZGl2aWRlcnMsXG4gICAgICBkaXZpZGVycyA9IF9wcm9wcyRkaXZpZGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGl2aWRlcnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpdmlkZXJzXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgZGl2aWRlcnMgJiYgY2xhc3Nlcy5kaXZpZGVycywgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2dDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgdGhlIHRvcCBhbmQgYm90dG9tIGRpdmlkZXJzLlxuICAgKi9cbiAgZGl2aWRlcnM6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpYWxvZ0NvbnRlbnQnXG59KShEaWFsb2dDb250ZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgbWFyZ2luQm90dG9tOiAxNlxuICB9XG59O1xudmFyIERpYWxvZ0NvbnRlbnRUZXh0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dDb250ZW50VGV4dChwcm9wcywgcmVmKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFwicFwiLFxuICAgIHZhcmlhbnQ6IFwiYm9keTFcIixcbiAgICBjb2xvcjogXCJ0ZXh0U2Vjb25kYXJ5XCIsXG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGlhbG9nQ29udGVudFRleHQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQ29udGVudFRleHQnXG59KShEaWFsb2dDb250ZW50VGV4dCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6ICcxNnB4IDI0cHgnLFxuICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgfVxufTtcbnZhciBEaWFsb2dUaXRsZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nVGl0bGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVUeXBvZ3JhID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVR5cG9ncmEsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgZGlzYWJsZVR5cG9ncmFwaHkgPyBjaGlsZHJlbiA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwge1xuICAgIHZhcmlhbnQ6IFwiaDZcIlxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2dUaXRsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSB0eXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogRm9yIGluc3RhbmNlLCB0aGlzIGNhbiBiZSB1c2VmdWwgdG8gcmVuZGVyIGFuIGg0IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgaDIuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nVGl0bGUnXG59KShEaWFsb2dUaXRsZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIC8vIFJlc2V0IGJyb3dzZXIgZGVmYXVsdCBzdHlsZS5cbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5kaXZpZGVyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFic29sdXRlPXt0cnVlfWAuICovXG4gICAgYWJzb2x1dGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImluc2V0XCJgLiAqL1xuICAgIGluc2V0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiA3MlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsaWdodD17dHJ1ZX1gLiAqL1xuICAgIGxpZ2h0OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAwLjA4KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwibWlkZGxlXCJgLiAqL1xuICAgIG1pZGRsZToge1xuICAgICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfVxuICB9O1xufTtcbnZhciBEaXZpZGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaXZpZGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhYnNvbHV0ZSA9IHByb3BzLmFic29sdXRlLFxuICAgICAgYWJzb2x1dGUgPSBfcHJvcHMkYWJzb2x1dGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGFic29sdXRlLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2hyJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkbGlnaHQgPSBwcm9wcy5saWdodCxcbiAgICAgIGxpZ2h0ID0gX3Byb3BzJGxpZ2h0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsaWdodCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2Z1bGxXaWR0aCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhYnNvbHV0ZVwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJsaWdodFwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIGlmIChDb21wb25lbnQgPT09ICdsaScgJiYgIW90aGVyLnJvbGUpIHtcbiAgICBvdGhlci5yb2xlID0gJ3NlcGFyYXRvcic7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCB2YXJpYW50ID09PSAnaW5zZXQnICYmIGNsYXNzZXMuaW5zZXQsIHZhcmlhbnQgPT09ICdtaWRkbGUnICYmIGNsYXNzZXMubWlkZGxlLCBhYnNvbHV0ZSAmJiBjbGFzc2VzLmFic29sdXRlLCBsaWdodCAmJiBjbGFzc2VzLmxpZ2h0LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQWJzb2x1dGVseSBwb3NpdGlvbiB0aGUgZWxlbWVudC5cbiAgICovXG4gIGFic29sdXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZGl2aWRlciB3aWxsIGhhdmUgYSBsaWdodGVyIGNvbG9yLlxuICAgKi9cbiAgbGlnaHQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiAgVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaXZpZGVyJ1xufSkoRGl2aWRlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfdG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0FycmF5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuLi9Db2xsYXBzZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIHRyYW5zaXRpb24gPSB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ21hcmdpbiddLCB0cmFuc2l0aW9uKSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogLTEsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmRpdmlkZXIsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAnYmFja2dyb3VuZC1jb2xvciddLCB0cmFuc2l0aW9uKVxuICAgICAgfSxcbiAgICAgICcmOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRleHBhbmRlZCc6IHtcbiAgICAgICAgbWFyZ2luOiAnMTZweCAwJyxcbiAgICAgICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiAwXG4gICAgICAgIH0sXG4gICAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgICAgbWFyZ2luQm90dG9tOiAwXG4gICAgICAgIH0sXG4gICAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRleHBhbmRlZCArICYnOiB7XG4gICAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgICAgfSxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICAgLy8gRml4IGEgcmVuZGVyaW5nIGlzc3VlIG9uIEVkZ2VcbiAgICAgICAgJ0BzdXBwb3J0cyAoLW1zLWltZS1hbGlnbjogYXV0byknOiB7XG4gICAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCxcbiAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGV4cGFuZGVkPXt0cnVlfWAuICovXG4gICAgZXhwYW5kZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge31cbiAgfTtcbn07XG52YXIgRXhwYW5zaW9uUGFuZWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEV4cGFuc2lvblBhbmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuUHJvcCA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGVmYXVsdEV4cGFuZGUgPSBwcm9wcy5kZWZhdWx0RXhwYW5kZWQsXG4gICAgICBkZWZhdWx0RXhwYW5kZWQgPSBfcHJvcHMkZGVmYXVsdEV4cGFuZGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlZmF1bHRFeHBhbmRlLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBleHBhbmRlZFByb3AgPSBwcm9wcy5leHBhbmRlZCxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBfcHJvcHMkc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgc3F1YXJlID0gX3Byb3BzJHNxdWFyZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc3F1YXJlLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IENvbGxhcHNlIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRFeHBhbmRlZFwiLCBcImRpc2FibGVkXCIsIFwiZXhwYW5kZWRcIiwgXCJvbkNoYW5nZVwiLCBcInNxdWFyZVwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKGV4cGFuZGVkUHJvcCAhPSBudWxsKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdEV4cGFuZGVkKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZXhwYW5kZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRFeHBhbmRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgZXhwYW5kZWQgPSBpc0NvbnRyb2xsZWQgPyBleHBhbmRlZFByb3AgOiBleHBhbmRlZFN0YXRlO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0RXhwYW5kZWRTdGF0ZSghZXhwYW5kZWQpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsICFleHBhbmRlZCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCksXG4gICAgICBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyID0gX3RvQXJyYXkoX1JlYWN0JENoaWxkcmVuJHRvQXJyKSxcbiAgICAgIHN1bW1hcnkgPSBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyWzBdLFxuICAgICAgY2hpbGRyZW4gPSBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyLnNsaWNlKDEpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgZXhwYW5kZWQgJiYgY2xhc3Nlcy5leHBhbmRlZCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgIXNxdWFyZSAmJiBjbGFzc2VzLnJvdW5kZWQsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgc3F1YXJlOiBzcXVhcmVcbiAgfSwgb3RoZXIpLCBSZWFjdC5jbG9uZUVsZW1lbnQoc3VtbWFyeSwge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBleHBhbmRlZDogZXhwYW5kZWQsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IGV4cGFuZGVkLFxuICAgIHRpbWVvdXQ6IFwiYXV0b1wiXG4gIH0sIFRyYW5zaXRpb25Qcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHN1bW1hcnkucHJvcHMuaWQsXG4gICAgaWQ6IHN1bW1hcnkucHJvcHNbJ2FyaWEtY29udHJvbHMnXSxcbiAgICByb2xlOiBcInJlZ2lvblwiXG4gIH0sIGNoaWxkcmVuKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFeHBhbnNpb25QYW5lbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgZXhwYW5zaW9uIHBhbmVsLlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbilbMF07XG5cbiAgICBpZiAoc3VtbWFyeS50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiB0aGUgRXhwYW5zaW9uUGFuZWwgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLiBcIiArICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KHN1bW1hcnkpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogZXhwZWN0ZWQgdGhlIGZpcnN0IGNoaWxkIG9mIEV4cGFuc2lvblBhbmVsIHRvIGJlIGEgdmFsaWQgZWxlbWVudC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZXhwYW5kcyB0aGUgcGFuZWwgYnkgZGVmYXVsdC5cbiAgICovXG4gIGRlZmF1bHRFeHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBhbmVsIHdpbGwgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZXhwYW5kcyB0aGUgcGFuZWwsIG90aGVyd2lzZSBjb2xsYXBzZSBpdC5cbiAgICogU2V0dGluZyB0aGlzIHByb3AgZW5hYmxlcyBjb250cm9sIG92ZXIgdGhlIHBhbmVsLlxuICAgKi9cbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBleHBhbmQvY29sbGFwc2Ugc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhwYW5kZWQgVGhlIGBleHBhbmRlZGAgc3RhdGUgb2YgdGhlIHBhbmVsXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGNvbGxhcHNlIGVmZmVjdC5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlFeHBhbnNpb25QYW5lbCdcbn0pKEV4cGFuc2lvblBhbmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCAnLi4vQnV0dG9uJzsgLy8gU28gd2UgZG9uJ3QgaGF2ZSBhbnkgb3ZlcnJpZGUgcHJpb3JpdHkgaXNzdWUuXG5cbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmc6IDgsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlU3BhY2luZz17ZmFsc2V9YC4gKi9cbiAgc3BhY2luZzoge1xuICAgICcmID4gKiArIConOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA4XG4gICAgfVxuICB9XG59O1xudmFyIEV4cGFuc2lvblBhbmVsQWN0aW9ucyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRXhwYW5zaW9uUGFuZWxBY3Rpb25zKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVTcGFjaW5nID0gcHJvcHMuZGlzYWJsZVNwYWNpbmcsXG4gICAgICBkaXNhYmxlU3BhY2luZyA9IF9wcm9wcyRkaXNhYmxlU3BhY2luZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNwYWNpbmcsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVTcGFjaW5nXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVTcGFjaW5nICYmIGNsYXNzZXMuc3BhY2luZywgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFeHBhbnNpb25QYW5lbEFjdGlvbnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3Rpb25zIGRvIG5vdCBoYXZlIGFkZGl0aW9uYWwgbWFyZ2luLlxuICAgKi9cbiAgZGlzYWJsZVNwYWNpbmc6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUV4cGFuc2lvblBhbmVsQWN0aW9ucydcbn0pKEV4cGFuc2lvblBhbmVsQWN0aW9ucyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nOiAnOHB4IDI0cHggMjRweCdcbiAgfVxufTtcbnZhciBFeHBhbnNpb25QYW5lbERldGFpbHMgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEV4cGFuc2lvblBhbmVsRGV0YWlscyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFeHBhbnNpb25QYW5lbERldGFpbHMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGV4cGFuc2lvbiBwYW5lbCBkZXRhaWxzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRXhwYW5zaW9uUGFuZWxEZXRhaWxzJ1xufSkoRXhwYW5zaW9uUGFuZWxEZXRhaWxzKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL0ljb25CdXR0b24nO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIHRyYW5zaXRpb24gPSB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtaW5IZWlnaHQ6IDggKiA2LFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbWluLWhlaWdodCcsICdiYWNrZ3JvdW5kLWNvbG9yJ10sIHRyYW5zaXRpb24pLFxuICAgICAgcGFkZGluZzogJzAgMjRweCAwIDI0cHgnLFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCknOiB7XG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICB9LFxuICAgICAgJyYkZXhwYW5kZWQnOiB7XG4gICAgICAgIG1pbkhlaWdodDogNjRcbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuMzhcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCwgY2hpbGRyZW4gd3JhcHBlciBlbGVtZW50IGFuZCBgSWNvbkJ1dHRvbmAgY29tcG9uZW50IGlmIGBleHBhbmRlZD17dHJ1ZX1gLiAqL1xuICAgIGV4cGFuZGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGFuZCBjaGlsZHJlbiB3cmFwcGVyIGVsZW1lbnRzIHdoZW4gZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNoaWxkcmVuIHdyYXBwZXIgZWxlbWVudC4gKi9cbiAgICBjb250ZW50OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4R3JvdzogMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ21hcmdpbiddLCB0cmFuc2l0aW9uKSxcbiAgICAgIG1hcmdpbjogJzEycHggMCcsXG4gICAgICAnJiRleHBhbmRlZCc6IHtcbiAgICAgICAgbWFyZ2luOiAnMjBweCAwJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYEljb25CdXR0b25gIGNvbXBvbmVudCB3aGVuIGBleHBhbmRJY29uYCBpcyBzdXBwbGllZC4gKi9cbiAgICBleHBhbmRJY29uOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMGRlZyknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAvLyBEaXNhYmxlIHRoZSBob3ZlciBlZmZlY3QgZm9yIHRoZSBJY29uQnV0dG9uLFxuICAgICAgICAvLyBiZWNhdXNlIGEgaG92ZXIgZWZmZWN0IHNob3VsZCBhcHBseSB0byB0aGUgZW50aXJlIEV4cGFuZCBidXR0b24gYW5kXG4gICAgICAgIC8vIG5vdCBvbmx5IHRvIHRoZSBJY29uQnV0dG9uLlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH0sXG4gICAgICAnJiRleHBhbmRlZCc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBFeHBhbnNpb25QYW5lbFN1bW1hcnkgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEV4cGFuc2lvblBhbmVsU3VtbWFyeShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIGV4cGFuZGVkID0gcHJvcHMuZXhwYW5kZWQsXG4gICAgICBleHBhbmRJY29uID0gcHJvcHMuZXhwYW5kSWNvbixcbiAgICAgIEljb25CdXR0b25Qcm9wcyA9IHByb3BzLkljb25CdXR0b25Qcm9wcyxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRm9jdXNWaXNpYmxlID0gcHJvcHMub25Gb2N1c1Zpc2libGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJleHBhbmRlZFwiLCBcImV4cGFuZEljb25cIiwgXCJJY29uQnV0dG9uUHJvcHNcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzVmlzaWJsZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZm9jdXNlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEZvY3VzZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGhhbmRsZUZvY3VzVmlzaWJsZSA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIHNldEZvY3VzZWRTdGF0ZSh0cnVlKTtcblxuICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBzZXRGb2N1c2VkU3RhdGUoZmFsc2UpO1xuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGZvY3VzUmlwcGxlOiBmYWxzZSxcbiAgICBkaXNhYmxlUmlwcGxlOiB0cnVlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBjb21wb25lbnQ6IFwiZGl2XCIsXG4gICAgXCJhcmlhLWV4cGFuZGVkXCI6IGV4cGFuZGVkLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGV4cGFuZGVkICYmIGNsYXNzZXMuZXhwYW5kZWQsIGZvY3VzZWRTdGF0ZSAmJiBjbGFzc2VzLmZvY3VzZWQsIGNsYXNzTmFtZSksXG4gICAgb25Gb2N1c1Zpc2libGU6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGVudCwgZXhwYW5kZWQgJiYgY2xhc3Nlcy5leHBhbmRlZClcbiAgfSwgY2hpbGRyZW4pLCBleHBhbmRJY29uICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5leHBhbmRJY29uLCBleHBhbmRlZCAmJiBjbGFzc2VzLmV4cGFuZGVkKSxcbiAgICBlZGdlOiBcImVuZFwiLFxuICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICB0YWJJbmRleDogLTEsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gIH0sIEljb25CdXR0b25Qcm9wcyksIGV4cGFuZEljb24pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBleHBhbnNpb24gcGFuZWwgc3VtbWFyeS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzdW1tYXJ5IHdpbGwgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgYHRydWVgLCBleHBhbmRzIHRoZSBzdW1tYXJ5LCBvdGhlcndpc2UgY29sbGFwc2UgaXQuXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgYXMgdGhlIGV4cGFuZCBpbmRpY2F0b3IuXG4gICAqL1xuICBleHBhbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgSWNvbkJ1dHRvbmAgZWxlbWVudCB3cmFwcGluZyB0aGUgZXhwYW5kIGljb24uXG4gICAqL1xuICBJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuY1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlFeHBhbnNpb25QYW5lbFN1bW1hcnknXG59KShFeHBhbnNpb25QYW5lbFN1bW1hcnkpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbkhlaWdodDogMzYsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgICB9KSxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogNTYsXG4gICAgICBoZWlnaHQ6IDU2LFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzZdLFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMTJdXG4gICAgICB9LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdKSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s2XVxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNwYW4gZWxlbWVudCB0aGF0IHdyYXBzIHRoZSBjaGlsZHJlbi4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIGFzc3VyZSB0aGUgY29ycmVjdCB3aWR0aCBmb3IgaU9TIFNhZmFyaVxuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgcHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgc2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJleHRlbmRlZFwiYC4gKi9cbiAgICBleHRlbmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiA0OCAvIDIsXG4gICAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICBtaW5IZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1pbldpZHRoOiA0OCxcbiAgICAgIGhlaWdodDogNDgsXG4gICAgICAnJiRzaXplU21hbGwnOiB7XG4gICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogMzQgLyAyLFxuICAgICAgICBtaW5XaWR0aDogMzQsXG4gICAgICAgIGhlaWdodDogMzRcbiAgICAgIH0sXG4gICAgICAnJiRzaXplTWVkaXVtJzoge1xuICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiA0MCAvIDIsXG4gICAgICAgIG1pbldpZHRoOiA0MCxcbiAgICAgICAgaGVpZ2h0OiA0MFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgQnV0dG9uQmFzZSByb290IGVsZW1lbnQgaWYgdGhlIGJ1dHRvbiBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzVmlzaWJsZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogNDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cIm1lZGl1bVwiYGAuICovXG4gICAgc2l6ZU1lZGl1bToge1xuICAgICAgd2lkdGg6IDQ4LFxuICAgICAgaGVpZ2h0OiA0OFxuICAgIH1cbiAgfTtcbn07XG52YXIgRmFiID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGYWIocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVGb2N1c1JpID0gcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzJGRpc2FibGVGb2N1c1JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ2xhcmdlJyA6IF9wcm9wcyRzaXplLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAncm91bmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgdmFyaWFudCA9PT0gJ2V4dGVuZGVkJyAmJiBjbGFzc2VzLmV4dGVuZGVkLCBjb2xvciA9PT0gJ3ByaW1hcnknICYmIGNsYXNzZXMucHJpbWFyeSwgY29sb3IgPT09ICdzZWNvbmRhcnknICYmIGNsYXNzZXMuc2Vjb25kYXJ5LCBzaXplICE9PSAnbGFyZ2UnICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgY29sb3IgPT09ICdpbmhlcml0JyAmJiBjbGFzc2VzLmNvbG9ySW5oZXJpdCwgY2xhc3NOYW1lKSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncm91bmQnLCAnZXh0ZW5kZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRmFiJ1xufSkoRmFiKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL3dpdGhGb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIG1hcmdpbkxlZnQ6IC0xMSxcbiAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgIC8vIHVzZWQgZm9yIHJvdyBwcmVzZW50YXRpb24gb2YgcmFkaW8vY2hlY2tib3hcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsYWJlbFBsYWNlbWVudD1cInN0YXJ0XCJgLiAqL1xuICAgIGxhYmVsUGxhY2VtZW50U3RhcnQ6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gICAgICBtYXJnaW5MZWZ0OiAxNixcbiAgICAgIC8vIHVzZWQgZm9yIHJvdyBwcmVzZW50YXRpb24gb2YgcmFkaW8vY2hlY2tib3hcbiAgICAgIG1hcmdpblJpZ2h0OiAtMTFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbGFiZWxQbGFjZW1lbnQ9XCJ0b3BcImAuICovXG4gICAgbGFiZWxQbGFjZW1lbnRUb3A6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gICAgICBtYXJnaW5MZWZ0OiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsYWJlbFBsYWNlbWVudD1cImJvdHRvbVwiYC4gKi9cbiAgICBsYWJlbFBsYWNlbWVudEJvdHRvbToge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBtYXJnaW5MZWZ0OiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBsYWJlbCdzIFR5cG9ncmFwaHkgY29tcG9uZW50LiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIERyb3AgaW4gcmVwbGFjZW1lbnQgb2YgdGhlIGBSYWRpb2AsIGBTd2l0Y2hgIGFuZCBgQ2hlY2tib3hgIGNvbXBvbmVudC5cbiAqIFVzZSB0aGlzIGNvbXBvbmVudCBpZiB5b3Ugd2FudCB0byBkaXNwbGF5IGFuIGV4dHJhIGxhYmVsLlxuICovXG5cbnZhciBGb3JtQ29udHJvbExhYmVsID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbExhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udHJvbCA9IHByb3BzLmNvbnRyb2wsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgX3Byb3BzJGxhYmVsUGxhY2VtZW50ID0gcHJvcHMubGFiZWxQbGFjZW1lbnQsXG4gICAgICBsYWJlbFBsYWNlbWVudCA9IF9wcm9wcyRsYWJlbFBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2VuZCcgOiBfcHJvcHMkbGFiZWxQbGFjZW1lbnQsXG4gICAgICBtdWlGb3JtQ29udHJvbCA9IHByb3BzLm11aUZvcm1Db250cm9sLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGVja2VkXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRyb2xcIiwgXCJkaXNhYmxlZFwiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJsYWJlbFBsYWNlbWVudFwiLCBcIm11aUZvcm1Db250cm9sXCIsIFwibmFtZVwiLCBcIm9uQ2hhbmdlXCIsIFwidmFsdWVcIl0pO1xuXG4gIHZhciBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcblxuICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29udHJvbC5wcm9wcy5kaXNhYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkaXNhYmxlZCA9IGNvbnRyb2wucHJvcHMuZGlzYWJsZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGRpc2FibGVkID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIGRpc2FibGVkID0gbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gIH1cblxuICB2YXIgY29udHJvbFByb3BzID0ge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9O1xuICBbJ2NoZWNrZWQnLCAnbmFtZScsICdvbkNoYW5nZScsICd2YWx1ZScsICdpbnB1dFJlZiddLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICh0eXBlb2YgY29udHJvbC5wcm9wc1trZXldID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvcHNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnRyb2xQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBsYWJlbFBsYWNlbWVudCAhPT0gJ2VuZCcgJiYgY2xhc3Nlc1tcImxhYmVsUGxhY2VtZW50XCIuY29uY2F0KGNhcGl0YWxpemUobGFiZWxQbGFjZW1lbnQpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGNsYXNzTmFtZVByb3ApLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY2xvbmVFbGVtZW50KGNvbnRyb2wsIGNvbnRyb2xQcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwge1xuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGFiZWwsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpXG4gIH0sIGxhYmVsKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1Db250cm9sTGFiZWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGFwcGVhcnMgc2VsZWN0ZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBjb250cm9sIGVsZW1lbnQuIEZvciBpbnN0YW5jZSwgaXQgY2FuIGJlIGJlIGEgYFJhZGlvYCwgYSBgU3dpdGNoYCBvciBhIGBDaGVja2JveGAuXG4gICAqL1xuICBjb250cm9sOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29udHJvbCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byBiZSB1c2VkIGluIGFuIGVuY2xvc2luZyBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWxQbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2VuZCcsICdzdGFydCcsICd0b3AnLCAnYm90dG9tJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkIFRoZSBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIHN3aXRjaFxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sTGFiZWwnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KEZvcm1Db250cm9sTGFiZWwpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGZsZXhXcmFwOiAnd3JhcCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByb3c9e3RydWV9YC4gKi9cbiAgcm93OiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdydcbiAgfVxufTtcbi8qKlxuICogYEZvcm1Hcm91cGAgd3JhcHMgY29udHJvbHMgc3VjaCBhcyBgQ2hlY2tib3hgIGFuZCBgU3dpdGNoYC5cbiAqIEl0IHByb3ZpZGVzIGNvbXBhY3Qgcm93IGxheW91dC5cbiAqIEZvciB0aGUgYFJhZGlvYCwgeW91IHNob3VsZCBiZSB1c2luZyB0aGUgYFJhZGlvR3JvdXBgIGNvbXBvbmVudCBpbnN0ZWFkIG9mIHRoaXMgb25lLlxuICovXG5cbnZhciBGb3JtR3JvdXAgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Hcm91cChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRyb3cgPSBwcm9wcy5yb3csXG4gICAgICByb3cgPSBfcHJvcHMkcm93ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRyb3csXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcInJvd1wiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvdyAmJiBjbGFzc2VzLnJvdywgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtR3JvdXAucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogRGlzcGxheSBncm91cCBvZiBlbGVtZW50cyBpbiBhIGNvbXBhY3Qgcm93LlxuICAgKi9cbiAgcm93OiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtR3JvdXAnXG59KShGb3JtR3JvdXApOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG4vLyBBIGdyaWQgY29tcG9uZW50IHVzaW5nIHRoZSBmb2xsb3dpbmcgbGlicyBhcyBpbnNwaXJhdGlvbi5cbi8vXG4vLyBGb3IgdGhlIGltcGxlbWVudGF0aW9uOlxuLy8gLSBodHRwOi8vdjQtYWxwaGEuZ2V0Ym9vdHN0cmFwLmNvbS9sYXlvdXQvZmxleGJveC1ncmlkL1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20va3Jpc3RvZmVyam9zZXBoL2ZsZXhib3hncmlkL2Jsb2IvbWFzdGVyL3NyYy9jc3MvZmxleGJveGdyaWQuY3NzXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9yb3lsZWUwNzA0L3JlYWN0LWZsZXhib3gtZ3JpZFxuLy8gLSBodHRwczovL21hdGVyaWFsLmFuZ3VsYXJqcy5vcmcvbGF0ZXN0L2xheW91dC9pbnRyb2R1Y3Rpb25cbi8vXG4vLyBGb2xsb3cgdGhpcyBmbGV4Ym94IEd1aWRlIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1bmRlcmx5aW5nIG1vZGVsOlxuLy8gLSBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9hLWd1aWRlLXRvLWZsZXhib3gvXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsga2V5cyBhcyBicmVha3BvaW50S2V5cyB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgcmVxdWlyZVByb3BGYWN0b3J5IGZyb20gJy4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeSc7XG52YXIgU1BBQ0lOR1MgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xudmFyIEdSSURfU0laRVMgPSBbJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVHcmlkKGdsb2JhbFN0eWxlcywgdGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBHUklEX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIga2V5ID0gXCJncmlkLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNpemUpO1xuXG4gICAgaWYgKHNpemUgPT09IHRydWUpIHtcbiAgICAgIC8vIEZvciB0aGUgYXV0byBsYXlvdXRpbmdcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzaXplID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgZmxleEdyb3c6IDAsXG4gICAgICAgIG1heFdpZHRoOiAnbm9uZSdcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBLZWVwIDcgc2lnbmlmaWNhbnQgbnVtYmVycy5cblxuXG4gICAgdmFyIHdpZHRoID0gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChzaXplIC8gMTIgKiAxMGU3KSAvIDEwZTUsIFwiJVwiKTsgLy8gQ2xvc2UgdG8gdGhlIGJvb3RzdHJhcCBpbXBsZW1lbnRhdGlvbjpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi84ZmNjYWEyNDM5ZTk3ZWM3MmE0YjdkYzQyY2NjMWY2NDk3OTBhZGIwL3Njc3MvbWl4aW5zL19ncmlkLnNjc3MjTDQxXG5cbiAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgIGZsZXhCYXNpczogd2lkdGgsXG4gICAgICBmbGV4R3JvdzogMCxcbiAgICAgIG1heFdpZHRoOiB3aWR0aFxuICAgIH07XG4gIH0pOyAvLyBObyBuZWVkIGZvciBhIG1lZGlhIHF1ZXJ5IGZvciB0aGUgZmlyc3Qgc2l6ZS5cblxuICBpZiAoYnJlYWtwb2ludCA9PT0gJ3hzJykge1xuICAgIE9iamVjdC5hc3NpZ24oZ2xvYmFsU3R5bGVzLCBzdHlsZXMpO1xuICB9IGVsc2Uge1xuICAgIGdsb2JhbFN0eWxlc1t0aGVtZS5icmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHdXR0ZXIodGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBTUEFDSU5HUy5mb3JFYWNoKGZ1bmN0aW9uIChzcGFjaW5nKSB7XG4gICAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcoc3BhY2luZyk7XG5cbiAgICBpZiAodGhlbWVTcGFjaW5nID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3R5bGVzW1wic3BhY2luZy1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzcGFjaW5nKV0gPSB7XG4gICAgICBtYXJnaW46IC10aGVtZVNwYWNpbmcgLyAyLFxuICAgICAgd2lkdGg6IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHRoZW1lU3BhY2luZywgXCJweClcIiksXG4gICAgICAnJiA+ICRpdGVtJzoge1xuICAgICAgICBwYWRkaW5nOiB0aGVtZVNwYWNpbmcgLyAyXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59IC8vIERlZmF1bHQgQ1NTIHZhbHVlc1xuLy8gZmxleDogJzAgMSBhdXRvJyxcbi8vIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuLy8gYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuLy8gZmxleFdyYXA6ICdub3dyYXAnLFxuLy8ganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcblxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbnRhaW5lcj17dHJ1ZX1gLiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpdGVtPXt0cnVlfWAuICovXG4gICAgaXRlbToge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXJnaW46ICcwJyAvLyBGb3IgaW5zdGFuY2UsIGl0J3MgdXNlZnVsIHdoZW4gdXNlZCB3aXRoIGEgYGZpZ3VyZWAgZWxlbWVudC5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB6ZXJvTWluV2lkdGg9e3RydWV9YC4gKi9cbiAgICB6ZXJvTWluV2lkdGg6IHtcbiAgICAgIG1pbldpZHRoOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cImNvbHVtblwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbic6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cImNvbHVtbi1yZXZlcnNlXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtY29sdW1uLXJldmVyc2UnOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uLXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cInJ3by1yZXZlcnNlXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtcm93LXJldmVyc2UnOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXA9XCJub3dyYXBcImAuICovXG4gICAgJ3dyYXAteHMtbm93cmFwJzoge1xuICAgICAgZmxleFdyYXA6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXA9XCJyZXZlcnNlXCJgLiAqL1xuICAgICd3cmFwLXhzLXdyYXAtcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhXcmFwOiAnd3JhcC1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiY2VudGVyXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1zdGFydCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiZmxleC1lbmRcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiYmFzZWxpbmVcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWJhc2VsaW5lJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJjZW50ZXJcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtc3RhcnQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWJldHdlZW4nOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJzcGFjZS1hcm91bmRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtc3BhY2UtYXJvdW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwiY2VudGVyXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLWNlbnRlcic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwiZmxleC1lbmRcImAuICovXG4gICAgJ2p1c3RpZnkteHMtZmxleC1lbmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtYXJvdW5kXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtZXZlbmx5XCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWV2ZW5seSc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtZXZlbmx5J1xuICAgIH1cbiAgfSwgZ2VuZXJhdGVHdXR0ZXIodGhlbWUsICd4cycpLCBicmVha3BvaW50S2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBnZW5lcmF0ZUdyaWQoYWNjdW11bGF0b3IsIHRoZW1lLCBrZXkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwge30pKTtcbn07XG52YXIgR3JpZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbkNvbnRlbnQgPSBwcm9wcy5hbGlnbkNvbnRlbnQsXG4gICAgICBhbGlnbkNvbnRlbnQgPSBfcHJvcHMkYWxpZ25Db250ZW50ID09PSB2b2lkIDAgPyAnc3RyZXRjaCcgOiBfcHJvcHMkYWxpZ25Db250ZW50LFxuICAgICAgX3Byb3BzJGFsaWduSXRlbXMgPSBwcm9wcy5hbGlnbkl0ZW1zLFxuICAgICAgYWxpZ25JdGVtcyA9IF9wcm9wcyRhbGlnbkl0ZW1zID09PSB2b2lkIDAgPyAnc3RyZXRjaCcgOiBfcHJvcHMkYWxpZ25JdGVtcyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgY29udGFpbmVyID0gX3Byb3BzJGNvbnRhaW5lciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcyRkaXJlY3Rpb24gPT09IHZvaWQgMCA/ICdyb3cnIDogX3Byb3BzJGRpcmVjdGlvbixcbiAgICAgIF9wcm9wcyRpdGVtID0gcHJvcHMuaXRlbSxcbiAgICAgIGl0ZW0gPSBfcHJvcHMkaXRlbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaXRlbSxcbiAgICAgIF9wcm9wcyRqdXN0aWZ5ID0gcHJvcHMuanVzdGlmeSxcbiAgICAgIGp1c3RpZnkgPSBfcHJvcHMkanVzdGlmeSA9PT0gdm9pZCAwID8gJ2ZsZXgtc3RhcnQnIDogX3Byb3BzJGp1c3RpZnksXG4gICAgICBfcHJvcHMkbGcgPSBwcm9wcy5sZyxcbiAgICAgIGxnID0gX3Byb3BzJGxnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsZyxcbiAgICAgIF9wcm9wcyRtZCA9IHByb3BzLm1kLFxuICAgICAgbWQgPSBfcHJvcHMkbWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG1kLFxuICAgICAgX3Byb3BzJHNtID0gcHJvcHMuc20sXG4gICAgICBzbSA9IF9wcm9wcyRzbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc20sXG4gICAgICBfcHJvcHMkc3BhY2luZyA9IHByb3BzLnNwYWNpbmcsXG4gICAgICBzcGFjaW5nID0gX3Byb3BzJHNwYWNpbmcgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkc3BhY2luZyxcbiAgICAgIF9wcm9wcyR3cmFwID0gcHJvcHMud3JhcCxcbiAgICAgIHdyYXAgPSBfcHJvcHMkd3JhcCA9PT0gdm9pZCAwID8gJ3dyYXAnIDogX3Byb3BzJHdyYXAsXG4gICAgICBfcHJvcHMkeGwgPSBwcm9wcy54bCxcbiAgICAgIHhsID0gX3Byb3BzJHhsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4bCxcbiAgICAgIF9wcm9wcyR4cyA9IHByb3BzLnhzLFxuICAgICAgeHMgPSBfcHJvcHMkeHMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHhzLFxuICAgICAgX3Byb3BzJHplcm9NaW5XaWR0aCA9IHByb3BzLnplcm9NaW5XaWR0aCxcbiAgICAgIHplcm9NaW5XaWR0aCA9IF9wcm9wcyR6ZXJvTWluV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHplcm9NaW5XaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkNvbnRlbnRcIiwgXCJhbGlnbkl0ZW1zXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcIml0ZW1cIiwgXCJqdXN0aWZ5XCIsIFwibGdcIiwgXCJtZFwiLCBcInNtXCIsIFwic3BhY2luZ1wiLCBcIndyYXBcIiwgXCJ4bFwiLCBcInhzXCIsIFwiemVyb01pbldpZHRoXCJdKTtcblxuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGNvbnRhaW5lciAmJiBbY2xhc3Nlcy5jb250YWluZXIsIHNwYWNpbmcgIT09IDAgJiYgY2xhc3Nlc1tcInNwYWNpbmcteHMtXCIuY29uY2F0KFN0cmluZyhzcGFjaW5nKSldXSwgaXRlbSAmJiBjbGFzc2VzLml0ZW0sIHplcm9NaW5XaWR0aCAmJiBjbGFzc2VzLnplcm9NaW5XaWR0aCwgZGlyZWN0aW9uICE9PSAncm93JyAmJiBjbGFzc2VzW1wiZGlyZWN0aW9uLXhzLVwiLmNvbmNhdChTdHJpbmcoZGlyZWN0aW9uKSldLCB3cmFwICE9PSAnd3JhcCcgJiYgY2xhc3Nlc1tcIndyYXAteHMtXCIuY29uY2F0KFN0cmluZyh3cmFwKSldLCBhbGlnbkl0ZW1zICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWl0ZW1zLXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25JdGVtcykpXSwgYWxpZ25Db250ZW50ICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWNvbnRlbnQteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkNvbnRlbnQpKV0sIGp1c3RpZnkgIT09ICdmbGV4LXN0YXJ0JyAmJiBjbGFzc2VzW1wianVzdGlmeS14cy1cIi5jb25jYXQoU3RyaW5nKGp1c3RpZnkpKV0sIHhzICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC14cy1cIi5jb25jYXQoU3RyaW5nKHhzKSldLCBzbSAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtc20tXCIuY29uY2F0KFN0cmluZyhzbSkpXSwgbWQgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLW1kLVwiLmNvbmNhdChTdHJpbmcobWQpKV0sIGxnICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1sZy1cIi5jb25jYXQoU3RyaW5nKGxnKSldLCB4bCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQteGwtXCIuY29uY2F0KFN0cmluZyh4bCkpXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gY2FuJ3QgdXNlIG5hbWVkIGZ1bmN0aW9uIGV4cHJlc3Npb24gc2luY2UgdGhlIGZ1bmN0aW9uIGJvZHkgcmVmZXJlbmNlcyBgR3JpZGBcbiAgLy8gd2hpY2ggd291bGQgcG9pbnQgdG8gdGhlIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkIG9mIHRoZSBhY3R1YWwgY29tcG9uZW50XG4gIEdyaWQuZGlzcGxheU5hbWUgPSAnRm9yd2FyZFJlZihHcmlkKSc7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkNvbnRlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0cmV0Y2gnLCAnY2VudGVyJywgJ2ZsZXgtc3RhcnQnLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGFsaWduSXRlbXM6IFByb3BUeXBlcy5vbmVPZihbJ2ZsZXgtc3RhcnQnLCAnY2VudGVyJywgJ2ZsZXgtZW5kJywgJ3N0cmV0Y2gnLCAnYmFzZWxpbmUnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKmNvbnRhaW5lciogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC1kaXJlY3Rpb25gIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydyb3cnLCAncm93LXJldmVyc2UnLCAnY29sdW1uJywgJ2NvbHVtbi1yZXZlcnNlJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBoYXZlIHRoZSBmbGV4ICppdGVtKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGl0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBganVzdGlmeS1jb250ZW50YCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGp1c3RpZnk6IFByb3BUeXBlcy5vbmVPZihbJ2ZsZXgtc3RhcnQnLCAnY2VudGVyJywgJ2ZsZXgtZW5kJywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3NwYWNlLWV2ZW5seSddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbGdgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBsZzogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYG1kYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgbWQ6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBzbWAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIHNtOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50LlxuICAgKiBJdCBjYW4gb25seSBiZSB1c2VkIG9uIGEgdHlwZSBgY29udGFpbmVyYCBjb21wb25lbnQuXG4gICAqL1xuICBzcGFjaW5nOiBQcm9wVHlwZXMub25lT2YoU1BBQ0lOR1MpLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC13cmFwYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgd3JhcDogUHJvcFR5cGVzLm9uZU9mKFsnbm93cmFwJywgJ3dyYXAnLCAnd3JhcC1yZXZlcnNlJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGB4bGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucy5cbiAgICovXG4gIHhsOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCB0aGUgc2NyZWVuIHNpemVzIHdpdGggdGhlIGxvd2VzdCBwcmlvcml0eS5cbiAgICovXG4gIHhzOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBpdCBzZXRzIGBtaW4td2lkdGg6IDBgIG9uIHRoZSBpdGVtLlxuICAgKiBSZWZlciB0byB0aGUgbGltaXRhdGlvbnMgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvbiB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdXNlIGNhc2UuXG4gICAqL1xuICB6ZXJvTWluV2lkdGg6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xudmFyIFN0eWxlZEdyaWQgPSB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpR3JpZCdcbn0pKEdyaWQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcmVxdWlyZVByb3AgPSByZXF1aXJlUHJvcEZhY3RvcnkoJ0dyaWQnKTtcbiAgU3R5bGVkR3JpZC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgU3R5bGVkR3JpZC5wcm9wVHlwZXMsIHtcbiAgICBhbGlnbkNvbnRlbnQ6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBhbGlnbkl0ZW1zOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgZGlyZWN0aW9uOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAganVzdGlmeTogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGxnOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIG1kOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHNtOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHNwYWNpbmc6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB3cmFwOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgeHM6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgemVyb01pbldpZHRoOiByZXF1aXJlUHJvcCgnaXRlbScpXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTdHlsZWRHcmlkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG5cbiAgfVxufTtcbnZhciBHcmlkTGlzdCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZExpc3QocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNlbGxIZWlnaHQgPSBwcm9wcy5jZWxsSGVpZ2h0LFxuICAgICAgY2VsbEhlaWdodCA9IF9wcm9wcyRjZWxsSGVpZ2h0ID09PSB2b2lkIDAgPyAxODAgOiBfcHJvcHMkY2VsbEhlaWdodCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29scyA9IHByb3BzLmNvbHMsXG4gICAgICBjb2xzID0gX3Byb3BzJGNvbHMgPT09IHZvaWQgMCA/IDIgOiBfcHJvcHMkY29scyxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndWwnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRzcGFjaW5nID0gcHJvcHMuc3BhY2luZyxcbiAgICAgIHNwYWNpbmcgPSBfcHJvcHMkc3BhY2luZyA9PT0gdm9pZCAwID8gNCA6IF9wcm9wcyRzcGFjaW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjZWxsSGVpZ2h0XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sc1wiLCBcImNvbXBvbmVudFwiLCBcInNwYWNpbmdcIiwgXCJzdHlsZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCksXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIG1hcmdpbjogLXNwYWNpbmcgLyAyXG4gICAgfSwgc3R5bGUpXG4gIH0sIG90aGVyKSwgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjaGlsZC50eXBlICE9PSBSZWFjdC5GcmFnbWVudCwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBHcmlkTGlzdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgIHZhciBjaGlsZENvbHMgPSBjaGlsZC5wcm9wcy5jb2xzIHx8IDE7XG4gICAgdmFyIGNoaWxkUm93cyA9IGNoaWxkLnByb3BzLnJvd3MgfHwgMTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBzdHlsZTogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCgxMDAgLyBjb2xzICogY2hpbGRDb2xzLCBcIiVcIiksXG4gICAgICAgIGhlaWdodDogY2VsbEhlaWdodCA9PT0gJ2F1dG8nID8gJ2F1dG8nIDogY2VsbEhlaWdodCAqIGNoaWxkUm93cyArIHNwYWNpbmcsXG4gICAgICAgIHBhZGRpbmc6IHNwYWNpbmcgLyAyXG4gICAgICB9LCBjaGlsZC5wcm9wcy5zdHlsZSlcbiAgICB9KTtcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkTGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcHggZm9yIG9uZSBjZWxsIGhlaWdodC5cbiAgICogWW91IGNhbiBzZXQgYCdhdXRvJ2AgaWYgeW91IHdhbnQgdG8gbGV0IHRoZSBjaGlsZHJlbiBkZXRlcm1pbmUgdGhlIGhlaWdodC5cbiAgICovXG4gIGNlbGxIZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogR3JpZCBUaWxlcyB0aGF0IHdpbGwgYmUgaW4gR3JpZCBMaXN0LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBjb2x1bW5zLlxuICAgKi9cbiAgY29sczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHB4IGZvciB0aGUgc3BhY2luZyBiZXR3ZWVuIHRpbGVzLlxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpR3JpZExpc3QnXG59KShHcmlkTGlzdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnZGVib3VuY2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzID4gM2tiLlxuXG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBpc011aUVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBmbGV4U2hyaW5rOiAwXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBkaXZgIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gIHRpbGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIC8vIEluIGNhc2UgaXQncyBub3QgcmVuZGVyZWQgd2l0aCBhIGRpdi5cbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byBhbiBgaW1nYCBlbGVtZW50IGNoaWxkLCBpZiBuZWVkZWQgdG8gZW5zdXJlIGl0IGNvdmVycyB0aGUgdGlsZS4gKi9cbiAgaW1nRnVsbEhlaWdodDoge1xuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGxlZnQ6ICc1MCUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gYW4gYGltZ2AgZWxlbWVudCBjaGlsZCwgaWYgbmVlZGVkIHRvIGVuc3VyZSBpdCBjb3ZlcnMgdGhlIHRpbGUuICovXG4gIGltZ0Z1bGxXaWR0aDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKScsXG4gICAgdG9wOiAnNTAlJ1xuICB9XG59O1xuXG52YXIgZml0ID0gZnVuY3Rpb24gZml0KGltZ0VsLCBjbGFzc2VzKSB7XG4gIGlmICghaW1nRWwgfHwgIWltZ0VsLmNvbXBsZXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGltZ0VsLndpZHRoIC8gaW1nRWwuaGVpZ2h0ID4gaW1nRWwucGFyZW50Tm9kZS5vZmZzZXRXaWR0aCAvIGltZ0VsLnBhcmVudE5vZGUub2Zmc2V0SGVpZ2h0KSB7XG4gICAgdmFyIF9pbWdFbCRjbGFzc0xpc3QsIF9pbWdFbCRjbGFzc0xpc3QyO1xuXG4gICAgKF9pbWdFbCRjbGFzc0xpc3QgPSBpbWdFbC5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfaW1nRWwkY2xhc3NMaXN0LCBfdG9Db25zdW1hYmxlQXJyYXkoY2xhc3Nlcy5pbWdGdWxsV2lkdGguc3BsaXQoJyAnKSkpO1xuXG4gICAgKF9pbWdFbCRjbGFzc0xpc3QyID0gaW1nRWwuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2ltZ0VsJGNsYXNzTGlzdDIsIF90b0NvbnN1bWFibGVBcnJheShjbGFzc2VzLmltZ0Z1bGxIZWlnaHQuc3BsaXQoJyAnKSkpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfaW1nRWwkY2xhc3NMaXN0MywgX2ltZ0VsJGNsYXNzTGlzdDQ7XG5cbiAgICAoX2ltZ0VsJGNsYXNzTGlzdDMgPSBpbWdFbC5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfaW1nRWwkY2xhc3NMaXN0MywgX3RvQ29uc3VtYWJsZUFycmF5KGNsYXNzZXMuaW1nRnVsbEhlaWdodC5zcGxpdCgnICcpKSk7XG5cbiAgICAoX2ltZ0VsJGNsYXNzTGlzdDQgPSBpbWdFbC5jbGFzc0xpc3QpLmFkZC5hcHBseShfaW1nRWwkY2xhc3NMaXN0NCwgX3RvQ29uc3VtYWJsZUFycmF5KGNsYXNzZXMuaW1nRnVsbFdpZHRoLnNwbGl0KCcgJykpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZW5zdXJlSW1hZ2VDb3ZlcihpbWdFbCwgY2xhc3Nlcykge1xuICBpZiAoIWltZ0VsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGltZ0VsLmNvbXBsZXRlKSB7XG4gICAgZml0KGltZ0VsLCBjbGFzc2VzKTtcbiAgfSBlbHNlIHtcbiAgICBpbWdFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgZml0KGltZ0VsLCBjbGFzc2VzKTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgR3JpZExpc3RUaWxlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkTGlzdFRpbGUocHJvcHMsIHJlZikge1xuICAvLyBjb2xzIHJvd3MgZGVmYXVsdCB2YWx1ZXMgYXJlIGZvciBkb2NzIG9ubHlcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xzID0gcHJvcHMuY29scyxcbiAgICAgIGNvbHMgPSBfcHJvcHMkY29scyA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRjb2xzLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdsaScgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93cyA9IF9wcm9wcyRyb3dzID09PSB2b2lkIDAgPyAxIDogX3Byb3BzJHJvd3MsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sc1wiLCBcImNvbXBvbmVudFwiLCBcInJvd3NcIl0pO1xuXG4gIHZhciBpbWdSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZW5zdXJlSW1hZ2VDb3ZlcihpbWdSZWYuY3VycmVudCwgY2xhc3Nlcyk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICBmaXQoaW1nUmVmLmN1cnJlbnQsIGNsYXNzZXMpO1xuICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtjbGFzc2VzXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudGlsZVxuICB9LCBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2ltZycgfHwgaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0ltYWdlJ10pKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHJlZjogaW1nUmVmXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWRMaXN0VGlsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGVvcmV0aWNhbGx5IHlvdSBjYW4gcGFzcyBhbnkgbm9kZSBhcyBjaGlsZHJlbiwgYnV0IHRoZSBtYWluIHVzZSBjYXNlIGlzIHRvIHBhc3MgYW4gaW1nLFxuICAgKiBpbiB3aGljaCBjYXNlIEdyaWRMaXN0VGlsZSB0YWtlcyBjYXJlIG9mIG1ha2luZyB0aGUgaW1hZ2UgXCJjb3ZlclwiIGF2YWlsYWJsZSBzcGFjZVxuICAgKiAoc2ltaWxhciB0byBgYmFja2dyb3VuZC1zaXplOiBjb3ZlcmAgb3IgdG8gYG9iamVjdC1maXQ6IGNvdmVyYCkuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFdpZHRoIG9mIHRoZSB0aWxlIGluIG51bWJlciBvZiBncmlkIGNlbGxzLlxuICAgKi9cbiAgY29sczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSGVpZ2h0IG9mIHRoZSB0aWxlIGluIG51bWJlciBvZiBncmlkIGNlbGxzLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm51bWJlclxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlHcmlkTGlzdFRpbGUnXG59KShHcmlkTGlzdFRpbGUpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdGl0bGVQb3NpdGlvbj1cImJvdHRvbVwiYC4gKi9cbiAgICB0aXRsZVBvc2l0aW9uQm90dG9tOiB7XG4gICAgICBib3R0b206IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdGl0bGVQb3NpdGlvbj1cInRvcFwiYC4gKi9cbiAgICB0aXRsZVBvc2l0aW9uVG9wOiB7XG4gICAgICB0b3A6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBhIGBzdWJ0aXRsZWAgaXMgcHJvdmlkZWQuICovXG4gICAgcm9vdFN1YnRpdGxlOiB7XG4gICAgICBoZWlnaHQ6IDY4XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0aXRsZSBhbmQgc3VidGl0bGUgY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgdGl0bGVXcmFwOiB7XG4gICAgICBmbGV4R3JvdzogMSxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2LFxuICAgICAgbWFyZ2luUmlnaHQ6IDE2LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudCBpZiBgYWN0aW9uUG9zaXRpb249XCJsZWZ0XCJgLiAqL1xuICAgIHRpdGxlV3JhcEFjdGlvblBvc0xlZnQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IGlmIGBhY3Rpb25Qb3NpdGlvbj1cInJpZ2h0XCJgLiAqL1xuICAgIHRpdGxlV3JhcEFjdGlvblBvc1JpZ2h0OiB7XG4gICAgICBtYXJnaW5SaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdGl0bGUgY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgdGl0bGU6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgICAgbGluZUhlaWdodDogJzI0cHgnLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHN1YnRpdGxlIGNvbnRhaW5lciBlbGVtZW50LiAqL1xuICAgIHN1YnRpdGxlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYWN0aW9uSWNvbiBpZiBzdXBwbGllZC4gKi9cbiAgICBhY3Rpb25JY29uOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhY3Rpb25JY29uIGlmIGBhY3Rpb25Qb3NpdGlvbj1cImxlZnRcImAuICovXG4gICAgYWN0aW9uSWNvbkFjdGlvblBvc0xlZnQ6IHtcbiAgICAgIG9yZGVyOiAtMVxuICAgIH1cbiAgfTtcbn07XG52YXIgR3JpZExpc3RUaWxlQmFyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkTGlzdFRpbGVCYXIocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9uSWNvbiA9IHByb3BzLmFjdGlvbkljb24sXG4gICAgICBfcHJvcHMkYWN0aW9uUG9zaXRpb24gPSBwcm9wcy5hY3Rpb25Qb3NpdGlvbixcbiAgICAgIGFjdGlvblBvc2l0aW9uID0gX3Byb3BzJGFjdGlvblBvc2l0aW9uID09PSB2b2lkIDAgPyAncmlnaHQnIDogX3Byb3BzJGFjdGlvblBvc2l0aW9uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3VidGl0bGUgPSBwcm9wcy5zdWJ0aXRsZSxcbiAgICAgIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICBfcHJvcHMkdGl0bGVQb3NpdGlvbiA9IHByb3BzLnRpdGxlUG9zaXRpb24sXG4gICAgICB0aXRsZVBvc2l0aW9uID0gX3Byb3BzJHRpdGxlUG9zaXRpb24gPT09IHZvaWQgMCA/ICdib3R0b20nIDogX3Byb3BzJHRpdGxlUG9zaXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uSWNvblwiLCBcImFjdGlvblBvc2l0aW9uXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcInN1YnRpdGxlXCIsIFwidGl0bGVcIiwgXCJ0aXRsZVBvc2l0aW9uXCJdKTtcblxuICB2YXIgYWN0aW9uUG9zID0gYWN0aW9uSWNvbiAmJiBhY3Rpb25Qb3NpdGlvbjtcbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCB0aXRsZVBvc2l0aW9uID09PSAnYm90dG9tJyAmJiBjbGFzc2VzLnRpdGxlUG9zaXRpb25Cb3R0b20sIHRpdGxlUG9zaXRpb24gPT09ICd0b3AnICYmIGNsYXNzZXMudGl0bGVQb3NpdGlvblRvcCwgc3VidGl0bGUgJiYgY2xhc3Nlcy5yb290U3VidGl0bGUsIGNsYXNzTmFtZVByb3ApOyAvLyBSZW1vdmUgdGhlIG1hcmdpbiBiZXR3ZWVuIHRoZSB0aXRsZSAvIHN1YnRpdGxlIHdyYXBwZXIsIGFuZCB0aGUgQWN0aW9uIEljb25cblxuICB2YXIgdGl0bGVXcmFwQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnRpdGxlV3JhcCwgYWN0aW9uUG9zID09PSAnbGVmdCcgJiYgY2xhc3Nlcy50aXRsZVdyYXBBY3Rpb25Qb3NMZWZ0LCBhY3Rpb25Qb3MgPT09ICdyaWdodCcgJiYgY2xhc3Nlcy50aXRsZVdyYXBBY3Rpb25Qb3NSaWdodCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogdGl0bGVXcmFwQ2xhc3NOYW1lXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50aXRsZVxuICB9LCB0aXRsZSksIHN1YnRpdGxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN1YnRpdGxlXG4gIH0sIHN1YnRpdGxlKSA6IG51bGwpLCBhY3Rpb25JY29uID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYWN0aW9uSWNvbiwgYWN0aW9uUG9zID09PSAnbGVmdCcgJiYgY2xhc3Nlcy5hY3Rpb25JY29uQWN0aW9uUG9zTGVmdClcbiAgfSwgYWN0aW9uSWNvbikgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3JpZExpc3RUaWxlQmFyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFuIEljb25CdXR0b24gZWxlbWVudCB0byBiZSB1c2VkIGFzIHNlY29uZGFyeSBhY3Rpb24gdGFyZ2V0XG4gICAqIChwcmltYXJ5IGFjdGlvbiB0YXJnZXQgaXMgdGhlIHRpbGUgaXRzZWxmKS5cbiAgICovXG4gIGFjdGlvbkljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiBzZWNvbmRhcnkgYWN0aW9uIEljb25CdXR0b24uXG4gICAqL1xuICBhY3Rpb25Qb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3RyaW5nIG9yIGVsZW1lbnQgc2VydmluZyBhcyBzdWJ0aXRsZSAoc3VwcG9ydCB0ZXh0KS5cbiAgICovXG4gIHN1YnRpdGxlOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGl0bGUgdG8gYmUgZGlzcGxheWVkIG9uIHRpbGUuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHRoZSB0aXRsZSBiYXIuXG4gICAqL1xuICB0aXRsZVBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWRMaXN0VGlsZUJhcidcbn0pKEdyaWRMaXN0VGlsZUJhcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBFdmVudExpc3RlbmVyIGZyb20gJ3JlYWN0LWV2ZW50LWxpc3RlbmVyJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgPiAza2IuXG5cbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB7IGdldFRoZW1lUHJvcHMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgd2l0aFRoZW1lIGZyb20gJy4uL3N0eWxlcy93aXRoVGhlbWUnO1xuaW1wb3J0IHsga2V5cyBhcyBicmVha3BvaW50S2V5cyB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cyc7IC8vIEJ5IGRlZmF1bHQsIHJldHVybnMgdHJ1ZSBpZiBzY3JlZW4gd2lkdGggaXMgdGhlIHNhbWUgb3IgZ3JlYXRlciB0aGFuIHRoZSBnaXZlbiBicmVha3BvaW50LlxuXG5leHBvcnQgdmFyIGlzV2lkdGhVcCA9IGZ1bmN0aW9uIGlzV2lkdGhVcChicmVha3BvaW50LCB3aWR0aCkge1xuICB2YXIgaW5jbHVzaXZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuXG4gIGlmIChpbmNsdXNpdmUpIHtcbiAgICByZXR1cm4gYnJlYWtwb2ludEtleXMuaW5kZXhPZihicmVha3BvaW50KSA8PSBicmVha3BvaW50S2V5cy5pbmRleE9mKHdpZHRoKTtcbiAgfVxuXG4gIHJldHVybiBicmVha3BvaW50S2V5cy5pbmRleE9mKGJyZWFrcG9pbnQpIDwgYnJlYWtwb2ludEtleXMuaW5kZXhPZih3aWR0aCk7XG59OyAvLyBCeSBkZWZhdWx0LCByZXR1cm5zIHRydWUgaWYgc2NyZWVuIHdpZHRoIGlzIHRoZSBzYW1lIG9yIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gYnJlYWtwb2ludC5cblxuZXhwb3J0IHZhciBpc1dpZHRoRG93biA9IGZ1bmN0aW9uIGlzV2lkdGhEb3duKGJyZWFrcG9pbnQsIHdpZHRoKSB7XG4gIHZhciBpbmNsdXNpdmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG5cbiAgaWYgKGluY2x1c2l2ZSkge1xuICAgIHJldHVybiBicmVha3BvaW50S2V5cy5pbmRleE9mKHdpZHRoKSA8PSBicmVha3BvaW50S2V5cy5pbmRleE9mKGJyZWFrcG9pbnQpO1xuICB9XG5cbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2Yod2lkdGgpIDwgYnJlYWtwb2ludEtleXMuaW5kZXhPZihicmVha3BvaW50KTtcbn07XG5cbnZhciB3aXRoV2lkdGggPSBmdW5jdGlvbiB3aXRoV2lkdGgoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZU9wdGlvbiA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIF9vcHRpb25zJG5vU1NSID0gb3B0aW9ucy5ub1NTUixcbiAgICAgICAgbm9TU1IgPSBfb3B0aW9ucyRub1NTUiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRub1NTUixcbiAgICAgICAgaW5pdGlhbFdpZHRoT3B0aW9uID0gb3B0aW9ucy5pbml0aWFsV2lkdGgsXG4gICAgICAgIF9vcHRpb25zJHJlc2l6ZUludGVydiA9IG9wdGlvbnMucmVzaXplSW50ZXJ2YWwsXG4gICAgICAgIHJlc2l6ZUludGVydmFsID0gX29wdGlvbnMkcmVzaXplSW50ZXJ2ID09PSB2b2lkIDAgPyAxNjYgOiBfb3B0aW9ucyRyZXNpemVJbnRlcnY7XG5cbiAgICB2YXIgV2l0aFdpZHRoID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhXaXRoV2lkdGgsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBXaXRoV2lkdGgocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXaXRoV2lkdGgpO1xuXG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFdpdGhXaWR0aCkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICB3aWR0aDogbm9TU1IgPyBfdGhpcy5nZXRXaWR0aCgpIDogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgX3RoaXMuaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHdpZHRoMiA9IF90aGlzLmdldFdpZHRoKCk7XG5cbiAgICAgICAgICAgIGlmICh3aWR0aDIgIT09IF90aGlzLnN0YXRlLndpZHRoKSB7XG4gICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgyXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlc2l6ZUludGVydmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgX2NyZWF0ZUNsYXNzKFdpdGhXaWR0aCwgW3tcbiAgICAgICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG5cbiAgICAgICAgICBpZiAod2lkdGggIT09IHRoaXMuc3RhdGUud2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIHRoaXMuaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFdpZHRoXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXaWR0aCgpIHtcbiAgICAgICAgICB2YXIgaW5uZXJXaWR0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgdmFyIGJyZWFrcG9pbnRzID0gdGhpcy5wcm9wcy50aGVtZS5icmVha3BvaW50cztcbiAgICAgICAgICB2YXIgd2lkdGggPSBudWxsO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFN0YXJ0IHdpdGggdGhlIHNsb3dlc3QgdmFsdWUgYXMgbG93IGVuZCBkZXZpY2VzIG9mdGVuIGhhdmUgYSBzbWFsbCBzY3JlZW4uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBpbm5lcldpZHRoIHx4cyAgICAgIHNtICAgICAgbWQgICAgICBsZyAgICAgIHhsXG4gICAgICAgICAgICogICAgICAgICAgICB8LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0+XG4gICAgICAgICAgICogd2lkdGggICAgICB8ICB4cyAgIHwgIHNtICAgfCAgbWQgICB8ICBsZyAgIHwgIHhsXG4gICAgICAgICAgICovXG5cbiAgICAgICAgICB2YXIgaW5kZXggPSAxO1xuXG4gICAgICAgICAgd2hpbGUgKHdpZHRoID09PSBudWxsICYmIGluZGV4IDwgYnJlYWtwb2ludEtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFdpZHRoID0gYnJlYWtwb2ludEtleXNbaW5kZXhdOyAvLyBAbWVkaWEgYXJlIGluY2x1c2l2ZSwgc28gcmVwcm9kdWNlIHRoZSBiZWhhdmlvciBoZXJlLlxuXG4gICAgICAgICAgICBpZiAoaW5uZXJXaWR0aCA8IGJyZWFrcG9pbnRzLnZhbHVlc1tjdXJyZW50V2lkdGhdKSB7XG4gICAgICAgICAgICAgIHdpZHRoID0gYnJlYWtwb2ludEtleXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2lkdGggPSB3aWR0aCB8fCAneGwnO1xuICAgICAgICAgIHJldHVybiB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF9nZXRUaGVtZVByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgICAgICAgICB0aGVtZTogdGhpcy5wcm9wcy50aGVtZSxcbiAgICAgICAgICAgIG5hbWU6ICdNdWlXaXRoV2lkdGgnLFxuICAgICAgICAgICAgcHJvcHM6IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBpbml0aWFsV2lkdGggPSBfZ2V0VGhlbWVQcm9wcy5pbml0aWFsV2lkdGgsXG4gICAgICAgICAgICAgIHRoZW1lID0gX2dldFRoZW1lUHJvcHMudGhlbWUsXG4gICAgICAgICAgICAgIHdpZHRoID0gX2dldFRoZW1lUHJvcHMud2lkdGgsXG4gICAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9nZXRUaGVtZVByb3BzLCBbXCJpbml0aWFsV2lkdGhcIiwgXCJ0aGVtZVwiLCBcIndpZHRoXCJdKTtcblxuICAgICAgICAgIHZhciBtb3JlID0gX2V4dGVuZHMoe1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoIHx8IHRoaXMuc3RhdGUud2lkdGggfHwgaW5pdGlhbFdpZHRoIHx8IGluaXRpYWxXaWR0aE9wdGlvblxuICAgICAgICAgIH0sIG90aGVyKTsgLy8gV2hlbiByZW5kZXJpbmcgdGhlIGNvbXBvbmVudCBvbiB0aGUgc2VydmVyLFxuICAgICAgICAgIC8vIHdlIGhhdmUgbm8gaWRlYSBhYm91dCB0aGUgY2xpZW50IGJyb3dzZXIgc2NyZWVuIHdpZHRoLlxuICAgICAgICAgIC8vIEluIG9yZGVyIHRvIHByZXZlbnQgYmxpbmtzIGFuZCBoZWxwIHRoZSByZWNvbmNpbGlhdGlvbiBvZiB0aGUgUmVhY3QgdHJlZVxuICAgICAgICAgIC8vIHdlIGFyZSBub3QgcmVuZGVyaW5nIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBBbiBhbHRlcm5hdGl2ZSBpcyB0byB1c2UgdGhlIGBpbml0aWFsV2lkdGhgIHByb3BlcnR5LlxuXG5cbiAgICAgICAgICBpZiAobW9yZS53aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2l0aFRoZW1lT3B0aW9uKSB7XG4gICAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBtb3JlKSwgUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudExpc3RlbmVyLCB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwid2luZG93XCIsXG4gICAgICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIFdpdGhXaWR0aDtcbiAgICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBXaXRoV2lkdGgucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBBcyBgd2luZG93LmlubmVyV2lkdGhgIGlzIHVuYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIsXG4gICAgICAgKiB3ZSBkZWZhdWx0IHRvIHJlbmRlcmluZyBhbiBlbXB0eSBjb21wb25lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICAgICAqIFlvdSBtaWdodCB3YW50IHRvIHVzZSBhbiBoZXVyaXN0aWMgdG8gYXBwcm94aW1hdGVcbiAgICAgICAqIHRoZSBzY3JlZW4gd2lkdGggb2YgdGhlIGNsaWVudCBicm93c2VyIHNjcmVlbiB3aWR0aC5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgaW5zdGFuY2UsIHlvdSBjb3VsZCBiZSB1c2luZyB0aGUgdXNlci1hZ2VudCBvciB0aGUgY2xpZW50LWhpbnRzLlxuICAgICAgICogaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNsaWVudCUyMGhpbnRcbiAgICAgICAqL1xuICAgICAgaW5pdGlhbFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAaWdub3JlXG4gICAgICAgKi9cbiAgICAgIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAgIC8qKlxuICAgICAgICogQnlwYXNzIHRoZSB3aWR0aCBjYWxjdWxhdGlvbiBsb2dpYy5cbiAgICAgICAqL1xuICAgICAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoV2lkdGguZGlzcGxheU5hbWUgPSBcIldpdGhXaWR0aChcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhXaWR0aCwgQ29tcG9uZW50KTtcbiAgICByZXR1cm4gd2l0aFRoZW1lKFdpdGhXaWR0aCk7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoV2lkdGg7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGtleXMgYXMgYnJlYWtwb2ludEtleXMgfSBmcm9tICcuLi9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IHdpdGhXaWR0aCwgeyBpc1dpZHRoRG93biwgaXNXaWR0aFVwIH0gZnJvbSAnLi4vd2l0aFdpZHRoJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gSGlkZGVuSnMocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBvbmx5ID0gcHJvcHMub25seSxcbiAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7XG4gIHZhciB2aXNpYmxlID0gdHJ1ZTsgLy8gYG9ubHlgIGNoZWNrIGlzIGZhc3RlciB0byBnZXQgb3V0IHNvb25lciBpZiB1c2VkLlxuXG4gIGlmIChvbmx5KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob25seSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb25seS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgYnJlYWtwb2ludCA9IG9ubHlbaV07XG5cbiAgICAgICAgaWYgKHdpZHRoID09PSBicmVha3BvaW50KSB7XG4gICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbmx5ICYmIHdpZHRoID09PSBvbmx5KSB7XG4gICAgICB2aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICB9IC8vIEFsbG93IGBvbmx5YCB0byBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHByb3BzLiBJZiBhbHJlYWR5IGhpZGRlbiwgbm8gbmVlZCB0byBjaGVjayBvdGhlcnMuXG5cblxuICBpZiAodmlzaWJsZSkge1xuICAgIC8vIGRldGVybWluZSB2aXNpYmlsaXR5IGJhc2VkIG9uIHRoZSBzbWFsbGVzdCBzaXplIHVwXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGJyZWFrcG9pbnRLZXlzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgdmFyIF9icmVha3BvaW50ID0gYnJlYWtwb2ludEtleXNbX2ldO1xuICAgICAgdmFyIGJyZWFrcG9pbnRVcCA9IHByb3BzW1wiXCIuY29uY2F0KF9icmVha3BvaW50LCBcIlVwXCIpXTtcbiAgICAgIHZhciBicmVha3BvaW50RG93biA9IHByb3BzW1wiXCIuY29uY2F0KF9icmVha3BvaW50LCBcIkRvd25cIildO1xuXG4gICAgICBpZiAoYnJlYWtwb2ludFVwICYmIGlzV2lkdGhVcChfYnJlYWtwb2ludCwgd2lkdGgpIHx8IGJyZWFrcG9pbnREb3duICYmIGlzV2lkdGhEb3duKF9icmVha3BvaW50LCB3aWR0aCkpIHtcbiAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXZpc2libGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxuSGlkZGVuSnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoaWNoIGltcGxlbWVudGF0aW9uIHRvIHVzZS4gICdqcycgaXMgdGhlIGRlZmF1bHQsICdjc3MnIHdvcmtzIGJldHRlciBmb3JcbiAgICogc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgKi9cbiAgaW1wbGVtZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2pzJywgJ2NzcyddKSxcblxuICAvKipcbiAgICogWW91IGNhbiB1c2UgdGhpcyBwcm9wZXJ0eSB3aGVuIGNob29zaW5nIHRoZSBganNgIGltcGxlbWVudGF0aW9uIHdpdGggc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBBcyBgd2luZG93LmlubmVyV2lkdGhgIGlzIHVuYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIsXG4gICAqIHdlIGRlZmF1bHQgdG8gcmVuZGVyaW5nIGFuIGVtcHR5IGNvbXBvbmVudCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBZb3UgbWlnaHQgd2FudCB0byB1c2UgYW4gaGV1cmlzdGljIHRvIGFwcHJveGltYXRlXG4gICAqIHRoZSBzY3JlZW4gd2lkdGggb2YgdGhlIGNsaWVudCBicm93c2VyIHNjcmVlbiB3aWR0aC5cbiAgICpcbiAgICogRm9yIGluc3RhbmNlLCB5b3UgY291bGQgYmUgdXNpbmcgdGhlIHVzZXItYWdlbnQgb3IgdGhlIGNsaWVudC1oaW50cy5cbiAgICogaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNsaWVudCUyMGhpbnRcbiAgICovXG4gIGluaXRpYWxXaWR0aDogUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSksXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWREb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWRVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEhpZGUgdGhlIGdpdmVuIGJyZWFrcG9pbnQocykuXG4gICAqL1xuICBvbmx5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSkpXSksXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21Eb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21VcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogd2lkdGggcHJvcCBwcm92aWRlZCBieSB3aXRoV2lkdGggZGVjb3JhdG9yLlxuICAgKi9cbiAgd2lkdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bERvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bFVwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c0Rvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c1VwOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgSGlkZGVuSnMucHJvcFR5cGVzID0gZXhhY3RQcm9wKEhpZGRlbkpzLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhXaWR0aCgpKEhpZGRlbkpzKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsga2V5cyBhcyBicmVha3BvaW50S2V5cyB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGhpZGRlbiA9IHtcbiAgICBkaXNwbGF5OiAnbm9uZSdcbiAgfTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICBhY2NbXCJvbmx5XCIuY29uY2F0KGNhcGl0YWxpemUoa2V5KSldID0gX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5vbmx5KGtleSksIGhpZGRlbik7XG4gICAgYWNjW1wiXCIuY29uY2F0KGtleSwgXCJVcFwiKV0gPSBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKGtleSksIGhpZGRlbik7XG4gICAgYWNjW1wiXCIuY29uY2F0KGtleSwgXCJEb3duXCIpXSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bihrZXkpLCBoaWRkZW4pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBIaWRkZW5Dc3MocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGxnRG93biA9IHByb3BzLmxnRG93bixcbiAgICAgIGxnVXAgPSBwcm9wcy5sZ1VwLFxuICAgICAgbWREb3duID0gcHJvcHMubWREb3duLFxuICAgICAgbWRVcCA9IHByb3BzLm1kVXAsXG4gICAgICBvbmx5ID0gcHJvcHMub25seSxcbiAgICAgIHNtRG93biA9IHByb3BzLnNtRG93bixcbiAgICAgIHNtVXAgPSBwcm9wcy5zbVVwLFxuICAgICAgeGxEb3duID0gcHJvcHMueGxEb3duLFxuICAgICAgeGxVcCA9IHByb3BzLnhsVXAsXG4gICAgICB4c0Rvd24gPSBwcm9wcy54c0Rvd24sXG4gICAgICB4c1VwID0gcHJvcHMueHNVcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJsZ0Rvd25cIiwgXCJsZ1VwXCIsIFwibWREb3duXCIsIFwibWRVcFwiLCBcIm9ubHlcIiwgXCJzbURvd25cIiwgXCJzbVVwXCIsIFwieGxEb3duXCIsIFwieGxVcFwiLCBcInhzRG93blwiLCBcInhzVXBcIl0pO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCA9PT0gMCB8fCBPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoID09PSAxICYmIG90aGVyLmhhc093blByb3BlcnR5KCdyZWYnKSwgXCJNYXRlcmlhbC1VSTogdW5zdXBwb3J0ZWQgcHJvcGVydGllcyByZWNlaXZlZCBcIi5jb25jYXQoT2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywgJyksIFwiIGJ5IGA8SGlkZGVuIC8+YC5cIikpIDogdm9pZCAwO1xuICB2YXIgY2xzeCA9IFtdO1xuXG4gIGlmIChjbGFzc05hbWUpIHtcbiAgICBjbHN4LnB1c2goY2xhc3NOYW1lKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnJlYWtwb2ludEtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnRLZXlzW2ldO1xuICAgIHZhciBicmVha3BvaW50VXAgPSBwcm9wc1tcIlwiLmNvbmNhdChicmVha3BvaW50LCBcIlVwXCIpXTtcbiAgICB2YXIgYnJlYWtwb2ludERvd24gPSBwcm9wc1tcIlwiLmNvbmNhdChicmVha3BvaW50LCBcIkRvd25cIildO1xuXG4gICAgaWYgKGJyZWFrcG9pbnRVcCkge1xuICAgICAgY2xzeC5wdXNoKGNsYXNzZXNbXCJcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJVcFwiKV0pO1xuICAgIH1cblxuICAgIGlmIChicmVha3BvaW50RG93bikge1xuICAgICAgY2xzeC5wdXNoKGNsYXNzZXNbXCJcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJEb3duXCIpXSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9ubHkpIHtcbiAgICB2YXIgb25seUJyZWFrcG9pbnRzID0gQXJyYXkuaXNBcnJheShvbmx5KSA/IG9ubHkgOiBbb25seV07XG4gICAgb25seUJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGJyZWFrcG9pbnQpIHtcbiAgICAgIGNsc3gucHVzaChjbGFzc2VzW1wib25seVwiLmNvbmNhdChjYXBpdGFsaXplKGJyZWFrcG9pbnQpKV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeC5qb2luKCcgJylcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBIaWRkZW5Dc3MucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGljaCBpbXBsZW1lbnRhdGlvbiB0byB1c2UuICAnanMnIGlzIHRoZSBkZWZhdWx0LCAnY3NzJyB3b3JrcyBiZXR0ZXIgZm9yXG4gICAqIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICovXG4gIGltcGxlbWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydqcycsICdjc3MnXSksXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWREb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWRVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEhpZGUgdGhlIGdpdmVuIGJyZWFrcG9pbnQocykuXG4gICAqL1xuICBvbmx5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSkpXSksXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21Eb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21VcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeGxEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeGxVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeHNEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeHNVcDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnUHJpdmF0ZUhpZGRlbkNzcydcbn0pKEhpZGRlbkNzcyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSGlkZGVuSnMgZnJvbSAnLi9IaWRkZW5Kcyc7XG5pbXBvcnQgSGlkZGVuQ3NzIGZyb20gJy4vSGlkZGVuQ3NzJztcbi8qKlxuICogUmVzcG9uc2l2ZWx5IGhpZGVzIGNoaWxkcmVuIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBIaWRkZW4ocHJvcHMpIHtcbiAgdmFyIGltcGxlbWVudGF0aW9uID0gcHJvcHMuaW1wbGVtZW50YXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiaW1wbGVtZW50YXRpb25cIl0pO1xuXG4gIGlmIChpbXBsZW1lbnRhdGlvbiA9PT0gJ2pzJykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEhpZGRlbkpzLCBvdGhlcik7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChIaWRkZW5Dc3MsIG90aGVyKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSGlkZGVuLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGljaCBpbXBsZW1lbnRhdGlvbiB0byB1c2UuICAnanMnIGlzIHRoZSBkZWZhdWx0LCAnY3NzJyB3b3JrcyBiZXR0ZXIgZm9yXG4gICAqIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICovXG4gIGltcGxlbWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydqcycsICdjc3MnXSksXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIHRoaXMgcHJvcGVydHkgd2hlbiBjaG9vc2luZyB0aGUgYGpzYCBpbXBsZW1lbnRhdGlvbiB3aXRoIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICpcbiAgICogQXMgYHdpbmRvdy5pbm5lcldpZHRoYCBpcyB1bmF2YWlsYWJsZSBvbiB0aGUgc2VydmVyLFxuICAgKiB3ZSBkZWZhdWx0IHRvIHJlbmRlcmluZyBhbiBlbXB0eSBjb21wb25lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIGFuIGhldXJpc3RpYyB0byBhcHByb3hpbWF0ZVxuICAgKiB0aGUgc2NyZWVuIHdpZHRoIG9mIHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNvdWxkIGJlIHVzaW5nIHRoZSB1c2VyLWFnZW50IG9yIHRoZSBjbGllbnQtaGludHMuXG4gICAqIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jbGllbnQlMjBoaW50XG4gICAqL1xuICBpbml0aWFsV2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIGxnRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIGxnVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIG1kRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIG1kVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBIaWRlIHRoZSBnaXZlbiBicmVha3BvaW50KHMpLlxuICAgKi9cbiAgb25seTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pKV0pLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHNtRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHNtVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhsRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhsVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhzRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhzVXA6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuSGlkZGVuLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW1wbGVtZW50YXRpb246ICdqcycsXG4gIGxnRG93bjogZmFsc2UsXG4gIGxnVXA6IGZhbHNlLFxuICBtZERvd246IGZhbHNlLFxuICBtZFVwOiBmYWxzZSxcbiAgc21Eb3duOiBmYWxzZSxcbiAgc21VcDogZmFsc2UsXG4gIHhsRG93bjogZmFsc2UsXG4gIHhsVXA6IGZhbHNlLFxuICB4c0Rvd246IGZhbHNlLFxuICB4c1VwOiBmYWxzZVxufTtcbmV4cG9ydCBkZWZhdWx0IEhpZGRlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICAvLyBDaHJvbWUgZml4IGZvciBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MjA1NDFcbiAgICAgIC8vIFRvIHJlbW92ZSBhdCBzb21lIHBvaW50LlxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiYWN0aW9uXCJgLiAqL1xuICAgIGNvbG9yQWN0aW9uOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZXJyb3JcImAuICovXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImRpc2FibGVkXCJgLiAqL1xuICAgIGNvbG9yRGlzYWJsZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH0sXG4gICAgZm9udFNpemVJbmhlcml0OiB7XG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwic21hbGxcImAuICovXG4gICAgZm9udFNpemVTbWFsbDoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBmb250U2l6ZUxhcmdlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDM2KVxuICAgIH1cbiAgfTtcbn07XG52YXIgSWNvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3BhbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9wcm9wcyRmb250U2l6ZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGZvbnRTaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goJ21hdGVyaWFsLWljb25zJywgY2xhc3Nlcy5yb290LCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldLCBjbGFzc05hbWUpLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uIGZvbnQgbGlnYXR1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2FjdGlvbicsICdlcnJvcicsICdkaXNhYmxlZCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnZGVmYXVsdCcsICdzbWFsbCcsICdsYXJnZSddKVxufSA6IHZvaWQgMDtcbkljb24ubXVpTmFtZSA9ICdJY29uJztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJY29uJ1xufSkoSWNvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHdpdGhGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvd2l0aEZvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcwLjAxZW0nLFxuICAgIC8vIEZpeCBJRSAxMSBmbGV4Ym94IGFsaWdubWVudC4gVG8gcmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgbWF4SGVpZ2h0OiAnMmVtJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuICovXG4gIGZpbGxlZDoge1xuICAgICcmJHBvc2l0aW9uU3RhcnQnOiB7XG4gICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgfVxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RhcnRcImAuICovXG4gIHBvc2l0aW9uU3RhcnQ6IHtcbiAgICBtYXJnaW5SaWdodDogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiZW5kXCJgLiAqL1xuICBwb3NpdGlvbkVuZDoge1xuICAgIG1hcmdpbkxlZnQ6IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlUG9pbnRlckV2ZW50cz10cnVlYC4gKi9cbiAgZGlzYWJsZVBvaW50ZXJFdmVudHM6IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgfVxufTtcbnZhciBJbnB1dEFkb3JubWVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRBZG9ybm1lbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUG9pbnRlciA9IHByb3BzLmRpc2FibGVQb2ludGVyRXZlbnRzLFxuICAgICAgZGlzYWJsZVBvaW50ZXJFdmVudHMgPSBfcHJvcHMkZGlzYWJsZVBvaW50ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb2ludGVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVUeXBvZ3JhID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVR5cG9ncmEsXG4gICAgICBtdWlGb3JtQ29udHJvbCA9IHByb3BzLm11aUZvcm1Db250cm9sLFxuICAgICAgcG9zaXRpb24gPSBwcm9wcy5wb3NpdGlvbixcbiAgICAgIHZhcmlhbnRQcm9wID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlUG9pbnRlckV2ZW50c1wiLCBcImRpc2FibGVUeXBvZ3JhcGh5XCIsIFwibXVpRm9ybUNvbnRyb2xcIiwgXCJwb3NpdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB2YXJpYW50ID0gdmFyaWFudFByb3A7XG5cbiAgaWYgKHZhcmlhbnRQcm9wICYmIG11aUZvcm1Db250cm9sKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YXJpYW50UHJvcCAhPT0gbXVpRm9ybUNvbnRyb2wudmFyaWFudCwgJ01hdGVyaWFsLVVJOiBUaGUgYElucHV0QWRvcm5tZW50YCB2YXJpYW50IGluZmVycyB0aGUgdmFyaWFudCBwcm9wZXJ0eSAnICsgJ3lvdSBkbyBub3QgaGF2ZSB0byBwcm92aWRlIG9uZS4nKSA6IHZvaWQgMDtcbiAgfVxuXG4gIGlmIChtdWlGb3JtQ29udHJvbCAmJiAhdmFyaWFudCkge1xuICAgIHZhcmlhbnQgPSBtdWlGb3JtQ29udHJvbC52YXJpYW50O1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG51bGxcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCB2YXJpYW50ID09PSAnZmlsbGVkJyAmJiBjbGFzc2VzLmZpbGxlZCwgcG9zaXRpb24gPT09ICdzdGFydCcgJiYgY2xhc3Nlcy5wb3NpdGlvblN0YXJ0LCBwb3NpdGlvbiA9PT0gJ2VuZCcgJiYgY2xhc3Nlcy5wb3NpdGlvbkVuZCwgZGlzYWJsZVBvaW50ZXJFdmVudHMgJiYgY2xhc3Nlcy5kaXNhYmxlUG9pbnRlckV2ZW50cywgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgJiYgIWRpc2FibGVUeXBvZ3JhcGh5ID8gUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7XG4gICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiXG4gIH0sIGNoaWxkcmVuKSA6IGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QWRvcm5tZW50LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGFuIGBJY29uQnV0dG9uYCBvciBzdHJpbmcuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogRGlzYWJsZSBwb2ludGVyIGV2ZW50cyBvbiB0aGUgcm9vdC5cbiAgICogVGhpcyBhbGxvd3MgZm9yIHRoZSBjb250ZW50IG9mIHRoZSBhZG9ybm1lbnQgdG8gZm9jdXMgdGhlIGlucHV0IG9uIGNsaWNrLlxuICAgKi9cbiAgZGlzYWJsZVBvaW50ZXJFdmVudHM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBjaGlsZHJlbiBpcyBhIHN0cmluZyB0aGVuIGRpc2FibGUgd3JhcHBpbmcgaW4gYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiB0aGlzIGFkb3JubWVudCBzaG91bGQgYXBwZWFyIHJlbGF0aXZlIHRvIHRoZSBgSW5wdXRgLlxuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBOb3RlOiBJZiB5b3UgYXJlIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgb3IgdGhlIGBGb3JtQ29udHJvbGAgY29tcG9uZW50XG4gICAqIHlvdSBkbyBub3QgaGF2ZSB0byBzZXQgdGhpcyBtYW51YWxseS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEFkb3JubWVudCdcbn0pKHdpdGhGb3JtQ29udHJvbENvbnRleHQoSW5wdXRBZG9ybm1lbnQpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgbGlnaHRlbiB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbnZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNDsgLy8gc2Vjb25kc1xuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBoZWlnaHQ6IDRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgJiBiYXIyIGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYDsgYmFyMiBpZiBgdmFyaWFudC1cImJ1ZmZlclwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRlbih0aGVtZS5wYWxldHRlLnByaW1hcnkubGlnaHQsIDAuNilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgJiBiYXIyIGVsZW1lbnRzIGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYDsgYmFyMiBpZiBgdmFyaWFudD1cImJ1ZmZlclwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGVuKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmxpZ2h0LCAwLjQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBkZXRlcm1pbmF0ZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaW5kZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBpbmRldGVybWluYXRlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidWZmZXJcImAuICovXG4gICAgYnVmZmVyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInF1ZXJ5XCJgLiAqL1xuICAgIHF1ZXJ5OiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFkZGl0aW9uYWwgYmFyIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidWZmZXJcImAuICovXG4gICAgZGFzaGVkOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGFuaW1hdGlvbjogJ2J1ZmZlciAzcyBpbmZpbml0ZSBsaW5lYXInLFxuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJsZSBsb2dpYyBiZXR3ZWVuIEpTUyB2OSBhbmQgdjEwLlxuICAgICAgLy8gVG8gcmVtb3ZlIHdpdGggdGhlIHJlbGVhc2Ugb2YgTWF0ZXJpYWwtVUkgdjRcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckYnVmZmVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYWRkaXRpb25hbCBiYXIgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1ZmZlclwiYCAmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgZGFzaGVkQ29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwicmFkaWFsLWdyYWRpZW50KFwiLmNvbmNhdChsaWdodGVuKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5saWdodCwgMC42KSwgXCIgMCUsIFwiKS5jb25jYXQobGlnaHRlbih0aGVtZS5wYWxldHRlLnByaW1hcnkubGlnaHQsIDAuNiksIFwiIDE2JSwgdHJhbnNwYXJlbnQgNDIlKVwiKSxcbiAgICAgIGJhY2tncm91bmRTaXplOiAnMTBweCAxMHB4JyxcbiAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzBweCAtMjNweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFkZGl0aW9uYWwgYmFyIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidWZmZXJcImAgJiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgZGFzaGVkQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogXCJyYWRpYWwtZ3JhZGllbnQoXCIuY29uY2F0KGxpZ2h0ZW4odGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubGlnaHQsIDAuNCksIFwiIDAlLCBcIikuY29uY2F0KGxpZ2h0ZW4odGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubGlnaHQsIDAuNiksIFwiIDE2JSwgdHJhbnNwYXJlbnQgNDIlKVwiKSxcbiAgICAgIGJhY2tncm91bmRTaXplOiAnMTBweCAxMHB4JyxcbiAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzBweCAtMjNweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxheWVyZWQgYmFyMSAmIGJhcjIgZWxlbWVudHMuICovXG4gICAgYmFyOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjJzIGxpbmVhcicsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFyIGVsZW1lbnRzIGlmIGBjb2xvcj1cInByaW1hcnlcImA7IGJhcjIgaWYgYHZhcmlhbnRgIG5vdCBcImJ1ZmZlclwiLiAqL1xuICAgIGJhckNvbG9yUHJpbWFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFyIGVsZW1lbnRzIGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYDsgYmFyMiBpZiBgdmFyaWFudGAgbm90IFwiYnVmZmVyXCIuICovXG4gICAgYmFyQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFyMSBlbGVtZW50IGlmIGB2YXJpYW50PVwiaW5kZXRlcm1pbmF0ZSBvciBxdWVyeVwiYC4gKi9cbiAgICBiYXIxSW5kZXRlcm1pbmF0ZToge1xuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIGFuaW1hdGlvbjogJ211aS1pbmRldGVybWluYXRlMSAyLjFzIGN1YmljLWJlemllcigwLjY1LCAwLjgxNSwgMC43MzUsIDAuMzk1KSBpbmZpbml0ZScsXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRtdWktaW5kZXRlcm1pbmF0ZTEnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIxIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBiYXIxRGV0ZXJtaW5hdGU6IHtcbiAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIC5cIi5jb25jYXQoVFJBTlNJVElPTl9EVVJBVElPTiwgXCJzIGxpbmVhclwiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFyMSBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnVmZmVyXCJgLiAqL1xuICAgIGJhcjFCdWZmZXI6IHtcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIC5cIi5jb25jYXQoVFJBTlNJVElPTl9EVVJBVElPTiwgXCJzIGxpbmVhclwiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFyMiBlbGVtZW50IGlmIGB2YXJpYW50PVwiaW5kZXRlcm1pbmF0ZSBvciBxdWVyeVwiYC4gKi9cbiAgICBiYXIySW5kZXRlcm1pbmF0ZToge1xuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIGFuaW1hdGlvbjogJ211aS1pbmRldGVybWluYXRlMiAyLjFzIGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSkgaW5maW5pdGUnLFxuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJsZSBsb2dpYyBiZXR3ZWVuIEpTUyB2OSBhbmQgdjEwLlxuICAgICAgLy8gVG8gcmVtb3ZlIHdpdGggdGhlIHJlbGVhc2Ugb2YgTWF0ZXJpYWwtVUkgdjRcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckbXVpLWluZGV0ZXJtaW5hdGUyJyxcbiAgICAgIGFuaW1hdGlvbkRlbGF5OiAnMS4xNXMnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIyIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidWZmZXJcImAuICovXG4gICAgYmFyMkJ1ZmZlcjoge1xuICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gLlwiLmNvbmNhdChUUkFOU0lUSU9OX0RVUkFUSU9OLCBcInMgbGluZWFyXCIpXG4gICAgfSxcbiAgICAvLyBMZWdlbmRzOlxuICAgIC8vIHx8IHJlcHJlc2VudHMgdGhlIHZpZXdwb3J0XG4gICAgLy8gLSAgcmVwcmVzZW50cyBhIGxpZ2h0IGJhY2tncm91bmRcbiAgICAvLyB4ICByZXByZXNlbnRzIGEgZGFyayBiYWNrZ3JvdW5kXG4gICAgJ0BrZXlmcmFtZXMgbXVpLWluZGV0ZXJtaW5hdGUxJzoge1xuICAgICAgLy8gIHwtLS0tLXwtLS14LXx8LS0tLS18fC0tLS0tfFxuICAgICAgJzAlJzoge1xuICAgICAgICBsZWZ0OiAnLTM1JScsXG4gICAgICAgIHJpZ2h0OiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICAvLyAgfC0tLS0tfC0tLS0tfHwtLS0tLXx8eHh4eC18XG4gICAgICAnNjAlJzoge1xuICAgICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICAgIHJpZ2h0OiAnLTkwJSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgbGVmdDogJzEwMCUnLFxuICAgICAgICByaWdodDogJy05MCUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktaW5kZXRlcm1pbmF0ZTInOiB7XG4gICAgICAvLyAgfHh4eHh4fHh4eHh4fHwtLS0tLXx8LS0tLS18XG4gICAgICAnMCUnOiB7XG4gICAgICAgIGxlZnQ6ICctMjAwJScsXG4gICAgICAgIHJpZ2h0OiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICAvLyAgfC0tLS0tfC0tLS0tfHwtLS0tLXx8LXgtLS0tfFxuICAgICAgJzYwJSc6IHtcbiAgICAgICAgbGVmdDogJzEwNyUnLFxuICAgICAgICByaWdodDogJy04JSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgbGVmdDogJzEwNyUnLFxuICAgICAgICByaWdodDogJy04JSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGJ1ZmZlcic6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnMHB4IC0yM3B4J1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzBweCAtMjNweCdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnLTIwMHB4IC0yM3B4J1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cblxudmFyIExpbmVhclByb2dyZXNzID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5lYXJQcm9ncmVzcyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFsdWVCdWZmZXIgPSBwcm9wcy52YWx1ZUJ1ZmZlcixcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2luZGV0ZXJtaW5hdGUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZUJ1ZmZlclwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY29sb3IgPT09ICdwcmltYXJ5JyAmJiBjbGFzc2VzLmNvbG9yUHJpbWFyeSwgY29sb3IgPT09ICdzZWNvbmRhcnknICYmIGNsYXNzZXMuY29sb3JTZWNvbmRhcnksIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYgY2xhc3Nlcy5kZXRlcm1pbmF0ZSwgdmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIGNsYXNzZXMuaW5kZXRlcm1pbmF0ZSwgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgY2xhc3Nlcy5idWZmZXIsIHZhcmlhbnQgPT09ICdxdWVyeScgJiYgY2xhc3Nlcy5xdWVyeSwgY2xhc3NOYW1lUHJvcCk7XG4gIHZhciBkYXNoZWRDbGFzcyA9IGNsc3goY2xhc3Nlcy5kYXNoZWQsIGNvbG9yID09PSAncHJpbWFyeScgJiYgY2xhc3Nlcy5kYXNoZWRDb2xvclByaW1hcnksIGNvbG9yID09PSAnc2Vjb25kYXJ5JyAmJiBjbGFzc2VzLmRhc2hlZENvbG9yU2Vjb25kYXJ5KTtcbiAgdmFyIGJhcjFDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuYmFyLCBjb2xvciA9PT0gJ3ByaW1hcnknICYmIGNsYXNzZXMuYmFyQ29sb3JQcmltYXJ5LCBjb2xvciA9PT0gJ3NlY29uZGFyeScgJiYgY2xhc3Nlcy5iYXJDb2xvclNlY29uZGFyeSwgKHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAncXVlcnknKSAmJiBjbGFzc2VzLmJhcjFJbmRldGVybWluYXRlLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIGNsYXNzZXMuYmFyMURldGVybWluYXRlLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiBjbGFzc2VzLmJhcjFCdWZmZXIpO1xuICB2YXIgYmFyMkNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5iYXIsICh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgY2xhc3Nlcy5iYXIySW5kZXRlcm1pbmF0ZSwgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgW2NvbG9yID09PSAncHJpbWFyeScgJiYgY2xhc3Nlcy5jb2xvclByaW1hcnksIGNvbG9yID09PSAnc2Vjb25kYXJ5JyAmJiBjbGFzc2VzLmNvbG9yU2Vjb25kYXJ5LCBjbGFzc2VzLmJhcjJCdWZmZXJdLCB2YXJpYW50ICE9PSAnYnVmZmVyJyAmJiBbY29sb3IgPT09ICdwcmltYXJ5JyAmJiBjbGFzc2VzLmJhckNvbG9yUHJpbWFyeSwgY29sb3IgPT09ICdzZWNvbmRhcnknICYmIGNsYXNzZXMuYmFyQ29sb3JTZWNvbmRhcnldKTtcbiAgdmFyIHJvb3RQcm9wcyA9IHt9O1xuICB2YXIgaW5saW5lU3R5bGVzID0ge1xuICAgIGJhcjE6IHt9LFxuICAgIGJhcjI6IHt9XG4gIH07XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgIGlubGluZVN0eWxlcy5iYXIxLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWChcIi5jb25jYXQodmFsdWUgLSAxMDAsIFwiJSlcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gcHJvdmlkZSBhIHZhbHVlIHByb3BlcnR5ICcgKyAnd2hlbiB1c2luZyB0aGUgZGV0ZXJtaW5hdGUgb3IgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MgLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YXJpYW50ID09PSAnYnVmZmVyJykge1xuICAgIGlmICh2YWx1ZUJ1ZmZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMi50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoXCIuY29uY2F0KCh2YWx1ZUJ1ZmZlciB8fCAwKSAtIDEwMCwgXCIlKVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ01hdGVyaWFsLVVJOiB5b3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWVCdWZmZXIgcHJvcGVydHkgJyArICd3aGVuIHVzaW5nIHRoZSBidWZmZXIgdmFyaWFudCBvZiBMaW5lYXJQcm9ncmVzcy4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcm9sZTogXCJwcm9ncmVzc2JhclwiXG4gIH0sIHJvb3RQcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgdmFyaWFudCA9PT0gJ2J1ZmZlcicgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGRhc2hlZENsYXNzXG4gIH0pIDogbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBiYXIxQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiBpbmxpbmVTdHlsZXMuYmFyMVxuICB9KSwgdmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGJhcjJDbGFzc05hbWUsXG4gICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIyXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGluZWFyUHJvZ3Jlc3MucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIGFuZCBidWZmZXIgdmFyaWFudHMuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBmb3IgdGhlIGJ1ZmZlciB2YXJpYW50LlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlQnVmZmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIG9yIHF1ZXJ5IHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2J1ZmZlcicsICdxdWVyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcydcbn0pKExpbmVhclByb2dyZXNzKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHVuZGVybGluZT1cIm5vbmVcImAuICovXG4gIHVuZGVybGluZU5vbmU6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdW5kZXJsaW5lPVwiaG92ZXJcImAuICovXG4gIHVuZGVybGluZUhvdmVyOiB7XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICAgIH1cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB1bmRlcmxpbmU9XCJhbHdheXNcImAuICovXG4gIHVuZGVybGluZUFsd2F5czoge1xuICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICB9LFxuICAvLyBTYW1lIHJlc2V0IGFzIEJ1dHRvbkJhc2Uucm9vdFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBvbmVudD1cImJ1dHRvblwiYC4gKi9cbiAgYnV0dG9uOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfVxuICB9XG59O1xudmFyIExpbmsgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmsocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2EnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIFR5cG9ncmFwaHlDbGFzc2VzID0gcHJvcHMuVHlwb2dyYXBoeUNsYXNzZXMsXG4gICAgICBfcHJvcHMkdW5kZXJsaW5lID0gcHJvcHMudW5kZXJsaW5lLFxuICAgICAgdW5kZXJsaW5lID0gX3Byb3BzJHVuZGVybGluZSA9PT0gdm9pZCAwID8gJ2hvdmVyJyA6IF9wcm9wcyR1bmRlcmxpbmUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb2xvclwiLCBcIlR5cG9ncmFwaHlDbGFzc2VzXCIsIFwidW5kZXJsaW5lXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNvbXBvbmVudCA9PT0gJ2J1dHRvbicgJiYgY2xhc3Nlcy5idXR0b24sIGNsYXNzZXNbXCJ1bmRlcmxpbmVcIi5jb25jYXQoY2FwaXRhbGl6ZSh1bmRlcmxpbmUpKV0sIGNsYXNzTmFtZSksXG4gICAgY2xhc3NlczogVHlwb2dyYXBoeUNsYXNzZXMsXG4gICAgY29sb3I6IGNvbG9yLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGluay5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbGluay5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGxpbmsuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdlcnJvcicsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wZXJ0eSBhcHBsaWVkIHRvIHRoZSBbYFR5cG9ncmFwaHlgXSgvYXBpL3R5cG9ncmFwaHkvKSBlbGVtZW50LlxuICAgKi9cbiAgVHlwb2dyYXBoeUNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqICBDb250cm9scyB3aGVuIHRoZSBsaW5rIHNob3VsZCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIHVuZGVybGluZTogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdob3ZlcicsICdhbHdheXMnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaW5rJ1xufSkoTGluayk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIG1pbldpZHRoOiA1NixcbiAgICBmbGV4U2hyaW5rOiAwXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCB3aGVuIHRoZSBwYXJlbnQgYExpc3RJdGVtYCB1c2VzIGBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiYC4gKi9cbiAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgIG1hcmdpblRvcDogOFxuICB9XG59O1xuLyoqXG4gKiBBIHNpbXBsZSB3cmFwcGVyIHRvIGFwcGx5IGBMaXN0YCBzdHlsZXMgdG8gYW4gYEF2YXRhcmAuXG4gKi9cblxudmFyIExpc3RJdGVtQXZhdGFyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUF2YXRhcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY29udGV4dC5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgY2xhc3Nlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtQXZhdGFyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQg4oCTIG5vcm1hbGx5IGBBdmF0YXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1BdmF0YXInXG59KShMaXN0SXRlbUF2YXRhcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHJpZ2h0OiAxNixcbiAgICB0b3A6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG4gIH1cbn07XG4vKipcbiAqIE11c3QgYmUgdXNlZCBhcyB0aGUgbGFzdCBjaGlsZCBvZiBMaXN0SXRlbSB0byBmdW5jdGlvbiBwcm9wZXJseS5cbiAqL1xuXG52YXIgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGFuIGBJY29uQnV0dG9uYCBvciBzZWxlY3Rpb24gY29udHJvbC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbkxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLm11aU5hbWUgPSAnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ1xufSkoTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbGluZUhlaWdodDogJzQ4cHgnLFxuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTYsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGluc2V0PXt0cnVlfWAuICovXG4gICAgaW5zZXQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiA3MlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlU3RpY2t5PXtmYWxzZX1gLiAqL1xuICAgIHN0aWNreToge1xuICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgdG9wOiAwLFxuICAgICAgekluZGV4OiAxLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG59O1xudmFyIExpc3RTdWJoZWFkZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RTdWJoZWFkZXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xpJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RpY2t5ID0gcHJvcHMuZGlzYWJsZVN0aWNreSxcbiAgICAgIGRpc2FibGVTdGlja3kgPSBfcHJvcHMkZGlzYWJsZVN0aWNreSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVN0aWNreSxcbiAgICAgIF9wcm9wcyRpbnNldCA9IHByb3BzLmluc2V0LFxuICAgICAgaW5zZXQgPSBfcHJvcHMkaW5zZXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZGlzYWJsZVN0aWNreVwiLCBcImluc2V0XCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBpbnNldCAmJiBjbGFzc2VzLmluc2V0LCAhZGlzYWJsZVN0aWNreSAmJiBjbGFzc2VzLnN0aWNreSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycywgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0U3ViaGVhZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnaW5oZXJpdCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgTGlzdCBTdWJoZWFkZXIgd2lsbCBub3QgaGF2ZSBndXR0ZXJzLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBMaXN0IFN1YmhlYWRlciB3aWxsIG5vdCBzdGljayB0byB0aGUgdG9wIGR1cmluZyBzY3JvbGwuXG4gICAqL1xuICBkaXNhYmxlU3RpY2t5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgTGlzdCBTdWJoZWFkZXIgd2lsbCBiZSBpbmRlbnRlZC5cbiAgICovXG4gIGluc2V0OiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0U3ViaGVhZGVyJ1xufSkoTGlzdFN1YmhlYWRlcik7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTGlzdEl0ZW0gZnJvbSAnLi4vTGlzdEl0ZW0nO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMSwge1xuICAgICAgbWluSGVpZ2h0OiA0OCxcbiAgICAgIHBhZGRpbmdUb3A6IDQsXG4gICAgICBwYWRkaW5nQm90dG9tOiA0LFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVHdXR0ZXJzPXtmYWxzZX1gLiAqL1xuICAgIGd1dHRlcnM6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxNixcbiAgICAgIHBhZGRpbmdSaWdodDogMTZcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge31cbiAgfTtcbn07XG52YXIgTWVudUl0ZW0gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnVJdGVtKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdsaScgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkcm9sZSA9IHByb3BzLnJvbGUsXG4gICAgICByb2xlID0gX3Byb3BzJHJvbGUgPT09IHZvaWQgMCA/ICdtZW51aXRlbScgOiBfcHJvcHMkcm9sZSxcbiAgICAgIHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICB0YWJJbmRleFByb3AgPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJyb2xlXCIsIFwic2VsZWN0ZWRcIiwgXCJ0YWJJbmRleFwiXSk7XG5cbiAgdmFyIHRhYkluZGV4O1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcCAhPT0gdW5kZWZpbmVkID8gdGFiSW5kZXhQcm9wIDogLTE7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0SXRlbSwgX2V4dGVuZHMoe1xuICAgIGJ1dHRvbjogdHJ1ZSxcbiAgICByb2xlOiByb2xlLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgZGlzYWJsZUd1dHRlcnM6IGRpc2FibGVHdXR0ZXJzLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHNlbGVjdGVkICYmIGNsYXNzZXMuc2VsZWN0ZWQsICFkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmd1dHRlcnMsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudUl0ZW0ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogTWVudSBpdGVtIGNvbnRlbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlclxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlNZW51SXRlbSdcbn0pKE1lbnVJdGVtKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgTGluZWFyUHJvZ3Jlc3MgZnJvbSAnLi4vTGluZWFyUHJvZ3Jlc3MnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgYmFja2dyb3VuZDogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsXG4gICAgICBwYWRkaW5nOiA4XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiYm90dG9tXCJgLiAqL1xuICAgIHBvc2l0aW9uQm90dG9tOiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4Lm1vYmlsZVN0ZXBwZXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJ0b3BcImAuICovXG4gICAgcG9zaXRpb25Ub3A6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXgubW9iaWxlU3RlcHBlclxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZG90cyBjb250YWluZXIgaWYgYHZhcmlhbnQ9XCJkb3RzXCJgLiAqL1xuICAgIGRvdHM6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIGVhY2ggZG90IGlmIGB2YXJpYW50PVwiZG90c1wiYC4gKi9cbiAgICBkb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgd2lkdGg6IDgsXG4gICAgICBoZWlnaHQ6IDgsXG4gICAgICBtYXJnaW46ICcwIDJweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gYSBkb3QgaWYgYHZhcmlhbnQ9XCJkb3RzXCJgIGFuZCB0aGlzIGlzIHRoZSBhY3RpdmUgc3RlcC4gKi9cbiAgICBkb3RBY3RpdmU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIExpbmVhciBQcm9ncmVzcyBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJwcm9ncmVzc1wiYC4gKi9cbiAgICBwcm9ncmVzczoge1xuICAgICAgd2lkdGg6ICc1MCUnXG4gICAgfVxuICB9O1xufTtcbnZhciBNb2JpbGVTdGVwcGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2JpbGVTdGVwcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhY3RpdmVTdGVwID0gcHJvcHMuYWN0aXZlU3RlcCxcbiAgICAgIGFjdGl2ZVN0ZXAgPSBfcHJvcHMkYWN0aXZlU3RlcCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRhY3RpdmVTdGVwLFxuICAgICAgYmFja0J1dHRvbiA9IHByb3BzLmJhY2tCdXR0b24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIExpbmVhclByb2dyZXNzUHJvcHMgPSBwcm9wcy5MaW5lYXJQcm9ncmVzc1Byb3BzLFxuICAgICAgbmV4dEJ1dHRvbiA9IHByb3BzLm5leHRCdXR0b24sXG4gICAgICBfcHJvcHMkcG9zaXRpb24gPSBwcm9wcy5wb3NpdGlvbixcbiAgICAgIHBvc2l0aW9uID0gX3Byb3BzJHBvc2l0aW9uID09PSB2b2lkIDAgPyAnYm90dG9tJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIHN0ZXBzID0gcHJvcHMuc3RlcHMsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdkb3RzJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGl2ZVN0ZXBcIiwgXCJiYWNrQnV0dG9uXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcIkxpbmVhclByb2dyZXNzUHJvcHNcIiwgXCJuZXh0QnV0dG9uXCIsIFwicG9zaXRpb25cIiwgXCJzdGVwc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGVsZXZhdGlvbjogMCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wicG9zaXRpb25cIi5jb25jYXQoY2FwaXRhbGl6ZShwb3NpdGlvbikpXSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGJhY2tCdXR0b24sIHZhcmlhbnQgPT09ICd0ZXh0JyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBhY3RpdmVTdGVwICsgMSwgXCIgLyBcIiwgc3RlcHMpLCB2YXJpYW50ID09PSAnZG90cycgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmRvdHNcbiAgfSwgX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBBcnJheShzdGVwcykpLm1hcChmdW5jdGlvbiAoXywgaW5kZXgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICBrZXk6IGluZGV4LFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZG90LCBpbmRleCA9PT0gYWN0aXZlU3RlcCAmJiBjbGFzc2VzLmRvdEFjdGl2ZSlcbiAgICB9KTtcbiAgfSkpLCB2YXJpYW50ID09PSAncHJvZ3Jlc3MnICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluZWFyUHJvZ3Jlc3MsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJvZ3Jlc3MsXG4gICAgdmFyaWFudDogXCJkZXRlcm1pbmF0ZVwiLFxuICAgIHZhbHVlOiBNYXRoLmNlaWwoYWN0aXZlU3RlcCAvIChzdGVwcyAtIDEpICogMTAwKVxuICB9LCBMaW5lYXJQcm9ncmVzc1Byb3BzKSksIG5leHRCdXR0b24pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNb2JpbGVTdGVwcGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgYWN0aXZlIHN0ZXAgKHplcm8gYmFzZWQgaW5kZXgpLlxuICAgKiBEZWZpbmVzIHdoaWNoIGRvdCBpcyBoaWdobGlnaHRlZCB3aGVuIHRoZSB2YXJpYW50IGlzICdkb3RzJy5cbiAgICovXG4gIGFjdGl2ZVN0ZXA6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEEgYmFjayBidXR0b24gZWxlbWVudC4gRm9yIGluc3RhbmNlLCBpdCBjYW4gYmUgYSBgQnV0dG9uYCBvciBhbiBgSWNvbkJ1dHRvbmAuXG4gICAqL1xuICBiYWNrQnV0dG9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgTGluZWFyUHJvZ3Jlc3NgIGVsZW1lbnQuXG4gICAqL1xuICBMaW5lYXJQcm9ncmVzc1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBIG5leHQgYnV0dG9uIGVsZW1lbnQuIEZvciBpbnN0YW5jZSwgaXQgY2FuIGJlIGEgYEJ1dHRvbmAgb3IgYW4gYEljb25CdXR0b25gLlxuICAgKi9cbiAgbmV4dEJ1dHRvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcG9zaXRpb25pbmcgdHlwZS5cbiAgICovXG4gIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAndG9wJywgJ3N0YXRpYyddKSxcblxuICAvKipcbiAgICogVGhlIHRvdGFsIHN0ZXBzLlxuICAgKi9cbiAgc3RlcHM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsndGV4dCcsICdkb3RzJywgJ3Byb2dyZXNzJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aU1vYmlsZVN0ZXBwZXInXG59KShNb2JpbGVTdGVwcGVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFBvcHBlckpTIGZyb20gJ3BvcHBlci5qcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgeyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuXG5mdW5jdGlvbiBmbGlwUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgZGlyZWN0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoJ2RpcicpIHx8ICdsdHInO1xuXG4gIGlmIChkaXJlY3Rpb24gIT09ICdydGwnKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgY2FzZSAnYm90dG9tLWVuZCc6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1zdGFydCc7XG5cbiAgICBjYXNlICdib3R0b20tc3RhcnQnOlxuICAgICAgcmV0dXJuICdib3R0b20tZW5kJztcblxuICAgIGNhc2UgJ3RvcC1lbmQnOlxuICAgICAgcmV0dXJuICd0b3Atc3RhcnQnO1xuXG4gICAgY2FzZSAndG9wLXN0YXJ0JzpcbiAgICAgIHJldHVybiAndG9wLWVuZCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuLyoqXG4gKiBQb3BwZXJzIHJlbHkgb24gdGhlIDNyZCBwYXJ0eSBsaWJyYXJ5IFtQb3BwZXIuanNdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzKSBmb3IgcG9zaXRpb25pbmcuXG4gKi9cblxuXG52YXIgUG9wcGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXIocHJvcHMsIHJlZikge1xuICB2YXIgYW5jaG9yRWwgPSBwcm9wcy5hbmNob3JFbCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBfcHJvcHMka2VlcE1vdW50ZWQgPSBwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgIGtlZXBNb3VudGVkID0gX3Byb3BzJGtlZXBNb3VudGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRrZWVwTW91bnRlZCxcbiAgICAgIG1vZGlmaWVycyA9IHByb3BzLm1vZGlmaWVycyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJHBsYWNlbWVudCA9IHByb3BzLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudFByb3BzID0gX3Byb3BzJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2JvdHRvbScgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgICAgX3Byb3BzJHBvcHBlck9wdGlvbnMgPSBwcm9wcy5wb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyT3B0aW9ucyA9IF9wcm9wcyRwb3BwZXJPcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRwb3BwZXJPcHRpb25zLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb24gPSBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgdHJhbnNpdGlvbiA9IF9wcm9wcyR0cmFuc2l0aW9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR0cmFuc2l0aW9uLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvckVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtb2RpZmllcnNcIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwicG9wcGVyT3B0aW9uc1wiLCBcInRyYW5zaXRpb25cIl0pO1xuXG4gIHZhciB0b29sdGlwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKCFwcm9wcy5vcGVuKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZSgpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTMsIDIpLFxuICAgICAgcGxhY2VtZW50ID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICAgIHNldFBsYWNlbWVudCA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYodG9vbHRpcFJlZiwgcmVmKTtcbiAgdmFyIGhhbmRsZU9wZW4gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZVBvcHBlclVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcHBlclVwZGF0ZShkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5wbGFjZW1lbnQgIT09IHBsYWNlbWVudCkge1xuICAgICAgICBzZXRQbGFjZW1lbnQoZGF0YS5wbGFjZW1lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcG9wcGVyTm9kZSA9IHRvb2x0aXBSZWYuY3VycmVudDtcblxuICAgIGlmICghcG9wcGVyTm9kZSB8fCAhYW5jaG9yRWwgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmRlc3Ryb3koKTtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwb3BwZXJSZWYuY3VycmVudCA9IG5ldyBQb3BwZXJKUyhnZXRBbmNob3JFbChhbmNob3JFbCksIHBvcHBlck5vZGUsIF9leHRlbmRzKHtcbiAgICAgIHBsYWNlbWVudDogZmxpcFBsYWNlbWVudChwbGFjZW1lbnRQcm9wcylcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBkaXNhYmxlUG9ydGFsID8ge30gOiB7XG4gICAgICAgIC8vIEl0J3MgdXNpbmcgc2Nyb2xsUGFyZW50IGJ5IGRlZmF1bHQsIHdlIGNhbiB1c2UgdGhlIHZpZXdwb3J0IHdoZW4gdXNpbmcgYSBwb3J0YWwuXG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnd2luZG93J1xuICAgICAgICB9XG4gICAgICB9LCBtb2RpZmllcnMsIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzKSxcbiAgICAgIC8vIFdlIGNvdWxkIGhhdmUgYmVlbiB1c2luZyBhIGN1c3RvbSBtb2RpZmllciBsaWtlIHJlYWN0LXBvcHBlciBpcyBkb2luZy5cbiAgICAgIC8vIEJ1dCBpdCBzZWVtcyB0aGlzIGlzIHRoZSBiZXN0IHB1YmxpYyBBUEkgZm9yIHRoaXMgdXNlIGNhc2UuXG4gICAgICBvbkNyZWF0ZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZVBvcHBlclVwZGF0ZSwgcG9wcGVyT3B0aW9ucy5vbkNyZWF0ZSksXG4gICAgICBvblVwZGF0ZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZVBvcHBlclVwZGF0ZSwgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSlcbiAgICB9KSk7XG4gIH0sIFthbmNob3JFbCwgZGlzYWJsZVBvcnRhbCwgbW9kaWZpZXJzLCBvcGVuLCBwbGFjZW1lbnQsIHBsYWNlbWVudFByb3BzLCBwb3BwZXJPcHRpb25zXSk7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiBoYW5kbGVDbG9zZSgpIHtcbiAgICBpZiAoIXBvcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcG9wcGVyUmVmLmN1cnJlbnQuZGVzdHJveSgpO1xuICAgIHBvcHBlclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKCkge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcbiAgICBoYW5kbGVDbG9zZSgpO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIExldCdzIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgIGhhbmRsZU9wZW4oKTtcbiAgfSwgW2hhbmRsZU9wZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW9wZW4gJiYgIXRyYW5zaXRpb24pIHtcbiAgICAgIC8vIE90aGVyd2lzZSBoYW5kbGVFeGl0ZWQgd2lsbCBjYWxsIHRoaXMuXG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIHRyYW5zaXRpb25dKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghdHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2hpbGRQcm9wcyA9IHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCB8fCBmbGlwUGxhY2VtZW50KHBsYWNlbWVudFByb3BzKVxuICB9O1xuXG4gIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5UcmFuc2l0aW9uUHJvcHMgPSB7XG4gICAgICBpbjogb3BlbixcbiAgICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIHtcbiAgICBvblJlbmRlcmVkOiBoYW5kbGVPcGVuLFxuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgY29udGFpbmVyOiBjb250YWluZXJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgcm9sZTogXCJ0b29sdGlwXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIC8vIFByZXZlbnRzIHNjcm9sbCBpc3N1ZSwgd2FpdGluZyBmb3IgUG9wcGVyLmpzIHRvIGFkZCB0aGlzIHN0eWxlIG9uY2UgaW5pdGlhdGVkLlxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9XG4gIH0sIG90aGVyKSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oY2hpbGRQcm9wcykgOiBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgRE9NIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBET00gZWxlbWVudCxcbiAgICogdGhhdCBtYXkgYmUgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgcGFzc2VkIGFzIHRoZSByZWZlcmVuY2Ugb2JqZWN0IG9mIHRoZSBQb3BwZXJcbiAgICogaW5zdGFuY2UuXG4gICAqL1xuICBhbmNob3JFbDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLm9wZW4pIHtcbiAgICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBub2RlIGVsZW1lbnQgc2hvdWxkIGJlIHZpc2libGUuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIFwiSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgYFwiLmNvbmNhdChyZXNvbHZlZEFuY2hvckVsLCBcImAgaW5zdGVhZC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFBvcHBlciByZW5kZXIgZnVuY3Rpb24gb3Igbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBIG5vZGUsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBQb3BwZXIuXG4gICAqL1xuICBrZWVwTW91bnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFBvcHBlci5qcyBpcyBiYXNlZCBvbiBhIFwicGx1Z2luLWxpa2VcIiBhcmNoaXRlY3R1cmUsXG4gICAqIG1vc3Qgb2YgaXRzIGZlYXR1cmVzIGFyZSBmdWxseSBlbmNhcHN1bGF0ZWQgXCJtb2RpZmllcnNcIi5cbiAgICpcbiAgICogQSBtb2RpZmllciBpcyBhIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGVhY2ggdGltZSBQb3BwZXIuanMgbmVlZHMgdG9cbiAgICogY29tcHV0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlci5cbiAgICogRm9yIHRoaXMgcmVhc29uLCBtb2RpZmllcnMgc2hvdWxkIGJlIHZlcnkgcGVyZm9ybWFudCB0byBhdm9pZCBib3R0bGVuZWNrcy5cbiAgICogVG8gbGVhcm4gaG93IHRvIGNyZWF0ZSBhIG1vZGlmaWVyLCBbcmVhZCB0aGUgbW9kaWZpZXJzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2Jsb2IvbWFzdGVyL2RvY3MvX2luY2x1ZGVzL3BvcHBlci1kb2N1bWVudGF0aW9uLm1kI21vZGlmaWVycy0tb2JqZWN0KS5cbiAgICovXG4gIG1vZGlmaWVyczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcG9wcGVyIGlzIHZpc2libGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBQb3BwZXIgcGxhY2VtZW50LlxuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydib3R0b20tZW5kJywgJ2JvdHRvbS1zdGFydCcsICdib3R0b20nLCAnbGVmdC1lbmQnLCAnbGVmdC1zdGFydCcsICdsZWZ0JywgJ3JpZ2h0LWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICd0b3AtZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIE9wdGlvbnMgcHJvdmlkZWQgdG8gdGhlIFtgcG9wcGVyLmpzYF0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMpIGluc3RhbmNlLlxuICAgKi9cbiAgcG9wcGVyT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSGVscCBzdXBwb3J0aW5nIGEgcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICovXG4gIHRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wcGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSksICdSYWRpb0J1dHRvblVuY2hlY2tlZCcpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk04LjQ2NSA4LjQ2NUM5LjM3IDcuNTYgMTAuNjIgNyAxMiA3QzE0Ljc2IDcgMTcgOS4yNCAxNyAxMkMxNyAxMy4zOCAxNi40NCAxNC42MyAxNS41MzUgMTUuNTM1QzE0LjYzIDE2LjQ0IDEzLjM4IDE3IDEyIDE3QzkuMjQgMTcgNyAxNC43NiA3IDEyQzcgMTAuNjIgNy41NiA5LjM3IDguNDY1IDguNDY1WlwiXG59KSwgJ1JhZGlvQnV0dG9uQ2hlY2tlZCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFJhZGlvQnV0dG9uVW5jaGVja2VkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvUmFkaW9CdXR0b25VbmNoZWNrZWQnO1xuaW1wb3J0IFJhZGlvQnV0dG9uQ2hlY2tlZEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL1JhZGlvQnV0dG9uQ2hlY2tlZCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgJyYkY2hlY2tlZCAkbGF5ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIGxheWVyOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW4sXG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSlcbiAgICB9LFxuICAgIGNoZWNrZWQ6IHt9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBfcmVmID0gUmVhY3QuY3JlYXRlRWxlbWVudChSYWRpb0J1dHRvblVuY2hlY2tlZEljb24sIG51bGwpO1xuXG5mdW5jdGlvbiBSYWRpb0J1dHRvbkljb24ocHJvcHMpIHtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hlY2tlZFwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjaGVja2VkICYmIGNsYXNzZXMuY2hlY2tlZCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIF9yZWYsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFkaW9CdXR0b25DaGVja2VkSWNvbiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYXllclxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJhZGlvQnV0dG9uSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVSYWRpb0J1dHRvbkljb24nXG59KShSYWRpb0J1dHRvbkljb24pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFJhZGlvR3JvdXBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IGRlZmF1bHQgUmFkaW9Hcm91cENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgU3dpdGNoQmFzZSBmcm9tICcuLi9pbnRlcm5hbC9Td2l0Y2hCYXNlJztcbmltcG9ydCBSYWRpb0J1dHRvbkljb24gZnJvbSAnLi9SYWRpb0J1dHRvbkljb24nO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCB7IGNhcGl0YWxpemUsIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFJhZGlvR3JvdXBDb250ZXh0IGZyb20gJy4uL1JhZGlvR3JvdXAvUmFkaW9Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNoZWNrZWQ9e3RydWV9YC4gKi9cbiAgICBjaGVja2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0Q2hlY2tlZEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFJhZGlvQnV0dG9uSWNvbiwge1xuICBjaGVja2VkOiB0cnVlXG59KTtcbnZhciBkZWZhdWx0SWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFkaW9CdXR0b25JY29uLCBudWxsKTtcbnZhciBSYWRpbyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUmFkaW8ocHJvcHMsIHJlZikge1xuICB2YXIgY2hlY2tlZFByb3AgPSBwcm9wcy5jaGVja2VkLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnc2Vjb25kYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIG5hbWVQcm9wID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQ2hhbmdlUHJvcCA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoZWNrZWRcIiwgXCJjbGFzc2VzXCIsIFwiY29sb3JcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIl0pO1xuXG4gIHZhciByYWRpb0dyb3VwID0gUmVhY3QudXNlQ29udGV4dChSYWRpb0dyb3VwQ29udGV4dCk7XG4gIHZhciBjaGVja2VkID0gY2hlY2tlZFByb3A7XG4gIHZhciBvbkNoYW5nZSA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbkNoYW5nZVByb3AsIHJhZGlvR3JvdXAgJiYgcmFkaW9Hcm91cC5vbkNoYW5nZSk7XG4gIHZhciBuYW1lID0gbmFtZVByb3A7XG5cbiAgaWYgKHJhZGlvR3JvdXApIHtcbiAgICBpZiAodHlwZW9mIGNoZWNrZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjaGVja2VkID0gcmFkaW9Hcm91cC52YWx1ZSA9PT0gcHJvcHMudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbmFtZSA9IHJhZGlvR3JvdXAubmFtZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTd2l0Y2hCYXNlLCBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IGNvbG9yLFxuICAgIHR5cGU6IFwicmFkaW9cIixcbiAgICBpY29uOiBkZWZhdWx0SWNvbixcbiAgICBjaGVja2VkSWNvbjogZGVmYXVsdENoZWNrZWRJY29uLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSksXG4gICAgICBjaGVja2VkOiBjbGFzc2VzLmNoZWNrZWQsXG4gICAgICBkaXNhYmxlZDogY2xhc3Nlcy5kaXNhYmxlZFxuICAgIH0sXG4gICAgbmFtZTogbmFtZSxcbiAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSYWRpby5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2RlZmF1bHQnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHN3aXRjaCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5jaGVja2VkLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkIFRoZSBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIHN3aXRjaFxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgY29tcG9uZW50IHByb3BlcnR5IGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpUmFkaW8nXG59KShSYWRpbyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICcuLi9Gb3JtR3JvdXAnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5pbXBvcnQgUmFkaW9Hcm91cENvbnRleHQgZnJvbSAnLi9SYWRpb0dyb3VwQ29udGV4dCc7XG52YXIgUmFkaW9Hcm91cCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUmFkaW9Hcm91cChwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb25zID0gcHJvcHMuYWN0aW9ucyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIHZhbHVlUHJvcCA9IHByb3BzLnZhbHVlLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25zXCIsIFwiY2hpbGRyZW5cIiwgXCJuYW1lXCIsIFwidmFsdWVcIiwgXCJvbkNoYW5nZVwiXSk7XG5cbiAgdmFyIHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYocHJvcHMudmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgcmV0dXJuIHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIHZhbHVlU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0VmFsdWUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9ucywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHJvb3RSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dDpub3QoOmRpc2FibGVkKTpjaGVja2VkJyk7XG5cbiAgICAgICAgaWYgKCFpbnB1dCkge1xuICAgICAgICAgIGlucHV0ID0gcm9vdFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Om5vdCg6ZGlzYWJsZWQpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaXNDb250cm9sbGVkID09PSAodmFsdWVQcm9wICE9IG51bGwpLCBbXCJNYXRlcmlhbC1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgXCIuY29uY2F0KGlzQ29udHJvbGxlZCA/ICdhICcgOiAnYW4gdW4nLCBcImNvbnRyb2xsZWQgUmFkaW9Hcm91cCB0byBiZSBcIikuY29uY2F0KGlzQ29udHJvbGxlZCA/ICd1bicgOiAnJywgXCJjb250cm9sbGVkLlwiKSwgJ0lucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsICdEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIFJhZGlvR3JvdXAgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCAnTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cyddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgfSwgW3ZhbHVlUHJvcCwgaXNDb250cm9sbGVkXSk7XG4gIHZhciB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IHZhbHVlUHJvcCA6IHZhbHVlU3RhdGU7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzZXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjb250ZXh0ID0ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCByb290UmVmKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUdyb3VwLCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJyYWRpb2dyb3VwXCIsXG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFJhZGlvR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmFkaW9Hcm91cC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhY3Rpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZSwgdXNlZnVsIHdoZW4gbm90IGNvbnRyb2xsaW5nIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSByYWRpbyBidXR0b24gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBgdmFsdWVgIG9mIHRoZSBzZWxlY3RlZCByYWRpbyBidXR0b25cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIHNlbGVjdGVkIHJhZGlvIGJ1dHRvbi5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmFkaW9Hcm91cDsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgeyBzZXRSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuLyoqXG4gKiDimqDvuI/imqDvuI/imqDvuI9cbiAqIElmIHlvdSB3YW50IHRoZSBET00gZWxlbWVudCBvZiBhIE1hdGVyaWFsLVVJIGNvbXBvbmVudCBjaGVjayBvdXRcbiAqIFsvZ2V0dGluZy1zdGFydGVkL2ZhcS8jaG93LWNhbi1pLWFjY2Vzcy10aGUtZG9tLWVsZW1lbnRdKEZBUTogSG93IGNhbiBJIGFjY2VzcyB0aGUgRE9NIGVsZW1lbnQ/KVxuICogZmlyc3QuXG4gKlxuICogVGhpcyBjb21wb25lbnQgdXNlcyBgZmluZERPTU5vZGVgIHdoaWNoIGlzIGRlcHJlY2F0ZWQgaW4gUmVhY3QuU3RyaWN0TW9kZS5cbiAqXG4gKiBIZWxwZXIgY29tcG9uZW50IHRvIGFsbG93IGF0dGFjaGluZyBhIHJlZiB0byBhXG4gKiB3cmFwcGVkIGVsZW1lbnQgdG8gYWNjZXNzIHRoZSB1bmRlcmx5aW5nIERPTSBlbGVtZW50LlxuICpcbiAqIEl0J3MgaGlnaGx5IGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE0MDEjaXNzdWVjb21tZW50LTM0MDU0MzgwMS5cbiAqIEZvciBleGFtcGxlOlxuICogYGBganN4XG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IFJvb3RSZWYgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvUm9vdFJlZic7XG4gKlxuICogY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICogICBjb25zdHJ1Y3RvcigpIHtcbiAqICAgICBzdXBlcigpO1xuICogICAgIHRoaXMuZG9tUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gKiAgIH1cbiAqXG4gKiAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICogICAgIGNvbnNvbGUubG9nKHRoaXMuZG9tUmVmLmN1cnJlbnQpOyAvLyBET00gbm9kZVxuICogICB9XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIChcbiAqICAgICAgIDxSb290UmVmIHJvb3RSZWY9e3RoaXMuZG9tUmVmfT5cbiAqICAgICAgICAgPFNvbWVDaGlsZENvbXBvbmVudCAvPlxuICogICAgICAgPC9Sb290UmVmPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5cbnZhciBSb290UmVmID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb290UmVmLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb290UmVmKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb290UmVmKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUm9vdFJlZikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUm9vdFJlZiwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlZiA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgc2V0UmVmKHRoaXMucHJvcHMucm9vdFJlZiwgdGhpcy5yZWYpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIHJlZiA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAocHJldlByb3BzLnJvb3RSZWYgIT09IHRoaXMucHJvcHMucm9vdFJlZiB8fCB0aGlzLnJlZiAhPT0gcmVmKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMucm9vdFJlZiAhPT0gdGhpcy5wcm9wcy5yb290UmVmKSB7XG4gICAgICAgICAgc2V0UmVmKHByZXZQcm9wcy5yb290UmVmLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgICAgICBzZXRSZWYodGhpcy5wcm9wcy5yb290UmVmLCB0aGlzLnJlZik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5yZWYgPSBudWxsO1xuICAgICAgc2V0UmVmKHRoaXMucHJvcHMucm9vdFJlZiwgbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUm9vdFJlZjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUm9vdFJlZi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgYSB3YXkgdG8gYWNjZXNzIHRoZSBET00gbm9kZSBvZiB0aGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBjYWxsYmFjayByZWYgb3IgYSBgUmVhY3QuY3JlYXRlUmVmKClgIHJlZi5cbiAgICovXG4gIHJvb3RSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUm9vdFJlZi5wcm9wVHlwZXMgPSBleGFjdFByb3AoUm9vdFJlZi5wcm9wVHlwZXMpIDogdm9pZCAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSb290UmVmOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IHsgZW1waGFzaXplIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGVtcGhhc2lzID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gMC44IDogMC45ODtcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCwgZW1waGFzaXMpO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICBwYWRkaW5nOiAnNnB4IDE2cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBmbGV4R3JvdzogMVxuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBmbGV4R3JvdzogJ2luaXRpYWwnLFxuICAgICAgbWluV2lkdGg6IDI4OFxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIG1lc3NhZ2Ugd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc4cHggMCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFjdGlvbiB3cmFwcGVyIGVsZW1lbnQgaWYgYGFjdGlvbmAgaXMgcHJvdmlkZWQuICovXG4gICAgYWN0aW9uOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiAtOFxuICAgIH1cbiAgfTtcbn07XG52YXIgU25hY2tiYXJDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTbmFja2JhckNvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBtZXNzYWdlID0gcHJvcHMubWVzc2FnZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibWVzc2FnZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFR5cG9ncmFwaHksXG4gICAgdmFyaWFudDogXCJib2R5MlwiLFxuICAgIHZhcmlhbnRNYXBwaW5nOiB7XG4gICAgICBib2R5MTogJ2RpdicsXG4gICAgICBib2R5MjogJ2RpdidcbiAgICB9LFxuICAgIHJvbGU6IFwiYWxlcnRkaWFsb2dcIixcbiAgICBzcXVhcmU6IHRydWUsXG4gICAgZWxldmF0aW9uOiA2LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubWVzc2FnZVxuICB9LCBtZXNzYWdlKSwgYWN0aW9uID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvblxuICB9LCBhY3Rpb24pIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNuYWNrYmFyQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgbWVzc2FnZSB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWVzc2FnZTogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU25hY2tiYXJDb250ZW50J1xufSkoU25hY2tiYXJDb250ZW50KTsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgQ2xpY2tBd2F5TGlzdGVuZXIgZnJvbSAnLi4vQ2xpY2tBd2F5TGlzdGVuZXInO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBTbmFja2JhckNvbnRlbnQgZnJvbSAnLi4vU25hY2tiYXJDb250ZW50JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciB0b3AxID0ge1xuICAgIHRvcDogOFxuICB9O1xuICB2YXIgYm90dG9tMSA9IHtcbiAgICBib3R0b206IDhcbiAgfTtcbiAgdmFyIHJpZ2h0ID0ge1xuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gIH07XG4gIHZhciBsZWZ0ID0ge1xuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCdcbiAgfTtcbiAgdmFyIHRvcDMgPSB7XG4gICAgdG9wOiAyNFxuICB9O1xuICB2YXIgYm90dG9tMyA9IHtcbiAgICBib3R0b206IDI0XG4gIH07XG4gIHZhciByaWdodDMgPSB7XG4gICAgcmlnaHQ6IDI0XG4gIH07XG4gIHZhciBsZWZ0MyA9IHtcbiAgICBsZWZ0OiAyNFxuICB9O1xuICB2YXIgY2VudGVyID0ge1xuICAgIGxlZnQ6ICc1MCUnLFxuICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKSdcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LnNuYWNrYmFyLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBsZWZ0OiA4LFxuICAgICAgcmlnaHQ6IDgsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdjZW50ZXInIH19YC4gKi9cbiAgICBhbmNob3JPcmlnaW5Ub3BDZW50ZXI6IF9leHRlbmRzKHt9LCB0b3AxLCBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7fSwgdG9wMywgY2VudGVyKSkpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAnY2VudGVyJyB9fWAuICovXG4gICAgYW5jaG9yT3JpZ2luQm90dG9tQ2VudGVyOiBfZXh0ZW5kcyh7fSwgYm90dG9tMSwgX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe30sIGJvdHRvbTMsIGNlbnRlcikpKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ3JpZ2h0JyB9fWAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wUmlnaHQ6IF9leHRlbmRzKHt9LCB0b3AxLCByaWdodCwgX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgbGVmdDogJ2F1dG8nXG4gICAgfSwgdG9wMywgcmlnaHQzKSkpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAncmlnaHQnIH19YC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21SaWdodDogX2V4dGVuZHMoe30sIGJvdHRvbTEsIHJpZ2h0LCBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICBsZWZ0OiAnYXV0bydcbiAgICB9LCBib3R0b20zLCByaWdodDMpKSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdsZWZ0JyB9fWAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wTGVmdDogX2V4dGVuZHMoe30sIHRvcDEsIGxlZnQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LCB0b3AzLCBsZWZ0MykpKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAnYm90dG9tJywgJ2xlZnQnIH19YC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21MZWZ0OiBfZXh0ZW5kcyh7fSwgYm90dG9tMSwgbGVmdCwgX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgIH0sIGJvdHRvbTMsIGxlZnQzKSkpXG4gIH07XG59O1xudmFyIFNuYWNrYmFyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTbmFja2Jhcihwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBfcHJvcHMkYW5jaG9yT3JpZ2luID0gcHJvcHMuYW5jaG9yT3JpZ2luLFxuICAgICAgdmVydGljYWwgPSBfcHJvcHMkYW5jaG9yT3JpZ2luLnZlcnRpY2FsLFxuICAgICAgaG9yaXpvbnRhbCA9IF9wcm9wcyRhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCxcbiAgICAgIGF1dG9IaWRlRHVyYXRpb24gPSBwcm9wcy5hdXRvSGlkZUR1cmF0aW9uLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ2xpY2tBd2F5TGlzdGVuZXJQcm9wcyA9IHByb3BzLkNsaWNrQXdheUxpc3RlbmVyUHJvcHMsXG4gICAgICBDb250ZW50UHJvcHMgPSBwcm9wcy5Db250ZW50UHJvcHMsXG4gICAgICBkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyID0gcHJvcHMuZGlzYWJsZVdpbmRvd0JsdXJMaXN0ZW5lcixcbiAgICAgIG1lc3NhZ2UgPSBwcm9wcy5tZXNzYWdlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIG9uTW91c2VFbnRlciA9IHByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgcmVzdW1lSGlkZUR1cmF0aW9uID0gcHJvcHMucmVzdW1lSGlkZUR1cmF0aW9uLFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBUcmFuc2l0aW9uUHJvcHMgPSBwcm9wcy5UcmFuc2l0aW9uUHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYXV0b0hpZGVEdXJhdGlvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcIkNsaWNrQXdheUxpc3RlbmVyUHJvcHNcIiwgXCJDb250ZW50UHJvcHNcIiwgXCJkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyXCIsIFwibWVzc2FnZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib25Nb3VzZUVudGVyXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib3BlblwiLCBcInJlc3VtZUhpZGVEdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuXG4gIHZhciB0aW1lckF1dG9IaWRlID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKCFvcGVuKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07IC8vIFRpbWVyIHRoYXQgY29udHJvbHMgZGVsYXkgYmVmb3JlIHNuYWNrYmFyIGF1dG8gaGlkZXNcblxuXG4gIHZhciBzZXRBdXRvSGlkZVRpbWVyID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGF1dG9IaWRlRHVyYXRpb25QYXJhbSkge1xuICAgIHZhciBhdXRvSGlkZUR1cmF0aW9uQmVmb3JlID0gYXV0b0hpZGVEdXJhdGlvblBhcmFtICE9IG51bGwgPyBhdXRvSGlkZUR1cmF0aW9uUGFyYW0gOiBhdXRvSGlkZUR1cmF0aW9uO1xuXG4gICAgaWYgKCFvbkNsb3NlIHx8IGF1dG9IaWRlRHVyYXRpb25CZWZvcmUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dCh0aW1lckF1dG9IaWRlLmN1cnJlbnQpO1xuICAgIHRpbWVyQXV0b0hpZGUuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGF1dG9IaWRlRHVyYXRpb25BZnRlciA9IGF1dG9IaWRlRHVyYXRpb25QYXJhbSAhPSBudWxsID8gYXV0b0hpZGVEdXJhdGlvblBhcmFtIDogYXV0b0hpZGVEdXJhdGlvbjtcblxuICAgICAgaWYgKCFvbkNsb3NlIHx8IGF1dG9IaWRlRHVyYXRpb25BZnRlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgb25DbG9zZShudWxsLCAndGltZW91dCcpO1xuICAgIH0sIGF1dG9IaWRlRHVyYXRpb25CZWZvcmUpO1xuICB9LCBbYXV0b0hpZGVEdXJhdGlvbiwgb25DbG9zZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcGVuKSBzZXRBdXRvSGlkZVRpbWVyKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lckF1dG9IaWRlLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtvcGVuLCBzZXRBdXRvSGlkZVRpbWVyXSk7IC8vIFBhdXNlIHRoZSB0aW1lciB3aGVuIHRoZSB1c2VyIGlzIGludGVyYWN0aW5nIHdpdGggdGhlIFNuYWNrYmFyXG4gIC8vIG9yIHdoZW4gdGhlIHVzZXIgaGlkZSB0aGUgd2luZG93LlxuXG4gIHZhciBoYW5kbGVQYXVzZSA9IGZ1bmN0aW9uIGhhbmRsZVBhdXNlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lckF1dG9IaWRlLmN1cnJlbnQpO1xuICB9OyAvLyBSZXN0YXJ0IHRoZSB0aW1lciB3aGVuIHRoZSB1c2VyIGlzIG5vIGxvbmdlciBpbnRlcmFjdGluZyB3aXRoIHRoZSBTbmFja2JhclxuICAvLyBvciB3aGVuIHRoZSB3aW5kb3cgaXMgc2hvd24gYmFjay5cblxuXG4gIHZhciBoYW5kbGVSZXN1bWUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGF1dG9IaWRlRHVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgaWYgKHJlc3VtZUhpZGVEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHNldEF1dG9IaWRlVGltZXIocmVzdW1lSGlkZUR1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRBdXRvSGlkZVRpbWVyKGF1dG9IaWRlRHVyYXRpb24gKiAwLjUpO1xuICAgIH1cbiAgfSwgW2F1dG9IaWRlRHVyYXRpb24sIHJlc3VtZUhpZGVEdXJhdGlvbiwgc2V0QXV0b0hpZGVUaW1lcl0pO1xuXG4gIHZhciBoYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcihldmVudCkge1xuICAgIGlmIChvbk1vdXNlRW50ZXIpIHtcbiAgICAgIG9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfVxuXG4gICAgaGFuZGxlUGF1c2UoKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cblxuICAgIGhhbmRsZVJlc3VtZSgpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDbGlja0F3YXkgPSBmdW5jdGlvbiBoYW5kbGVDbGlja0F3YXkoZXZlbnQpIHtcbiAgICBpZiAob25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCwgJ2NsaWNrYXdheScpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKCkge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcigpIHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVSZXN1bWUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVQYXVzZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVSZXN1bWUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGhhbmRsZVBhdXNlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2Rpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXIsIGhhbmRsZVJlc3VtZV0pOyAvLyBTbyB3ZSBvbmx5IHJlbmRlciBhY3RpdmUgc25hY2tiYXJzLlxuXG4gIGlmICghb3BlbiAmJiBleGl0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENsaWNrQXdheUxpc3RlbmVyLCBfZXh0ZW5kcyh7XG4gICAgb25DbGlja0F3YXk6IGhhbmRsZUNsaWNrQXdheVxuICB9LCBDbGlja0F3YXlMaXN0ZW5lclByb3BzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImFuY2hvck9yaWdpblwiLmNvbmNhdChjYXBpdGFsaXplKHZlcnRpY2FsKSkuY29uY2F0KGNhcGl0YWxpemUoaG9yaXpvbnRhbCkpXSwgY2xhc3NOYW1lKSxcbiAgICBvbk1vdXNlRW50ZXI6IGhhbmRsZU1vdXNlRW50ZXIsXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBvcGVuLFxuICAgIG9uRW50ZXI6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFbnRlciwgb25FbnRlciksXG4gICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICBvbkV4aXRlZDogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUV4aXRlZCwgb25FeGl0ZWQpLFxuICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICBkaXJlY3Rpb246IHZlcnRpY2FsID09PSAndG9wJyA/ICdkb3duJyA6ICd1cCdcbiAgfSwgVHJhbnNpdGlvblByb3BzKSwgY2hpbGRyZW4gfHwgUmVhY3QuY3JlYXRlRWxlbWVudChTbmFja2JhckNvbnRlbnQsIF9leHRlbmRzKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdGlvbjogYWN0aW9uXG4gIH0sIENvbnRlbnRQcm9wcykpKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbmFja2Jhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgYW5jaG9yIG9mIHRoZSBgU25hY2tiYXJgLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdib3R0b20nXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYXV0b21hdGljYWxseSBjYWxsaW5nIHRoZVxuICAgKiBgb25DbG9zZWAgZnVuY3Rpb24uIGBvbkNsb3NlYCBzaG91bGQgdGhlbiBzZXQgdGhlIHN0YXRlIG9mIHRoZSBgb3BlbmBcbiAgICogcHJvcCB0byBoaWRlIHRoZSBTbmFja2Jhci4gVGhpcyBiZWhhdmlvciBpcyBkaXNhYmxlZCBieSBkZWZhdWx0IHdpdGhcbiAgICogdGhlIGBudWxsYCB2YWx1ZS5cbiAgICovXG4gIGF1dG9IaWRlRHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgdGhlIGBTbmFja2JhckNvbnRlbnRgIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgQ2xpY2tBd2F5TGlzdGVuZXJgIGVsZW1lbnQuXG4gICAqL1xuICBDbGlja0F3YXlMaXN0ZW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgU25hY2tiYXJDb250ZW50YF0oL2FwaS9zbmFja2Jhci1jb250ZW50LykgZWxlbWVudC5cbiAgICovXG4gIENvbnRlbnRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGF1dG9IaWRlRHVyYXRpb25gIHRpbWVyIHdpbGwgZXhwaXJlIGV2ZW4gaWYgdGhlIHdpbmRvdyBpcyBub3QgZm9jdXNlZC5cbiAgICovXG4gIGRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGRpc3BsYXlpbmcgbXVsdGlwbGUgY29uc2VjdXRpdmUgU25hY2tiYXJzIGZyb20gYSBwYXJlbnQgcmVuZGVyaW5nIGEgc2luZ2xlXG4gICAqIDxTbmFja2Jhci8+LCBhZGQgdGhlIGtleSBwcm9wZXJ0eSB0byBlbnN1cmUgaW5kZXBlbmRlbnQgdHJlYXRtZW50IG9mIGVhY2ggbWVzc2FnZS5cbiAgICogZS5nLiA8U25hY2tiYXIga2V5PXttZXNzYWdlfSAvPiwgb3RoZXJ3aXNlLCB0aGUgbWVzc2FnZSBtYXkgdXBkYXRlLWluLXBsYWNlIGFuZFxuICAgKiBmZWF0dXJlcyBzdWNoIGFzIGF1dG9IaWRlRHVyYXRpb24gbWF5IGJlIGNhbmNlbGVkLlxuICAgKi9cbiAga2V5OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgbWVzc2FnZSB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWVzc2FnZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFR5cGljYWxseSBgb25DbG9zZWAgaXMgdXNlZCB0byBzZXQgc3RhdGUgaW4gdGhlIHBhcmVudCBjb21wb25lbnQsXG4gICAqIHdoaWNoIGlzIHVzZWQgdG8gY29udHJvbCB0aGUgYFNuYWNrYmFyYCBgb3BlbmAgcHJvcC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYCxcbiAgICogZm9yIGV4YW1wbGUgaWdub3JpbmcgYGNsaWNrYXdheWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTpgXCJ0aW1lb3V0XCJgIChgYXV0b0hpZGVEdXJhdGlvbmAgZXhwaXJlZCkgb3I6IGBcImNsaWNrYXdheVwiYFxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgdHJhbnNpdGlvbiBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBlbnRlcmVkLlxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIHRyYW5zaXRpb24gaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb24gaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgYFNuYWNrYmFyYCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGRpc21pc3NpbmcgYWZ0ZXIgdXNlciBpbnRlcmFjdGlvbi5cbiAgICogSWYgYGF1dG9IaWRlRHVyYXRpb25gIHByb3BlcnR5IGlzbid0IHNwZWNpZmllZCwgaXQgZG9lcyBub3RoaW5nLlxuICAgKiBJZiBgYXV0b0hpZGVEdXJhdGlvbmAgcHJvcGVydHkgaXMgc3BlY2lmaWVkIGJ1dCBgcmVzdW1lSGlkZUR1cmF0aW9uYCBpc24ndCxcbiAgICogd2UgZGVmYXVsdCB0byBgYXV0b0hpZGVEdXJhdGlvbiAvIDJgIG1zLlxuICAgKi9cbiAgcmVzdW1lSGlkZUR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRyYW5zaXRpb25gIGVsZW1lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5TbmFja2Jhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvck9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICBob3Jpem9udGFsOiAnY2VudGVyJ1xuICB9LFxuICBkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyOiBmYWxzZSxcbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogR3JvdyxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB7XG4gICAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIGZsaXA6IGZhbHNlLFxuICBuYW1lOiAnTXVpU25hY2tiYXInXG59KShTbmFja2Jhcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cImhvcml6b250YWxcImAuICovXG4gIGhvcml6b250YWw6IHtcbiAgICBwYWRkaW5nTGVmdDogOCxcbiAgICBwYWRkaW5nUmlnaHQ6IDgsXG4gICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMFxuICAgIH0sXG4gICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCJgLiAqL1xuICB2ZXJ0aWNhbDoge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWx0ZXJuYXRpdmVMYWJlbD17dHJ1ZX1gLiAqL1xuICBhbHRlcm5hdGl2ZUxhYmVsOiB7XG4gICAgZmxleDogMSxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBsZXRlZD17dHJ1ZX1gLiAqL1xuICBjb21wbGV0ZWQ6IHt9XG59O1xudmFyIFN0ZXAgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0ZXAocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGFjdGl2ZSA9IF9wcm9wcyRhY3RpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGFjdGl2ZSxcbiAgICAgIGFsdGVybmF0aXZlTGFiZWwgPSBwcm9wcy5hbHRlcm5hdGl2ZUxhYmVsLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBjb21wbGV0ZWQgPSBfcHJvcHMkY29tcGxldGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjb21wbGV0ZWQsXG4gICAgICBjb25uZWN0b3IgPSBwcm9wcy5jb25uZWN0b3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIGluZGV4ID0gcHJvcHMuaW5kZXgsXG4gICAgICBsYXN0ID0gcHJvcHMubGFzdCxcbiAgICAgIG9yaWVudGF0aW9uID0gcHJvcHMub3JpZW50YXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aXZlXCIsIFwiYWx0ZXJuYXRpdmVMYWJlbFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBsZXRlZFwiLCBcImNvbm5lY3RvclwiLCBcImRpc2FibGVkXCIsIFwiaW5kZXhcIiwgXCJsYXN0XCIsIFwib3JpZW50YXRpb25cIl0pO1xuXG4gIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tvcmllbnRhdGlvbl0sIGFsdGVybmF0aXZlTGFiZWwgJiYgY2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsLCBjb21wbGV0ZWQgJiYgY2xhc3Nlcy5jb21wbGV0ZWQsIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjb25uZWN0b3IgJiYgYWx0ZXJuYXRpdmVMYWJlbCAmJiBpbmRleCAhPT0gMCAmJiBSZWFjdC5jbG9uZUVsZW1lbnQoY29ubmVjdG9yLCB7XG4gICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgIGFsdGVybmF0aXZlTGFiZWw6IGFsdGVybmF0aXZlTGFiZWwsXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9KSwgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjaGlsZC50eXBlICE9PSBSZWFjdC5GcmFnbWVudCwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBTdGVwIGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgX2V4dGVuZHMoe1xuICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsOiBhbHRlcm5hdGl2ZUxhYmVsLFxuICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBsYXN0OiBsYXN0LFxuICAgICAgaWNvbjogaW5kZXggKyAxLFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gICAgfSwgY2hpbGQucHJvcHMpKTtcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0ZXAgYXMgYWN0aXZlLiBJcyBwYXNzZWQgdG8gY2hpbGQgY29tcG9uZW50cy5cbiAgICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogU2V0IGludGVybmFsbHkgYnkgU3RlcHBlciB3aGVuIGl0J3Mgc3VwcGxpZWQgd2l0aCB0aGUgYWx0ZXJuYXRpdmVMYWJlbCBwcm9wZXJ0eS5cbiAgICovXG4gIGFsdGVybmF0aXZlTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgYFN0ZXBgIHN1Yi1jb21wb25lbnRzIHN1Y2ggYXMgYFN0ZXBMYWJlbGAsIGBTdGVwQ29udGVudGAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIHN0ZXAgYXMgY29tcGxldGVkLiBJcyBwYXNzZWQgdG8gY2hpbGQgY29tcG9uZW50cy5cbiAgICovXG4gIGNvbXBsZXRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogUGFzc2VkIGRvd24gZnJvbSBTdGVwcGVyIGlmIGFsdGVybmF0aXZlTGFiZWwgaXMgYWxzbyBzZXQuXG4gICAqL1xuICBjb25uZWN0b3I6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBzdGVwIGFzIGRpc2FibGVkLCB3aWxsIGFsc28gZGlzYWJsZSB0aGUgYnV0dG9uIGlmXG4gICAqIGBTdGVwQnV0dG9uYCBpcyBhIGNoaWxkIG9mIGBTdGVwYC4gSXMgcGFzc2VkIHRvIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogVXNlZCBpbnRlcm5hbGx5IGZvciBudW1iZXJpbmcuXG4gICAqL1xuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbGFzdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN0ZXAnXG59KShTdGVwKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMGExMiAxMiAwIDEgMCAwIDI0IDEyIDEyIDAgMCAwIDAtMjR6bS0yIDE3bC01LTUgMS40LTEuNCAzLjYgMy42IDcuNi03LjZMMTkgOGwtOSA5elwiXG59KSwgJ0NoZWNrQ2lyY2xlJyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbihSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEgMjFoMjJMMTIgMiAxIDIxem0xMi0zaC0ydi0yaDJ2MnptMC00aC0ydi00aDJ2NHpcIlxufSksICdXYXJuaW5nJyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBDaGVja0NpcmNsZSBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQ2hlY2tDaXJjbGUnO1xuaW1wb3J0IFdhcm5pbmcgZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL1dhcm5pbmcnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnLi4vU3ZnSWNvbic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWQsXG4gICAgICAnJiRhY3RpdmUnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGNvbXBsZXRlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIFNWRyB0ZXh0IGVsZW1lbnQuICovXG4gICAgdGV4dDoge1xuICAgICAgZmlsbDogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24uZm9udFNpemUsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWN0aXZlPXt0cnVlfWAuICovXG4gICAgYWN0aXZlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBsZXRlZD17dHJ1ZX1gLiAqL1xuICAgIGNvbXBsZXRlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fVxuICB9O1xufTtcblxudmFyIF9yZWYgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgY3g6IFwiMTJcIixcbiAgY3k6IFwiMTJcIixcbiAgcjogXCIxMlwiXG59KTtcblxudmFyIFN0ZXBJY29uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdGVwSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkY29tcGxldGVkID0gcHJvcHMuY29tcGxldGVkLFxuICAgICAgY29tcGxldGVkID0gX3Byb3BzJGNvbXBsZXRlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY29tcGxldGVkLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBfcHJvcHMkYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgYWN0aXZlID0gX3Byb3BzJGFjdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYWN0aXZlLFxuICAgICAgX3Byb3BzJGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wcm9wcyRlcnJvciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZXJyb3IsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcztcblxuICBpZiAodHlwZW9mIGljb24gPT09ICdudW1iZXInIHx8IHR5cGVvZiBpY29uID09PSAnc3RyaW5nJykge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV2FybmluZywge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLmVycm9yKSxcbiAgICAgICAgcmVmOiByZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrQ2lyY2xlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMuY29tcGxldGVkKSxcbiAgICAgICAgcmVmOiByZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN2Z0ljb24sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGFjdGl2ZSAmJiBjbGFzc2VzLmFjdGl2ZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIF9yZWYsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50ZXh0LFxuICAgICAgeDogXCIxMlwiLFxuICAgICAgeTogXCIxNlwiLFxuICAgICAgdGV4dEFuY2hvcjogXCJtaWRkbGVcIlxuICAgIH0sIGljb24pKTtcbiAgfVxuXG4gIHJldHVybiBpY29uO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgc3RlcCBpcyBhY3RpdmUuXG4gICAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogTWFyayB0aGUgc3RlcCBhcyBjb21wbGV0ZWQuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgY29tcGxldGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWFyayB0aGUgc3RlcCBhcyBmYWlsZWQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIGRpc3BsYXllZCBieSB0aGUgc3RlcCBsYWJlbC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3RlcEljb24nXG59KShTdGVwSWNvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBTdGVwSWNvbiBmcm9tICcuLi9TdGVwSWNvbic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRhbHRlcm5hdGl2ZUxhYmVsJzoge1xuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cImhvcml6b250YWxcIi4gKi9cbiAgICBob3Jpem9udGFsOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9yaWVudGF0aW9uPVwidmVydGljYWxcIi4gKi9cbiAgICB2ZXJ0aWNhbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFR5cG9ncmFwaHlgIGNvbXBvbmVudCB3aGljaCB3cmFwcyBgY2hpbGRyZW5gLiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICcmJGFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgICBmb250V2VpZ2h0OiA1MDBcbiAgICAgIH0sXG4gICAgICAnJiRjb21wbGV0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgICAgZm9udFdlaWdodDogNTAwXG4gICAgICB9LFxuICAgICAgJyYkYWx0ZXJuYXRpdmVMYWJlbCc6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgbWFyZ2luVG9wOiAxNlxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgVHlwb2dyYXBoeWAgY29tcG9uZW50IGlmIGBhY3RpdmU9e3RydWV9YC4gKi9cbiAgICBhY3RpdmU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnQgaWYgYGNvbXBsZXRlZD17dHJ1ZX1gLiAqL1xuICAgIGNvbXBsZXRlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGFuZCBgVHlwb2dyYXBoeWAgY29tcG9uZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgYW5kIGBUeXBvZ3JhcGh5YCBjb21wb25lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpY29uYCBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBpY29uQ29udGFpbmVyOiB7XG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgLy8gRml4IElFIDExIGlzc3VlXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDgsXG4gICAgICAnJiRhbHRlcm5hdGl2ZUxhYmVsJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgJiBpY29uIGNvbnRhaW5lciBhbmQgYFR5cG9ncmFwaHlgIGlmIGBhbHRlcm5hdGl2ZUxhYmVsPXt0cnVlfWAuICovXG4gICAgYWx0ZXJuYXRpdmVMYWJlbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQgd2hpY2ggd3JhcHMgYFR5cG9ncmFwaHlgIGFuZCBgb3B0aW9uYWxgLiAqL1xuICAgIGxhYmVsQ29udGFpbmVyOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9O1xufTtcbnZhciBTdGVwTGFiZWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0ZXBMYWJlbChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgYWN0aXZlID0gX3Byb3BzJGFjdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYWN0aXZlLFxuICAgICAgX3Byb3BzJGFsdGVybmF0aXZlTGFiID0gcHJvcHMuYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICAgIGFsdGVybmF0aXZlTGFiZWwgPSBfcHJvcHMkYWx0ZXJuYXRpdmVMYWIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGFsdGVybmF0aXZlTGFiLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBjb21wbGV0ZWQgPSBfcHJvcHMkY29tcGxldGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjb21wbGV0ZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcHJvcHMkZXJyb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVycm9yLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBsYXN0ID0gcHJvcHMubGFzdCxcbiAgICAgIG9wdGlvbmFsID0gcHJvcHMub3B0aW9uYWwsXG4gICAgICBfcHJvcHMkb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzJG9yaWVudGF0aW9uID09PSB2b2lkIDAgPyAnaG9yaXpvbnRhbCcgOiBfcHJvcHMkb3JpZW50YXRpb24sXG4gICAgICBTdGVwSWNvbkNvbXBvbmVudFByb3AgPSBwcm9wcy5TdGVwSWNvbkNvbXBvbmVudCxcbiAgICAgIFN0ZXBJY29uUHJvcHMgPSBwcm9wcy5TdGVwSWNvblByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGl2ZVwiLCBcImFsdGVybmF0aXZlTGFiZWxcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wbGV0ZWRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiaWNvblwiLCBcImxhc3RcIiwgXCJvcHRpb25hbFwiLCBcIm9yaWVudGF0aW9uXCIsIFwiU3RlcEljb25Db21wb25lbnRcIiwgXCJTdGVwSWNvblByb3BzXCJdKTtcblxuICB2YXIgU3RlcEljb25Db21wb25lbnQgPSBTdGVwSWNvbkNvbXBvbmVudFByb3A7XG5cbiAgaWYgKGljb24gJiYgIVN0ZXBJY29uQ29tcG9uZW50KSB7XG4gICAgU3RlcEljb25Db21wb25lbnQgPSBTdGVwSWNvbjtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tvcmllbnRhdGlvbl0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGFsdGVybmF0aXZlTGFiZWwgJiYgY2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsLCBlcnJvciAmJiBjbGFzc2VzLmVycm9yLCBjbGFzc05hbWVQcm9wKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGljb24gfHwgU3RlcEljb25Db21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaWNvbkNvbnRhaW5lciwgYWx0ZXJuYXRpdmVMYWJlbCAmJiBjbGFzc2VzLmFsdGVybmF0aXZlTGFiZWwpXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3RlcEljb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgaWNvbjogaWNvblxuICB9LCBTdGVwSWNvblByb3BzKSkpIDogbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbENvbnRhaW5lclxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHtcbiAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCwgYWx0ZXJuYXRpdmVMYWJlbCAmJiBjbGFzc2VzLmFsdGVybmF0aXZlTGFiZWwsIGNvbXBsZXRlZCAmJiBjbGFzc2VzLmNvbXBsZXRlZCwgYWN0aXZlICYmIGNsYXNzZXMuYWN0aXZlLCBlcnJvciAmJiBjbGFzc2VzLmVycm9yKSxcbiAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgfSwgY2hpbGRyZW4pLCBvcHRpb25hbCkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwTGFiZWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXRzIHRoZSBzdGVwIGFzIGFjdGl2ZS4gSXMgcGFzc2VkIHRvIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNldCBpbnRlcm5hbGx5IGJ5IFN0ZXBwZXIgd2hlbiBpdCdzIHN1cHBsaWVkIHdpdGggdGhlIGFsdGVybmF0aXZlTGFiZWwgcHJvcGVydHkuXG4gICAqL1xuICBhbHRlcm5hdGl2ZUxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSW4gbW9zdCBjYXNlcyB3aWxsIHNpbXBseSBiZSBhIHN0cmluZyBjb250YWluaW5nIGEgdGl0bGUgZm9yIHRoZSBsYWJlbC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBNYXJrIHRoZSBzdGVwIGFzIGNvbXBsZXRlZC4gSXMgcGFzc2VkIHRvIGNoaWxkIGNvbXBvbmVudHMuXG4gICAqL1xuICBjb21wbGV0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBzdGVwIGFzIGRpc2FibGVkLCB3aWxsIGFsc28gZGlzYWJsZSB0aGUgYnV0dG9uIGlmXG4gICAqIGBTdGVwTGFiZWxCdXR0b25gIGlzIGEgY2hpbGQgb2YgYFN0ZXBMYWJlbGAuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBzdGVwIGFzIGZhaWxlZC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgaWNvbi5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBsYXN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbmFsIG5vZGUgdG8gZGlzcGxheS5cbiAgICovXG4gIG9wdGlvbmFsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdG8gcmVuZGVyIGluIHBsYWNlIG9mIHRoZSBbYFN0ZXBJY29uYF0oL2FwaS9zdGVwLWljb24vKS5cbiAgICovXG4gIFN0ZXBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BTdGVwSWNvbmBdKC9hcGkvc3RlcC1pY29uLykgZWxlbWVudC5cbiAgICovXG4gIFN0ZXBJY29uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5TdGVwTGFiZWwubXVpTmFtZSA9ICdTdGVwTGFiZWwnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN0ZXBMYWJlbCdcbn0pKFN0ZXBMYWJlbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBTdGVwTGFiZWwgZnJvbSAnLi4vU3RlcExhYmVsJztcbmltcG9ydCB7IGlzTXVpRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgcGFkZGluZzogJzI0cHggMTZweCcsXG4gICAgbWFyZ2luOiAnLTI0cHggLTE2cHgnLFxuICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94J1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9yaWVudGF0aW9uPVwiaG9yaXpvbnRhbFwiYC4gKi9cbiAgaG9yaXpvbnRhbDoge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb3JpZW50YXRpb249XCJ2ZXJ0aWNhbFwiYC4gKi9cbiAgdmVydGljYWw6IHtcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBCdXR0b25CYXNlYCB0b3VjaC1yaXBwbGUuICovXG4gIHRvdWNoUmlwcGxlOiB7XG4gICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMyknXG4gIH1cbn07XG52YXIgU3RlcEJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3RlcEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsID0gcHJvcHMuYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBsYXN0ID0gcHJvcHMubGFzdCxcbiAgICAgIG9wdGlvbmFsID0gcHJvcHMub3B0aW9uYWwsXG4gICAgICBvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGl2ZVwiLCBcImFsdGVybmF0aXZlTGFiZWxcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wbGV0ZWRcIiwgXCJkaXNhYmxlZFwiLCBcImljb25cIiwgXCJsYXN0XCIsIFwib3B0aW9uYWxcIiwgXCJvcmllbnRhdGlvblwiXSk7XG5cbiAgdmFyIGNoaWxkUHJvcHMgPSB7XG4gICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgYWx0ZXJuYXRpdmVMYWJlbDogYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgaWNvbjogaWNvbixcbiAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gIH07XG4gIHZhciBjaGlsZCA9IGlzTXVpRWxlbWVudChjaGlsZHJlbiwgWydTdGVwTGFiZWwnXSkgPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIGNoaWxkUHJvcHMpIDogUmVhY3QuY3JlYXRlRWxlbWVudChTdGVwTGFiZWwsIGNoaWxkUHJvcHMsIGNoaWxkcmVuKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBUb3VjaFJpcHBsZVByb3BzOiB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudG91Y2hSaXBwbGVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbb3JpZW50YXRpb25dLCBjbGFzc05hbWVQcm9wKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3RlcEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFBhc3NlZCBpbiB2aWEgYFN0ZXBgIC0gcGFzc2VkIHRocm91Z2ggdG8gYFN0ZXBMYWJlbGAuXG4gICAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNldCBpbnRlcm5hbGx5IGJ5IFN0ZXBwZXIgd2hlbiBpdCdzIHN1cHBsaWVkIHdpdGggdGhlIGFsdGVybmF0aXZlTGFiZWwgcHJvcGVydHkuXG4gICAqL1xuICBhbHRlcm5hdGl2ZUxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FuIGJlIGEgYFN0ZXBMYWJlbGAgb3IgYSBub2RlIHRvIHBsYWNlIGluc2lkZSBgU3RlcExhYmVsYCBhcyBjaGlsZHJlbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXRzIGNvbXBsZXRlZCBzdHlsaW5nLiBJcyBwYXNzZWQgdG8gU3RlcExhYmVsLlxuICAgKi9cbiAgY29tcGxldGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBEaXNhYmxlcyB0aGUgYnV0dG9uIGFuZCBzZXRzIGRpc2FibGVkIHN0eWxpbmcuIElzIHBhc3NlZCB0byBTdGVwTGFiZWwuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIGRpc3BsYXllZCBieSB0aGUgc3RlcCBsYWJlbC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBsYXN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbmFsIG5vZGUgdG8gZGlzcGxheS5cbiAgICovXG4gIG9wdGlvbmFsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3RlcEJ1dHRvbidcbn0pKFN0ZXBCdXR0b24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCJgLiAqL1xuICAgIGhvcml6b250YWw6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb3JpZW50YXRpb249XCJ2ZXJ0aWNhbFwiYC4gKi9cbiAgICB2ZXJ0aWNhbDoge1xuICAgICAgbWFyZ2luTGVmdDogMTIsXG4gICAgICAvLyBoYWxmIGljb25cbiAgICAgIHBhZGRpbmc6ICcwIDAgOHB4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbHRlcm5hdGl2ZUxhYmVsPXt0cnVlfWAuICovXG4gICAgYWx0ZXJuYXRpdmVMYWJlbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDggKyA0LFxuICAgICAgbGVmdDogJ2NhbGMoLTUwJSArIDIwcHgpJyxcbiAgICAgIHJpZ2h0OiAnY2FsYyg1MCUgKyAyMHB4KSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWN0aXZlPXt0cnVlfWAuICovXG4gICAgYWN0aXZlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBsZXRlZD17dHJ1ZX1gLiAqL1xuICAgIGNvbXBsZXRlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBsaW5lIGVsZW1lbnQuICovXG4gICAgbGluZToge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9yaWVudGF0aW9uPVwiaG9yaXpvbnRhbFwiYC4gKi9cbiAgICBsaW5lSG9yaXpvbnRhbDoge1xuICAgICAgYm9yZGVyVG9wU3R5bGU6ICdzb2xpZCcsXG4gICAgICBib3JkZXJUb3BXaWR0aDogMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCJgLiAqL1xuICAgIGxpbmVWZXJ0aWNhbDoge1xuICAgICAgYm9yZGVyTGVmdFN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyTGVmdFdpZHRoOiAxLFxuICAgICAgbWluSGVpZ2h0OiAyNFxuICAgIH1cbiAgfTtcbn07XG52YXIgU3RlcENvbm5lY3RvciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3RlcENvbm5lY3Rvcihwcm9wcywgcmVmKSB7XG4gIHZhciBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICBfcHJvcHMkYWx0ZXJuYXRpdmVMYWIgPSBwcm9wcy5hbHRlcm5hdGl2ZUxhYmVsLFxuICAgICAgYWx0ZXJuYXRpdmVMYWJlbCA9IF9wcm9wcyRhbHRlcm5hdGl2ZUxhYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYWx0ZXJuYXRpdmVMYWIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaW5kZXggPSBwcm9wcy5pbmRleCxcbiAgICAgIF9wcm9wcyRvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHMkb3JpZW50YXRpb24gPT09IHZvaWQgMCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRvcmllbnRhdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3RpdmVcIiwgXCJhbHRlcm5hdGl2ZUxhYmVsXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBsZXRlZFwiLCBcImRpc2FibGVkXCIsIFwiaW5kZXhcIiwgXCJvcmllbnRhdGlvblwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbb3JpZW50YXRpb25dLCBhbHRlcm5hdGl2ZUxhYmVsICYmIGNsYXNzZXMuYWx0ZXJuYXRpdmVMYWJlbCwgYWN0aXZlICYmIGNsYXNzZXMuYWN0aXZlLCBjb21wbGV0ZWQgJiYgY2xhc3Nlcy5jb21wbGV0ZWQsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGNsYXNzTmFtZVByb3ApLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxpbmUsIG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgY2xhc3Nlcy5saW5lSG9yaXpvbnRhbCwgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgY2xhc3Nlcy5saW5lVmVydGljYWwpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3RlcENvbm5lY3Rvci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNldCBpbnRlcm5hbGx5IGJ5IFN0ZXAgd2hlbiBpdCdzIHN1cHBsaWVkIHdpdGggdGhlIGFsdGVybmF0aXZlTGFiZWwgcHJvcGVydHkuXG4gICAqL1xuICBhbHRlcm5hdGl2ZUxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY29tcGxldGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3RlcENvbm5lY3Rvcidcbn0pKFN0ZXBDb25uZWN0b3IpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgQ29sbGFwc2UgZnJvbSAnLi4vQ29sbGFwc2UnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpblRvcDogOCxcbiAgICAgIG1hcmdpbkxlZnQ6IDEyLFxuICAgICAgLy8gaGFsZiBpY29uXG4gICAgICBwYWRkaW5nTGVmdDogOCArIDEyLFxuICAgICAgLy8gbWFyZ2luICsgaGFsZiBpY29uXG4gICAgICBwYWRkaW5nUmlnaHQ6IDgsXG4gICAgICBib3JkZXJMZWZ0OiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbGFzdD17dHJ1ZX1gIChjb250cm9sbGVkIGJ5IGBTdGVwYCkuICovXG4gICAgbGFzdDoge1xuICAgICAgYm9yZGVyTGVmdDogJ25vbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudC4gKi9cbiAgICB0cmFuc2l0aW9uOiB7fVxuICB9O1xufTtcbnZhciBTdGVwQ29udGVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3RlcENvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgYWx0ZXJuYXRpdmVMYWJlbCA9IHByb3BzLmFsdGVybmF0aXZlTGFiZWwsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wbGV0ZWQgPSBwcm9wcy5jb21wbGV0ZWQsXG4gICAgICBsYXN0ID0gcHJvcHMubGFzdCxcbiAgICAgIG9wdGlvbmFsID0gcHJvcHMub3B0aW9uYWwsXG4gICAgICBvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IENvbGxhcHNlIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGl2ZVwiLCBcImFsdGVybmF0aXZlTGFiZWxcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wbGV0ZWRcIiwgXCJsYXN0XCIsIFwib3B0aW9uYWxcIiwgXCJvcmllbnRhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcsICdNYXRlcmlhbC1VSTogPFN0ZXBDb250ZW50IC8+IGlzIG9ubHkgZGVzaWduZWQgZm9yIHVzZSB3aXRoIHRoZSB2ZXJ0aWNhbCBzdGVwcGVyLicpIDogdm9pZCAwO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uUHJvcDtcblxuICBpZiAodHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9PT0gJ2F1dG8nICYmICFUcmFuc2l0aW9uQ29tcG9uZW50Lm11aVN1cHBvcnRBdXRvKSB7XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGxhc3QgJiYgY2xhc3Nlcy5sYXN0LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IGFjdGl2ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudHJhbnNpdGlvbixcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxuICB9LCBUcmFuc2l0aW9uUHJvcHMpLCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIEV4cGFuZHMgdGhlIGNvbnRlbnQuXG4gICAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNldCBpbnRlcm5hbGx5IGJ5IFN0ZXAgd2hlbiBpdCdzIHN1cHBsaWVkIHdpdGggdGhlIGFsdGVybmF0aXZlTGFiZWwgcHJvcGVydHkuXG4gICAqL1xuICBhbHRlcm5hdGl2ZUxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU3RlcCBjb250ZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb21wbGV0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBsYXN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTZXQgaW50ZXJuYWxseSBieSBTdGVwIHdoZW4gaXQncyBzdXBwbGllZCB3aXRoIHRoZSBvcHRpb25hbCBwcm9wZXJ0eS5cbiAgICovXG4gIG9wdGlvbmFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEFkanVzdCB0aGUgZHVyYXRpb24gb2YgdGhlIGNvbnRlbnQgZXhwYW5kIHRyYW5zaXRpb24uXG4gICAqIFBhc3NlZCBhcyBhIHByb3BlcnR5IHRvIHRoZSB0cmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdGVwQ29udGVudCdcbn0pKFN0ZXBDb250ZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgU3RlcENvbm5lY3RvciBmcm9tICcuLi9TdGVwQ29ubmVjdG9yJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHBhZGRpbmc6IDI0XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCJgLiAqL1xuICBob3Jpem9udGFsOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCJgLiAqL1xuICB2ZXJ0aWNhbDoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWx0ZXJuYXRpdmVMYWJlbD17dHJ1ZX1gLiAqL1xuICBhbHRlcm5hdGl2ZUxhYmVsOiB7XG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gIH1cbn07XG52YXIgZGVmYXVsdENvbm5lY3RvciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3RlcENvbm5lY3RvciwgbnVsbCk7XG52YXIgU3RlcHBlciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3RlcHBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWN0aXZlU3RlcCA9IHByb3BzLmFjdGl2ZVN0ZXAsXG4gICAgICBhY3RpdmVTdGVwID0gX3Byb3BzJGFjdGl2ZVN0ZXAgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkYWN0aXZlU3RlcCxcbiAgICAgIF9wcm9wcyRhbHRlcm5hdGl2ZUxhYiA9IHByb3BzLmFsdGVybmF0aXZlTGFiZWwsXG4gICAgICBhbHRlcm5hdGl2ZUxhYmVsID0gX3Byb3BzJGFsdGVybmF0aXZlTGFiID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhbHRlcm5hdGl2ZUxhYixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29ubmVjdG9yID0gcHJvcHMuY29ubmVjdG9yLFxuICAgICAgY29ubmVjdG9yUHJvcCA9IF9wcm9wcyRjb25uZWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRDb25uZWN0b3IgOiBfcHJvcHMkY29ubmVjdG9yLFxuICAgICAgX3Byb3BzJG5vbkxpbmVhciA9IHByb3BzLm5vbkxpbmVhcixcbiAgICAgIG5vbkxpbmVhciA9IF9wcm9wcyRub25MaW5lYXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG5vbkxpbmVhcixcbiAgICAgIF9wcm9wcyRvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHMkb3JpZW50YXRpb24gPT09IHZvaWQgMCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRvcmllbnRhdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3RpdmVTdGVwXCIsIFwiYWx0ZXJuYXRpdmVMYWJlbFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbm5lY3RvclwiLCBcIm5vbkxpbmVhclwiLCBcIm9yaWVudGF0aW9uXCJdKTtcblxuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbb3JpZW50YXRpb25dLCBhbHRlcm5hdGl2ZUxhYmVsICYmIGNsYXNzZXMuYWx0ZXJuYXRpdmVMYWJlbCwgY2xhc3NOYW1lUHJvcCk7XG4gIHZhciBjb25uZWN0b3IgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChjb25uZWN0b3JQcm9wKSA/IFJlYWN0LmNsb25lRWxlbWVudChjb25uZWN0b3JQcm9wLCB7XG4gICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gIH0pIDogbnVsbDtcbiAgdmFyIGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcbiAgdmFyIHN0ZXBzID0gY2hpbGRyZW5BcnJheS5tYXAoZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgdmFyIGNvbnRyb2xQcm9wcyA9IHtcbiAgICAgIGFsdGVybmF0aXZlTGFiZWw6IGFsdGVybmF0aXZlTGFiZWwsXG4gICAgICBjb25uZWN0b3I6IGNvbm5lY3RvclByb3AsXG4gICAgICBsYXN0OiBpbmRleCArIDEgPT09IGNoaWxkcmVuQXJyYXkubGVuZ3RoLFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uXG4gICAgfTtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAoYWN0aXZlU3RlcCA9PT0gaW5kZXgpIHtcbiAgICAgIHN0YXRlLmFjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghbm9uTGluZWFyICYmIGFjdGl2ZVN0ZXAgPiBpbmRleCkge1xuICAgICAgc3RhdGUuY29tcGxldGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFub25MaW5lYXIgJiYgYWN0aXZlU3RlcCA8IGluZGV4KSB7XG4gICAgICBzdGF0ZS5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFshYWx0ZXJuYXRpdmVMYWJlbCAmJiBjb25uZWN0b3IgJiYgaW5kZXggIT09IDAgJiYgUmVhY3QuY2xvbmVFbGVtZW50KGNvbm5lY3RvciwgX2V4dGVuZHMoe1xuICAgICAga2V5OiBpbmRleFxuICAgIH0sIHN0YXRlKSksIFJlYWN0LmNsb25lRWxlbWVudChzdGVwLCBfZXh0ZW5kcyh7fSwgY29udHJvbFByb3BzLCBzdGF0ZSwgc3RlcC5wcm9wcykpXTtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGVsZXZhdGlvbjogMCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN0ZXBzKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3RlcHBlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIGFjdGl2ZSBzdGVwICh6ZXJvIGJhc2VkIGluZGV4KS5cbiAgICovXG4gIGFjdGl2ZVN0ZXA6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIElmIHNldCB0byAndHJ1ZScgYW5kIG9yaWVudGF0aW9uIGlzIGhvcml6b250YWwsXG4gICAqIHRoZW4gdGhlIHN0ZXAgbGFiZWwgd2lsbCBiZSBwb3NpdGlvbmVkIHVuZGVyIHRoZSBpY29uLlxuICAgKi9cbiAgYWx0ZXJuYXRpdmVMYWJlbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFR3byBvciBtb3JlIGA8U3RlcCAvPmAgY29tcG9uZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIGNvbXBvbmVudCB0byBiZSBwbGFjZWQgYmV0d2VlbiBlYWNoIHN0ZXAuXG4gICAqL1xuICBjb25uZWN0b3I6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBJZiBzZXQgdGhlIGBTdGVwcGVyYCB3aWxsIG5vdCBhc3Npc3QgaW4gY29udHJvbGxpbmcgc3RlcHMgZm9yIGxpbmVhciBmbG93LlxuICAgKi9cbiAgbm9uTGluZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHN0ZXBwZXIgb3JpZW50YXRpb24gKGxheW91dCBmbG93IGRpcmVjdGlvbikuXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdGVwcGVyJ1xufSkoU3RlcHBlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgeyBpc0hvcml6b250YWwgfSBmcm9tICcuLi9EcmF3ZXIvRHJhd2VyJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5kcmF3ZXIgLSAxXG4gICAgfSxcbiAgICBhbmNob3JMZWZ0OiB7XG4gICAgICByaWdodDogJ2F1dG8nXG4gICAgfSxcbiAgICBhbmNob3JSaWdodDoge1xuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuICAgIGFuY2hvclRvcDoge1xuICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG4gICAgYW5jaG9yQm90dG9tOiB7XG4gICAgICB0b3A6ICdhdXRvJyxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgU3dpcGVBcmVhID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2lwZUFyZWEocHJvcHMsIHJlZikge1xuICB2YXIgYW5jaG9yID0gcHJvcHMuYW5jaG9yLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJ3aWR0aFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJhbmNob3JcIi5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3IpKV0sIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNIb3Jpem9udGFsKGFuY2hvcikgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHdpZHRoKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2lwZUFyZWEucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2lkZSBvbiB3aGljaCB0byBhdHRhY2ggdGhlIGRpc2NvdmVyeSBhcmVhLlxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbGVmdCBtb3N0IChvciByaWdodCBtb3N0KSBhcmVhIGluIHBpeGVscyB3aGVyZSB0aGVcbiAgICogZHJhd2VyIGNhbiBiZSBzd2lwZWQgb3BlbiBmcm9tLlxuICAgKi9cbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlU3dpcGVBcmVhJ1xufSkoU3dpcGVBcmVhKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXRoaXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgRHJhd2VyLCB7IGdldEFuY2hvciwgaXNIb3Jpem9udGFsIH0gZnJvbSAnLi4vRHJhd2VyL0RyYXdlcic7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgd2l0aFRoZW1lIGZyb20gJy4uL3N0eWxlcy93aXRoVGhlbWUnO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IE5vU3NyIGZyb20gJy4uL05vU3NyJztcbmltcG9ydCB3aXRoRm9yd2FyZGVkUmVmIGZyb20gJy4uL3V0aWxzL3dpdGhGb3J3YXJkZWRSZWYnO1xuaW1wb3J0IFN3aXBlQXJlYSBmcm9tICcuL1N3aXBlQXJlYSc7IC8vIFRoaXMgdmFsdWUgaXMgY2xvc2VkIHRvIHdoYXQgYnJvd3NlcnMgYXJlIHVzaW5nIGludGVybmFsbHkgdG9cbi8vIHRyaWdnZXIgYSBuYXRpdmUgc2Nyb2xsLlxuXG52YXIgVU5DRVJUQUlOVFlfVEhSRVNIT0xEID0gMzsgLy8gcHhcbi8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIG5vZGUgYXQgdGhlIHRpbWUgY2xhaW1pbmcgb3duZXJzaGlwIGZvciBoYW5kbGluZyB0aGUgc3dpcGUuXG4vLyBPdGhlcndpc2UsIHRoZSBVWCB3b3VsZCBiZSBjb25mdXNpbmcuXG4vLyBUaGF0J3Mgd2h5IHdlIHVzZSBhIHNpbmdsZXRvbiBoZXJlLlxuXG52YXIgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG59XG5cbnZhciBTd2lwZWFibGVEcmF3ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXBlYWJsZURyYXdlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpcGVhYmxlRHJhd2VyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXBlYWJsZURyYXdlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTd2lwZWFibGVEcmF3ZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLmlzU3dpcGluZyA9IG51bGw7XG4gICAgX3RoaXMuc3dpcGVBcmVhUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgX3RoaXMucGFwZXJSZWYgPSBudWxsO1xuXG4gICAgX3RoaXMuaGFuZGxlQm9keVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIFdlIGFyZSBub3Qgc3VwcG9zZWQgdG8gaGFuZGxlIHRoaXMgdG91Y2ggbW92ZS5cbiAgICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSAhPT0gbnVsbCAmJiBub2RlVGhhdENsYWltZWRUaGVTd2lwZSAhPT0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlRGlzY292ZXJ5ID0gX3RoaXMkcHJvcHMuZGlzYWJsZURpc2NvdmVyeSxcbiAgICAgICAgICBkaXNhYmxlU3dpcGVUb09wZW4gPSBfdGhpcyRwcm9wcy5kaXNhYmxlU3dpcGVUb09wZW4sXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHByb3BzLm9wZW4sXG4gICAgICAgICAgc3dpcGVBcmVhV2lkdGggPSBfdGhpcyRwcm9wcy5zd2lwZUFyZWFXaWR0aDtcbiAgICAgIHZhciBhbmNob3IgPSBnZXRBbmNob3IoX3RoaXMucHJvcHMudGhlbWUsIF90aGlzLnByb3BzLmFuY2hvcik7XG4gICAgICB2YXIgY3VycmVudFggPSBhbmNob3IgPT09ICdyaWdodCcgPyBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC0gZXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB2YXIgY3VycmVudFkgPSBhbmNob3IgPT09ICdib3R0b20nID8gd2luZG93LmlubmVySGVpZ2h0IC0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuXG4gICAgICBpZiAoIW9wZW4pIHtcbiAgICAgICAgaWYgKGRpc2FibGVTd2lwZVRvT3BlbiB8fCBldmVudC50YXJnZXQgIT09IF90aGlzLnN3aXBlQXJlYVJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbChfdGhpcy5wcm9wcy5hbmNob3IpKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRYID4gc3dpcGVBcmVhV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFkgPiBzd2lwZUFyZWFXaWR0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpO1xuICAgICAgX3RoaXMuc3RhcnRYID0gY3VycmVudFg7XG4gICAgICBfdGhpcy5zdGFydFkgPSBjdXJyZW50WTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBtYXliZVN3aXBpbmc6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIW9wZW4gJiYgX3RoaXMucGFwZXJSZWYpIHtcbiAgICAgICAgLy8gVGhlIHJlZiBtYXkgYmUgbnVsbCB3aGVuIGEgcGFyZW50IGNvbXBvbmVudCB1cGRhdGVzIHdoaWxlIHN3aXBpbmcuXG4gICAgICAgIF90aGlzLnNldFBvc2l0aW9uKF90aGlzLmdldE1heFRyYW5zbGF0ZSgpICsgKGRpc2FibGVEaXNjb3ZlcnkgPyAyMCA6IC1zd2lwZUFyZWFXaWR0aCksIHtcbiAgICAgICAgICBjaGFuZ2VUcmFuc2l0aW9uOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMudmVsb2NpdHkgPSAwO1xuICAgICAgX3RoaXMubGFzdFRpbWUgPSBudWxsO1xuICAgICAgX3RoaXMubGFzdFRyYW5zbGF0ZSA9IG51bGw7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF90aGlzLmhhbmRsZUJvZHlUb3VjaE1vdmUsIHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIF90aGlzLmhhbmRsZUJvZHlUb3VjaEVuZCk7IC8vIGh0dHBzOi8vcGx1cy5nb29nbGUuY29tLytQYXVsSXJpc2gvcG9zdHMvS1R3Zm4xWTIyMzhcblxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIF90aGlzLmhhbmRsZUJvZHlUb3VjaEVuZCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJvZHlUb3VjaE1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIHRoZSByZWYgbWF5IGJlIG51bGwgd2hlbiBhIHBhcmVudCBjb21wb25lbnQgdXBkYXRlcyB3aGlsZSBzd2lwaW5nXG4gICAgICBpZiAoIV90aGlzLnBhcGVyUmVmKSByZXR1cm47XG4gICAgICB2YXIgYW5jaG9yID0gZ2V0QW5jaG9yKF90aGlzLnByb3BzLnRoZW1lLCBfdGhpcy5wcm9wcy5hbmNob3IpO1xuICAgICAgdmFyIGhvcml6b250YWxTd2lwZSA9IGlzSG9yaXpvbnRhbChfdGhpcy5wcm9wcy5hbmNob3IpO1xuICAgICAgdmFyIGN1cnJlbnRYID0gYW5jaG9yID09PSAncmlnaHQnID8gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBldmVudC50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIGN1cnJlbnRZID0gYW5jaG9yID09PSAnYm90dG9tJyA/IHdpbmRvdy5pbm5lckhlaWdodCAtIGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTsgLy8gV2UgZG9uJ3Qga25vdyB5ZXQuXG5cbiAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgPT0gbnVsbCkge1xuICAgICAgICB2YXIgZHggPSBNYXRoLmFicyhjdXJyZW50WCAtIF90aGlzLnN0YXJ0WCk7XG4gICAgICAgIHZhciBkeSA9IE1hdGguYWJzKGN1cnJlbnRZIC0gX3RoaXMuc3RhcnRZKTsgLy8gV2UgYXJlIGxpa2VseSB0byBiZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQgb24gaU9TLlxuXG4gICAgICAgIGlmIChkeCA+IGR5KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1N3aXBpbmcgPSBob3Jpem9udGFsU3dpcGUgPyBkeCA+IGR5ICYmIGR4ID4gVU5DRVJUQUlOVFlfVEhSRVNIT0xEIDogZHkgPiBkeCAmJiBkeSA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRDtcblxuICAgICAgICBpZiAoaXNTd2lwaW5nID09PSB0cnVlIHx8IChob3Jpem9udGFsU3dpcGUgPyBkeSA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCA6IGR4ID4gVU5DRVJUQUlOVFlfVEhSRVNIT0xEKSkge1xuICAgICAgICAgIF90aGlzLmlzU3dpcGluZyA9IGlzU3dpcGluZztcblxuICAgICAgICAgIGlmICghaXNTd2lwaW5nKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVCb2R5VG91Y2hFbmQoZXZlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSAvLyBTaGlmdCB0aGUgc3RhcnRpbmcgcG9pbnQuXG5cblxuICAgICAgICAgIF90aGlzLnN0YXJ0WCA9IGN1cnJlbnRYO1xuICAgICAgICAgIF90aGlzLnN0YXJ0WSA9IGN1cnJlbnRZOyAvLyBDb21wZW5zYXRlIGZvciB0aGUgcGFydCBvZiB0aGUgZHJhd2VyIGRpc3BsYXllZCBvbiB0b3VjaCBzdGFydC5cblxuICAgICAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZURpc2NvdmVyeSAmJiAhX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICAgICAgaWYgKGhvcml6b250YWxTd2lwZSkge1xuICAgICAgICAgICAgICBfdGhpcy5zdGFydFggLT0gX3RoaXMucHJvcHMuc3dpcGVBcmVhV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5zdGFydFkgLT0gX3RoaXMucHJvcHMuc3dpcGVBcmVhV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMuaXNTd2lwaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zbGF0ZSA9IF90aGlzLmdldFRyYW5zbGF0ZShob3Jpem9udGFsU3dpcGUgPyBjdXJyZW50WCA6IGN1cnJlbnRZKTtcblxuICAgICAgaWYgKF90aGlzLmxhc3RUcmFuc2xhdGUgPT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMubGFzdFRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgICAgICAgX3RoaXMubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSArIDE7XG4gICAgICB9XG5cbiAgICAgIHZhciB2ZWxvY2l0eSA9ICh0cmFuc2xhdGUgLSBfdGhpcy5sYXN0VHJhbnNsYXRlKSAvIChwZXJmb3JtYW5jZS5ub3coKSAtIF90aGlzLmxhc3RUaW1lKSAqIDFlMzsgLy8gTG93IFBhc3MgZmlsdGVyLlxuXG4gICAgICBfdGhpcy52ZWxvY2l0eSA9IF90aGlzLnZlbG9jaXR5ICogMC40ICsgdmVsb2NpdHkgKiAwLjY7XG4gICAgICBfdGhpcy5sYXN0VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuICAgICAgX3RoaXMubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTsgLy8gV2UgYXJlIHN3aXBpbmcsIGxldCdzIHByZXZlbnQgdGhlIHNjcm9sbCBldmVudCBvbiBpT1MuXG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLnNldFBvc2l0aW9uKHRyYW5zbGF0ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJvZHlUb3VjaEVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsO1xuXG4gICAgICBfdGhpcy5yZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMoKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBtYXliZVN3aXBpbmc6IGZhbHNlXG4gICAgICB9KTsgLy8gVGhlIHN3aXBlIHdhc24ndCBzdGFydGVkLlxuXG5cbiAgICAgIGlmICghX3RoaXMuaXNTd2lwaW5nKSB7XG4gICAgICAgIF90aGlzLmlzU3dpcGluZyA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaXNTd2lwaW5nID0gbnVsbDtcbiAgICAgIHZhciBhbmNob3IgPSBnZXRBbmNob3IoX3RoaXMucHJvcHMudGhlbWUsIF90aGlzLnByb3BzLmFuY2hvcik7XG4gICAgICB2YXIgY3VycmVudDtcblxuICAgICAgaWYgKGlzSG9yaXpvbnRhbChfdGhpcy5wcm9wcy5hbmNob3IpKSB7XG4gICAgICAgIGN1cnJlbnQgPSBhbmNob3IgPT09ICdyaWdodCcgPyBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgPSBhbmNob3IgPT09ICdib3R0b20nID8gd2luZG93LmlubmVySGVpZ2h0IC0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2xhdGVSYXRpbyA9IF90aGlzLmdldFRyYW5zbGF0ZShjdXJyZW50KSAvIF90aGlzLmdldE1heFRyYW5zbGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICBpZiAoX3RoaXMudmVsb2NpdHkgPiBfdGhpcy5wcm9wcy5taW5GbGluZ1ZlbG9jaXR5IHx8IHRyYW5zbGF0ZVJhdGlvID4gX3RoaXMucHJvcHMuaHlzdGVyZXNpcykge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZXNldCB0aGUgcG9zaXRpb24sIHRoZSBzd2lwZSB3YXMgYWJvcnRlZC5cbiAgICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbigwLCB7XG4gICAgICAgICAgICBtb2RlOiAnZXhpdCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnZlbG9jaXR5IDwgLV90aGlzLnByb3BzLm1pbkZsaW5nVmVsb2NpdHkgfHwgMSAtIHRyYW5zbGF0ZVJhdGlvID4gX3RoaXMucHJvcHMuaHlzdGVyZXNpcykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk9wZW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiwgdGhlIHN3aXBlIHdhcyBhYm9ydGVkLlxuICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbihfdGhpcy5nZXRNYXhUcmFuc2xhdGUoKSwge1xuICAgICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJhY2tkcm9wUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICAgIF90aGlzLmJhY2tkcm9wUmVmID0gUmVhY3RET00uZmluZERPTU5vZGUocmVmKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUGFwZXJSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgX3RoaXMucGFwZXJSZWYgPSBSZWFjdERPTS5maW5kRE9NTm9kZShyZWYpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3dpcGVhYmxlRHJhd2VyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhcmlhbnQgPT09ICd0ZW1wb3JhcnknKSB7XG4gICAgICAgIHRoaXMubGlzdGVuVG91Y2hTdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIHZhcmlhbnQgPSB0aGlzLnByb3BzLnZhcmlhbnQ7XG4gICAgICB2YXIgcHJldlZhcmlhbnQgPSBwcmV2UHJvcHMudmFyaWFudDtcblxuICAgICAgaWYgKHZhcmlhbnQgIT09IHByZXZWYXJpYW50KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID09PSAndGVtcG9yYXJ5Jykge1xuICAgICAgICAgIHRoaXMubGlzdGVuVG91Y2hTdGFydCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZWYXJpYW50ID09PSAndGVtcG9yYXJ5Jykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlVG91Y2hTdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5yZW1vdmVUb3VjaFN0YXJ0KCk7XG4gICAgICB0aGlzLnJlbW92ZUJvZHlUb3VjaExpc3RlbmVycygpOyAvLyBXZSBuZWVkIHRvIHJlbGVhc2UgdGhlIGxvY2suXG5cbiAgICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9PT0gdGhpcykge1xuICAgICAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE1heFRyYW5zbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXhUcmFuc2xhdGUoKSB7XG4gICAgICByZXR1cm4gaXNIb3Jpem9udGFsKHRoaXMucHJvcHMuYW5jaG9yKSA/IHRoaXMucGFwZXJSZWYuY2xpZW50V2lkdGggOiB0aGlzLnBhcGVyUmVmLmNsaWVudEhlaWdodDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VHJhbnNsYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZShjdXJyZW50KSB7XG4gICAgICB2YXIgc3RhcnQgPSBpc0hvcml6b250YWwodGhpcy5wcm9wcy5hbmNob3IpID8gdGhpcy5zdGFydFggOiB0aGlzLnN0YXJ0WTtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnByb3BzLm9wZW4gPyBzdGFydCAtIGN1cnJlbnQgOiB0aGlzLmdldE1heFRyYW5zbGF0ZSgpICsgc3RhcnQgLSBjdXJyZW50LCAwKSwgdGhpcy5nZXRNYXhUcmFuc2xhdGUoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBvc2l0aW9uKHRyYW5zbGF0ZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIF9vcHRpb25zJG1vZGUgPSBvcHRpb25zLm1vZGUsXG4gICAgICAgICAgbW9kZSA9IF9vcHRpb25zJG1vZGUgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRtb2RlLFxuICAgICAgICAgIF9vcHRpb25zJGNoYW5nZVRyYW5zaSA9IG9wdGlvbnMuY2hhbmdlVHJhbnNpdGlvbixcbiAgICAgICAgICBjaGFuZ2VUcmFuc2l0aW9uID0gX29wdGlvbnMkY2hhbmdlVHJhbnNpID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkY2hhbmdlVHJhbnNpO1xuICAgICAgdmFyIGFuY2hvciA9IGdldEFuY2hvcih0aGlzLnByb3BzLnRoZW1lLCB0aGlzLnByb3BzLmFuY2hvcik7XG4gICAgICB2YXIgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IFsncmlnaHQnLCAnYm90dG9tJ10uaW5kZXhPZihhbmNob3IpICE9PSAtMSA/IDEgOiAtMTtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBpc0hvcml6b250YWwodGhpcy5wcm9wcy5hbmNob3IpID8gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGUsIFwicHgsIDApXCIpIDogXCJ0cmFuc2xhdGUoMCwgXCIuY29uY2F0KHJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGUsIFwicHgpXCIpO1xuICAgICAgdmFyIGRyYXdlclN0eWxlID0gdGhpcy5wYXBlclJlZi5zdHlsZTtcbiAgICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIGRyYXdlclN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJyc7XG5cbiAgICAgIGlmIChtb2RlKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSB0aGlzLnByb3BzLnRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYWxsJywgZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgICAgICB0aW1lb3V0OiB0aGlzLnByb3BzLnRyYW5zaXRpb25EdXJhdGlvblxuICAgICAgICB9LCB7XG4gICAgICAgICAgbW9kZTogbW9kZVxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgICAgICBkcmF3ZXJTdHlsZS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24gJiYgIXRoaXMucHJvcHMuaGlkZUJhY2tkcm9wKSB7XG4gICAgICAgIHZhciBiYWNrZHJvcFN0eWxlID0gdGhpcy5iYWNrZHJvcFJlZi5zdHlsZTtcbiAgICAgICAgYmFja2Ryb3BTdHlsZS5vcGFjaXR5ID0gMSAtIHRyYW5zbGF0ZSAvIHRoaXMuZ2V0TWF4VHJhbnNsYXRlKCk7XG5cbiAgICAgICAgaWYgKGNoYW5nZVRyYW5zaXRpb24pIHtcbiAgICAgICAgICBiYWNrZHJvcFN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgICAgICAgIGJhY2tkcm9wU3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGlzdGVuVG91Y2hTdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5Ub3VjaFN0YXJ0KCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVCb2R5VG91Y2hTdGFydCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZVRvdWNoU3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlVG91Y2hTdGFydCgpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlQm9keVRvdWNoU3RhcnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQm9keVRvdWNoTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZUJvZHlUb3VjaE1vdmUsIHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlQm9keVRvdWNoRW5kKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0aGlzLmhhbmRsZUJvZHlUb3VjaEVuZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbmNob3IgPSBfdGhpcyRwcm9wczIuYW5jaG9yLFxuICAgICAgICAgIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24gPSBfdGhpcyRwcm9wczIuZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbixcbiAgICAgICAgICBkaXNhYmxlRGlzY292ZXJ5ID0gX3RoaXMkcHJvcHMyLmRpc2FibGVEaXNjb3ZlcnksXG4gICAgICAgICAgZGlzYWJsZVN3aXBlVG9PcGVuID0gX3RoaXMkcHJvcHMyLmRpc2FibGVTd2lwZVRvT3BlbixcbiAgICAgICAgICBoeXN0ZXJlc2lzID0gX3RoaXMkcHJvcHMyLmh5c3RlcmVzaXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczIuaW5uZXJSZWYsXG4gICAgICAgICAgbWluRmxpbmdWZWxvY2l0eSA9IF90aGlzJHByb3BzMi5taW5GbGluZ1ZlbG9jaXR5LFxuICAgICAgICAgIF90aGlzJHByb3BzMiRNb2RhbFBybyA9IF90aGlzJHByb3BzMi5Nb2RhbFByb3BzO1xuICAgICAgX3RoaXMkcHJvcHMyJE1vZGFsUHJvID0gX3RoaXMkcHJvcHMyJE1vZGFsUHJvID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRNb2RhbFBybztcblxuICAgICAgdmFyIEJhY2tkcm9wUHJvcHMgPSBfdGhpcyRwcm9wczIkTW9kYWxQcm8uQmFja2Ryb3BQcm9wcyxcbiAgICAgICAgICBNb2RhbFByb3BzUHJvcCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIkTW9kYWxQcm8sIFtcIkJhY2tkcm9wUHJvcHNcIl0pLFxuICAgICAgICAgIG9uT3BlbiA9IF90aGlzJHByb3BzMi5vbk9wZW4sXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHByb3BzMi5vcGVuLFxuICAgICAgICAgIF90aGlzJHByb3BzMiRQYXBlclBybyA9IF90aGlzJHByb3BzMi5QYXBlclByb3BzLFxuICAgICAgICAgIFBhcGVyUHJvcHMgPSBfdGhpcyRwcm9wczIkUGFwZXJQcm8gPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJFBhcGVyUHJvLFxuICAgICAgICAgIFN3aXBlQXJlYVByb3BzID0gX3RoaXMkcHJvcHMyLlN3aXBlQXJlYVByb3BzLFxuICAgICAgICAgIHN3aXBlQXJlYVdpZHRoID0gX3RoaXMkcHJvcHMyLnN3aXBlQXJlYVdpZHRoLFxuICAgICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wczIudmFyaWFudCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczIsIFtcImFuY2hvclwiLCBcImRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb25cIiwgXCJkaXNhYmxlRGlzY292ZXJ5XCIsIFwiZGlzYWJsZVN3aXBlVG9PcGVuXCIsIFwiaHlzdGVyZXNpc1wiLCBcImlubmVyUmVmXCIsIFwibWluRmxpbmdWZWxvY2l0eVwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlN3aXBlQXJlYVByb3BzXCIsIFwic3dpcGVBcmVhV2lkdGhcIiwgXCJ2YXJpYW50XCJdKTtcblxuICAgICAgdmFyIG1heWJlU3dpcGluZyA9IHRoaXMuc3RhdGUubWF5YmVTd2lwaW5nO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJhd2VyLCBfZXh0ZW5kcyh7XG4gICAgICAgIG9wZW46IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknICYmIG1heWJlU3dpcGluZyA/IHRydWUgOiBvcGVuLFxuICAgICAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgICAgICBNb2RhbFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgQmFja2Ryb3BQcm9wczogX2V4dGVuZHMoe30sIEJhY2tkcm9wUHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5oYW5kbGVCYWNrZHJvcFJlZlxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIE1vZGFsUHJvcHNQcm9wKSxcbiAgICAgICAgUGFwZXJQcm9wczogX2V4dGVuZHMoe30sIFBhcGVyUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgcG9pbnRlckV2ZW50czogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgIW9wZW4gPyAnbm9uZScgOiAnJ1xuICAgICAgICAgIH0sIFBhcGVyUHJvcHMuc3R5bGUpLFxuICAgICAgICAgIHJlZjogdGhpcy5oYW5kbGVQYXBlclJlZlxuICAgICAgICB9KSxcbiAgICAgICAgYW5jaG9yOiBhbmNob3IsXG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIG90aGVyKSksICFkaXNhYmxlU3dpcGVUb09wZW4gJiYgdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChOb1NzciwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChTd2lwZUFyZWEsIF9leHRlbmRzKHtcbiAgICAgICAgYW5jaG9yOiBhbmNob3IsXG4gICAgICAgIGlubmVyUmVmOiB0aGlzLnN3aXBlQXJlYVJlZixcbiAgICAgICAgd2lkdGg6IHN3aXBlQXJlYVdpZHRoXG4gICAgICB9LCBTd2lwZUFyZWFQcm9wcykpKSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2U3RhdGUubWF5YmVTd2lwaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heWJlU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXh0UHJvcHMub3BlbiAmJiBwcmV2U3RhdGUub3Blbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heWJlU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN3aXBlYWJsZURyYXdlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3dpcGVhYmxlRHJhd2VyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10pLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBiYWNrZHJvcCB0cmFuc2l0aW9uLlxuICAgKiBUaGlzIGNhbiBpbXByb3ZlIHRoZSBGUFMgb24gbG93LWVuZCBkZXZpY2VzLlxuICAgKi9cbiAgZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdG91Y2hpbmcgdGhlIHNjcmVlbiBuZWFyIHRoZSBlZGdlIG9mIHRoZSBkcmF3ZXIgd2lsbCBub3Qgc2xpZGUgaW4gdGhlIGRyYXdlciBhIGJpdFxuICAgKiB0byBwcm9tb3RlIGFjY2lkZW50YWwgZGlzY292ZXJ5IG9mIHRoZSBzd2lwZSBnZXN0dXJlLlxuICAgKi9cbiAgZGlzYWJsZURpc2NvdmVyeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc3dpcGUgdG8gb3BlbiBpcyBkaXNhYmxlZC4gVGhpcyBpcyB1c2VmdWwgaW4gYnJvd3NlcnMgd2hlcmUgc3dpcGluZyB0cmlnZ2Vyc1xuICAgKiBuYXZpZ2F0aW9uIGFjdGlvbnMuIFN3aXBlIHRvIG9wZW4gaXMgZGlzYWJsZWQgb24gaU9TIGJyb3dzZXJzIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBkaXNhYmxlU3dpcGVUb09wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBoaWRlQmFja2Ryb3A6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBZmZlY3RzIGhvdyBmYXIgdGhlIGRyYXdlciBtdXN0IGJlIG9wZW5lZC9jbG9zZWQgdG8gY2hhbmdlIGhpcyBzdGF0ZS5cbiAgICogU3BlY2lmaWVkIGFzIHBlcmNlbnQgKDAtMSkgb2YgdGhlIHdpZHRoIG9mIHRoZSBkcmF3ZXJcbiAgICovXG4gIGh5c3RlcmVzaXM6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogZnJvbSBgd2l0aEZvcndhcmRlZFJlZmBcbiAgICovXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzLCBmcm9tIHdoaWNoIChhdmVyYWdlKSB2ZWxvY2l0eSBvbiwgdGhlIHN3aXBlIGlzXG4gICAqIGRlZmluZWQgYXMgY29tcGxldGUgYWx0aG91Z2ggaHlzdGVyZXNpcyBpc24ndCByZWFjaGVkLlxuICAgKiBHb29kIHRocmVzaG9sZCBpcyBiZXR3ZWVuIDI1MCAtIDEwMDAgcHgvc1xuICAgKi9cbiAgbWluRmxpbmdWZWxvY2l0eTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgTW9kYWxQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBCYWNrZHJvcFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZlxuICAgIH0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkcmF3ZXIgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZlxuICB9KSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBzd2lwZSBhcmVhIGVsZW1lbnQuXG4gICAqL1xuICBTd2lwZUFyZWFQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsZWZ0IG1vc3QgKG9yIHJpZ2h0IG1vc3QpIGFyZWEgaW4gcGl4ZWxzIHdoZXJlIHRoZVxuICAgKiBkcmF3ZXIgY2FuIGJlIHN3aXBlZCBvcGVuIGZyb20uXG4gICAqL1xuICBzd2lwZUFyZWFXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydwZXJtYW5lbnQnLCAncGVyc2lzdGVudCcsICd0ZW1wb3JhcnknXSlcbn0gOiB2b2lkIDA7XG5Td2lwZWFibGVEcmF3ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhbmNob3I6ICdsZWZ0JyxcbiAgZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbjogZmFsc2UsXG4gIGRpc2FibGVEaXNjb3Zlcnk6IGZhbHNlLFxuICBkaXNhYmxlU3dpcGVUb09wZW46IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxuICBoeXN0ZXJlc2lzOiAwLjU1LFxuICBtaW5GbGluZ1ZlbG9jaXR5OiA0MDAsXG4gIHN3aXBlQXJlYVdpZHRoOiAyMCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB7XG4gICAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfSxcbiAgdmFyaWFudDogJ3RlbXBvcmFyeScgLy8gTW9iaWxlIGZpcnN0LlxuXG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKHdpdGhGb3J3YXJkZWRSZWYoU3dpcGVhYmxlRHJhd2VyKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgSWNvbkJ1dHRvblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgU3dpdGNoQmFzZSBmcm9tICcuLi9pbnRlcm5hbC9Td2l0Y2hCYXNlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgd2lkdGg6IDM0ICsgMTIgKiAyLFxuICAgICAgaGVpZ2h0OiAxNCArIDEyICogMixcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICAvLyBSZXNldCB0aGUgc3RhY2tpbmcgY29udGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVkZ2U9XCJzdGFydFwiYC4gKi9cbiAgICBlZGdlU3RhcnQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IC04XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVkZ2U9XCJlbmRcImAuICovXG4gICAgZWRnZUVuZDoge1xuICAgICAgbWFyZ2luUmlnaHQ6IC04XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgU3dpdGNoQmFzZWAgY29tcG9uZW50J3MgYHJvb3RgIGNsYXNzLiAqL1xuICAgIHN3aXRjaEJhc2U6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIC8vIFJlbmRlciBhYm92ZSB0aGUgZm9jdXMgcmlwcGxlLlxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVs1MF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCg1MCUpJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXVxuICAgICAgfSxcbiAgICAgICcmJGNoZWNrZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAwLjEyIDogMC4xXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBTd2l0Y2hCYXNlIGNvbXBvbmVudCdzIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXVxuICAgICAgfSxcbiAgICAgICcmJGNoZWNrZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCArICR0cmFjayc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmNvbW1vbi5ibGFjayA6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBTd2l0Y2hCYXNlIGNvbXBvbmVudCdzIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgICcmJGNoZWNrZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs4MDBdXG4gICAgICB9LFxuICAgICAgJyYkY2hlY2tlZCArICR0cmFjayc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5jb21tb24uYmxhY2sgOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFN3aXRjaEJhc2VgIGNvbXBvbmVudCdzIGBjaGVja2VkYCBjbGFzcy4gKi9cbiAgICBjaGVja2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBTd2l0Y2hCYXNlIGNvbXBvbmVudCdzIGRpc2FibGVkIGNsYXNzLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBTd2l0Y2hCYXNlIGNvbXBvbmVudCdzIGlucHV0IGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIGxlZnQ6ICctMTAwJScsXG4gICAgICB3aWR0aDogJzMwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyB1c2VkIHRvIGNyZWF0ZSB0aGUgdGh1bWIgcGFzc2VkIHRvIHRoZSBpbnRlcm5hbCBgU3dpdGNoQmFzZWAgY29tcG9uZW50IGBpY29uYCBwcm9wLiAqL1xuICAgIHRodW1iOiB7XG4gICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMV0sXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgd2lkdGg6IDIwLFxuICAgICAgaGVpZ2h0OiAyMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRyYWNrIGVsZW1lbnQuICovXG4gICAgdHJhY2s6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogMTQgLyAyLFxuICAgICAgekluZGV4OiAtMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAnYmFja2dyb3VuZC1jb2xvciddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrIDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAwLjM4IDogMC4zXG4gICAgfVxuICB9O1xufTtcbnZhciBTd2l0Y2ggPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN3aXRjaChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdzZWNvbmRhcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGVkZ2UgPSBwcm9wcy5lZGdlLFxuICAgICAgZWRnZSA9IF9wcm9wcyRlZGdlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlZGdlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImVkZ2VcIl0pO1xuXG4gIHZhciBpY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50aHVtYlxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBlZGdlID09PSAnc3RhcnQnICYmIGNsYXNzZXMuZWRnZVN0YXJ0LCBlZGdlID09PSAnZW5kJyAmJiBjbGFzc2VzLmVkZ2VFbmQsIGNsYXNzTmFtZSlcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTd2l0Y2hCYXNlLCBfZXh0ZW5kcyh7XG4gICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgIGljb246IGljb24sXG4gICAgY2hlY2tlZEljb246IGljb24sXG4gICAgY2xhc3Nlczoge1xuICAgICAgcm9vdDogY2xzeChjbGFzc2VzLnN3aXRjaEJhc2UsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldKSxcbiAgICAgIGlucHV0OiBjbGFzc2VzLmlucHV0LFxuICAgICAgY2hlY2tlZDogY2xhc3Nlcy5jaGVja2VkLFxuICAgICAgZGlzYWJsZWQ6IGNsYXNzZXMuZGlzYWJsZWRcbiAgICB9LFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudHJhY2tcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2RlZmF1bHQnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRDaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3dpdGNoIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bmNoZWNrZWQuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBjaGVja2VkIFRoZSBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIHN3aXRjaFxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgY29tcG9uZW50IHByb3BlcnR5IGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3dpdGNoJ1xufSkoU3dpdGNoKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHVuc3VwcG9ydGVkUHJvcCBmcm9tICcuLi91dGlscy91bnN1cHBvcnRlZFByb3AnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIF9leHRlbmRzMjtcblxuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCAoX2V4dGVuZHMyID0ge1xuICAgICAgbWF4V2lkdGg6IDI2NCxcbiAgICAgIG1pbldpZHRoOiA3MixcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtaW5IZWlnaHQ6IDQ4LFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTJweCdcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwge1xuICAgICAgcGFkZGluZzogJzZweCAyNHB4J1xuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCBcIm92ZXJmbG93XCIsICdoaWRkZW4nKSwgX2RlZmluZVByb3BlcnR5KF9leHRlbmRzMiwgXCJ3aGl0ZVNwYWNlXCIsICdub3JtYWwnKSwgX2RlZmluZVByb3BlcnR5KF9leHRlbmRzMiwgXCJ0ZXh0QWxpZ25cIiwgJ2NlbnRlcicpLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMyksXG4gICAgICBtaW5XaWR0aDogMTYwXG4gICAgfSksIF9leHRlbmRzMikpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBib3RoIGBpY29uYCBhbmQgYGxhYmVsYCBhcmUgcHJvdmlkZWQuICovXG4gICAgbGFiZWxJY29uOiB7XG4gICAgICBtaW5IZWlnaHQ6IDcyLFxuICAgICAgcGFkZGluZ1RvcDogOSxcbiAgICAgICcmICR3cmFwcGVyID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiA2XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHRleHRDb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgdGV4dENvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIG9wYWNpdHk6IDAuNyxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB0ZXh0Q29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIHRleHRDb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHRleHRDb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0Q29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YCAoY29udHJvbGxlZCBieSB0aGUgVGFicyBjb21wb25lbnQpLiAqL1xuICAgIHNlbGVjdGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAgKGNvbnRyb2xsZWQgYnkgdGhlIFRhYnMgY29tcG9uZW50KS4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YCAoY29udHJvbGxlZCBieSB0aGUgVGFicyBjb21wb25lbnQpLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgZmxleFNocmluazogMSxcbiAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgZmxleEJhc2lzOiAwLFxuICAgICAgbWF4V2lkdGg6ICdub25lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwcGVkPXt0cnVlfWAuICovXG4gICAgd3JhcHBlZDoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMiksXG4gICAgICBsaW5lSGVpZ2h0OiAxLjVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpY29uYCBhbmQgYGxhYmVsYCdzIHdyYXBwZXIgZWxlbWVudC4gKi9cbiAgICB3cmFwcGVyOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9XG4gIH07XG59O1xudmFyIFRhYiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFiKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBpbmRpY2F0b3IgPSBwcm9wcy5pbmRpY2F0b3IsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIF9wcm9wcyR0ZXh0Q29sb3IgPSBwcm9wcy50ZXh0Q29sb3IsXG4gICAgICB0ZXh0Q29sb3IgPSBfcHJvcHMkdGV4dENvbG9yID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkdGV4dENvbG9yLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIF9wcm9wcyR3cmFwcGVkID0gcHJvcHMud3JhcHBlZCxcbiAgICAgIHdyYXBwZWQgPSBfcHJvcHMkd3JhcHBlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkd3JhcHBlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJmdWxsV2lkdGhcIiwgXCJpY29uXCIsIFwiaW5kaWNhdG9yXCIsIFwibGFiZWxcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJzZWxlY3RlZFwiLCBcInRleHRDb2xvclwiLCBcInZhbHVlXCIsIFwid3JhcHBlZFwiXSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbkJhc2UsIF9leHRlbmRzKHtcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1widGV4dENvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUodGV4dENvbG9yKSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBzZWxlY3RlZCAmJiBjbGFzc2VzLnNlbGVjdGVkLCBsYWJlbCAmJiBpY29uICYmIGNsYXNzZXMubGFiZWxJY29uLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsIHdyYXBwZWQgJiYgY2xhc3Nlcy53cmFwcGVkLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IFwidGFiXCIsXG4gICAgXCJhcmlhLXNlbGVjdGVkXCI6IHNlbGVjdGVkLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBvbkNsaWNrOiBoYW5kbGVDaGFuZ2VcbiAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXJcbiAgfSwgaWNvbiwgbGFiZWwpLCBpbmRpY2F0b3IpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBpc24ndCBzdXBwb3J0ZWQuXG4gICAqIFVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcGVydHkgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWIgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgY29uc2lkZXJhdGlvbiwgd2UgbGV0IHRoZSBzZWxlY3RlZCB0YWJcbiAgICogcmVuZGVyIHRoZSBpbmRpY2F0b3IuXG4gICAqL1xuICBpbmRpY2F0b3I6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0ZXh0Q29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3NlY29uZGFyeScsICdwcmltYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSBmYWxsYmFjayB0byB0aGUgY2hpbGQgcG9zaXRpb24gaW5kZXguXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGFiIGxhYmVscyBhcHBlYXIgaW4gYSBzaW5nbGUgcm93LlxuICAgKiBUaGV5IGNhbiB1c2UgYSBzZWNvbmQgbGluZSBpZiBuZWVkZWQuXG4gICAqL1xuICB3cmFwcGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWInXG59KShUYWIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFRhYmxlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi9UYWJsZUNvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm9yZGVyQ29sbGFwc2U6ICdjb2xsYXBzZScsXG4gICAgYm9yZGVyU3BhY2luZzogMFxuICB9XG59O1xudmFyIFRhYmxlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZShwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndGFibGUnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRwYWRkaW5nID0gcHJvcHMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfcHJvcHMkcGFkZGluZyA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJHBhZGRpbmcsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInBhZGRpbmdcIiwgXCJzaXplXCJdKTtcblxuICB2YXIgdGFibGUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIHNpemU6IHNpemVcbiAgICB9O1xuICB9LCBbcGFkZGluZywgc2l6ZV0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGFibGVcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgdGFibGUsIG5vcm1hbGx5IGBUYWJsZUhlYWRgIGFuZCBgVGFibGVCb2R5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgVGFibGVDZWxscyB0byBpbmhlcml0IHBhZGRpbmcgb2YgdGhlIFRhYmxlLlxuICAgKi9cbiAgcGFkZGluZzogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdjaGVja2JveCcsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgVGFibGVDZWxscyB0byBpbmhlcml0IHNpemUgb2YgdGhlIFRhYmxlLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlJ1xufSkoVGFibGUpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFRhYmxlbHZsMkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgZGVmYXVsdCBUYWJsZWx2bDJDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICd0YWJsZS1yb3ctZ3JvdXAnXG4gIH1cbn07XG52YXIgdGFibGVsdmwyID0ge1xuICB2YXJpYW50OiAnYm9keSdcbn07XG52YXIgVGFibGVCb2R5ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUJvZHkocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3Rib2R5JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVsdmwyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0YWJsZWx2bDJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZUJvZHkucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUJvZHknXG59KShUYWJsZUJvZHkpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgZGFya2VuLCBmYWRlLCBsaWdodGVuIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdpbmhlcml0JyxcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGEgcmVuZGVyaW5nIGJ1ZyB3aXRoIHNwYW5uZWQgY29sdW1ucyBpbiBDaHJvbWUgNjIuMC5cbiAgICAgIC8vIFJlbW92ZXMgdGhlIGFscGhhIChzZXRzIGl0IHRvIDEpLCBhbmQgbGlnaHRlbnMgb3IgZGFya2VucyB0aGUgdGhlbWUgY29sb3IuXG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkXFxuICAgIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyBsaWdodGVuKGZhZGUodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC44OCkgOiBkYXJrZW4oZmFkZSh0aGVtZS5wYWxldHRlLmRpdmlkZXIsIDEpLCAwLjY4KSksXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIHBhZGRpbmc6ICcxNHB4IDQwcHggMTRweCAxNnB4JyxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMTZcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoZWFkXCJgIG9yIGBjb250ZXh0LnRhYmxlLmhlYWRgLiAqL1xuICAgIGhlYWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMiksXG4gICAgICBsaW5lSGVpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjEpLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5XCJgIG9yIGBjb250ZXh0LnRhYmxlLmJvZHlgLiAqL1xuICAgIGJvZHk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZvb3RlclwiYCBvciBgY29udGV4dC50YWJsZS5mb290ZXJgLiAqL1xuICAgIGZvb3Rlcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBsaW5lSGVpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjEpLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFkZGluZz1cImRlbnNlXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzZweCAyNHB4IDZweCAxNnB4JyxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMTZcbiAgICAgIH0sXG4gICAgICAnJiRwYWRkaW5nQ2hlY2tib3gnOiB7XG4gICAgICAgIHdpZHRoOiAyNCxcbiAgICAgICAgLy8gcHJldmVudCB0aGUgY2hlY2tib3ggY29sdW1uIGZyb20gZ3Jvd2luZ1xuICAgICAgICBwYWRkaW5nOiAnMHB4IDEycHggMCAxNnB4JyxcbiAgICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMTIsXG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiAxNlxuICAgICAgICB9LFxuICAgICAgICAnJiA+IConOiB7XG4gICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhZGRpbmc9XCJjaGVja2JveFwiYC4gKi9cbiAgICBwYWRkaW5nQ2hlY2tib3g6IHtcbiAgICAgIHdpZHRoOiA0OCxcbiAgICAgIC8vIHByZXZlbnQgdGhlIGNoZWNrYm94IGNvbHVtbiBmcm9tIGdyb3dpbmdcbiAgICAgIHBhZGRpbmc6ICcwIDAgMCA0cHgnLFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICAgIHBhZGRpbmdSaWdodDogNFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYWRkaW5nPVwibm9uZVwiYC4gKi9cbiAgICBwYWRkaW5nTm9uZToge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJsZWZ0XCJgLiAqL1xuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJjZW50ZXJcImAuICovXG4gICAgYWxpZ25DZW50ZXI6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJyaWdodFwiYC4gKi9cbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfVxuICB9O1xufTtcbnZhciBUYWJsZUNlbGwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQ2VsbChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ24gPSBwcm9wcy5hbGlnbixcbiAgICAgIGFsaWduID0gX3Byb3BzJGFsaWduID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkYWxpZ24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIHBhZGRpbmdQcm9wID0gcHJvcHMucGFkZGluZyxcbiAgICAgIHNjb3BlUHJvcCA9IHByb3BzLnNjb3BlLFxuICAgICAgc2l6ZVByb3AgPSBwcm9wcy5zaXplLFxuICAgICAgc29ydERpcmVjdGlvbiA9IHByb3BzLnNvcnREaXJlY3Rpb24sXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCIsIFwic2NvcGVcIiwgXCJzaXplXCIsIFwic29ydERpcmVjdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB0YWJsZSA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcbiAgdmFyIHRhYmxlbHZsMiA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVsdmwyQ29udGV4dCk7XG4gIHZhciBDb21wb25lbnQ7XG5cbiAgaWYgKGNvbXBvbmVudCkge1xuICAgIENvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfSBlbHNlIHtcbiAgICBDb21wb25lbnQgPSB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdoZWFkJyA/ICd0aCcgOiAndGQnO1xuICB9XG5cbiAgdmFyIHNjb3BlID0gc2NvcGVQcm9wO1xuXG4gIGlmICghc2NvcGUgJiYgdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcpIHtcbiAgICBzY29wZSA9ICdjb2wnO1xuICB9XG5cbiAgdmFyIHBhZGRpbmcgPSBwYWRkaW5nUHJvcCB8fCAodGFibGUgJiYgdGFibGUucGFkZGluZyA/IHRhYmxlLnBhZGRpbmcgOiAnZGVmYXVsdCcpO1xuICB2YXIgc2l6ZSA9IHNpemVQcm9wIHx8ICh0YWJsZSAmJiB0YWJsZS5zaXplID8gdGFibGUuc2l6ZSA6ICdtZWRpdW0nKTtcbiAgdmFyIGFyaWFTb3J0ID0gbnVsbDtcblxuICBpZiAoc29ydERpcmVjdGlvbikge1xuICAgIGFyaWFTb3J0ID0gc29ydERpcmVjdGlvbiA9PT0gJ2FzYycgPyAnYXNjZW5kaW5nJyA6ICdkZXNjZW5kaW5nJztcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsICh2YXJpYW50ID8gdmFyaWFudCA9PT0gJ2hlYWQnIDogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcpICYmIGNsYXNzZXMuaGVhZCwgKHZhcmlhbnQgPyB2YXJpYW50ID09PSAnYm9keScgOiB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdib2R5JykgJiYgY2xhc3Nlcy5ib2R5LCAodmFyaWFudCA/IHZhcmlhbnQgPT09ICdmb290ZXInIDogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnZm9vdGVyJykgJiYgY2xhc3Nlcy5mb290ZXIsIGFsaWduICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImFsaWduXCIuY29uY2F0KGNhcGl0YWxpemUoYWxpZ24pKV0sIHBhZGRpbmcgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wicGFkZGluZ1wiLmNvbmNhdChjYXBpdGFsaXplKHBhZGRpbmcpKV0sIHNpemUgIT09ICdtZWRpdW0nICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwgY2xhc3NOYW1lKSxcbiAgICBcImFyaWEtc29ydFwiOiBhcmlhU29ydCxcbiAgICBzY29wZTogc2NvcGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVDZWxsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgdGFibGUgY2VsbCBjb250ZW50LlxuICAgKlxuICAgKiBNb25ldGFyeSBvciBnZW5lcmFsbHkgbnVtYmVyIGZpZWxkcyAqKnNob3VsZCBiZSByaWdodCBhbGlnbmVkKiogYXMgdGhhdCBhbGxvd3NcbiAgICogeW91IHRvIGFkZCB0aGVtIHVwIHF1aWNrbHkgaW4geW91ciBoZWFkIHdpdGhvdXQgaGF2aW5nIHRvIHdvcnJ5IGFib3V0IGRlY2ltYWxzLlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIHRhYmxlIGNlbGwgY29udGVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBhZGRpbmcgYXBwbGllZCB0byB0aGUgY2VsbC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIFRhYmxlIHBhcmVudCBjb21wb25lbnQgc2V0IHRoZSB2YWx1ZS5cbiAgICovXG4gIHBhZGRpbmc6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnY2hlY2tib3gnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogU2V0IHNjb3BlIGF0dHJpYnV0ZS5cbiAgICovXG4gIHNjb3BlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBzaXplIG9mIHRoZSBjZWxsLlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgVGFibGUgcGFyZW50IGNvbXBvbmVudCBzZXQgdGhlIHZhbHVlIChgbm9ybWFsYCkuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nXSksXG5cbiAgLyoqXG4gICAqIFNldCBhcmlhLXNvcnQgZGlyZWN0aW9uLlxuICAgKi9cbiAgc29ydERpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYXNjJywgJ2Rlc2MnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBjZWxsIHR5cGUuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBUYWJsZUhlYWQsIFRhYmxlQm9keSBvciBUYWJsZUZvb3RlciBwYXJlbnQgY29tcG9uZW50IHNldCB0aGUgdmFsdWUuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydoZWFkJywgJ2JvZHknLCAnZm9vdGVyJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQ2VsbCdcbn0pKFRhYmxlQ2VsbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ3RhYmxlLWZvb3Rlci1ncm91cCdcbiAgfVxufTtcbnZhciB0YWJsZWx2bDIgPSB7XG4gIHZhcmlhbnQ6ICdmb290ZXInXG59O1xudmFyIFRhYmxlRm9vdGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUZvb3Rlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndGZvb3QnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZWx2bDJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlbHZsMlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlRm9vdGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVGb290ZXInXG59KShUYWJsZUZvb3Rlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ3RhYmxlLWhlYWRlci1ncm91cCdcbiAgfVxufTtcbnZhciB0YWJsZWx2bDIgPSB7XG4gIHZhcmlhbnQ6ICdoZWFkJ1xufTtcbnZhciBUYWJsZUhlYWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlSGVhZChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndGhlYWQnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZWx2bDJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlbHZsMlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlSGVhZC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBgVGFibGVSb3dgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlSGVhZCdcbn0pKFRhYmxlSGVhZCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbihSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE1LjQxIDE2LjA5bC00LjU4LTQuNTkgNC41OC00LjU5TDE0IDUuNWwtNiA2IDYgNnpcIlxufSksICdLZXlib2FyZEFycm93TGVmdCcpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk04LjU5IDE2LjM0bDQuNTgtNC41OS00LjU4LTQuNTlMMTAgNS43NWw2IDYtNiA2elwiXG59KSwgJ0tleWJvYXJkQXJyb3dSaWdodCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBLZXlib2FyZEFycm93TGVmdCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnQnO1xuaW1wb3J0IEtleWJvYXJkQXJyb3dSaWdodCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0JztcbmltcG9ydCB3aXRoVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3dpdGhUaGVtZSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuLi9JY29uQnV0dG9uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgX3JlZiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5Ym9hcmRBcnJvd1JpZ2h0LCBudWxsKTtcblxudmFyIF9yZWYyID0gUmVhY3QuY3JlYXRlRWxlbWVudChLZXlib2FyZEFycm93TGVmdCwgbnVsbCk7XG5cbnZhciBfcmVmMyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5Ym9hcmRBcnJvd0xlZnQsIG51bGwpO1xuXG52YXIgX3JlZjQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEtleWJvYXJkQXJyb3dSaWdodCwgbnVsbCk7XG5cbnZhciBUYWJsZVBhZ2luYXRpb25BY3Rpb25zID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZVBhZ2luYXRpb25BY3Rpb25zKHByb3BzLCByZWYpIHtcbiAgdmFyIGJhY2tJY29uQnV0dG9uUHJvcHMgPSBwcm9wcy5iYWNrSWNvbkJ1dHRvblByb3BzLFxuICAgICAgY291bnQgPSBwcm9wcy5jb3VudCxcbiAgICAgIG5leHRJY29uQnV0dG9uUHJvcHMgPSBwcm9wcy5uZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgICAgb25DaGFuZ2VQYWdlID0gcHJvcHMub25DaGFuZ2VQYWdlLFxuICAgICAgcGFnZSA9IHByb3BzLnBhZ2UsXG4gICAgICByb3dzUGVyUGFnZSA9IHByb3BzLnJvd3NQZXJQYWdlLFxuICAgICAgdGhlbWUgPSBwcm9wcy50aGVtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJiYWNrSWNvbkJ1dHRvblByb3BzXCIsIFwiY291bnRcIiwgXCJuZXh0SWNvbkJ1dHRvblByb3BzXCIsIFwib25DaGFuZ2VQYWdlXCIsIFwicGFnZVwiLCBcInJvd3NQZXJQYWdlXCIsIFwidGhlbWVcIl0pO1xuXG4gIHZhciBoYW5kbGVCYWNrQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVCYWNrQnV0dG9uQ2xpY2soZXZlbnQpIHtcbiAgICBvbkNoYW5nZVBhZ2UoZXZlbnQsIHBhZ2UgLSAxKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlTmV4dEJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gaGFuZGxlTmV4dEJ1dHRvbkNsaWNrKGV2ZW50KSB7XG4gICAgb25DaGFuZ2VQYWdlKGV2ZW50LCBwYWdlICsgMSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQnV0dG9uLCBfZXh0ZW5kcyh7XG4gICAgb25DbGljazogaGFuZGxlQmFja0J1dHRvbkNsaWNrLFxuICAgIGRpc2FibGVkOiBwYWdlID09PSAwLFxuICAgIGNvbG9yOiBcImluaGVyaXRcIlxuICB9LCBiYWNrSWNvbkJ1dHRvblByb3BzKSwgdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IF9yZWYgOiBfcmVmMiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIG9uQ2xpY2s6IGhhbmRsZU5leHRCdXR0b25DbGljayxcbiAgICBkaXNhYmxlZDogcGFnZSA+PSBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxLFxuICAgIGNvbG9yOiBcImluaGVyaXRcIlxuICB9LCBuZXh0SWNvbkJ1dHRvblByb3BzKSwgdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IF9yZWYzIDogX3JlZjQpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVQYWdpbmF0aW9uQWN0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGJhY2sgYXJyb3cgW2BJY29uQnV0dG9uYF0oL2FwaS9pY29uLWJ1dHRvbi8pIGVsZW1lbnQuXG4gICAqL1xuICBiYWNrSWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBjb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIG5leHQgYXJyb3cgW2BJY29uQnV0dG9uYF0oL2FwaS9pY29uLWJ1dHRvbi8pIGVsZW1lbnQuXG4gICAqL1xuICBuZXh0SWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwYWdlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZSBUaGUgcGFnZSBzZWxlY3RlZFxuICAgKi9cbiAgb25DaGFuZ2VQYWdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgemVyby1iYXNlZCBpbmRleCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgKi9cbiAgcGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHJvd3MgcGVyIHBhZ2UuXG4gICAqL1xuICByb3dzUGVyUGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICcuLi9NZW51SXRlbSc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL1NlbGVjdCc7XG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4uL1RhYmxlQ2VsbCc7XG5pbXBvcnQgVG9vbGJhciBmcm9tICcuLi9Ub29sYmFyJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMgZnJvbSAnLi9UYWJsZVBhZ2luYXRpb25BY3Rpb25zJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgLy8gSW5jcmVhc2UgdGhlIHNwZWNpZmljaXR5IHRvIG92ZXJyaWRlIFRhYmxlQ2VsbC5cbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIFRvb2xiYXIgY29tcG9uZW50LiAqL1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgcGFkZGluZ1JpZ2h0OiAyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFjZXIgZWxlbWVudC4gKi9cbiAgICBzcGFjZXI6IHtcbiAgICAgIGZsZXg6ICcxIDEgMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNhcHRpb24gVHlwb2dyYXBoeSBjb21wb25lbnRzIGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB7XG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBTZWxlY3QgY29tcG9uZW50IGByb290YCBjbGFzcy4gKi9cbiAgICBzZWxlY3RSb290OiB7XG4gICAgICBtYXJnaW5SaWdodDogMzIsXG4gICAgICBtYXJnaW5MZWZ0OiA4XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBTZWxlY3QgY29tcG9uZW50IGBzZWxlY3RgIGNsYXNzLiAqL1xuICAgIHNlbGVjdDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDgsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDI0LFxuICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgdGV4dEFsaWduTGFzdDogJ3JpZ2h0JyAvLyBBbGlnbiA8c2VsZWN0PiBvbiBDaHJvbWUuXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIFNlbGVjdCBjb21wb25lbnQgYGljb25gIGNsYXNzLiAqL1xuICAgIHNlbGVjdEljb246IHtcbiAgICAgIHRvcDogMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYElucHV0QmFzZWAgY29tcG9uZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIE1lbnVJdGVtIGNvbXBvbmVudC4gKi9cbiAgICBtZW51SXRlbToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFRhYmxlUGFnaW5hdGlvbkFjdGlvbnNgIGNvbXBvbmVudC4gKi9cbiAgICBhY3Rpb25zOiB7XG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgbWFyZ2luTGVmdDogMjBcbiAgICB9XG4gIH07XG59O1xuXG52YXIgZGVmYXVsdExhYmVsRGlzcGxheWVkUm93cyA9IGZ1bmN0aW9uIGRlZmF1bHRMYWJlbERpc3BsYXllZFJvd3MoX3JlZikge1xuICB2YXIgZnJvbSA9IF9yZWYuZnJvbSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGNvdW50ID0gX3JlZi5jb3VudDtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KGZyb20sIFwiLVwiKS5jb25jYXQodG8sIFwiIG9mIFwiKS5jb25jYXQoY291bnQpO1xufTtcblxudmFyIGRlZmF1bHRSb3dzUGVyUGFnZU9wdGlvbnMgPSBbMTAsIDI1LCA1MCwgMTAwXTtcbi8qKlxuICogQSBgVGFibGVDZWxsYCBiYXNlZCBjb21wb25lbnQgZm9yIHBsYWNpbmcgaW5zaWRlIGBUYWJsZUZvb3RlcmAgZm9yIHBhZ2luYXRpb24uXG4gKi9cblxudmFyIFRhYmxlUGFnaW5hdGlvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVQYWdpbmF0aW9uKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRBY3Rpb25zQ29tcG9uZSA9IHByb3BzLkFjdGlvbnNDb21wb25lbnQsXG4gICAgICBBY3Rpb25zQ29tcG9uZW50ID0gX3Byb3BzJEFjdGlvbnNDb21wb25lID09PSB2b2lkIDAgPyBUYWJsZVBhZ2luYXRpb25BY3Rpb25zIDogX3Byb3BzJEFjdGlvbnNDb21wb25lLFxuICAgICAgYmFja0ljb25CdXR0b25Qcm9wcyA9IHByb3BzLmJhY2tJY29uQnV0dG9uUHJvcHMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNvbFNwYW5Qcm9wID0gcHJvcHMuY29sU3BhbixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyBUYWJsZUNlbGwgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgY291bnQgPSBwcm9wcy5jb3VudCxcbiAgICAgIF9wcm9wcyRsYWJlbERpc3BsYXllZCA9IHByb3BzLmxhYmVsRGlzcGxheWVkUm93cyxcbiAgICAgIGxhYmVsRGlzcGxheWVkUm93cyA9IF9wcm9wcyRsYWJlbERpc3BsYXllZCA9PT0gdm9pZCAwID8gZGVmYXVsdExhYmVsRGlzcGxheWVkUm93cyA6IF9wcm9wcyRsYWJlbERpc3BsYXllZCxcbiAgICAgIF9wcm9wcyRsYWJlbFJvd3NQZXJQYSA9IHByb3BzLmxhYmVsUm93c1BlclBhZ2UsXG4gICAgICBsYWJlbFJvd3NQZXJQYWdlID0gX3Byb3BzJGxhYmVsUm93c1BlclBhID09PSB2b2lkIDAgPyAnUm93cyBwZXIgcGFnZTonIDogX3Byb3BzJGxhYmVsUm93c1BlclBhLFxuICAgICAgbmV4dEljb25CdXR0b25Qcm9wcyA9IHByb3BzLm5leHRJY29uQnV0dG9uUHJvcHMsXG4gICAgICBvbkNoYW5nZVBhZ2UgPSBwcm9wcy5vbkNoYW5nZVBhZ2UsXG4gICAgICBvbkNoYW5nZVJvd3NQZXJQYWdlID0gcHJvcHMub25DaGFuZ2VSb3dzUGVyUGFnZSxcbiAgICAgIHBhZ2UgPSBwcm9wcy5wYWdlLFxuICAgICAgcm93c1BlclBhZ2UgPSBwcm9wcy5yb3dzUGVyUGFnZSxcbiAgICAgIF9wcm9wcyRyb3dzUGVyUGFnZU9wdCA9IHByb3BzLnJvd3NQZXJQYWdlT3B0aW9ucyxcbiAgICAgIHJvd3NQZXJQYWdlT3B0aW9ucyA9IF9wcm9wcyRyb3dzUGVyUGFnZU9wdCA9PT0gdm9pZCAwID8gZGVmYXVsdFJvd3NQZXJQYWdlT3B0aW9ucyA6IF9wcm9wcyRyb3dzUGVyUGFnZU9wdCxcbiAgICAgIF9wcm9wcyRTZWxlY3RQcm9wcyA9IHByb3BzLlNlbGVjdFByb3BzLFxuICAgICAgU2VsZWN0UHJvcHMgPSBfcHJvcHMkU2VsZWN0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFNlbGVjdFByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIkFjdGlvbnNDb21wb25lbnRcIiwgXCJiYWNrSWNvbkJ1dHRvblByb3BzXCIsIFwiY2xhc3Nlc1wiLCBcImNvbFNwYW5cIiwgXCJjb21wb25lbnRcIiwgXCJjb3VudFwiLCBcImxhYmVsRGlzcGxheWVkUm93c1wiLCBcImxhYmVsUm93c1BlclBhZ2VcIiwgXCJuZXh0SWNvbkJ1dHRvblByb3BzXCIsIFwib25DaGFuZ2VQYWdlXCIsIFwib25DaGFuZ2VSb3dzUGVyUGFnZVwiLCBcInBhZ2VcIiwgXCJyb3dzUGVyUGFnZVwiLCBcInJvd3NQZXJQYWdlT3B0aW9uc1wiLCBcIlNlbGVjdFByb3BzXCJdKTtcblxuICB2YXIgY29sU3BhbjtcblxuICBpZiAoQ29tcG9uZW50ID09PSBUYWJsZUNlbGwgfHwgQ29tcG9uZW50ID09PSAndGQnKSB7XG4gICAgY29sU3BhbiA9IGNvbFNwYW5Qcm9wIHx8IDEwMDA7IC8vIGNvbC1zcGFuIG92ZXIgZXZlcnl0aGluZ1xuICB9XG5cbiAgdmFyIE1lbnVJdGVtQ29tcG9uZW50ID0gU2VsZWN0UHJvcHMubmF0aXZlID8gJ29wdGlvbicgOiBNZW51SXRlbTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3QsXG4gICAgY29sU3BhbjogY29sU3BhbixcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9vbGJhciwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50b29sYmFyXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zcGFjZXJcbiAgfSksIHJvd3NQZXJQYWdlT3B0aW9ucy5sZW5ndGggPiAxICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwge1xuICAgIGNvbG9yOiBcImluaGVyaXRcIixcbiAgICB2YXJpYW50OiBcImNhcHRpb25cIixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuY2FwdGlvblxuICB9LCBsYWJlbFJvd3NQZXJQYWdlKSwgcm93c1BlclBhZ2VPcHRpb25zLmxlbmd0aCA+IDEgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc2VzOiB7XG4gICAgICByb290OiBjbGFzc2VzLnNlbGVjdFJvb3QsXG4gICAgICBzZWxlY3Q6IGNsYXNzZXMuc2VsZWN0LFxuICAgICAgaWNvbjogY2xhc3Nlcy5zZWxlY3RJY29uXG4gICAgfSxcbiAgICBpbnB1dDogUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEJhc2UsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbnB1dFxuICAgIH0pLFxuICAgIHZhbHVlOiByb3dzUGVyUGFnZSxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2VSb3dzUGVyUGFnZVxuICB9LCBTZWxlY3RQcm9wcyksIHJvd3NQZXJQYWdlT3B0aW9ucy5tYXAoZnVuY3Rpb24gKHJvd3NQZXJQYWdlT3B0aW9uKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudUl0ZW1Db21wb25lbnQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5tZW51SXRlbSxcbiAgICAgIGtleTogcm93c1BlclBhZ2VPcHRpb24sXG4gICAgICB2YWx1ZTogcm93c1BlclBhZ2VPcHRpb25cbiAgICB9LCByb3dzUGVyUGFnZU9wdGlvbik7XG4gIH0pKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7XG4gICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgIHZhcmlhbnQ6IFwiY2FwdGlvblwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jYXB0aW9uXG4gIH0sIGxhYmVsRGlzcGxheWVkUm93cyh7XG4gICAgZnJvbTogY291bnQgPT09IDAgPyAwIDogcGFnZSAqIHJvd3NQZXJQYWdlICsgMSxcbiAgICB0bzogTWF0aC5taW4oY291bnQsIChwYWdlICsgMSkgKiByb3dzUGVyUGFnZSksXG4gICAgY291bnQ6IGNvdW50LFxuICAgIHBhZ2U6IHBhZ2VcbiAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEFjdGlvbnNDb21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9ucyxcbiAgICBiYWNrSWNvbkJ1dHRvblByb3BzOiBiYWNrSWNvbkJ1dHRvblByb3BzLFxuICAgIGNvdW50OiBjb3VudCxcbiAgICBuZXh0SWNvbkJ1dHRvblByb3BzOiBuZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgIG9uQ2hhbmdlUGFnZTogb25DaGFuZ2VQYWdlLFxuICAgIHBhZ2U6IHBhZ2UsXG4gICAgcm93c1BlclBhZ2U6IHJvd3NQZXJQYWdlXG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlUGFnaW5hdGlvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIGRpc3BsYXlpbmcgdGhlIGFjdGlvbnMuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIEFjdGlvbnNDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBiYWNrIGFycm93IFtgSWNvbkJ1dHRvbmBdKC9hcGkvaWNvbi1idXR0b24vKSBjb21wb25lbnQuXG4gICAqL1xuICBiYWNrSWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY29sU3BhbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiByb3dzLlxuICAgKi9cbiAgY291bnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSBkaXNwbGF5ZWQgcm93cyBsYWJlbC5cbiAgICovXG4gIGxhYmVsRGlzcGxheWVkUm93czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgcm93cyBwZXIgcGFnZSBsYWJlbC4gSW52b2tlZCB3aXRoIGEgYHsgZnJvbSwgdG8sIGNvdW50LCBwYWdlIH1gXG4gICAqIG9iamVjdC5cbiAgICovXG4gIGxhYmVsUm93c1BlclBhZ2U6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIG5leHQgYXJyb3cgW2BJY29uQnV0dG9uYF0oL2FwaS9pY29uLWJ1dHRvbi8pIGVsZW1lbnQuXG4gICAqL1xuICBuZXh0SWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwYWdlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZSBUaGUgcGFnZSBzZWxlY3RlZFxuICAgKi9cbiAgb25DaGFuZ2VQYWdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBudW1iZXIgb2Ygcm93cyBwZXIgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2hhbmdlUm93c1BlclBhZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgemVyby1iYXNlZCBpbmRleCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgKi9cbiAgcGFnZTogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY291bnQgPSBwcm9wcy5jb3VudCxcbiAgICAgICAgcGFnZSA9IHByb3BzLnBhZ2UsXG4gICAgICAgIHJvd3NQZXJQYWdlID0gcHJvcHMucm93c1BlclBhZ2U7XG4gICAgdmFyIG5ld0xhc3RQYWdlID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKGNvdW50IC8gcm93c1BlclBhZ2UpIC0gMSk7XG5cbiAgICBpZiAocGFnZSA8IDAgfHwgcGFnZSA+IG5ld0xhc3RQYWdlKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogdGhlIHBhZ2UgcHJvcCBvZiBhIFRhYmxlUGFnaW5hdGlvbiBpcyBvdXQgb2YgcmFuZ2UgJyArIFwiKDAgdG8gXCIuY29uY2F0KG5ld0xhc3RQYWdlLCBcIiwgYnV0IHBhZ2UgaXMgXCIpLmNvbmNhdChwYWdlLCBcIikuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygcm93cyBwZXIgcGFnZS5cbiAgICovXG4gIHJvd3NQZXJQYWdlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZXMgdGhlIG9wdGlvbnMgb2YgdGhlIHJvd3MgcGVyIHBhZ2Ugc2VsZWN0IGZpZWxkLiBJZiBsZXNzIHRoYW4gdHdvIG9wdGlvbnMgYXJlXG4gICAqIGF2YWlsYWJsZSwgbm8gc2VsZWN0IGZpZWxkIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKi9cbiAgcm93c1BlclBhZ2VPcHRpb25zOiBQcm9wVHlwZXMuYXJyYXksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgcm93cyBwZXIgcGFnZSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbidcbn0pKFRhYmxlUGFnaW5hdGlvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZGlzcGxheTogJ3RhYmxlLXJvdycsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAnJiRzZWxlY3RlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA0KScgLy8gZ3JleVsxMDBdXG4gICAgICAgIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknXG4gICAgICB9LFxuICAgICAgJyYkaG92ZXI6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNyknIC8vIGdyZXlbMjAwXVxuICAgICAgICA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTQpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzZWxlY3RlZD17dHJ1ZX1gLiAqL1xuICAgIHNlbGVjdGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGhvdmVyPXt0cnVlfWAuICovXG4gICAgaG92ZXI6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0YWJsZSB2YXJpYW50PVwiaGVhZFwiLiAqL1xuICAgIGhlYWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0YWJsZSB2YXJpYW50PVwiZm9vdGVyXCIuICovXG4gICAgZm9vdGVyOiB7fVxuICB9O1xufTtcbi8qKlxuICogV2lsbCBhdXRvbWF0aWNhbGx5IHNldCBkeW5hbWljIHJvdyBoZWlnaHRcbiAqIGJhc2VkIG9uIHRoZSBtYXRlcmlhbCB0YWJsZSBlbGVtZW50IHBhcmVudCAoaGVhZCwgYm9keSwgZXRjKS5cbiAqL1xuXG52YXIgVGFibGVSb3cgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlUm93KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICd0cicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGhvdmVyID0gcHJvcHMuaG92ZXIsXG4gICAgICBob3ZlciA9IF9wcm9wcyRob3ZlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaG92ZXIsXG4gICAgICBfcHJvcHMkc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkID0gX3Byb3BzJHNlbGVjdGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3RlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaG92ZXJcIiwgXCJzZWxlY3RlZFwiXSk7XG5cbiAgdmFyIHRhYmxlbHZsMiA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVsdmwyQ29udGV4dCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdGFibGVsdmwyICYmIFt0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2hlYWQnICYmIGNsYXNzZXMuaGVhZCwgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdmb290ZXInICYmIGNsYXNzZXMuZm9vdGVyXSwgaG92ZXIgJiYgY2xhc3Nlcy5ob3Zlciwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZClcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVSb3cucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2hvdWxkIGJlIHZhbGlkIDx0cj4gY2hpbGRyZW4gc3VjaCBhcyBgVGFibGVDZWxsYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFibGUgcm93IHdpbGwgc2hhZGUgb24gaG92ZXIuXG4gICAqL1xuICBob3ZlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIGhhdmUgdGhlIHNlbGVjdGVkIHNoYWRpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVSb3cnXG59KShUYWJsZVJvdyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbihSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDEybC0xLjQxLTEuNDFMMTMgMTYuMTdWNGgtMnYxMi4xN2wtNS41OC01LjU5TDQgMTJsOCA4IDgtOHpcIlxufSksICdBcnJvd0Rvd253YXJkJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgQXJyb3dEb3dud2FyZEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RG93bndhcmQnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICAgICcmICRpY29uJzoge1xuICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgICAvLyAmJiBpbnN0ZWFkIG9mICYgaXMgYSB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzEwNDVcbiAgICAgICAgJyYmICRpY29uJzoge1xuICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWN0aXZlPXt0cnVlfWAuICovXG4gICAgYWN0aXZlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudC4gKi9cbiAgICBpY29uOiB7XG4gICAgICBoZWlnaHQ6IDE4LFxuICAgICAgbWFyZ2luUmlnaHQ6IDQsXG4gICAgICBtYXJnaW5MZWZ0OiA0LFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAndHJhbnNmb3JtJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2lkdGg6IDE4XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudCBpZiBgZGlyZWN0aW9uPVwiZGVzY1wiYC4gKi9cbiAgICBpY29uRGlyZWN0aW9uRGVzYzoge1xuICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQgaWYgYGRpcmVjdGlvbj1cImFzY1wiYC4gKi9cbiAgICBpY29uRGlyZWN0aW9uQXNjOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBBIGJ1dHRvbiBiYXNlZCBsYWJlbCBmb3IgcGxhY2luZyBpbnNpZGUgYFRhYmxlQ2VsbGAgZm9yIGNvbHVtbiBzb3J0aW5nLlxuICovXG5cbnZhciBUYWJsZVNvcnRMYWJlbCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVTb3J0TGFiZWwocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGFjdGl2ZSA9IF9wcm9wcyRhY3RpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGFjdGl2ZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAnZGVzYycgOiBfcHJvcHMkZGlyZWN0aW9uLFxuICAgICAgX3Byb3BzJGhpZGVTb3J0SWNvbiA9IHByb3BzLmhpZGVTb3J0SWNvbixcbiAgICAgIGhpZGVTb3J0SWNvbiA9IF9wcm9wcyRoaWRlU29ydEljb24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGhpZGVTb3J0SWNvbixcbiAgICAgIF9wcm9wcyRJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIEljb25Db21wb25lbnQgPSBfcHJvcHMkSWNvbkNvbXBvbmVudCA9PT0gdm9pZCAwID8gQXJyb3dEb3dud2FyZEljb24gOiBfcHJvcHMkSWNvbkNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3RpdmVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXJlY3Rpb25cIiwgXCJoaWRlU29ydEljb25cIiwgXCJJY29uQ29tcG9uZW50XCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgYWN0aXZlICYmIGNsYXNzZXMuYWN0aXZlLCBjbGFzc05hbWUpLFxuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgZGlzYWJsZVJpcHBsZTogdHJ1ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCBoaWRlU29ydEljb24gJiYgIWFjdGl2ZSA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBjbGFzc2VzW1wiaWNvbkRpcmVjdGlvblwiLmNvbmNhdChjYXBpdGFsaXplKGRpcmVjdGlvbikpXSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZVNvcnRMYWJlbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGhhdmUgdGhlIGFjdGl2ZSBzdHlsaW5nIChzaG91bGQgYmUgdHJ1ZSBmb3IgdGhlIHNvcnRlZCBjb2x1bW4pLlxuICAgKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTGFiZWwgY29udGVudHMsIHRoZSBhcnJvdyB3aWxsIGJlIGFwcGVuZGVkIGF1dG9tYXRpY2FsbHkuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNvcnQgZGlyZWN0aW9uLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydhc2MnLCAnZGVzYyddKSxcblxuICAvKipcbiAgICogSGlkZSBzb3J0IGljb24gd2hlbiBhY3RpdmUgaXMgZmFsc2UuXG4gICAqL1xuICBoaWRlU29ydEljb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTb3J0IGljb24gdG8gdXNlLlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlU29ydExhYmVsJ1xufSkoVGFibGVTb3J0TGFiZWwpOyIsImZ1bmN0aW9uIGVhc2VJbk91dFNpbih0aW1lKSB7XG4gIHJldHVybiAoMSArIE1hdGguc2luKE1hdGguUEkgKiB0aW1lIC0gTWF0aC5QSSAvIDIpKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUocHJvcCwgZWxlbWVudCwgdG8pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZ1bmN0aW9uICgpIHt9O1xuICB2YXIgX29wdGlvbnMkZWFzZSA9IG9wdGlvbnMuZWFzZSxcbiAgICAgIGVhc2UgPSBfb3B0aW9ucyRlYXNlID09PSB2b2lkIDAgPyBlYXNlSW5PdXRTaW4gOiBfb3B0aW9ucyRlYXNlLFxuICAgICAgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gMzAwIDogX29wdGlvbnMkZHVyYXRpb247XG4gIHZhciBzdGFydCA9IG51bGw7XG4gIHZhciBmcm9tID0gZWxlbWVudFtwcm9wXTtcbiAgdmFyIGNhbmNlbGxlZCA9IGZhbHNlO1xuXG4gIHZhciBjYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgY2FuY2VsbGVkID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgc3RlcCA9IGZ1bmN0aW9uIHN0ZXAodGltZXN0YW1wKSB7XG4gICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgY2IobmV3IEVycm9yKCdBbmltYXRpb24gY2FuY2VsbGVkJykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA9PT0gbnVsbCkge1xuICAgICAgc3RhcnQgPSB0aW1lc3RhbXA7XG4gICAgfVxuXG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbigxLCAodGltZXN0YW1wIC0gc3RhcnQpIC8gZHVyYXRpb24pO1xuICAgIGVsZW1lbnRbcHJvcF0gPSBlYXNlKHRpbWUpICogKHRvIC0gZnJvbSkgKyBmcm9tO1xuXG4gICAgaWYgKHRpbWUgPj0gMSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2IobnVsbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIH07XG5cbiAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgY2IobmV3IEVycm9yKCdFbGVtZW50IGFscmVhZHkgYXQgdGFyZ2V0IHBvc2l0aW9uJykpO1xuICAgIHJldHVybiBjYW5jZWw7XG4gIH1cblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIHJldHVybiBjYW5jZWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFuaW1hdGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJ2RlYm91bmNlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyA+IDNrYi5cblxudmFyIHN0eWxlcyA9IHtcbiAgd2lkdGg6IDk5LFxuICBoZWlnaHQ6IDk5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAtOTk5OSxcbiAgb3ZlcmZsb3c6ICdzY3JvbGwnXG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICogVGhlIGNvbXBvbmVudCBpcyBvcmlnaW5hdGVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1NUT1JJUy9yZWFjdC1zY3JvbGxiYXItc2l6ZS5cbiAqIEl0IGhhcyBiZWVuIG1vdmVkIGludG8gdGhlIGNvcmUgaW4gb3JkZXIgdG8gbWluaW1pemUgdGhlIGJ1bmRsZSBzaXplLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNjcm9sbGJhclNpemUocHJvcHMpIHtcbiAgdmFyIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wib25DaGFuZ2VcIl0pO1xuXG4gIHZhciBzY3JvbGxiYXJIZWlnaHQgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIHNldE1lYXN1cmVtZW50cyA9IGZ1bmN0aW9uIHNldE1lYXN1cmVtZW50cygpIHtcbiAgICBzY3JvbGxiYXJIZWlnaHQuY3VycmVudCA9IG5vZGVSZWYuY3VycmVudC5vZmZzZXRIZWlnaHQgLSBub2RlUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0O1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcmV2SGVpZ2h0ID0gc2Nyb2xsYmFySGVpZ2h0LmN1cnJlbnQ7XG4gICAgICBzZXRNZWFzdXJlbWVudHMoKTtcblxuICAgICAgaWYgKHByZXZIZWlnaHQgIT09IHNjcm9sbGJhckhlaWdodC5jdXJyZW50KSB7XG4gICAgICAgIG9uQ2hhbmdlKHNjcm9sbGJhckhlaWdodC5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9LCAxNjYpOyAvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbb25DaGFuZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRNZWFzdXJlbWVudHMoKTtcbiAgICBvbkNoYW5nZShzY3JvbGxiYXJIZWlnaHQuY3VycmVudCk7XG4gIH0sIFtvbkNoYW5nZV0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgc3R5bGU6IHN0eWxlcyxcbiAgICByZWY6IG5vZGVSZWZcbiAgfSwgb3RoZXIpKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNjcm9sbGJhclNpemUucHJvcFR5cGVzID0ge1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMixcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBUYWJJbmRpY2F0b3IgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYkluZGljYXRvcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYkluZGljYXRvci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgdGFiIGluZGljYXRvci5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlVGFiSW5kaWNhdG9yJ1xufSkoVGFiSW5kaWNhdG9yKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hcmlhLXJvbGUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgS2V5Ym9hcmRBcnJvd0xlZnQgZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0tleWJvYXJkQXJyb3dMZWZ0JztcbmltcG9ydCBLZXlib2FyZEFycm93UmlnaHQgZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0tleWJvYXJkQXJyb3dSaWdodCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICB3aWR0aDogNDAsXG4gICAgZmxleFNocmluazogMFxuICB9XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBfcmVmID0gUmVhY3QuY3JlYXRlRWxlbWVudChLZXlib2FyZEFycm93TGVmdCwge1xuICBmb250U2l6ZTogXCJzbWFsbFwiXG59KTtcblxudmFyIF9yZWYyID0gUmVhY3QuY3JlYXRlRWxlbWVudChLZXlib2FyZEFycm93UmlnaHQsIHtcbiAgZm9udFNpemU6IFwic21hbGxcIlxufSk7XG5cbnZhciBUYWJTY3JvbGxCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYlNjcm9sbEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIF9wcm9wcyR2aXNpYmxlID0gcHJvcHMudmlzaWJsZSxcbiAgICAgIHZpc2libGUgPSBfcHJvcHMkdmlzaWJsZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyR2aXNpYmxlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXJlY3Rpb25cIiwgXCJvbkNsaWNrXCIsIFwidmlzaWJsZVwiXSk7XG5cbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKTtcblxuICBpZiAoIXZpc2libGUpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IG51bGwsXG4gICAgdGFiSW5kZXg6IG51bGxcbiAgfSwgb3RoZXIpLCBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IF9yZWYgOiBfcmVmMik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYlNjcm9sbEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGljaCBkaXJlY3Rpb24gc2hvdWxkIHRoZSBidXR0b24gaW5kaWNhdGU/XG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRvIGV4ZWN1dGUgZm9yIGJ1dHRvbiBwcmVzcy5cbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBTaG91bGQgdGhlIGJ1dHRvbiBiZSBwcmVzZW50IG9yIGp1c3QgY29uc3VtZSBzcGFjZS5cbiAgICovXG4gIHZpc2libGU6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVUYWJTY3JvbGxCdXR0b24nXG59KShUYWJTY3JvbGxCdXR0b24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBFdmVudExpc3RlbmVyIGZyb20gJ3JlYWN0LWV2ZW50LWxpc3RlbmVyJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgPiAza2IuXG5cbmltcG9ydCB7IGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0LCBkZXRlY3RTY3JvbGxUeXBlIH0gZnJvbSAnbm9ybWFsaXplLXNjcm9sbC1sZWZ0JztcbmltcG9ydCBhbmltYXRlIGZyb20gJy4uL2ludGVybmFsL2FuaW1hdGUnO1xuaW1wb3J0IFNjcm9sbGJhclNpemUgZnJvbSAnLi9TY3JvbGxiYXJTaXplJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUYWJJbmRpY2F0b3IgZnJvbSAnLi9UYWJJbmRpY2F0b3InO1xuaW1wb3J0IFRhYlNjcm9sbEJ1dHRvbiBmcm9tICcuL1RhYlNjcm9sbEJ1dHRvbic7XG5pbXBvcnQgd2l0aEZvcndhcmRlZFJlZiBmcm9tICcuLi91dGlscy93aXRoRm9yd2FyZGVkUmVmJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBtaW5IZWlnaHQ6IDQ4LFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGZsZXggY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgZmxleENvbnRhaW5lcjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBmbGV4IGNvbnRhaW5lciBlbGVtZW50IGlmIGBjZW50ZXJlZD17dHJ1ZX1gICYgYCF2YXJpYW50PVwic2Nyb2xsYWJsZVwiYC4gKi9cbiAgICBjZW50ZXJlZDoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0YWJsaXN0IGVsZW1lbnQuICovXG4gICAgc2Nyb2xsZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRhYmxpc3QgZWxlbWVudCBpZiBgIXZhcmlhbnQ9XCJzY3JvbGxhYmxlXCJgXGJcYlxiLiAqL1xuICAgIGZpeGVkOiB7XG4gICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdGFibGlzdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic2Nyb2xsYWJsZVwiYC4gKi9cbiAgICBzY3JvbGxhYmxlOiB7XG4gICAgICBvdmVyZmxvd1g6ICdzY3JvbGwnLFxuICAgICAgLy8gSGlkZSBkaW1lbnNpb25sZXNzIHNjcm9sbGJhciBvbiBNYWNPU1xuICAgICAgc2Nyb2xsYmFyV2lkdGg6ICdub25lJyxcbiAgICAgIC8vIEZpcmVmb3hcbiAgICAgICcmOjotd2Via2l0LXNjcm9sbGJhcic6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnIC8vIFNhZmFyaSArIENocm9tZVxuXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgU2Nyb2xsQnV0dG9uQ29tcG9uZW50YCBjb21wb25lbnQuICovXG4gICAgc2Nyb2xsQnV0dG9uczoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFNjcm9sbEJ1dHRvbkNvbXBvbmVudGAgY29tcG9uZW50IGlmIGBzY3JvbGxCdXR0b25zPVwiYXV0b1wiYCBvciBzY3JvbGxCdXR0b25zPVwiZGVza3RvcFwiYC4gKi9cbiAgICBzY3JvbGxCdXR0b25zRGVza3RvcDogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5kb3duKCd4cycpLCB7XG4gICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgVGFiSW5kaWNhdG9yYCBjb21wb25lbnQuICovXG4gICAgaW5kaWNhdG9yOiB7fVxuICB9O1xufTtcblxudmFyIFRhYnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhYnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYnMoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYnMpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGFicykuY2FsbCh0aGlzKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpbmRpY2F0b3JTdHlsZToge30sXG4gICAgICBzY3JvbGxlclN0eWxlOiB7XG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiBudWxsXG4gICAgICB9LFxuICAgICAgc2hvd0xlZnRTY3JvbGw6IGZhbHNlLFxuICAgICAgc2hvd1JpZ2h0U2Nyb2xsOiBmYWxzZSxcbiAgICAgIG1vdW50ZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLmdldENvbmRpdGlvbmFsRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBTY3JvbGxCdXR0b25Db21wb25lbnQgPSBfdGhpcyRwcm9wcy5TY3JvbGxCdXR0b25Db21wb25lbnQsXG4gICAgICAgICAgc2Nyb2xsQnV0dG9ucyA9IF90aGlzJHByb3BzLnNjcm9sbEJ1dHRvbnMsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZSxcbiAgICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIHNob3dMZWZ0U2Nyb2xsID0gX3RoaXMkc3RhdGUuc2hvd0xlZnRTY3JvbGwsXG4gICAgICAgICAgc2hvd1JpZ2h0U2Nyb2xsID0gX3RoaXMkc3RhdGUuc2hvd1JpZ2h0U2Nyb2xsO1xuICAgICAgdmFyIGNvbmRpdGlvbmFsRWxlbWVudHMgPSB7fTtcbiAgICAgIHZhciBzY3JvbGxhYmxlID0gdmFyaWFudCA9PT0gJ3Njcm9sbGFibGUnO1xuICAgICAgY29uZGl0aW9uYWxFbGVtZW50cy5zY3JvbGxiYXJTaXplTGlzdGVuZXIgPSBzY3JvbGxhYmxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChTY3JvbGxiYXJTaXplLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zY3JvbGxhYmxlLFxuICAgICAgICBvbkNoYW5nZTogX3RoaXMuaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZVxuICAgICAgfSkgOiBudWxsO1xuICAgICAgdmFyIHNjcm9sbEJ1dHRvbnNBY3RpdmUgPSBzaG93TGVmdFNjcm9sbCB8fCBzaG93UmlnaHRTY3JvbGw7XG4gICAgICB2YXIgc2hvd1Njcm9sbEJ1dHRvbnMgPSBzY3JvbGxhYmxlICYmIChzY3JvbGxCdXR0b25zID09PSAnYXV0bycgJiYgc2Nyb2xsQnV0dG9uc0FjdGl2ZSB8fCBzY3JvbGxCdXR0b25zID09PSAnZGVza3RvcCcgfHwgc2Nyb2xsQnV0dG9ucyA9PT0gJ29uJyk7XG4gICAgICBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvbkxlZnQgPSBzaG93U2Nyb2xsQnV0dG9ucyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsQnV0dG9uQ29tcG9uZW50LCB7XG4gICAgICAgIGRpcmVjdGlvbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCcsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUxlZnRTY3JvbGxDbGljayxcbiAgICAgICAgdmlzaWJsZTogc2hvd0xlZnRTY3JvbGwsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNjcm9sbEJ1dHRvbnMsIHNjcm9sbEJ1dHRvbnMgIT09ICdvbicgJiYgY2xhc3Nlcy5zY3JvbGxCdXR0b25zRGVza3RvcClcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uUmlnaHQgPSBzaG93U2Nyb2xsQnV0dG9ucyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsQnV0dG9uQ29tcG9uZW50LCB7XG4gICAgICAgIGRpcmVjdGlvbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZVJpZ2h0U2Nyb2xsQ2xpY2ssXG4gICAgICAgIHZpc2libGU6IHNob3dSaWdodFNjcm9sbCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2Nyb2xsQnV0dG9ucywgc2Nyb2xsQnV0dG9ucyAhPT0gJ29uJyAmJiBjbGFzc2VzLnNjcm9sbEJ1dHRvbnNEZXNrdG9wKVxuICAgICAgfSkgOiBudWxsO1xuICAgICAgcmV0dXJuIGNvbmRpdGlvbmFsRWxlbWVudHM7XG4gICAgfTtcblxuICAgIF90aGlzLmdldFRhYnNNZXRhID0gZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgIHZhciB0YWJzTWV0YTtcblxuICAgICAgaWYgKF90aGlzLnRhYnNSZWYpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBfdGhpcy50YWJzUmVmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggQ2xpZW50UmVjdCBjbGFzcyBwcm9wcyArIHNjcm9sbExlZnRcblxuXG4gICAgICAgIHRhYnNNZXRhID0ge1xuICAgICAgICAgIGNsaWVudFdpZHRoOiBfdGhpcy50YWJzUmVmLmNsaWVudFdpZHRoLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IF90aGlzLnRhYnNSZWYuc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxMZWZ0Tm9ybWFsaXplZDogZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoX3RoaXMudGFic1JlZiwgZGlyZWN0aW9uKSxcbiAgICAgICAgICBzY3JvbGxXaWR0aDogX3RoaXMudGFic1JlZi5zY3JvbGxXaWR0aCxcbiAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhYk1ldGE7XG5cbiAgICAgIGlmIChfdGhpcy50YWJzUmVmICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfdGhpcy50YWJzUmVmLmNoaWxkcmVuWzBdLmNoaWxkcmVuO1xuXG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHRhYiA9IGNoaWxkcmVuW190aGlzLnZhbHVlVG9JbmRleC5nZXQodmFsdWUpXTtcblxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodGFiLCBbXCJNYXRlcmlhbC1VSTogdGhlIHZhbHVlIHByb3ZpZGVkIGBcIi5jb25jYXQodmFsdWUsIFwiYCB0byB0aGUgVGFicyBjb21wb25lbnQgaXMgaW52YWxpZC5cIiksICdOb25lIG9mIHRoZSBUYWJzIGNoaWxkcmVuIGhhdmUgdGhpcyB2YWx1ZS4nLCBfdGhpcy52YWx1ZVRvSW5kZXgua2V5cyA/IFwiWW91IGNhbiBwcm92aWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczogXCIuY29uY2F0KEFycmF5LmZyb20oX3RoaXMudmFsdWVUb0luZGV4LmtleXMoKSkuam9pbignLCAnKSwgXCIuXCIpIDogbnVsbF0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICAgIHRhYk1ldGEgPSB0YWIgPyB0YWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhYnNNZXRhOiB0YWJzTWV0YSxcbiAgICAgICAgdGFiTWV0YTogdGFiTWV0YVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGVmdFNjcm9sbENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubW92ZVRhYnNTY3JvbGwoLV90aGlzLnRhYnNSZWYuY2xpZW50V2lkdGgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSaWdodFNjcm9sbENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMubW92ZVRhYnNTY3JvbGwoX3RoaXMudGFic1JlZi5jbGllbnRXaWR0aCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVNjcm9sbGJhclNpemVDaGFuZ2UgPSBmdW5jdGlvbiAoc2Nyb2xsYmFySGVpZ2h0KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNjcm9sbGVyU3R5bGU6IHtcbiAgICAgICAgICBvdmVyZmxvdzogbnVsbCxcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IC1zY3JvbGxiYXJIZWlnaHRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRhYnNSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy50YWJzUmVmID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5tb3ZlVGFic1Njcm9sbCA9IGZ1bmN0aW9uIChkZWx0YSkge1xuICAgICAgdmFyIHRoZW1lID0gX3RoaXMucHJvcHMudGhlbWU7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAtMSA6IDE7XG4gICAgICB2YXIgbmV4dFNjcm9sbExlZnQgPSBfdGhpcy50YWJzUmVmLnNjcm9sbExlZnQgKyBkZWx0YSAqIG11bHRpcGxpZXI7IC8vIEZpeCBmb3IgRWRnZVxuXG4gICAgICB2YXIgaW52ZXJ0ID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyAmJiBkZXRlY3RTY3JvbGxUeXBlKCkgPT09ICdyZXZlcnNlJyA/IC0xIDogMTtcblxuICAgICAgX3RoaXMuc2Nyb2xsKGludmVydCAqIG5leHRTY3JvbGxMZWZ0KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2Nyb2xsU2VsZWN0ZWRJbnRvVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzMi50aGVtZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzMi52YWx1ZTtcblxuICAgICAgdmFyIF90aGlzJGdldFRhYnNNZXRhID0gX3RoaXMuZ2V0VGFic01ldGEodmFsdWUsIHRoZW1lLmRpcmVjdGlvbiksXG4gICAgICAgICAgdGFic01ldGEgPSBfdGhpcyRnZXRUYWJzTWV0YS50YWJzTWV0YSxcbiAgICAgICAgICB0YWJNZXRhID0gX3RoaXMkZ2V0VGFic01ldGEudGFiTWV0YTtcblxuICAgICAgaWYgKCF0YWJNZXRhIHx8ICF0YWJzTWV0YSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0YWJNZXRhLmxlZnQgPCB0YWJzTWV0YS5sZWZ0KSB7XG4gICAgICAgIC8vIGxlZnQgc2lkZSBvZiBidXR0b24gaXMgb3V0IG9mIHZpZXdcbiAgICAgICAgdmFyIG5leHRTY3JvbGxMZWZ0ID0gdGFic01ldGEuc2Nyb2xsTGVmdCArICh0YWJNZXRhLmxlZnQgLSB0YWJzTWV0YS5sZWZ0KTtcblxuICAgICAgICBfdGhpcy5zY3JvbGwobmV4dFNjcm9sbExlZnQpO1xuICAgICAgfSBlbHNlIGlmICh0YWJNZXRhLnJpZ2h0ID4gdGFic01ldGEucmlnaHQpIHtcbiAgICAgICAgLy8gcmlnaHQgc2lkZSBvZiBidXR0b24gaXMgb3V0IG9mIHZpZXdcbiAgICAgICAgdmFyIF9uZXh0U2Nyb2xsTGVmdCA9IHRhYnNNZXRhLnNjcm9sbExlZnQgKyAodGFiTWV0YS5yaWdodCAtIHRhYnNNZXRhLnJpZ2h0KTtcblxuICAgICAgICBfdGhpcy5zY3JvbGwoX25leHRTY3JvbGxMZWZ0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2Nyb2xsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBhbmltYXRlKCdzY3JvbGxMZWZ0JywgX3RoaXMudGFic1JlZiwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBfdGhpcy51cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBzY3JvbGxCdXR0b25zID0gX3RoaXMkcHJvcHMzLnNjcm9sbEJ1dHRvbnMsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wczMudGhlbWUsXG4gICAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzMy52YXJpYW50O1xuICAgICAgdmFyIHNjcm9sbGFibGUgPSB2YXJpYW50ID09PSAnc2Nyb2xsYWJsZSc7XG5cbiAgICAgIGlmIChzY3JvbGxhYmxlICYmIHNjcm9sbEJ1dHRvbnMgIT09ICdvZmYnKSB7XG4gICAgICAgIHZhciBfdGhpcyR0YWJzUmVmID0gX3RoaXMudGFic1JlZixcbiAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gX3RoaXMkdGFic1JlZi5zY3JvbGxXaWR0aCxcbiAgICAgICAgICAgIGNsaWVudFdpZHRoID0gX3RoaXMkdGFic1JlZi5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXROb3JtYWxpemVkU2Nyb2xsTGVmdChfdGhpcy50YWJzUmVmLCB0aGVtZS5kaXJlY3Rpb24pOyAvLyB1c2UgMSBmb3IgdGhlIHBvdGVudGlhbCByb3VuZGluZyBlcnJvciB3aXRoIGJyb3dzZXIgem9vbXMuXG5cbiAgICAgICAgdmFyIHNob3dMZWZ0U2Nyb2xsID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IHNjcm9sbExlZnQgPCBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gMSA6IHNjcm9sbExlZnQgPiAxO1xuICAgICAgICB2YXIgc2hvd1JpZ2h0U2Nyb2xsID0gdGhlbWUuZGlyZWN0aW9uICE9PSAncnRsJyA/IHNjcm9sbExlZnQgPCBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gMSA6IHNjcm9sbExlZnQgPiAxO1xuXG4gICAgICAgIGlmIChzaG93TGVmdFNjcm9sbCAhPT0gX3RoaXMuc3RhdGUuc2hvd0xlZnRTY3JvbGwgfHwgc2hvd1JpZ2h0U2Nyb2xsICE9PSBfdGhpcy5zdGF0ZS5zaG93UmlnaHRTY3JvbGwpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaG93TGVmdFNjcm9sbDogc2hvd0xlZnRTY3JvbGwsXG4gICAgICAgICAgICBzaG93UmlnaHRTY3JvbGw6IHNob3dSaWdodFNjcm9sbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgX3RoaXMuaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy51cGRhdGVJbmRpY2F0b3JTdGF0ZShfdGhpcy5wcm9wcyk7XG5cbiAgICAgICAgX3RoaXMudXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cblxuICAgICAgX3RoaXMuaGFuZGxlVGFic1Njcm9sbCA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFicywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbW91bnRlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnVwZGF0ZUluZGljYXRvclN0YXRlKHRoaXMucHJvcHMpO1xuICAgICAgdGhpcy51cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSgpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5hY3Rpb24pIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb24oe1xuICAgICAgICAgIHVwZGF0ZUluZGljYXRvcjogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIC8vIFRoZSBpbmRleCBtaWdodCBoYXZlIGNoYW5nZWQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWdhaW4gdGhlIHJpZ2h0IGluZGljYXRvciBwb3NpdGlvbi5cbiAgICAgIHRoaXMudXBkYXRlSW5kaWNhdG9yU3RhdGUodGhpcy5wcm9wcyk7XG4gICAgICB0aGlzLnVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlKCk7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmluZGljYXRvclN0eWxlICE9PSBwcmV2U3RhdGUuaW5kaWNhdG9yU3R5bGUpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxTZWxlY3RlZEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHRoaXMuaGFuZGxlVGFic1Njcm9sbC5jbGVhcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVJbmRpY2F0b3JTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbmRpY2F0b3JTdGF0ZShwcm9wcykge1xuICAgICAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZTtcblxuICAgICAgdmFyIF90aGlzJGdldFRhYnNNZXRhMiA9IHRoaXMuZ2V0VGFic01ldGEodmFsdWUsIHRoZW1lLmRpcmVjdGlvbiksXG4gICAgICAgICAgdGFic01ldGEgPSBfdGhpcyRnZXRUYWJzTWV0YTIudGFic01ldGEsXG4gICAgICAgICAgdGFiTWV0YSA9IF90aGlzJGdldFRhYnNNZXRhMi50YWJNZXRhO1xuXG4gICAgICB2YXIgbGVmdCA9IDA7XG5cbiAgICAgIGlmICh0YWJNZXRhICYmIHRhYnNNZXRhKSB7XG4gICAgICAgIHZhciBjb3JyZWN0aW9uID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IHRhYnNNZXRhLnNjcm9sbExlZnROb3JtYWxpemVkICsgdGFic01ldGEuY2xpZW50V2lkdGggLSB0YWJzTWV0YS5zY3JvbGxXaWR0aCA6IHRhYnNNZXRhLnNjcm9sbExlZnQ7XG4gICAgICAgIGxlZnQgPSBNYXRoLnJvdW5kKHRhYk1ldGEubGVmdCAtIHRhYnNNZXRhLmxlZnQgKyBjb3JyZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGljYXRvclN0eWxlID0ge1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAvLyBNYXkgYmUgd3JvbmcgdW50aWwgdGhlIGZvbnQgaXMgbG9hZGVkLlxuICAgICAgICB3aWR0aDogdGFiTWV0YSA/IE1hdGgucm91bmQodGFiTWV0YS53aWR0aCkgOiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAoKGluZGljYXRvclN0eWxlLmxlZnQgIT09IHRoaXMuc3RhdGUuaW5kaWNhdG9yU3R5bGUubGVmdCB8fCBpbmRpY2F0b3JTdHlsZS53aWR0aCAhPT0gdGhpcy5zdGF0ZS5pbmRpY2F0b3JTdHlsZS53aWR0aCkgJiYgIWlzTmFOKGluZGljYXRvclN0eWxlLmxlZnQpICYmICFpc05hTihpbmRpY2F0b3JTdHlsZS53aWR0aCkpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaW5kaWNhdG9yU3R5bGU6IGluZGljYXRvclN0eWxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzNC5hY3Rpb24sXG4gICAgICAgICAgY2VudGVyZWQgPSBfdGhpcyRwcm9wczQuY2VudGVyZWQsXG4gICAgICAgICAgY2hpbGRyZW5Qcm9wID0gX3RoaXMkcHJvcHM0LmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wczQuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzNC5jb21wb25lbnQsXG4gICAgICAgICAgaW5kaWNhdG9yQ29sb3IgPSBfdGhpcyRwcm9wczQuaW5kaWNhdG9yQ29sb3IsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczQuaW5uZXJSZWYsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wczQub25DaGFuZ2UsXG4gICAgICAgICAgU2Nyb2xsQnV0dG9uQ29tcG9uZW50ID0gX3RoaXMkcHJvcHM0LlNjcm9sbEJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgICBzY3JvbGxCdXR0b25zID0gX3RoaXMkcHJvcHM0LnNjcm9sbEJ1dHRvbnMsXG4gICAgICAgICAgX3RoaXMkcHJvcHM0JFRhYkluZGljID0gX3RoaXMkcHJvcHM0LlRhYkluZGljYXRvclByb3BzLFxuICAgICAgICAgIFRhYkluZGljYXRvclByb3BzID0gX3RoaXMkcHJvcHM0JFRhYkluZGljID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzNCRUYWJJbmRpYyxcbiAgICAgICAgICB0ZXh0Q29sb3IgPSBfdGhpcyRwcm9wczQudGV4dENvbG9yLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHM0LnRoZW1lLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHM0LnZhbHVlLFxuICAgICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wczQudmFyaWFudCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wczQsIFtcImFjdGlvblwiLCBcImNlbnRlcmVkXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaW5kaWNhdG9yQ29sb3JcIiwgXCJpbm5lclJlZlwiLCBcIm9uQ2hhbmdlXCIsIFwiU2Nyb2xsQnV0dG9uQ29tcG9uZW50XCIsIFwic2Nyb2xsQnV0dG9uc1wiLCBcIlRhYkluZGljYXRvclByb3BzXCIsIFwidGV4dENvbG9yXCIsIFwidGhlbWVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gICAgICB2YXIgc2Nyb2xsYWJsZSA9IHZhcmlhbnQgPT09ICdzY3JvbGxhYmxlJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWNlbnRlcmVkIHx8ICFzY3JvbGxhYmxlLCAnTWF0ZXJpYWwtVUk6IHlvdSBjYW4gbm90IHVzZSB0aGUgYGNlbnRlcmVkPXt0cnVlfWAgYW5kIGB2YXJpYW50PVwic2Nyb2xsYWJsZVwiYCBwcm9wZXJ0aWVzICcgKyAnYXQgdGhlIHNhbWUgdGltZSBvbiBhIGBUYWJzYCBjb21wb25lbnQuJykgOiB2b2lkIDA7XG4gICAgICB2YXIgaW5kaWNhdG9yID0gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJJbmRpY2F0b3IsIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmluZGljYXRvcixcbiAgICAgICAgY29sb3I6IGluZGljYXRvckNvbG9yXG4gICAgICB9LCBUYWJJbmRpY2F0b3JQcm9wcywge1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHRoaXMuc3RhdGUuaW5kaWNhdG9yU3R5bGUsIFRhYkluZGljYXRvclByb3BzLnN0eWxlKVxuICAgICAgfSkpO1xuICAgICAgdGhpcy52YWx1ZVRvSW5kZXggPSBuZXcgTWFwKCk7XG4gICAgICB2YXIgY2hpbGRJbmRleCA9IDA7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW5Qcm9wLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2hpbGQudHlwZSAhPT0gUmVhY3QuRnJhZ21lbnQsIFtcIk1hdGVyaWFsLVVJOiB0aGUgVGFicyBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICB2YXIgY2hpbGRWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlID09PSB1bmRlZmluZWQgPyBjaGlsZEluZGV4IDogY2hpbGQucHJvcHMudmFsdWU7XG5cbiAgICAgICAgX3RoaXMyLnZhbHVlVG9JbmRleC5zZXQoY2hpbGRWYWx1ZSwgY2hpbGRJbmRleCk7XG5cbiAgICAgICAgdmFyIHNlbGVjdGVkID0gY2hpbGRWYWx1ZSA9PT0gdmFsdWU7XG4gICAgICAgIGNoaWxkSW5kZXggKz0gMTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIGZ1bGxXaWR0aDogdmFyaWFudCA9PT0gJ2Z1bGxXaWR0aCcsXG4gICAgICAgICAgaW5kaWNhdG9yOiBzZWxlY3RlZCAmJiAhX3RoaXMyLnN0YXRlLm1vdW50ZWQgJiYgaW5kaWNhdG9yLFxuICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgICAgICAgdGV4dENvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICAgICAgdmFsdWU6IGNoaWxkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBjb25kaXRpb25hbEVsZW1lbnRzID0gdGhpcy5nZXRDb25kaXRpb25hbEVsZW1lbnRzKCk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiBpbm5lclJlZlxuICAgICAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50TGlzdGVuZXIsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZsZXhDb250YWluZXJcbiAgICAgIH0sIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uTGVmdCwgY29uZGl0aW9uYWxFbGVtZW50cy5zY3JvbGxiYXJTaXplTGlzdGVuZXIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zY3JvbGxlciwgIXNjcm9sbGFibGUgJiYgY2xhc3Nlcy5maXhlZCwgc2Nyb2xsYWJsZSAmJiBjbGFzc2VzLnNjcm9sbGFibGUpLFxuICAgICAgICBzdHlsZTogdGhpcy5zdGF0ZS5zY3JvbGxlclN0eWxlLFxuICAgICAgICByZWY6IHRoaXMuaGFuZGxlVGFic1JlZixcbiAgICAgICAgcm9sZTogXCJ0YWJsaXN0XCIsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLmhhbmRsZVRhYnNTY3JvbGxcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mbGV4Q29udGFpbmVyLCBjZW50ZXJlZCAmJiAhc2Nyb2xsYWJsZSAmJiBjbGFzc2VzLmNlbnRlcmVkKVxuICAgICAgfSwgY2hpbGRyZW4pLCB0aGlzLnN0YXRlLm1vdW50ZWQgJiYgaW5kaWNhdG9yKSwgY29uZGl0aW9uYWxFbGVtZW50cy5zY3JvbGxCdXR0b25SaWdodCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWJzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJzLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdHJpZ2dlciBhbiBhY3Rpb24gcHJvZ3JhbW1hdGljYWxseS5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYHVwZGF0ZUluZGljYXRvcigpYCBhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBwb3NzaWJsZSBhY3Rpb25zXG4gICAqIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFicyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGludGVuZGVkIGZvciBsYXJnZSB2aWV3cy5cbiAgICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgdGhlIGluZGljYXRvci5cbiAgICovXG4gIGluZGljYXRvckNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydzZWNvbmRhcnknLCAncHJpbWFyeSddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBmcm9tIGB3aXRoRm9yd2FyZFJlZmBcbiAgICovXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFdlIGRlZmF1bHQgdG8gdGhlIGluZGV4IG9mIHRoZSBjaGlsZCAobnVtYmVyKVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcmVuZGVyIHRoZSBzY3JvbGwgYnV0dG9ucy5cbiAgICovXG4gIFNjcm9sbEJ1dHRvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgYmVoYXZpb3Igb2Ygc2Nyb2xsIGJ1dHRvbnMgd2hlbiB0YWJzIGFyZSBzZXQgdG8gc2Nyb2xsXG4gICAqXG4gICAqIC0gYGF1dG9gIHdpbGwgb25seSBwcmVzZW50IHRoZW0gd2hlbiBub3QgYWxsIHRoZSBpdGVtcyBhcmUgdmlzaWJsZS5cbiAgICogLSBgZGVza3RvcGAgd2lsbCBvbmx5IHByZXNlbnQgdGhlbSBvbiBtZWRpdW0gYW5kIGxhcmdlciB2aWV3cG9ydHMuXG4gICAqIC0gYG9uYCB3aWxsIGFsd2F5cyBwcmVzZW50IHRoZW0uXG4gICAqIC0gYG9mZmAgd2lsbCBuZXZlciBwcmVzZW50IHRoZW0uXG4gICAqL1xuICBzY3JvbGxCdXR0b25zOiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ2Rlc2t0b3AnLCAnb24nLCAnb2ZmJ10pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBUYWJJbmRpY2F0b3JgIGVsZW1lbnQuXG4gICAqL1xuICBUYWJJbmRpY2F0b3JQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgdGhlIGBUYWJgLlxuICAgKi9cbiAgdGV4dENvbG9yOiBQcm9wVHlwZXMub25lT2YoWydzZWNvbmRhcnknLCAncHJpbWFyeScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBgVGFiYC5cbiAgICogSWYgeW91IGRvbid0IHdhbnQgYW55IHNlbGVjdGVkIGBUYWJgLCB5b3UgY2FuIHNldCB0aGlzIHByb3BlcnR5IHRvIGBmYWxzZWAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogIERldGVybWluZXMgYWRkaXRpb25hbCBkaXNwbGF5IGJlaGF2aW9yIG9mIHRoZSB0YWJzOlxuICAgKlxuICAgKiAgLSBgc2Nyb2xsYWJsZWAgd2lsbCBpbnZva2Ugc2Nyb2xsaW5nIHByb3BlcnRpZXMgYW5kIGFsbG93IGZvciBob3Jpem9udGFsbHlcbiAgICogIHNjcm9sbGluZyAob3Igc3dpcGluZykgb2YgdGhlIHRhYiBiYXIuXG4gICAqICAtYGZ1bGxXaWR0aGAgd2lsbCBtYWtlIHRoZSB0YWJzIGdyb3cgdG8gdXNlIGFsbCB0aGUgYXZhaWxhYmxlIHNwYWNlLFxuICAgKiAgd2hpY2ggc2hvdWxkIGJlIHVzZWQgZm9yIHNtYWxsIHZpZXdzLCBsaWtlIG9uIG1vYmlsZS5cbiAgICogIC0gYHN0YW5kYXJkYCB3aWxsIHJlbmRlciB0aGUgZGVmYXVsdCBzdGF0ZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ3Njcm9sbGFibGUnLCAnZnVsbFdpZHRoJ10pXG59IDogdm9pZCAwO1xuVGFicy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNlbnRlcmVkOiBmYWxzZSxcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgaW5kaWNhdG9yQ29sb3I6ICdzZWNvbmRhcnknLFxuICBTY3JvbGxCdXR0b25Db21wb25lbnQ6IFRhYlNjcm9sbEJ1dHRvbixcbiAgc2Nyb2xsQnV0dG9uczogJ2F1dG8nLFxuICB0ZXh0Q29sb3I6ICdpbmhlcml0JyxcbiAgdmFyaWFudDogJ3N0YW5kYXJkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJzJyxcbiAgd2l0aFRoZW1lOiB0cnVlXG59KSh3aXRoRm9yd2FyZGVkUmVmKFRhYnMpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IEdyb3cgZnJvbSAnLi4vR3Jvdyc7XG5pbXBvcnQgUG9wcGVyIGZyb20gJy4uL1BvcHBlcic7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCB7IHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnLi4vdXRpbHMvZm9jdXNWaXNpYmxlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIFBvcHBlciBjb21wb25lbnQuICovXG4gICAgcG9wcGVyOiB7XG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC50b29sdGlwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBQb3BwZXIgY29tcG9uZW50IGlmIGBpbnRlcmFjdGl2ZT17dHJ1ZX1gLiAqL1xuICAgIHBvcHBlckludGVyYWN0aXZlOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRvb2x0aXAgKGxhYmVsIHdyYXBwZXIpIGVsZW1lbnQuICovXG4gICAgdG9vbHRpcDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdLCAwLjkpLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBwYWRkaW5nOiAnNHB4IDhweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEwKSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHRoZW1lLnR5cG9ncmFwaHkucm91bmQoMTQgLyAxMCksIFwiZW1cIiksXG4gICAgICBtYXhXaWR0aDogMzAwLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIHRoZSB0b29sdGlwIGlzIG9wZW5lZCBieSB0b3VjaC4gKi9cbiAgICB0b3VjaDoge1xuICAgICAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpLFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQodGhlbWUudHlwb2dyYXBoeS5yb3VuZCgxNiAvIDE0KSwgXCJlbVwiKSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRvb2x0aXAgKGxhYmVsIHdyYXBwZXIpIGVsZW1lbnQgaWYgYHBsYWNlbWVudGAgY29udGFpbnMgXCJsZWZ0XCIuICovXG4gICAgdG9vbHRpcFBsYWNlbWVudExlZnQ6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdyaWdodCBjZW50ZXInLFxuICAgICAgbWFyZ2luOiAnMCAyNHB4ICdcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWFyZ2luOiAnMCAxNHB4J1xuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRvb2x0aXAgKGxhYmVsIHdyYXBwZXIpIGVsZW1lbnQgaWYgYHBsYWNlbWVudGAgY29udGFpbnMgXCJyaWdodFwiLiAqL1xuICAgIHRvb2x0aXBQbGFjZW1lbnRSaWdodDogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQgY2VudGVyJyxcbiAgICAgIG1hcmdpbjogJzAgMjRweCdcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWFyZ2luOiAnMCAxNHB4J1xuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRvb2x0aXAgKGxhYmVsIHdyYXBwZXIpIGVsZW1lbnQgaWYgYHBsYWNlbWVudGAgY29udGFpbnMgXCJ0b3BcIi4gKi9cbiAgICB0b29sdGlwUGxhY2VtZW50VG9wOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyIGJvdHRvbScsXG4gICAgICBtYXJnaW46ICcyNHB4IDAnXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzE0cHggMCdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwiYm90dG9tXCIuICovXG4gICAgdG9vbHRpcFBsYWNlbWVudEJvdHRvbTogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciB0b3AnLFxuICAgICAgbWFyZ2luOiAnMjRweCAwJ1xuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtYXJnaW46ICcxNHB4IDAnXG4gICAgfSlcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFRvb2x0aXAocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNMaSA9IHByb3BzLmRpc2FibGVGb2N1c0xpc3RlbmVyLFxuICAgICAgZGlzYWJsZUZvY3VzTGlzdGVuZXIgPSBfcHJvcHMkZGlzYWJsZUZvY3VzTGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c0xpLFxuICAgICAgX3Byb3BzJGRpc2FibGVIb3ZlckxpID0gcHJvcHMuZGlzYWJsZUhvdmVyTGlzdGVuZXIsXG4gICAgICBkaXNhYmxlSG92ZXJMaXN0ZW5lciA9IF9wcm9wcyRkaXNhYmxlSG92ZXJMaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUhvdmVyTGksXG4gICAgICBfcHJvcHMkZGlzYWJsZVRvdWNoTGkgPSBwcm9wcy5kaXNhYmxlVG91Y2hMaXN0ZW5lcixcbiAgICAgIGRpc2FibGVUb3VjaExpc3RlbmVyID0gX3Byb3BzJGRpc2FibGVUb3VjaExpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVG91Y2hMaSxcbiAgICAgIF9wcm9wcyRlbnRlckRlbGF5ID0gcHJvcHMuZW50ZXJEZWxheSxcbiAgICAgIGVudGVyRGVsYXkgPSBfcHJvcHMkZW50ZXJEZWxheSA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRlbnRlckRlbGF5LFxuICAgICAgX3Byb3BzJGVudGVyVG91Y2hEZWxhID0gcHJvcHMuZW50ZXJUb3VjaERlbGF5LFxuICAgICAgZW50ZXJUb3VjaERlbGF5ID0gX3Byb3BzJGVudGVyVG91Y2hEZWxhID09PSB2b2lkIDAgPyA3MDAgOiBfcHJvcHMkZW50ZXJUb3VjaERlbGEsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgX3Byb3BzJGludGVyYWN0aXZlID0gcHJvcHMuaW50ZXJhY3RpdmUsXG4gICAgICBpbnRlcmFjdGl2ZSA9IF9wcm9wcyRpbnRlcmFjdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW50ZXJhY3RpdmUsXG4gICAgICBfcHJvcHMkbGVhdmVEZWxheSA9IHByb3BzLmxlYXZlRGVsYXksXG4gICAgICBsZWF2ZURlbGF5ID0gX3Byb3BzJGxlYXZlRGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkbGVhdmVEZWxheSxcbiAgICAgIF9wcm9wcyRsZWF2ZVRvdWNoRGVsYSA9IHByb3BzLmxlYXZlVG91Y2hEZWxheSxcbiAgICAgIGxlYXZlVG91Y2hEZWxheSA9IF9wcm9wcyRsZWF2ZVRvdWNoRGVsYSA9PT0gdm9pZCAwID8gMTUwMCA6IF9wcm9wcyRsZWF2ZVRvdWNoRGVsYSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25PcGVuID0gcHJvcHMub25PcGVuLFxuICAgICAgb3BlblByb3AgPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJHBsYWNlbWVudCA9IHByb3BzLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9wcm9wcyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/ICdib3R0b20nIDogX3Byb3BzJHBsYWNlbWVudCxcbiAgICAgIFBvcHBlclByb3BzID0gcHJvcHMuUG9wcGVyUHJvcHMsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBHcm93IDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImRpc2FibGVGb2N1c0xpc3RlbmVyXCIsIFwiZGlzYWJsZUhvdmVyTGlzdGVuZXJcIiwgXCJkaXNhYmxlVG91Y2hMaXN0ZW5lclwiLCBcImVudGVyRGVsYXlcIiwgXCJlbnRlclRvdWNoRGVsYXlcIiwgXCJpZFwiLCBcImludGVyYWN0aXZlXCIsIFwibGVhdmVEZWxheVwiLCBcImxlYXZlVG91Y2hEZWxheVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwiUG9wcGVyUHJvcHNcIiwgXCJ0aGVtZVwiLCBcInRpdGxlXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgb3BlblN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldE9wZW5TdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZSgwKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlNFsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlNSA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgICBfUmVhY3QkdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlNSwgMiksXG4gICAgICBjaGlsZE5vZGUgPSBfUmVhY3QkdXNlU3RhdGU2WzBdLFxuICAgICAgc2V0Q2hpbGROb2RlID0gX1JlYWN0JHVzZVN0YXRlNlsxXTtcblxuICB2YXIgaWdub3JlTm9uVG91Y2hFdmVudHMgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKHByb3BzLm9wZW4gIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGRlZmF1bHRJZCA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgY2xvc2VUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgZW50ZXJUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgbGVhdmVUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgdG91Y2hUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRpc2FibGVkICYmICFpc0NvbnRyb2xsZWQgJiYgdGl0bGUgIT09ICcnICYmIGNoaWxkTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdidXR0b24nKSwgWydNYXRlcmlhbC1VSTogeW91IGFyZSBwcm92aWRpbmcgYSBkaXNhYmxlZCBgYnV0dG9uYCBjaGlsZCB0byB0aGUgVG9vbHRpcCBjb21wb25lbnQuJywgJ0EgZGlzYWJsZWQgZWxlbWVudCBkb2VzIG5vdCBmaXJlIGV2ZW50cy4nLCBcIlRvb2x0aXAgbmVlZHMgdG8gbGlzdGVuIHRvIHRoZSBjaGlsZCBlbGVtZW50J3MgZXZlbnRzIHRvIGRpc3BsYXkgdGhlIHRpdGxlLlwiLCAnJywgJ1BsYWNlIGEgYGRpdmAgY29udGFpbmVyIG9uIHRvcCBvZiB0aGUgZWxlbWVudC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gIH0sIFtpc0NvbnRyb2xsZWQsIHRpdGxlLCBjaGlsZE5vZGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGYWxsYmFjayB0byB0aGlzIGRlZmF1bHQgaWQgd2hlbiBwb3NzaWJsZS5cbiAgICAvLyBVc2UgdGhlIHJhbmRvbSB2YWx1ZSBmb3IgY2xpZW50IHNpZGUgcmVuZGVyaW5nIG9ubHkuXG4gICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgIGlmICghZGVmYXVsdElkLmN1cnJlbnQpIHtcbiAgICAgIGRlZmF1bHRJZC5jdXJyZW50ID0gXCJtdWktdG9vbHRpcC1cIi5jb25jYXQoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMWU1KSk7XG4gICAgfSAvLyBSZXJlbmRlciB3aXRoIGRlZmF1bHRJZCBhbmQgY2hpbGROb2RlLlxuXG5cbiAgICBpZiAob3BlblByb3ApIHtcbiAgICAgIGZvcmNlVXBkYXRlKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiAhbjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW29wZW5Qcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgICAgY2xlYXJUaW1lb3V0KGVudGVyVGltZXIuY3VycmVudCk7XG4gICAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICAgIGNsZWFyVGltZW91dCh0b3VjaFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICB2YXIgaGFuZGxlT3BlbiA9IGZ1bmN0aW9uIGhhbmRsZU9wZW4oZXZlbnQpIHtcbiAgICAvLyBUaGUgbW91c2VvdmVyIGV2ZW50IHdpbGwgdHJpZ2dlciBmb3IgZXZlcnkgbmVzdGVkIGVsZW1lbnQgaW4gdGhlIHRvb2x0aXAuXG4gICAgLy8gV2UgY2FuIHNraXAgcmVyZW5kZXJpbmcgd2hlbiB0aGUgdG9vbHRpcCBpcyBhbHJlYWR5IG9wZW4uXG4gICAgLy8gV2UgYXJlIHVzaW5nIHRoZSBtb3VzZW92ZXIgZXZlbnQgaW5zdGVhZCBvZiB0aGUgbW91c2VlbnRlciBldmVudCB0byBmaXggYSBoaWRlL3Nob3cgaXNzdWUuXG4gICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgIW9wZW5TdGF0ZSkge1xuICAgICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgIH1cblxuICAgIGlmIChvbk9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKGV2ZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuUHJvcHMgPSBjaGlsZHJlbi5wcm9wcztcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VvdmVyJyAmJiBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyKSB7XG4gICAgICBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCAmJiBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlbW92ZSB0aGUgdGl0bGUgYWhlYWQgb2YgdGltZS5cbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgZm9yIHRoZSBuZXh0IHJlbmRlciBjb21taXQuXG4gICAgLy8gV2Ugd291bGQgcmlzayBkaXNwbGF5aW5nIHR3byB0b29sdGlwcyBhdCB0aGUgc2FtZSB0aW1lIChuYXRpdmUgKyB0aGlzIG9uZSkuXG5cblxuICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgIGNoaWxkTm9kZS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChlbnRlclRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuXG4gICAgaWYgKGVudGVyRGVsYXkpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIGVudGVyVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICAgIH0sIGVudGVyRGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTcgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGU4ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlNywgMiksXG4gICAgICBjaGlsZElzRm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlOFswXSxcbiAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGU4WzFdO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUJsdXIoKSB7XG4gICAgaWYgKGNoaWxkSXNGb2N1c1Zpc2libGUpIHtcbiAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgICAgb25CbHVyVmlzaWJsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgLy8gVGhlIGF1dG9Gb2N1cyBvZiBSZWFjdCBtaWdodCB0cmlnZ2VyIHRoZSBldmVudCBiZWZvcmUgdGhlIGNvbXBvbmVudERpZE1vdW50LlxuICAgIC8vIFdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhpcyBldmVudHVhbGl0eS5cbiAgICBpZiAoIWNoaWxkTm9kZSkge1xuICAgICAgc2V0Q2hpbGROb2RlKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICBoYW5kbGVFbnRlcihldmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuUHJvcHMgPSBjaGlsZHJlbi5wcm9wcztcblxuICAgIGlmIChjaGlsZHJlblByb3BzLm9uRm9jdXMpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKGV2ZW50KSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQpO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgIGNsb3NlVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCA9IGZhbHNlO1xuICAgIH0sIHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlTGVhdmUgPSBmdW5jdGlvbiBoYW5kbGVMZWF2ZShldmVudCkge1xuICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2JsdXInKSB7XG4gICAgICBpZiAoY2hpbGRyZW5Qcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVCbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbGVhdmUnICYmIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICBjaGlsZHJlblByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGVudGVyVGltZXIuY3VycmVudCk7XG4gICAgY2xlYXJUaW1lb3V0KGxlYXZlVGltZXIuY3VycmVudCk7XG5cbiAgICBpZiAobGVhdmVEZWxheSkge1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgbGVhdmVUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICAgIH0sIGxlYXZlRGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldmVudCkge1xuICAgIGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgPSB0cnVlO1xuICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICBpZiAoY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQoY2xvc2VUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQodG91Y2hUaW1lci5jdXJyZW50KTtcbiAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgdG91Y2hUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVFbnRlcihldmVudCk7XG4gICAgfSwgZW50ZXJUb3VjaERlbGF5KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChldmVudCkge1xuICAgIGlmIChjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKSB7XG4gICAgICBjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQodG91Y2hUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgbGVhdmVUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgfSwgbGVhdmVUb3VjaERlbGF5KTtcbiAgfTsgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBkcm9wIHN1cHBvcnQgZm9yIG5vbiByZWYgZm9yd2FyZGluZyBjbGFzcyBjb21wb25lbnRzXG5cblxuICB2YXIgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHNldENoaWxkTm9kZShSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSkpO1xuICB9LCBbXSksIGZvY3VzVmlzaWJsZVJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIG9wZW4gPSBpc0NvbnRyb2xsZWQgPyBvcGVuUHJvcCA6IG9wZW5TdGF0ZTsgLy8gVGhlcmUgaXMgbm8gcG9pbnQgaW4gZGlzcGxheWluZyBhbiBlbXB0eSB0b29sdGlwLlxuXG4gIGlmICh0aXRsZSA9PT0gJycpIHtcbiAgICBvcGVuID0gZmFsc2U7XG4gIH0gLy8gRm9yIGFjY2Vzc2liaWxpdHkgYW5kIFNFTyBjb25jZXJucywgd2UgcmVuZGVyIHRoZSB0aXRsZSB0byB0aGUgRE9NIG5vZGUgd2hlblxuICAvLyB0aGUgdG9vbHRpcCBpcyBoaWRkZW4uIEhvd2V2ZXIsIHdlIGhhdmUgbWFkZSBhIHRyYWRlb2ZmIHdoZW5cbiAgLy8gYGRpc2FibGVIb3Zlckxpc3RlbmVyYCBpcyBzZXQuIFRoaXMgdGl0bGUgbG9naWMgaXMgZGlzYWJsZWQuXG4gIC8vIEl0J3MgYWxsb3dpbmcgdXMgdG8ga2VlcCB0aGUgaW1wbGVtZW50YXRpb24gc2l6ZSBtaW5pbWFsLlxuICAvLyBXZSBhcmUgb3BlbiB0byBjaGFuZ2UgdGhlIHRyYWRlb2ZmLlxuXG5cbiAgdmFyIHNob3VsZFNob3dOYXRpdmVUaXRsZSA9ICFvcGVuICYmICFkaXNhYmxlSG92ZXJMaXN0ZW5lcjtcblxuICB2YXIgY2hpbGRyZW5Qcm9wcyA9IF9leHRlbmRzKHtcbiAgICAnYXJpYS1kZXNjcmliZWRieSc6IG9wZW4gPyBpZCB8fCBkZWZhdWx0SWQuY3VycmVudCA6IG51bGwsXG4gICAgdGl0bGU6IHNob3VsZFNob3dOYXRpdmVUaXRsZSAmJiB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnID8gdGl0bGUgOiBudWxsXG4gIH0sIG90aGVyLCBjaGlsZHJlbi5wcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChvdGhlci5jbGFzc05hbWUsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSlcbiAgfSk7XG5cbiAgaWYgKCFkaXNhYmxlVG91Y2hMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0ID0gaGFuZGxlVG91Y2hTdGFydDtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hFbmQgPSBoYW5kbGVUb3VjaEVuZDtcbiAgfVxuXG4gIGlmICghZGlzYWJsZUhvdmVyTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyID0gaGFuZGxlRW50ZXI7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUgPSBoYW5kbGVMZWF2ZTtcbiAgfVxuXG4gIGlmICghZGlzYWJsZUZvY3VzTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uRm9jdXMgPSBoYW5kbGVGb2N1cztcbiAgICBjaGlsZHJlblByb3BzLm9uQmx1ciA9IGhhbmRsZUxlYXZlO1xuICB9XG5cbiAgdmFyIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycyA9IGludGVyYWN0aXZlID8ge1xuICAgIG9uTW91c2VPdmVyOiBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyLFxuICAgIG9uTW91c2VMZWF2ZTogY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgb25Gb2N1czogY2hpbGRyZW5Qcm9wcy5vbkZvY3VzLFxuICAgIG9uQmx1cjogY2hpbGRyZW5Qcm9wcy5vbkJsdXJcbiAgfSA6IHt9O1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFjaGlsZHJlbi5wcm9wcy50aXRsZSwgWydNYXRlcmlhbC1VSTogeW91IGhhdmUgcHJvdmlkZWQgYSBgdGl0bGVgIHByb3BlcnR5IHRvIHRoZSBjaGlsZCBvZiA8VG9vbHRpcCAvPi4nLCBcIlJlbW92ZSB0aGlzIHRpdGxlIHByb3BlcnR5IGBcIi5jb25jYXQoY2hpbGRyZW4ucHJvcHMudGl0bGUsIFwiYCBvciB0aGUgVG9vbHRpcCBjb21wb25lbnQuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBjaGlsZHJlblByb3BzKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUG9wcGVyLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucG9wcGVyLCBpbnRlcmFjdGl2ZSAmJiBjbGFzc2VzLnBvcHBlckludGVyYWN0aXZlKSxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICBhbmNob3JFbDogY2hpbGROb2RlLFxuICAgIG9wZW46IGNoaWxkTm9kZSA/IG9wZW4gOiBmYWxzZSxcbiAgICBpZDogY2hpbGRyZW5Qcm9wc1snYXJpYS1kZXNjcmliZWRieSddLFxuICAgIHRyYW5zaXRpb246IHRydWVcbiAgfSwgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLCBQb3BwZXJQcm9wcyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHBsYWNlbWVudElubmVyID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICAgIFRyYW5zaXRpb25Qcm9wc0lubmVyID0gX3JlZi5UcmFuc2l0aW9uUHJvcHM7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgdGltZW91dDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0sIFRyYW5zaXRpb25Qcm9wc0lubmVyLCBUcmFuc2l0aW9uUHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnRvb2x0aXAsIGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgJiYgY2xhc3Nlcy50b3VjaCwgY2xhc3Nlc1tcInRvb2x0aXBQbGFjZW1lbnRcIi5jb25jYXQoY2FwaXRhbGl6ZShwbGFjZW1lbnRJbm5lci5zcGxpdCgnLScpWzBdKSldKVxuICAgIH0sIHRpdGxlKSk7XG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG9vbHRpcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUb29sdGlwIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGZvY3VzIGV2ZW50cy5cbiAgICovXG4gIGRpc2FibGVGb2N1c0xpc3RlbmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gaG92ZXIgZXZlbnRzLlxuICAgKi9cbiAgZGlzYWJsZUhvdmVyTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBsb25nIHByZXNzIHRvdWNoIGV2ZW50cy5cbiAgICovXG4gIGRpc2FibGVUb3VjaExpc3RlbmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcC5cbiAgICogVGhpcyBwcm9wZXJ0eSB3b24ndCBpbXBhY3QgdGhlIGVudGVyIHRvdWNoIGRlbGF5IChgZW50ZXJUb3VjaERlbGF5YCkuXG4gICAqL1xuICBlbnRlckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhIHVzZXIgbXVzdCB0b3VjaCB0aGUgZWxlbWVudCBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcC5cbiAgICovXG4gIGVudGVyVG91Y2hEZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSB0b29sdGlwIGFuZCB0aGUgd3JhcHBlciBjb21wb25lbnQgaXMgbm90IGNsZWFyIGZyb20gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHdpdGggYXJpYS1kZXNjcmliZWRieSB0byBzb2x2ZSB0aGUgYWNjZXNzaWJpbGl0eSBpc3N1ZS5cbiAgICogSWYgeW91IGRvbid0IHByb3ZpZGUgdGhpcyBwcm9wZXJ0eS4gSXQgZmFsbHMgYmFjayB0byBhIHJhbmRvbWx5IGdlbmVyYXRlZCBpZC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBNYWtlcyBhIHRvb2x0aXAgaW50ZXJhY3RpdmUsIGkuZS4gd2lsbCBub3QgY2xvc2Ugd2hlbiB0aGUgdXNlclxuICAgKiBob3ZlcnMgb3ZlciB0aGUgdG9vbHRpcCBiZWZvcmUgdGhlIGBsZWF2ZURlbGF5YCBpcyBleHBpcmVkLlxuICAgKi9cbiAgaW50ZXJhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcGVydHkgd29uJ3QgaW1wYWN0IHRoZSBsZWF2ZSB0b3VjaCBkZWxheSAoYGxlYXZlVG91Y2hEZWxheWApLlxuICAgKi9cbiAgbGVhdmVEZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYWZ0ZXIgdGhlIHVzZXIgc3RvcHMgdG91Y2hpbmcgYW4gZWxlbWVudCBiZWZvcmUgaGlkaW5nIHRoZSB0b29sdGlwLlxuICAgKi9cbiAgbGVhdmVUb3VjaERlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB0b29sdGlwIHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdG9vbHRpcCByZXF1ZXN0cyB0byBiZSBvcGVuLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvb2x0aXAgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVG9vbHRpcCBwbGFjZW1lbnQuXG4gICAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYFBvcHBlcmBdKC9hcGkvcG9wcGVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcHBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUb29sdGlwIHRpdGxlLiBaZXJvLWxlbmd0aCB0aXRsZXMgc3RyaW5nIGFyZSBuZXZlciBkaXNwbGF5ZWQuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUb29sdGlwJyxcbiAgd2l0aFRoZW1lOiB0cnVlXG59KShUb29sdGlwKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2l0aFdpZHRoLCB7IGlzV2lkdGhEb3duIH0gZnJvbSAnLi4vd2l0aFdpZHRoJztcbi8qKlxuICogRGlhbG9nIHdpbGwgcmVzcG9uc2l2ZWx5IGJlIGZ1bGwgc2NyZWVuICphdCBvciBiZWxvdyogdGhlIGdpdmVuIGJyZWFrcG9pbnRcbiAqIChkZWZhdWx0cyB0byAnc20nIGZvciBtb2JpbGUgZGV2aWNlcykuXG4gKiBOb3RpY2UgdGhhdCB0aGlzIEhpZ2hlci1vcmRlciBDb21wb25lbnQgaXMgaW5jb21wYXRpYmxlIHdpdGggc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICovXG5cbnZhciB3aXRoTW9iaWxlRGlhbG9nID0gZnVuY3Rpb24gd2l0aE1vYmlsZURpYWxvZygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBfb3B0aW9ucyRicmVha3BvaW50ID0gb3B0aW9ucy5icmVha3BvaW50LFxuICAgICAgICBicmVha3BvaW50ID0gX29wdGlvbnMkYnJlYWtwb2ludCA9PT0gdm9pZCAwID8gJ3NtJyA6IF9vcHRpb25zJGJyZWFrcG9pbnQ7XG5cbiAgICBmdW5jdGlvbiBXaXRoTW9iaWxlRGlhbG9nKHByb3BzKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgZnVsbFNjcmVlbjogaXNXaWR0aERvd24oYnJlYWtwb2ludCwgcHJvcHMud2lkdGgpXG4gICAgICB9LCBwcm9wcykpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhNb2JpbGVEaWFsb2cucHJvcFR5cGVzID0ge1xuICAgICAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLmlzUmVxdWlyZWRcbiAgICB9IDogdm9pZCAwO1xuICAgIHJldHVybiB3aXRoV2lkdGgoKShXaXRoTW9iaWxlRGlhbG9nKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhNb2JpbGVEaWFsb2c7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHdpdGhUaGVtZSBmcm9tICcuLi9zdHlsZXMvd2l0aFRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG52YXIgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gIH1cbn07XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIFpvb20gdHJhbnNpdGlvbiBjYW4gYmUgdXNlZCBmb3IgdGhlIGZsb2F0aW5nIHZhcmlhbnQgb2YgdGhlXG4gKiBbQnV0dG9uXSgvY29tcG9uZW50cy9idXR0b25zLyNmbG9hdGluZy1hY3Rpb24tYnV0dG9ucykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgWm9vbSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gWm9vbShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyBkZWZhdWx0VGltZW91dCA6IF9wcm9wcyR0aW1lb3V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FeGl0XCIsIFwic3R5bGVcIiwgXCJ0aGVtZVwiLCBcInRpbWVvdXRcIl0pO1xuXG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcmVmKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcihub2RlKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ID0gZnVuY3Rpb24gaGFuZGxlRXhpdChub2RlKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBab29tLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFpvb20pOyIsIi8qKiBAbGljZW5zZSBNYXRlcmlhbC1VSSB2NC4wLjFcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJy4vY29sb3JzJztcbmV4cG9ydCB7IGNvbG9ycyB9O1xuZXhwb3J0IHsgY3JlYXRlTXVpVGhlbWUsIGNyZWF0ZVN0eWxlcywgbWFrZVN0eWxlcywgTXVpVGhlbWVQcm92aWRlciwgc3R5bGVkLCB3aXRoU3R5bGVzLCB3aXRoVGhlbWUgfSBmcm9tICcuL3N0eWxlcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEFwcEJhciB9IGZyb20gJy4vQXBwQmFyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQXZhdGFyIH0gZnJvbSAnLi9BdmF0YXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBCYWNrZHJvcCB9IGZyb20gJy4vQmFja2Ryb3AnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBCYWRnZSB9IGZyb20gJy4vQmFkZ2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBCb3R0b21OYXZpZ2F0aW9uIH0gZnJvbSAnLi9Cb3R0b21OYXZpZ2F0aW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQm90dG9tTmF2aWdhdGlvbkFjdGlvbiB9IGZyb20gJy4vQm90dG9tTmF2aWdhdGlvbkFjdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEJveCB9IGZyb20gJy4vQm94JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQnJlYWRjcnVtYnMgfSBmcm9tICcuL0JyZWFkY3J1bWJzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQnV0dG9uIH0gZnJvbSAnLi9CdXR0b24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBCdXR0b25CYXNlIH0gZnJvbSAnLi9CdXR0b25CYXNlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2FyZCB9IGZyb20gJy4vQ2FyZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENhcmRBY3Rpb25BcmVhIH0gZnJvbSAnLi9DYXJkQWN0aW9uQXJlYSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENhcmRBY3Rpb25zIH0gZnJvbSAnLi9DYXJkQWN0aW9ucyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENhcmRDb250ZW50IH0gZnJvbSAnLi9DYXJkQ29udGVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENhcmRIZWFkZXIgfSBmcm9tICcuL0NhcmRIZWFkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDYXJkTWVkaWEgfSBmcm9tICcuL0NhcmRNZWRpYSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENoZWNrYm94IH0gZnJvbSAnLi9DaGVja2JveCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENoaXAgfSBmcm9tICcuL0NoaXAnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDaXJjdWxhclByb2dyZXNzIH0gZnJvbSAnLi9DaXJjdWxhclByb2dyZXNzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ2xpY2tBd2F5TGlzdGVuZXIgfSBmcm9tICcuL0NsaWNrQXdheUxpc3RlbmVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ29sbGFwc2UgfSBmcm9tICcuL0NvbGxhcHNlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ29udGFpbmVyIH0gZnJvbSAnLi9Db250YWluZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDc3NCYXNlbGluZSB9IGZyb20gJy4vQ3NzQmFzZWxpbmUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEaWFsb2cgfSBmcm9tICcuL0RpYWxvZyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERpYWxvZ0FjdGlvbnMgfSBmcm9tICcuL0RpYWxvZ0FjdGlvbnMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEaWFsb2dDb250ZW50IH0gZnJvbSAnLi9EaWFsb2dDb250ZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGlhbG9nQ29udGVudFRleHQgfSBmcm9tICcuL0RpYWxvZ0NvbnRlbnRUZXh0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGlhbG9nVGl0bGUgfSBmcm9tICcuL0RpYWxvZ1RpdGxlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGl2aWRlciB9IGZyb20gJy4vRGl2aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERyYXdlciB9IGZyb20gJy4vRHJhd2VyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXhwYW5zaW9uUGFuZWwgfSBmcm9tICcuL0V4cGFuc2lvblBhbmVsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXhwYW5zaW9uUGFuZWxBY3Rpb25zIH0gZnJvbSAnLi9FeHBhbnNpb25QYW5lbEFjdGlvbnMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFeHBhbnNpb25QYW5lbERldGFpbHMgfSBmcm9tICcuL0V4cGFuc2lvblBhbmVsRGV0YWlscyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEV4cGFuc2lvblBhbmVsU3VtbWFyeSB9IGZyb20gJy4vRXhwYW5zaW9uUGFuZWxTdW1tYXJ5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRmFiIH0gZnJvbSAnLi9GYWInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGYWRlIH0gZnJvbSAnLi9GYWRlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRmlsbGVkSW5wdXQgfSBmcm9tICcuL0ZpbGxlZElucHV0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRm9ybUNvbnRyb2wgfSBmcm9tICcuL0Zvcm1Db250cm9sJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRm9ybUNvbnRyb2xMYWJlbCB9IGZyb20gJy4vRm9ybUNvbnRyb2xMYWJlbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZvcm1Hcm91cCB9IGZyb20gJy4vRm9ybUdyb3VwJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRm9ybUhlbHBlclRleHQgfSBmcm9tICcuL0Zvcm1IZWxwZXJUZXh0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRm9ybUxhYmVsIH0gZnJvbSAnLi9Gb3JtTGFiZWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHcmlkIH0gZnJvbSAnLi9HcmlkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR3JpZExpc3QgfSBmcm9tICcuL0dyaWRMaXN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR3JpZExpc3RUaWxlIH0gZnJvbSAnLi9HcmlkTGlzdFRpbGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHcmlkTGlzdFRpbGVCYXIgfSBmcm9tICcuL0dyaWRMaXN0VGlsZUJhcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdyb3cgfSBmcm9tICcuL0dyb3cnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIaWRkZW4gfSBmcm9tICcuL0hpZGRlbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEljb24gfSBmcm9tICcuL0ljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJY29uQnV0dG9uIH0gZnJvbSAnLi9JY29uQnV0dG9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSW5wdXQgfSBmcm9tICcuL0lucHV0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSW5wdXRBZG9ybm1lbnQgfSBmcm9tICcuL0lucHV0QWRvcm5tZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSW5wdXRCYXNlIH0gZnJvbSAnLi9JbnB1dEJhc2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJbnB1dExhYmVsIH0gZnJvbSAnLi9JbnB1dExhYmVsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGluZWFyUHJvZ3Jlc3MgfSBmcm9tICcuL0xpbmVhclByb2dyZXNzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGluayB9IGZyb20gJy4vTGluayc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3QgfSBmcm9tICcuL0xpc3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0SXRlbSB9IGZyb20gJy4vTGlzdEl0ZW0nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0SXRlbUF2YXRhciB9IGZyb20gJy4vTGlzdEl0ZW1BdmF0YXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMaXN0SXRlbUljb24gfSBmcm9tICcuL0xpc3RJdGVtSWNvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIH0gZnJvbSAnLi9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExpc3RJdGVtVGV4dCB9IGZyb20gJy4vTGlzdEl0ZW1UZXh0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGlzdFN1YmhlYWRlciB9IGZyb20gJy4vTGlzdFN1YmhlYWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1lbnUgfSBmcm9tICcuL01lbnUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNZW51SXRlbSB9IGZyb20gJy4vTWVudUl0ZW0nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNZW51TGlzdCB9IGZyb20gJy4vTWVudUxpc3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNb2JpbGVTdGVwcGVyIH0gZnJvbSAnLi9Nb2JpbGVTdGVwcGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwsIE1vZGFsTWFuYWdlciB9IGZyb20gJy4vTW9kYWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOYXRpdmVTZWxlY3QgfSBmcm9tICcuL05hdGl2ZVNlbGVjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5vU3NyIH0gZnJvbSAnLi9Ob1Nzcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE91dGxpbmVkSW5wdXQgfSBmcm9tICcuL091dGxpbmVkSW5wdXQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYXBlciB9IGZyb20gJy4vUGFwZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQb3BvdmVyIH0gZnJvbSAnLi9Qb3BvdmVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUG9wcGVyIH0gZnJvbSAnLi9Qb3BwZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQb3J0YWwgfSBmcm9tICcuL1BvcnRhbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJhZGlvIH0gZnJvbSAnLi9SYWRpbyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJhZGlvR3JvdXAgfSBmcm9tICcuL1JhZGlvR3JvdXAnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSb290UmVmIH0gZnJvbSAnLi9Sb290UmVmJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0IH0gZnJvbSAnLi9TZWxlY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbGlkZSB9IGZyb20gJy4vU2xpZGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbmFja2JhciB9IGZyb20gJy4vU25hY2tiYXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTbmFja2JhckNvbnRlbnQgfSBmcm9tICcuL1NuYWNrYmFyQ29udGVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXAgfSBmcm9tICcuL1N0ZXAnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdGVwQnV0dG9uIH0gZnJvbSAnLi9TdGVwQnV0dG9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3RlcENvbm5lY3RvciB9IGZyb20gJy4vU3RlcENvbm5lY3Rvcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXBDb250ZW50IH0gZnJvbSAnLi9TdGVwQ29udGVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXBJY29uIH0gZnJvbSAnLi9TdGVwSWNvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0ZXBMYWJlbCB9IGZyb20gJy4vU3RlcExhYmVsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3RlcHBlciB9IGZyb20gJy4vU3RlcHBlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN2Z0ljb24gfSBmcm9tICcuL1N2Z0ljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTd2lwZWFibGVEcmF3ZXIgfSBmcm9tICcuL1N3aXBlYWJsZURyYXdlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN3aXRjaCB9IGZyb20gJy4vU3dpdGNoJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFiIH0gZnJvbSAnLi9UYWInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJsZSB9IGZyb20gJy4vVGFibGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJsZUJvZHkgfSBmcm9tICcuL1RhYmxlQm9keSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlQ2VsbCB9IGZyb20gJy4vVGFibGVDZWxsJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFibGVGb290ZXIgfSBmcm9tICcuL1RhYmxlRm9vdGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGFibGVIZWFkIH0gZnJvbSAnLi9UYWJsZUhlYWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVBhZ2luYXRpb24gfSBmcm9tICcuL1RhYmxlUGFnaW5hdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlUm93IH0gZnJvbSAnLi9UYWJsZVJvdyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlU29ydExhYmVsIH0gZnJvbSAnLi9UYWJsZVNvcnRMYWJlbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRhYnMgfSBmcm9tICcuL1RhYnMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUZXh0RmllbGQgfSBmcm9tICcuL1RleHRGaWVsZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRvb2xiYXIgfSBmcm9tICcuL1Rvb2xiYXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUb29sdGlwIH0gZnJvbSAnLi9Ub29sdGlwJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVHlwb2dyYXBoeSB9IGZyb20gJy4vVHlwb2dyYXBoeSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdpdGhNb2JpbGVEaWFsb2cgfSBmcm9tICcuL3dpdGhNb2JpbGVEaWFsb2cnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoV2lkdGggfSBmcm9tICcuL3dpdGhXaWR0aCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFpvb20gfSBmcm9tICcuL1pvb20nOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuL05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHdpdGhGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvd2l0aEZvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGByb290YCBjbGFzcy4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGBzZWxlY3RgIGNsYXNzLiAqL1xuICAgIHNlbGVjdDoge1xuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIC8vIFdoZW4gaW50ZXJhY3RpbmcgcXVpY2tseSwgdGhlIHRleHQgY2FuIGVuZCB1cCBzZWxlY3RlZC5cbiAgICAgIC8vIE5hdGl2ZSBzZWxlY3QgY2FuJ3QgYmUgc2VsZWN0ZWQgZWl0aGVyLlxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAzMixcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgIC8vIFJlc2V0XG4gICAgICB3aWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICAgIG1pbldpZHRoOiAxNixcbiAgICAgIC8vIFNvIGl0IGRvZXNuJ3QgY29sbGFwc2UuXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICAvLyBTaG93IHRoYXQgaXQncyBub3QgYW4gdGV4dCBpbnB1dFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDUpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwIC8vIFJlc2V0IENocm9tZSBzdHlsZVxuXG4gICAgICB9LFxuICAgICAgLy8gUmVtb3ZlIElFIDExIGFycm93XG4gICAgICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9LFxuICAgICAgJyZbbXVsdGlwbGVdJzoge1xuICAgICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgICAgfSxcbiAgICAgICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYElucHV0YCBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuICovXG4gICAgZmlsbGVkOiB7XG4gICAgICB3aWR0aDogJ2NhbGMoMTAwJSAtIDQ0cHgpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYElucHV0YCBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgd2lkdGg6ICdjYWxjKDEwMCUgLSA0NnB4KScsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYElucHV0YCBjb21wb25lbnQgYHNlbGVjdE1lbnVgIGNsYXNzLiAqL1xuICAgIHNlbGVjdE1lbnU6IHtcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAvLyBGaXggU2FmYXJpIHRleHRPdmVyZmxvd1xuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAvLyBSZXNldFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGBkaXNhYmxlZGAgY2xhc3MuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGBpY29uYCBjbGFzcy4gKi9cbiAgICBpY29uOiB7XG4gICAgICAvLyBXZSB1c2UgYSBwb3NpdGlvbiBhYnNvbHV0ZSBvdmVyIGEgZmxleGJveCBpbiBvcmRlciB0byBmb3J3YXJkIHRoZSBwb2ludGVyIGV2ZW50c1xuICAgICAgLy8gdG8gdGhlIGlucHV0LlxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogJ2NhbGMoNTAlIC0gMTJweCknLFxuICAgICAgLy8gQ2VudGVyIHZlcnRpY2FsbHlcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICAncG9pbnRlci1ldmVudHMnOiAnbm9uZScgLy8gRG9uJ3QgYmxvY2sgcG9pbnRlciBldmVudHMgb24gdGhlIHNlbGVjdCB1bmRlciB0aGUgaWNvbi5cblxuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdElucHV0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgbnVsbCk7XG4vKipcbiAqIEFuIGFsdGVybmF0aXZlIHRvIGA8U2VsZWN0IG5hdGl2ZSAvPmAgd2l0aCBhIG11Y2ggc21hbGxlciBidW5kbGUgc2l6ZSBmb290cHJpbnQuXG4gKi9cblxudmFyIE5hdGl2ZVNlbGVjdCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIEljb25Db21wb25lbnQgPSBfcHJvcHMkSWNvbkNvbXBvbmVudCA9PT0gdm9pZCAwID8gQXJyb3dEcm9wRG93bkljb24gOiBfcHJvcHMkSWNvbkNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXQgPSBfcHJvcHMkaW5wdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRJbnB1dCA6IF9wcm9wcyRpbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBwcm9wcy5tdWlGb3JtQ29udHJvbCxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJtdWlGb3JtQ29udHJvbFwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWyd2YXJpYW50J11cbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoaW5wdXQsIF9leHRlbmRzKHtcbiAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgTmF0aXZlU2VsZWN0SW5wdXRgLlxuICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgIGlucHV0Q29tcG9uZW50OiBOYXRpdmVTZWxlY3RJbnB1dCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICAgIHZhcmlhbnQ6IGZjcy52YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgfSwgaW5wdXRQcm9wcywgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5hdGl2ZVNlbGVjdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuTmF0aXZlU2VsZWN0Lm11aU5hbWUgPSAnU2VsZWN0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KE5hdGl2ZVNlbGVjdCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vUG9wb3Zlcic7XG5pbXBvcnQgTWVudUxpc3QgZnJvbSAnLi4vTWVudUxpc3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IHNldFJlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG52YXIgUlRMX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAncmlnaHQnXG59O1xudmFyIExUUl9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ2xlZnQnXG59O1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICAvLyBzcGVjWjogVGhlIG1heGltdW0gaGVpZ2h0IG9mIGEgc2ltcGxlIG1lbnUgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHJvd3MgbGVzcyB0aGFuIHRoZSB2aWV3XG4gICAgLy8gaGVpZ2h0LiBUaGlzIGVuc3VyZXMgYSB0YXBhYmxlIGFyZWEgb3V0c2lkZSBvZiB0aGUgc2ltcGxlIG1lbnUgd2l0aCB3aGljaCB0byBkaXNtaXNzXG4gICAgLy8gdGhlIG1lbnUuXG4gICAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gOTZweCknLFxuICAgIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBMaXN0YCBjb21wb25lbnQgdmlhIGBNZW51TGlzdGAuICovXG4gIGxpc3Q6IHtcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6ICdub25lJ1xuICB9XG59O1xudmFyIE1lbnUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnUocHJvcHMsIHJlZikge1xuICB2YXIgYXV0b0ZvY3VzUHJvcCA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXNJdGVtLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJE1lbnVMaXN0UHJvcHMgPSBwcm9wcy5NZW51TGlzdFByb3BzLFxuICAgICAgTWVudUxpc3RQcm9wcyA9IF9wcm9wcyRNZW51TGlzdFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNZW51TGlzdFByb3BzLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgUG9wb3ZlckNsYXNzZXMgPSBwcm9wcy5Qb3BvdmVyQ2xhc3NlcyxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3NlbGVjdGVkTWVudScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzSXRlbVwiLCBcIk1lbnVMaXN0UHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib25FbnRlcmluZ1wiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiUG9wb3ZlckNsYXNzZXNcIiwgXCJ0aGVtZVwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBhdXRvRm9jdXMgPSBhdXRvRm9jdXNQcm9wICE9PSB1bmRlZmluZWQgPyBhdXRvRm9jdXNQcm9wIDogIWRpc2FibGVBdXRvRm9jdXNJdGVtO1xuICB2YXIgbWVudUxpc3RBY3Rpb25zUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgZmlyc3RWYWxpZEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmaXJzdFNlbGVjdGVkSXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvckVsID0gZnVuY3Rpb24gZ2V0Q29udGVudEFuY2hvckVsKCkge1xuICAgIHJldHVybiBmaXJzdFNlbGVjdGVkSXRlbVJlZi5jdXJyZW50IHx8IGZpcnN0VmFsaWRJdGVtUmVmLmN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcoZWxlbWVudCkge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwgdGhlbWUpO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlTGlzdEtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVMaXN0S2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAndGFiS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgZmlyc3RWYWxpZEVsZW1lbnRJbmRleCA9IG51bGw7XG4gIHZhciBmaXJzdFNlbGVjdGVkSW5kZXggPSBudWxsO1xuICB2YXIgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjaGlsZC50eXBlICE9PSBSZWFjdC5GcmFnbWVudCwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoZmlyc3RWYWxpZEVsZW1lbnRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgZmlyc3RWYWxpZEVsZW1lbnRJbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIHZhciBuZXdDaGlsZFByb3BzID0gbnVsbDtcblxuICAgIGlmICh2YXJpYW50ID09PSAnc2VsZWN0ZWRNZW51JyAmJiBmaXJzdFNlbGVjdGVkSW5kZXggPT09IG51bGwgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQgJiYgIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBmaXJzdFNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSB7fTtcblxuICAgICAgaWYgKGF1dG9Gb2N1cykge1xuICAgICAgICBuZXdDaGlsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICBuZXdDaGlsZFByb3BzLnJlZiA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgICBmaXJzdFNlbGVjdGVkSXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICBzZXRSZWYoY2hpbGQucmVmLCBpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGZpcnN0VmFsaWRFbGVtZW50SW5kZXgpIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSB7XG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGluc3RhbmNlKSB7XG4gICAgICAgICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICAgICAgICBmaXJzdFZhbGlkSXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICAgIHNldFJlZihjaGlsZC5yZWYsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUG9wb3ZlciwgX2V4dGVuZHMoe1xuICAgIGdldENvbnRlbnRBbmNob3JFbDogZ2V0Q29udGVudEFuY2hvckVsLFxuICAgIGNsYXNzZXM6IFBvcG92ZXJDbGFzc2VzLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgYW5jaG9yT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgUGFwZXJQcm9wczogX2V4dGVuZHMoe30sIFBhcGVyUHJvcHMsIHtcbiAgICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLmNsYXNzZXMsIHtcbiAgICAgICAgcm9vdDogY2xhc3Nlcy5wYXBlclxuICAgICAgfSlcbiAgICB9KSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51TGlzdCwgX2V4dGVuZHMoe1xuICAgIG9uS2V5RG93bjogaGFuZGxlTGlzdEtleURvd24sXG4gICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzICYmIGZpcnN0U2VsZWN0ZWRJbmRleCA9PT0gbnVsbFxuICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGlzdCwgTWVudUxpc3RQcm9wcy5jbGFzc05hbWUpXG4gIH0pLCBpdGVtcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBET00gZWxlbWVudCB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgIChkZWZhdWx0KSwgdGhlIG1lbnUgbGlzdCAocG9zc2libHkgYSBwYXJ0aWN1bGFyIGl0ZW0gZGVwZW5kaW5nIG9uIHRoZSBtZW51IHZhcmlhbnQpIHdpbGwgcmVjZWl2ZSBmb2N1cyBvbiBvcGVuLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIGBhdXRvRm9jdXM9ZmFsc2VgLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGF1dG9Gb2N1c2AgaW5zdGVhZFxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgTWVudUxpc3RgXSgvYXBpL21lbnUtbGlzdC8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51TGlzdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6YFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYFxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBlbnRlcnMuXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNZW51IGV4aXRzLlxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGlzIHZpc2libGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcGVydHkgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXNcbiAgICogYW5kIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgcmVsYXRpdmUgdG8gdGhlIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoTWVudSk7IiwiLypcbiAqIGRlY2FmZmVpbmF0ZSBzdWdnZXN0aW9uczpcbiAqIERTMTAyOiBSZW1vdmUgdW5uZWNlc3NhcnkgY29kZSBjcmVhdGVkIGJlY2F1c2Ugb2YgaW1wbGljaXQgcmV0dXJuc1xuICogRFMyMDc6IENvbnNpZGVyIHNob3J0ZXIgdmFyaWF0aW9ucyBvZiBudWxsIGNoZWNrc1xuICogRnVsbCBkb2NzOiBodHRwczovL2dpdGh1Yi5jb20vZGVjYWZmZWluYXRlL2RlY2FmZmVpbmF0ZS9ibG9iL21hc3Rlci9kb2NzL3N1Z2dlc3Rpb25zLm1kXG4gKi9cbi8vIFBvcnRlZCBmcm9tIENvbXBhc3Ncbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Db21wYXNzL2NvbXBhc3MvYmxvYi9tYXN0ZXIvY29yZS9zdHlsZXNoZWV0cy9jb21wYXNzL3R5cG9ncmFwaHkvX3VuaXRzLnNjc3NcblxuY29uc3QgcGFyc2VVbml0ID0gcmVxdWlyZShcInBhcnNlLXVuaXRcIilcblxuY29uc3QgYmFzZUZvbnRTaXplID0gXCIxNnB4XCJcblxuLy8gRW11bGF0ZSB0aGUgc2FzcyBmdW5jdGlvbiBcInVuaXRcIlxuY29uc3QgdW5pdCA9IGxlbmd0aCA9PiBwYXJzZVVuaXQobGVuZ3RoKVsxXVxuXG4vLyBFbXVsYXRlIHRoZSBzYXNzIGZ1bmN0aW9uIFwidW5pdGxlc3NcIlxuY29uc3QgdW5pdExlc3MgPSBsZW5ndGggPT4gcGFyc2VVbml0KGxlbmd0aClbMF1cblxuLy8gQ29udmVydCBhbnkgQ1NTIDxsZW5ndGg+IG9yIDxwZXJjZW50YWdlPiB2YWx1ZSB0byBhbnkgYW5vdGhlci5cbi8vXG4vLyBAcGFyYW0gbGVuZ3RoXG4vLyAgIEEgY3NzIDxsZW5ndGg+IHZhbHVlXG4vL1xuLy8gQHBhcmFtIHRvVW5pdFxuLy8gICBTdHJpbmcgbWF0Y2hpbmcgYSBjc3MgdW5pdCBrZXl3b3JkLCBlLmcuICdlbScsICdyZW0nLCBldGMuXG4vL1xuLy8gQHBhcmFtIGZyb21Db250ZXh0XG4vLyAgIFdoZW4gY29udmVydGluZyBmcm9tIHJlbGF0aXZlIHVuaXRzLCB0aGUgYWJzb2x1dGUgbGVuZ3RoIChpbiBweCkgdG9cbi8vICAgd2hpY2ggbGVuZ3RoIHJlZmVycyAoZS5nLiBmb3IgbGVuZ3RocyBpbiBlbSB1bml0cywgd291bGQgbm9ybWFsbHkgYmUgdGhlXG4vLyAgIGZvbnQtc2l6ZSBvZiB0aGUgY3VycmVudCBlbGVtZW50KS5cbi8vXG4vLyBAcGFyYW0gdG9Db250ZXh0XG4vLyAgIEZvciBjb252ZXJ0aW5nIHRvIHJlbGF0aXZlIHVuaXRzLCB0aGUgYWJzb2x1dGUgbGVuZ3RoIGluIHB4IHRvIHdoaWNoIHRoZVxuLy8gICBvdXRwdXQgdmFsdWUgd2lsbCByZWZlci4gRGVmYXVsdHMgdG8gdGhlIHNhbWUgYXMgZnJvbUNvbnRleHQsIHNpbmNlIGl0IGlzXG4vLyAgIHJhcmVseSBuZWVkZWQuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJhc2VGb250U2l6ZSkge1xuICBpZiAoYmFzZUZvbnRTaXplID09IG51bGwpIHtcbiAgICBiYXNlRm9udFNpemUgPSBiYXNlRm9udFNpemVcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24obGVuZ3RoLCB0b1VuaXQsIGZyb21Db250ZXh0LCB0b0NvbnRleHQpIHtcbiAgICBpZiAoZnJvbUNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgZnJvbUNvbnRleHQgPSBiYXNlRm9udFNpemVcbiAgICB9XG4gICAgaWYgKHRvQ29udGV4dCA9PSBudWxsKSB7XG4gICAgICB0b0NvbnRleHQgPSBmcm9tQ29udGV4dFxuICAgIH1cbiAgICBjb25zdCBmcm9tVW5pdCA9IHVuaXQobGVuZ3RoKVxuXG4gICAgLy8gT3B0aW1pemUgZm9yIGNhc2VzIHdoZXJlIGBmcm9tYCBhbmQgYHRvYCB1bml0cyBhcmUgYWNjaWRlbnRhbGx5IHRoZSBzYW1lLlxuICAgIGlmIChmcm9tVW5pdCA9PT0gdG9Vbml0KSB7XG4gICAgICByZXR1cm4gbGVuZ3RoXG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBpbnB1dCBsZW5ndGggdG8gcGl4ZWxzLlxuICAgIGxldCBweExlbmd0aCA9IHVuaXRMZXNzKGxlbmd0aClcblxuICAgIC8vIFdhcm4gaWYgdG8gb3IgZnJvbSBjb250ZXh0IGFyZW4ndCBpbiBwaXhlbHMuXG4gICAgLy8gaWYgKHVuaXQoZnJvbUNvbnRleHQpICE9PSBcInB4XCIpIHtcbiAgICAvLyBjb25zb2xlLndhcm4oYFBhcmFtZXRlciBmcm9tQ29udGV4dCBtdXN0IHJlc29sdmUgdG8gYSB2YWx1ZSBcXFxuICAgIC8vIGluIHBpeGVsIHVuaXRzLmApXG4gICAgLy8gfVxuICAgIC8vIGlmICh1bml0KHRvQ29udGV4dCkgIT09IFwicHhcIikge1xuICAgIC8vIGNvbnNvbGUud2FybihgUGFyYW1ldGVyIHRvQ29udGV4dCBtdXN0IHJlc29sdmUgdG8gYSB2YWx1ZSBcXFxuICAgIC8vIGluIHBpeGVsIHVuaXRzLmApXG4gICAgLy8gfVxuXG4gICAgaWYgKGZyb21Vbml0ICE9PSBcInB4XCIpIHtcbiAgICAgIGlmIChmcm9tVW5pdCA9PT0gXCJlbVwiKSB7XG4gICAgICAgIHB4TGVuZ3RoID0gdW5pdExlc3MobGVuZ3RoKSAqIHVuaXRMZXNzKGZyb21Db250ZXh0KVxuICAgICAgfSBlbHNlIGlmIChmcm9tVW5pdCA9PT0gXCJyZW1cIikge1xuICAgICAgICBweExlbmd0aCA9IHVuaXRMZXNzKGxlbmd0aCkgKiB1bml0TGVzcyhiYXNlRm9udFNpemUpXG4gICAgICB9IGVsc2UgaWYgKGZyb21Vbml0ID09PSBcImV4XCIpIHtcbiAgICAgICAgcHhMZW5ndGggPSB1bml0TGVzcyhsZW5ndGgpICogdW5pdExlc3MoZnJvbUNvbnRleHQpICogMlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aFxuICAgICAgfVxuICAgICAgLy8gfSBlbHNlIGlmIChbXCJjaFwiLCBcInZ3XCIsIFwidmhcIiwgXCJ2bWluXCJdLmluY2x1ZGVzKGZyb21Vbml0KSkge1xuICAgICAgLy8gY29uc29sZS53YXJuKGAke2Zyb21Vbml0fSB1bml0cyBjYW4ndCBiZSByZWxpYWJseSBjb252ZXJ0ZWQ7IFJldHVybmluZyBcXFxuICAgICAgLy8gb3JpZ2luYWwgdmFsdWUuYClcbiAgICAgIC8vIHJldHVybiBsZW5ndGhcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvLyBjb25zb2xlLndhcm4oYCR7ZnJvbVVuaXR9IGlzIGFuIHVua25vd24gb3IgdW5zdXBwb3J0ZWQgbGVuZ3RoIHVuaXQ7IFxcXG4gICAgICAvLyBSZXR1cm5pbmcgb3JpZ2luYWwgdmFsdWUuYClcbiAgICAgIC8vIHJldHVybiBsZW5ndGhcbiAgICAgIC8vIH1cbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGxlbmd0aCBpbiBwaXhlbHMgdG8gdGhlIG91dHB1dCB1bml0XG4gICAgbGV0IG91dHB1dExlbmd0aCA9IHB4TGVuZ3RoXG4gICAgaWYgKHRvVW5pdCAhPT0gXCJweFwiKSB7XG4gICAgICBpZiAodG9Vbml0ID09PSBcImVtXCIpIHtcbiAgICAgICAgb3V0cHV0TGVuZ3RoID0gcHhMZW5ndGggLyB1bml0TGVzcyh0b0NvbnRleHQpXG4gICAgICB9IGVsc2UgaWYgKHRvVW5pdCA9PT0gXCJyZW1cIikge1xuICAgICAgICBvdXRwdXRMZW5ndGggPSBweExlbmd0aCAvIHVuaXRMZXNzKGJhc2VGb250U2l6ZSlcbiAgICAgIH0gZWxzZSBpZiAodG9Vbml0ID09PSBcImV4XCIpIHtcbiAgICAgICAgb3V0cHV0TGVuZ3RoID0gcHhMZW5ndGggLyB1bml0TGVzcyh0b0NvbnRleHQpIC8gMlxuICAgICAgICAvLyB9IGVsc2UgaWYgKFtcImNoXCIsIFwidndcIiwgXCJ2aFwiLCBcInZtaW5cIl0uaW5jbHVkZXModG9Vbml0KSkge1xuICAgICAgICAvLyBjb25zb2xlLndhcm4oYCR7dG9Vbml0fSB1bml0cyBjYW4ndCBiZSByZWxpYWJseSBjb252ZXJ0ZWQ7IFJldHVybmluZyBcXFxuICAgICAgICAvLyBvcmlnaW5hbCB2YWx1ZS5gKVxuICAgICAgICAvLyByZXR1cm4gbGVuZ3RoXG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUud2FybihgJHt0b1VuaXR9IGlzIGFuIHVua25vd24gb3IgdW5zdXBwb3J0ZWQgbGVuZ3RoIHVuaXQ7IFxcXG4gICAgICAgIC8vIFJldHVybmluZyBvcmlnaW5hbCB2YWx1ZS5gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUZsb2F0KG91dHB1dExlbmd0aC50b0ZpeGVkKDUpKSArIHRvVW5pdFxuICB9XG59XG4iLCJ2YXIgYXJyYXlXaXRoSG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0FycmF5OyIsImltcG9ydCBpc0Jyb3dzZXIgZnJvbSAnLi9pc0Jyb3dzZXInO1xuXG5jb25zdCBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG5sZXQgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAobGV0IGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgIHRpbWVvdXREdXJhdGlvbiA9IDE7XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIGxldCBjYWxsZWQgPSBmYWxzZVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlXG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY2FsbGVkID0gZmFsc2VcbiAgICAgIGZuKClcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgbGV0IHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZVxuXG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG5leHBvcnQgZGVmYXVsdCAoc3VwcG9ydHNNaWNyb1Rhc2tzXG4gID8gbWljcm90YXNrRGVib3VuY2VcbiAgOiB0YXNrRGVib3VuY2UpO1xuIiwiZXhwb3J0IGRlZmF1bHQgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbiIsIi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgY29uc3QgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gKFxuICAgIGZ1bmN0aW9uVG9DaGVjayAmJlxuICAgIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICk7XG59XG4iLCIvKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIGNvbnN0IHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY29uc3QgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG4iLCIvKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgY29uc3QgeyBvdmVyZmxvdywgb3ZlcmZsb3dYLCBvdmVyZmxvd1kgfSA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuIiwiaW1wb3J0IGlzQnJvd3NlciBmcm9tICcuL2lzQnJvd3Nlcic7XG5cbmNvbnN0IGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbmNvbnN0IGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cbiIsImltcG9ydCBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkgZnJvbSAnLi9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuaW1wb3J0IGlzSUUgZnJvbSAnLi9pc0lFJztcbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgY29uc3Qgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIGxldCBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIGNvbnN0IG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoXG4gICAgWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiZcbiAgICBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYydcbiAgKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cbiIsIi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuIiwiaW1wb3J0IGlzT2Zmc2V0Q29udGFpbmVyIGZyb20gJy4vaXNPZmZzZXRDb250YWluZXInO1xuaW1wb3J0IGdldFJvb3QgZnJvbSAnLi9nZXRSb290JztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRPZmZzZXRQYXJlbnQnO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIGNvbnN0IG9yZGVyID1cbiAgICBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJlxuICAgIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICBjb25zdCBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgY29uc3QgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgY29uc3QgeyBjb21tb25BbmNlc3RvckNvbnRhaW5lciB9ID0gcmFuZ2U7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuICBpZiAoXG4gICAgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJlxuICAgICAgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSB8fFxuICAgIHN0YXJ0LmNvbnRhaW5zKGVuZClcbiAgKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICBjb25zdCBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cbiIsImltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRPZmZzZXRQYXJlbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIGNvbnN0IHsgbm9kZU5hbWUgfSA9IGVsZW1lbnQ7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnRcbiAgKTtcbn1cbiIsIi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCwgc2lkZSA9ICd0b3AnKSB7XG4gIGNvbnN0IHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgY29uc3QgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgY29uc3Qgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG4iLCIvKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIGNvbnN0IHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIGNvbnN0IHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gKFxuICAgIHBhcnNlRmxvYXQoc3R5bGVzW2Bib3JkZXIke3NpZGVBfVdpZHRoYF0sIDEwKSArXG4gICAgcGFyc2VGbG9hdChzdHlsZXNbYGJvcmRlciR7c2lkZUJ9V2lkdGhgXSwgMTApXG4gICk7XG59XG4iLCJpbXBvcnQgaXNJRSBmcm9tICcuL2lzSUUnO1xuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KFxuICAgIGJvZHlbYG9mZnNldCR7YXhpc31gXSxcbiAgICBib2R5W2BzY3JvbGwke2F4aXN9YF0sXG4gICAgaHRtbFtgY2xpZW50JHtheGlzfWBdLFxuICAgIGh0bWxbYG9mZnNldCR7YXhpc31gXSxcbiAgICBodG1sW2BzY3JvbGwke2F4aXN9YF0sXG4gICAgaXNJRSgxMClcbiAgICAgID8gKHBhcnNlSW50KGh0bWxbYG9mZnNldCR7YXhpc31gXSkgKyBcbiAgICAgIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbYG1hcmdpbiR7YXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0J31gXSkgKyBcbiAgICAgIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbYG1hcmdpbiR7YXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCd9YF0pKVxuICAgIDogMCBcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgfTtcbn1cbiIsIi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4ge1xuICAgIC4uLm9mZnNldHMsXG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0LFxuICB9O1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0Qm9yZGVyc1NpemUgZnJvbSAnLi9nZXRCb3JkZXJzU2l6ZSc7XG5pbXBvcnQgZ2V0V2luZG93U2l6ZXMgZnJvbSAnLi9nZXRXaW5kb3dTaXplcyc7XG5pbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4vZ2V0Q2xpZW50UmVjdCc7XG5pbXBvcnQgaXNJRSBmcm9tICcuL2lzSUUnO1xuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIGxldCByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgY29uc3Qgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9XG4gIGNhdGNoKGUpe31cblxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wLFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgY29uc3Qgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIGNvbnN0IHdpZHRoID1cbiAgICBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICBjb25zdCBoZWlnaHQgPVxuICAgIHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICBsZXQgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIGxldCB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgaW5jbHVkZVNjcm9sbCBmcm9tICcuL2luY2x1ZGVTY3JvbGwnO1xuaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBydW5Jc0lFIGZyb20gJy4vaXNJRSc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuL2dldENsaWVudFJlY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCwgZml4ZWRQb3NpdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IGlzSUUxMCA9IHJ1bklzSUUoMTApO1xuICBjb25zdCBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgY29uc3QgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgY29uc3QgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICBjb25zdCBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIGNvbnN0IHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICBjb25zdCBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIGNvbnN0IGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZihmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgbGV0IG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0LFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICBjb25zdCBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICBjb25zdCBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChcbiAgICBpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb25cbiAgICAgID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudClcbiAgICAgIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWSdcbiAgKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuIiwiaW1wb3J0IGdldFNjcm9sbCBmcm9tICcuL2dldFNjcm9sbCc7XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCwgc3VidHJhY3QgPSBmYWxzZSkge1xuICBjb25zdCBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIGNvbnN0IG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgaXNJRSBmcm9tICcuL2lzSUUnO1xuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICBsZXQgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbn1cbiIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSAnLi9nZXRTY3JvbGxQYXJlbnQnO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcbmltcG9ydCBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IGZyb20gJy4vZmluZENvbW1vbk9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIGZyb20gJy4vZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlJztcbmltcG9ydCBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUgZnJvbSAnLi9nZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUnO1xuaW1wb3J0IGdldFdpbmRvd1NpemVzIGZyb20gJy4vZ2V0V2luZG93U2l6ZXMnO1xuaW1wb3J0IGlzRml4ZWQgZnJvbSAnLi9pc0ZpeGVkJztcbmltcG9ydCBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCc7XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kYXJpZXMoXG4gIHBvcHBlcixcbiAgcmVmZXJlbmNlLFxuICBwYWRkaW5nLFxuICBib3VuZGFyaWVzRWxlbWVudCxcbiAgZml4ZWRQb3NpdGlvbiA9IGZhbHNlXG4pIHtcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICBsZXQgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIGNvbnN0IG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcgKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9XG5cbiAgZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIGxldCBib3VuZGFyaWVzTm9kZTtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIGNvbnN0IG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoXG4gICAgICBib3VuZGFyaWVzTm9kZSxcbiAgICAgIG9mZnNldFBhcmVudCxcbiAgICAgIGZpeGVkUG9zaXRpb25cbiAgICApO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCk7XG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIGNvbnN0IGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDsgXG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwOyBcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwOyBcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7IFxuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuIiwiaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4vZ2V0Q2xpZW50UmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50LCBleGNsdWRlU2Nyb2xsID0gZmFsc2UpIHtcbiAgY29uc3QgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIGNvbnN0IHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIGNvbnN0IG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgY29uc3Qgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuIiwiaW1wb3J0IGdldEJvdW5kYXJpZXMgZnJvbSAnLi4vdXRpbHMvZ2V0Qm91bmRhcmllcyc7XG5cbmZ1bmN0aW9uIGdldEFyZWEoeyB3aWR0aCwgaGVpZ2h0IH0pIHtcbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICBwbGFjZW1lbnQsXG4gIHJlZlJlY3QsXG4gIHBvcHBlcixcbiAgcmVmZXJlbmNlLFxuICBib3VuZGFyaWVzRWxlbWVudCxcbiAgcGFkZGluZyA9IDBcbikge1xuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgY29uc3QgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoXG4gICAgcG9wcGVyLFxuICAgIHJlZmVyZW5jZSxcbiAgICBwYWRkaW5nLFxuICAgIGJvdW5kYXJpZXNFbGVtZW50XG4gICk7XG5cbiAgY29uc3QgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcCxcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0LFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbSxcbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3Qgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cylcbiAgICAubWFwKGtleSA9PiAoe1xuICAgICAga2V5LFxuICAgICAgLi4ucmVjdHNba2V5XSxcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSksXG4gICAgfSkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGIuYXJlYSAtIGEuYXJlYSk7XG5cbiAgY29uc3QgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihcbiAgICAoeyB3aWR0aCwgaGVpZ2h0IH0pID0+XG4gICAgICB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHRcbiAgKTtcblxuICBjb25zdCBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMFxuICAgID8gZmlsdGVyZWRBcmVhc1swXS5rZXlcbiAgICA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICBjb25zdCB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gYC0ke3ZhcmlhdGlvbn1gIDogJycpO1xufVxuIiwiaW1wb3J0IGZpbmRDb21tb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9maW5kQ29tbW9uT2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUgZnJvbSAnLi9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUnO1xuaW1wb3J0IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50JztcblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBmaXhlZFBvc2l0aW9uID0gbnVsbCkge1xuICBjb25zdCBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuIiwiLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgY29uc3Qgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgY29uc3QgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgY29uc3QgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeCxcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIGNvbnN0IGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgbWF0Y2hlZCA9PiBoYXNoW21hdGNoZWRdKTtcbn1cbiIsImltcG9ydCBnZXRPdXRlclNpemVzIGZyb20gJy4vZ2V0T3V0ZXJTaXplcyc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi9nZXRPcHBvc2l0ZVBsYWNlbWVudCc7XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIGNvbnN0IHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICBjb25zdCBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHQsXG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICBjb25zdCBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgY29uc3QgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIGNvbnN0IHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIGNvbnN0IG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgY29uc3Qgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9XG4gICAgcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gK1xuICAgIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtXG4gICAgcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9XG4gICAgICByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9XG4gICAgICByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuIiwiLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4JztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIGNvbnN0IG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkXG4gICAgPyBtb2RpZmllcnNcbiAgICA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgY29uc3QgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChjdXIgPT4gY3VyW3Byb3BdID09PSB2YWx1ZSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICBjb25zdCBtYXRjaCA9IGZpbmQoYXJyLCBvYmogPT4gb2JqW3Byb3BdID09PSB2YWx1ZSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG4iLCIvKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKFxuICAgICh7IG5hbWUsIGVuYWJsZWQgfSkgPT4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWVcbiAgKTtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIGNvbnN0IHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIGNvbnN0IHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIGNvbnN0IHRvQ2hlY2sgPSBwcmVmaXggPyBgJHtwcmVmaXh9JHt1cHBlclByb3B9YCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIGNvbnN0IG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cbiIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSAnLi9nZXRTY3JvbGxQYXJlbnQnO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICBjb25zdCBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgY29uc3QgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKFxuICAgICAgZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSxcbiAgICAgIGV2ZW50LFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBzY3JvbGxQYXJlbnRzXG4gICAgKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMoXG4gIHJlZmVyZW5jZSxcbiAgb3B0aW9ucyxcbiAgc3RhdGUsXG4gIHVwZGF0ZUJvdW5kXG4pIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBjb25zdCBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhcbiAgICBzY3JvbGxFbGVtZW50LFxuICAgICdzY3JvbGwnLFxuICAgIHN0YXRlLnVwZGF0ZUJvdW5kLFxuICAgIHN0YXRlLnNjcm9sbFBhcmVudHNcbiAgKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cbiIsImltcG9ydCByZW1vdmVFdmVudExpc3RlbmVycyBmcm9tICcuLi91dGlscy9yZW1vdmVFdmVudExpc3RlbmVycyc7XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG4iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKHRhcmdldCA9PiB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cbiIsIi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbiIsImltcG9ydCBpc051bWVyaWMgZnJvbSAnLi9pc051bWVyaWMnO1xuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGxldCB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFxuICAgICAgWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT1cbiAgICAgICAgLTEgJiZcbiAgICAgIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pXG4gICAgKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSBmcm9tICcuLi91dGlscy9nZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUnO1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vdXRpbHMvZmluZCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL3V0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0Um91bmRlZE9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0Um91bmRlZE9mZnNldHMnO1xuaW1wb3J0IGlzQnJvd3NlciBmcm9tICcuLi91dGlscy9pc0Jyb3dzZXInO1xuXG5jb25zdCBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHgsIHkgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHsgcG9wcGVyIH0gPSBkYXRhLm9mZnNldHM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG4gIGNvbnN0IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoXG4gICAgZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsXG4gICAgbW9kaWZpZXIgPT4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnXG4gICkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnXG4gICAgKTtcbiAgfVxuICBjb25zdCBncHVBY2NlbGVyYXRpb24gPVxuICAgIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvblxuICAgICAgOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICBjb25zdCBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIGNvbnN0IHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uLFxuICB9O1xuXG4gIGNvbnN0IG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhcbiAgICBkYXRhLFxuICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94XG4gICk7XG5cbiAgY29uc3Qgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIGNvbnN0IHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIGNvbnN0IHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIGxldCBsZWZ0LCB0b3A7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSBgdHJhbnNsYXRlM2QoJHtsZWZ0fXB4LCAke3RvcH1weCwgMClgO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICBjb25zdCBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgY29uc3QgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gYCR7c2lkZUF9LCAke3NpZGVCfWA7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnQsXG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IHsgLi4uYXR0cmlidXRlcywgLi4uZGF0YS5hdHRyaWJ1dGVzIH07XG4gIGRhdGEuc3R5bGVzID0geyAuLi5zdHlsZXMsIC4uLmRhdGEuc3R5bGVzIH07XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSB7IC4uLmRhdGEub2Zmc2V0cy5hcnJvdywgLi4uZGF0YS5hcnJvd1N0eWxlcyB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSAnLi9maW5kJztcblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKFxuICBtb2RpZmllcnMsXG4gIHJlcXVlc3RpbmdOYW1lLFxuICByZXF1ZXN0ZWROYW1lXG4pIHtcbiAgY29uc3QgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCAoeyBuYW1lIH0pID0+IG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lKTtcblxuICBjb25zdCBpc1JlcXVpcmVkID1cbiAgICAhIXJlcXVlc3RpbmcgJiZcbiAgICBtb2RpZmllcnMuc29tZShtb2RpZmllciA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmXG4gICAgICAgIG1vZGlmaWVyLmVuYWJsZWQgJiZcbiAgICAgICAgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyXG4gICAgICApO1xuICAgIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIGNvbnN0IHJlcXVlc3RpbmcgPSBgXFxgJHtyZXF1ZXN0aW5nTmFtZX1cXGBgO1xuICAgIGNvbnN0IHJlcXVlc3RlZCA9IGBcXGAke3JlcXVlc3RlZE5hbWV9XFxgYDtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgJHtyZXF1ZXN0ZWR9IG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICR7cmVxdWVzdGluZ30gbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAke3JlcXVlc3Rpbmd9IWBcbiAgICApO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuIiwiLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBbXG4gICdhdXRvLXN0YXJ0JyxcbiAgJ2F1dG8nLFxuICAnYXV0by1lbmQnLFxuICAndG9wLXN0YXJ0JyxcbiAgJ3RvcCcsXG4gICd0b3AtZW5kJyxcbiAgJ3JpZ2h0LXN0YXJ0JyxcbiAgJ3JpZ2h0JyxcbiAgJ3JpZ2h0LWVuZCcsXG4gICdib3R0b20tZW5kJyxcbiAgJ2JvdHRvbScsXG4gICdib3R0b20tc3RhcnQnLFxuICAnbGVmdC1lbmQnLFxuICAnbGVmdCcsXG4gICdsZWZ0LXN0YXJ0Jyxcbl07XG4iLCJpbXBvcnQgcGxhY2VtZW50cyBmcm9tICcuLi9tZXRob2RzL3BsYWNlbWVudHMnO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbmNvbnN0IHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCwgY291bnRlciA9IGZhbHNlKSB7XG4gIGNvbnN0IGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgY29uc3QgYXJyID0gdmFsaWRQbGFjZW1lbnRzXG4gICAgLnNsaWNlKGluZGV4ICsgMSlcbiAgICAuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG4iLCJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQnO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uIGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uJztcbmltcG9ydCBnZXRQb3BwZXJPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFBvcHBlck9mZnNldHMnO1xuaW1wb3J0IHJ1bk1vZGlmaWVycyBmcm9tICcuLi91dGlscy9ydW5Nb2RpZmllcnMnO1xuaW1wb3J0IGdldEJvdW5kYXJpZXMgZnJvbSAnLi4vdXRpbHMvZ2V0Qm91bmRhcmllcyc7XG5pbXBvcnQgaXNNb2RpZmllckVuYWJsZWQgZnJvbSAnLi4vdXRpbHMvaXNNb2RpZmllckVuYWJsZWQnO1xuaW1wb3J0IGNsb2Nrd2lzZSBmcm9tICcuLi91dGlscy9jbG9ja3dpc2UnO1xuXG5jb25zdCBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnLFxufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgY29uc3QgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoXG4gICAgZGF0YS5pbnN0YW5jZS5wb3BwZXIsXG4gICAgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsXG4gICAgb3B0aW9ucy5wYWRkaW5nLFxuICAgIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsXG4gICAgZGF0YS5wb3NpdGlvbkZpeGVkXG4gICk7XG5cbiAgbGV0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGxldCBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGxldCB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIGxldCBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIGNvbnN0IHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIGNvbnN0IHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIGNvbnN0IG92ZXJsYXBzUmVmID1cbiAgICAgIChwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAncmlnaHQnICYmXG4gICAgICAgIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSkgfHxcbiAgICAgIChwbGFjZW1lbnQgPT09ICd0b3AnICYmXG4gICAgICAgIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSkgfHxcbiAgICAgIChwbGFjZW1lbnQgPT09ICdib3R0b20nICYmXG4gICAgICAgIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKSk7XG5cbiAgICBjb25zdCBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgY29uc3Qgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIGNvbnN0IG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICBjb25zdCBvdmVyZmxvd3NCb3R0b20gPVxuICAgICAgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgY29uc3Qgb3ZlcmZsb3dzQm91bmRhcmllcyA9XG4gICAgICAocGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCkgfHxcbiAgICAgIChwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3ApIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICBjb25zdCBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgPVxuICAgICAgISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmXG4gICAgICAoKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQpIHx8XG4gICAgICAgIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQpIHx8XG4gICAgICAgICghaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wKSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pKTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiBwb3BwZXIgY29udGVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIGNvbnN0IGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPVxuICAgICAgISFvcHRpb25zLmZsaXBWYXJpYXRpb25zQnlDb250ZW50ICYmXG4gICAgICAoKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0KSB8fFxuICAgICAgICAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0xlZnQpIHx8XG4gICAgICAgICghaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzQm90dG9tKSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApKTtcblxuICAgIGNvbnN0IGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSB7XG4gICAgICAgIC4uLmRhdGEub2Zmc2V0cy5wb3BwZXIsXG4gICAgICAgIC4uLmdldFBvcHBlck9mZnNldHMoXG4gICAgICAgICAgZGF0YS5pbnN0YW5jZS5wb3BwZXIsXG4gICAgICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgICBkYXRhLnBsYWNlbWVudFxuICAgICAgICApLFxuICAgICAgfTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBpc051bWVyaWMgZnJvbSAnLi4vdXRpbHMvaXNOdW1lcmljJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vdXRpbHMvZmluZCc7XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgY29uc3Qgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICBjb25zdCB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgY29uc3QgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICBsZXQgZWxlbWVudDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgbGV0IHNpemU7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IHx8IDBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlT2Zmc2V0KFxuICBvZmZzZXQsXG4gIHBvcHBlck9mZnNldHMsXG4gIHJlZmVyZW5jZU9mZnNldHMsXG4gIGJhc2VQbGFjZW1lbnRcbikge1xuICBjb25zdCBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgY29uc3QgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgY29uc3QgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnJhZyA9PiBmcmFnLnRyaW0oKSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIGNvbnN0IGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihcbiAgICBmaW5kKGZyYWdtZW50cywgZnJhZyA9PiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTEpXG4gICk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICBjb25zdCBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgbGV0IG9wcyA9IGRpdmlkZXIgIT09IC0xXG4gICAgPyBbXG4gICAgICAgIGZyYWdtZW50c1xuICAgICAgICAgIC5zbGljZSgwLCBkaXZpZGVyKVxuICAgICAgICAgIC5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLFxuICAgICAgICBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoXG4gICAgICAgICAgZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKVxuICAgICAgICApLFxuICAgICAgXVxuICAgIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcCgob3AsIGluZGV4KSA9PiB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodClcbiAgICAgID8gJ2hlaWdodCdcbiAgICAgIDogJ3dpZHRoJztcbiAgICBsZXQgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gKFxuICAgICAgb3BcbiAgICAgICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAgICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgICAgICAucmVkdWNlKChhLCBiKSA9PiB7XG4gICAgICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgICAgIC5tYXAoc3RyID0+IHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykpXG4gICAgKTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKChvcCwgaW5kZXgpID0+IHtcbiAgICBvcC5mb3JFYWNoKChmcmFnLCBpbmRleDIpID0+IHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9mZnNldChkYXRhLCB7IG9mZnNldCB9KSB7XG4gIGNvbnN0IHsgcGxhY2VtZW50LCBvZmZzZXRzOiB7IHBvcHBlciwgcmVmZXJlbmNlIH0gfSA9IGRhdGE7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICBsZXQgb2Zmc2V0cztcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgYXBwbHlTdHlsZSwgeyBhcHBseVN0eWxlT25Mb2FkIH0gZnJvbSAnLi9hcHBseVN0eWxlJztcbmltcG9ydCBjb21wdXRlU3R5bGUgZnJvbSAnLi9jb21wdXRlU3R5bGUnO1xuaW1wb3J0IGFycm93IGZyb20gJy4vYXJyb3cnO1xuaW1wb3J0IGZsaXAgZnJvbSAnLi9mbGlwJztcbmltcG9ydCBrZWVwVG9nZXRoZXIgZnJvbSAnLi9rZWVwVG9nZXRoZXInO1xuaW1wb3J0IG9mZnNldCBmcm9tICcuL29mZnNldCc7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gJy4vcHJldmVudE92ZXJmbG93JztcbmltcG9ydCBzaGlmdCBmcm9tICcuL3NoaWZ0JztcbmltcG9ydCBoaWRlIGZyb20gJy4vaGlkZSc7XG5pbXBvcnQgaW5uZXIgZnJvbSAnLi9pbm5lcic7XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdCxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMCxcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCcsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlcixcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJyxcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnM9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uczogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zQnlDb250ZW50PWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHBvcHBlciBlbGVtZW50IG92ZXJsYXBzIGl0cyByZWZlcmVuY2UgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zQnlDb250ZW50OiBmYWxzZSxcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyLFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGUsXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnLFxuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkLFxuICB9LFxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuIiwiaW1wb3J0IG1vZGlmaWVycyBmcm9tICcuLi9tb2RpZmllcnMvaW5kZXgnO1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6ICgpID0+IHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiAoKSA9PiB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnMsXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG4iLCIvKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIGNvbnN0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGNvbnN0IHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIGNvbnN0IHsgcmVmZXJlbmNlLCBwb3BwZXIgfSA9IGRhdGEub2Zmc2V0cztcbiAgICBjb25zdCBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgY29uc3Qgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICBjb25zdCBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICBjb25zdCBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogeyBbc2lkZV06IHJlZmVyZW5jZVtzaWRlXSB9LFxuICAgICAgZW5kOiB7XG4gICAgICAgIFtzaWRlXTogcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0geyAuLi5wb3BwZXIsIC4uLnNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0gfTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi91dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldEJvdW5kYXJpZXMgZnJvbSAnLi4vdXRpbHMvZ2V0Qm91bmRhcmllcyc7XG5pbXBvcnQgZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIGZyb20gJy4uL3V0aWxzL2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSc7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIGxldCBib3VuZGFyaWVzRWxlbWVudCA9XG4gICAgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIGNvbnN0IHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICBjb25zdCBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICBjb25zdCB7IHRvcCwgbGVmdCwgW3RyYW5zZm9ybVByb3BdOiB0cmFuc2Zvcm0gfSA9IHBvcHBlclN0eWxlcztcbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICBjb25zdCBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhcbiAgICBkYXRhLmluc3RhbmNlLnBvcHBlcixcbiAgICBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSxcbiAgICBvcHRpb25zLnBhZGRpbmcsXG4gICAgYm91bmRhcmllc0VsZW1lbnQsXG4gICAgZGF0YS5wb3NpdGlvbkZpeGVkXG4gICk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIGNvbnN0IG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgbGV0IHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgY29uc3QgY2hlY2sgPSB7XG4gICAgcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKFxuICAgICAgICBwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJlxuICAgICAgICAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IFtwbGFjZW1lbnRdOiB2YWx1ZSB9O1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgY29uc3QgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIGxldCB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAoXG4gICAgICAgIHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmXG4gICAgICAgICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2VcbiAgICAgICkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKFxuICAgICAgICAgIHBvcHBlclttYWluU2lkZV0sXG4gICAgICAgICAgYm91bmRhcmllc1twbGFjZW1lbnRdIC1cbiAgICAgICAgICAgIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgW21haW5TaWRlXTogdmFsdWUgfTtcbiAgICB9LFxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2gocGxhY2VtZW50ID0+IHtcbiAgICBjb25zdCBzaWRlID1cbiAgICAgIFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0geyAuLi5wb3BwZXIsIC4uLmNoZWNrW3NpZGVdKHBsYWNlbWVudCkgfTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIGNvbnN0IHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICBjb25zdCBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIGNvbnN0IG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID1cbiAgICAgIGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGdldE91dGVyU2l6ZXMgZnJvbSAnLi4vdXRpbHMvZ2V0T3V0ZXJTaXplcyc7XG5pbXBvcnQgaXNNb2RpZmllclJlcXVpcmVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZCc7XG5pbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4uL3V0aWxzL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgbGV0IGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50ISdcbiAgICAgICk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIGNvbnN0IGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIGNvbnN0IHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgY29uc3Qgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICBjb25zdCBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICBjb25zdCBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09XG4gICAgICBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPVxuICAgICAgcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgY29uc3QgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIGNvbnN0IGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIGNvbnN0IHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1tgbWFyZ2luJHtzaWRlQ2FwaXRhbGl6ZWR9YF0sIDEwKTtcbiAgY29uc3QgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzW2Bib3JkZXIke3NpZGVDYXBpdGFsaXplZH1XaWR0aGBdLCAxMCk7XG4gIGxldCBzaWRlVmFsdWUgPVxuICAgIGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0ge1xuICAgIFtzaWRlXTogTWF0aC5yb3VuZChzaWRlVmFsdWUpLFxuICAgIFthbHRTaWRlXTogJycsIC8vIG1ha2Ugc3VyZSB0byB1bnNldCBhbnkgZXZlbnR1YWwgYWx0U2lkZSB2YWx1ZSBmcm9tIHRoZSBET00gbm9kZVxuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cbiIsImltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICBjb25zdCBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9XG4gICAgcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC1cbiAgICAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgaXNNb2RpZmllclJlcXVpcmVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZCc7XG5pbXBvcnQgZmluZCBmcm9tICcuLi91dGlscy9maW5kJztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGNvbnN0IHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICBjb25zdCBib3VuZCA9IGZpbmQoXG4gICAgZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsXG4gICAgbW9kaWZpZXIgPT4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdydcbiAgKS5ib3VuZGFyaWVzO1xuXG4gIGlmIChcbiAgICByZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fFxuICAgIHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8XG4gICAgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHxcbiAgICByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdFxuICApIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IHsgcm91bmQsIGZsb29yIH0gPSBNYXRoO1xuICBjb25zdCBub1JvdW5kID0gdiA9PiB2O1xuICBcbiAgY29uc3QgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICBjb25zdCBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7XG4gIFxuICBjb25zdCBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICBjb25zdCBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIGNvbnN0IHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICBjb25zdCBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIGNvbnN0IGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmRcbiAgICA/IG5vUm91bmRcbiAgICA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5XG4gICAgPyByb3VuZFxuICAgIDogZmxvb3I7XG4gIGNvbnN0IHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihcbiAgICAgIGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmRcbiAgICAgICAgPyBwb3BwZXIubGVmdCAtIDFcbiAgICAgICAgOiBwb3BwZXIubGVmdFxuICAgICksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodCksXG4gIH07XG59XG4iLCJpbXBvcnQgc2V0U3R5bGVzIGZyb20gJy4uL3V0aWxzL3NldFN0eWxlcyc7XG5pbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tICcuLi91dGlscy9zZXRBdHRyaWJ1dGVzJztcbmltcG9ydCBnZXRSZWZlcmVuY2VPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFJlZmVyZW5jZU9mZnNldHMnO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50JztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChcbiAgcmVmZXJlbmNlLFxuICBwb3BwZXIsXG4gIG9wdGlvbnMsXG4gIG1vZGlmaWVyT3B0aW9ucyxcbiAgc3RhdGVcbikge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgY29uc3QgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBjb25zdCBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChcbiAgICBvcHRpb25zLnBsYWNlbWVudCxcbiAgICByZWZlcmVuY2VPZmZzZXRzLFxuICAgIHBvcHBlcixcbiAgICByZWZlcmVuY2UsXG4gICAgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCxcbiAgICBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmdcbiAgKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cbiIsIi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG4iLCIvLyBVdGlsc1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi91dGlscy9pc0Z1bmN0aW9uJztcblxuLy8gTWV0aG9kc1xuaW1wb3J0IHVwZGF0ZSBmcm9tICcuL21ldGhvZHMvdXBkYXRlJztcbmltcG9ydCBkZXN0cm95IGZyb20gJy4vbWV0aG9kcy9kZXN0cm95JztcbmltcG9ydCBlbmFibGVFdmVudExpc3RlbmVycyBmcm9tICcuL21ldGhvZHMvZW5hYmxlRXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IGRpc2FibGVFdmVudExpc3RlbmVycyBmcm9tICcuL21ldGhvZHMvZGlzYWJsZUV2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBEZWZhdWx0cyBmcm9tICcuL21ldGhvZHMvZGVmYXVsdHMnO1xuaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi9tZXRob2RzL3BsYWNlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3BwZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zID0ge30pIHtcbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4uUG9wcGVyLkRlZmF1bHRzLCAuLi5vcHRpb25zIH07XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXSxcbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh7XG4gICAgICAuLi5Qb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLFxuICAgICAgLi4ub3B0aW9ucy5tb2RpZmllcnMsXG4gICAgfSkuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSB7XG4gICAgICAgIC8vIElmIGl0J3MgYSBidWlsdC1pbiBtb2RpZmllciwgdXNlIGl0IGFzIGJhc2VcbiAgICAgICAgLi4uKFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30pLFxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgY3VzdG9tIG9wdGlvbnMsIG92ZXJyaWRlIGFuZCBtZXJnZSB3aXRoIGRlZmF1bHQgb25lc1xuICAgICAgICAuLi4ob3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpXG4gICAgICAubWFwKG5hbWUgPT4gKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSxcbiAgICAgIH0pKVxuICAgICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5vcmRlciAtIGIub3JkZXIpO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2gobW9kaWZpZXJPcHRpb25zID0+IHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoXG4gICAgICAgICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgICAgICAgdGhpcy5wb3BwZXIsXG4gICAgICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgICAgIG1vZGlmaWVyT3B0aW9ucyxcbiAgICAgICAgICB0aGlzLnN0YXRlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgY29uc3QgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcbiAgdXBkYXRlKCkge1xuICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gIH1cbiAgZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gIH1cbiAgZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICovXG4gIHNjaGVkdWxlVXBkYXRlID0gKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTtcblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAqXG4gICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICogQHN0YXRpY1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgKiBAbWVtYmVyIFV0aWxzXG4gICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICovXG4gIHN0YXRpYyBVdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5cbiAgc3RhdGljIHBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gIHN0YXRpYyBEZWZhdWx0cyA9IERlZmF1bHRzO1xufVxuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG4iLCJpbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuaW1wb3J0IGdldFJlZmVyZW5jZU9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cyc7XG5pbXBvcnQgZ2V0UG9wcGVyT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRQb3BwZXJPZmZzZXRzJztcbmltcG9ydCBydW5Nb2RpZmllcnMgZnJvbSAnLi4vdXRpbHMvcnVuTW9kaWZpZXJzJztcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge30sXG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKFxuICAgIHRoaXMuc3RhdGUsXG4gICAgdGhpcy5wb3BwZXIsXG4gICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWRcbiAgKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChcbiAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50LFxuICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgdGhpcy5wb3BwZXIsXG4gICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nXG4gICk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHMoXG4gICAgdGhpcy5wb3BwZXIsXG4gICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSxcbiAgICBkYXRhLnBsYWNlbWVudFxuICApO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZFxuICAgID8gJ2ZpeGVkJ1xuICAgIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG4iLCJpbXBvcnQgaXNNb2RpZmllckVuYWJsZWQgZnJvbSAnLi4vdXRpbHMvaXNNb2RpZmllckVuYWJsZWQnO1xuaW1wb3J0IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSBmcm9tICcuLi91dGlscy9nZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUnO1xuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgc2V0dXBFdmVudExpc3RlbmVycyBmcm9tICcuLi91dGlscy9zZXR1cEV2ZW50TGlzdGVuZXJzJztcblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyhcbiAgICAgIHRoaXMucmVmZXJlbmNlLFxuICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgIHRoaXMuc2NoZWR1bGVVcGRhdGVcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7XG5leHBvcnQgZnVuY3Rpb24gaXNCb2R5KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdib2R5Jztcbn0gLy8gRG8gd2UgaGF2ZSBhIHZlcnRpY2FsIHNjcm9sbGJhcj9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNPdmVyZmxvd2luZyhjb250YWluZXIpIHtcbiAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKTtcbiAgdmFyIHdpbiA9IG93bmVyV2luZG93KGRvYyk7XG5cbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gd2luLmlubmVyV2lkdGggPiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgaXNPdmVyZmxvd2luZyBmcm9tICcuL2lzT3ZlcmZsb3dpbmcnO1xuaW1wb3J0IHsgYXJpYUhpZGRlbiwgYXJpYUhpZGRlblNpYmxpbmdzIH0gZnJvbSAnLi9tYW5hZ2VBcmlhSGlkZGVuJztcblxuZnVuY3Rpb24gZmluZEluZGV4T2YoZGF0YSwgY2FsbGJhY2spIHtcbiAgdmFyIGlkeCA9IC0xO1xuICBkYXRhLnNvbWUoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgaWYgKGNhbGxiYWNrKGl0ZW0pKSB7XG4gICAgICBpZHggPSBpbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG5cbmZ1bmN0aW9uIGdldFBhZGRpbmdSaWdodChub2RlKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVsncGFkZGluZy1yaWdodCddLCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoZGF0YSkge1xuICAvLyBXZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIHRoZSBhY3R1YWwgYHN0eWxlYCBoZXJlIGJlY2F1c2Ugd2Ugd2lsbCBvdmVycmlkZSBpdC5cbiAgZGF0YS5zdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogZGF0YS5jb250YWluZXIuc3R5bGUub3ZlcmZsb3csXG4gICAgcGFkZGluZ1JpZ2h0OiBkYXRhLmNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHRcbiAgfTtcbiAgdmFyIHN0eWxlID0ge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9O1xuXG4gIGlmIChkYXRhLm92ZXJmbG93aW5nKSB7XG4gICAgdmFyIHNjcm9sbGJhclNpemUgPSBnZXRTY3JvbGxiYXJTaXplKCk7IC8vIFVzZSBjb21wdXRlZCBzdHlsZSwgaGVyZSB0byBnZXQgdGhlIHJlYWwgcGFkZGluZyB0byBhZGQgb3VyIHNjcm9sbGJhciB3aWR0aC5cblxuICAgIHN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGdldFBhZGRpbmdSaWdodChkYXRhLmNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgIHZhciBmaXhlZE5vZGVzID0gb3duZXJEb2N1bWVudChkYXRhLmNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaXhlZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgcGFkZGluZ1JpZ2h0ID0gZ2V0UGFkZGluZ1JpZ2h0KGZpeGVkTm9kZXNbaV0pO1xuICAgICAgZGF0YS5wcmV2UGFkZGluZ3MucHVzaChwYWRkaW5nUmlnaHQpO1xuICAgICAgZml4ZWROb2Rlc1tpXS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChwYWRkaW5nUmlnaHQgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkYXRhLmNvbnRhaW5lci5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbnRhaW5lclN0eWxlKGRhdGEpIHtcbiAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICBpZiAoZGF0YS5zdHlsZSkge1xuICAgIE9iamVjdC5rZXlzKGRhdGEuc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGF0YS5jb250YWluZXIuc3R5bGVba2V5XSA9IGRhdGEuc3R5bGVba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBmaXhlZE5vZGVzID0gb3duZXJEb2N1bWVudChkYXRhLmNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZml4ZWROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGZpeGVkTm9kZXNbaV0uc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoZGF0YS5wcmV2UGFkZGluZ3NbaV0sIFwicHhcIik7XG4gIH1cbn1cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdlbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICogU2ltcGxpZmllZCwgYnV0IGluc3BpcmVkIGJ5IHJlYWN0LW92ZXJsYXkncyBNb2RhbE1hbmFnZXIgY2xhc3MuXG4gKiBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG5cbnZhciBNb2RhbE1hbmFnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsTWFuYWdlcik7XG5cbiAgICB2YXIgX29wdGlvbnMkaGlkZVNpYmxpbmdOID0gb3B0aW9ucy5oaWRlU2libGluZ05vZGVzLFxuICAgICAgICBoaWRlU2libGluZ05vZGVzID0gX29wdGlvbnMkaGlkZVNpYmxpbmdOID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkaGlkZVNpYmxpbmdOLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVDb250YWkgPSBvcHRpb25zLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93LFxuICAgICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9vcHRpb25zJGhhbmRsZUNvbnRhaSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGhhbmRsZUNvbnRhaTtcbiAgICB0aGlzLmhpZGVTaWJsaW5nTm9kZXMgPSBoaWRlU2libGluZ05vZGVzO1xuICAgIHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBoYW5kbGVDb250YWluZXJPdmVyZmxvdzsgLy8gdGhpcy5tb2RhbHNbbW9kYWxJZHhdID0gbW9kYWxcblxuICAgIHRoaXMubW9kYWxzID0gW107IC8vIHRoaXMuZGF0YVtjb250YWluZXJJZHhdID0ge1xuICAgIC8vICAgbW9kYWxzOiBbXSxcbiAgICAvLyAgIGNvbnRhaW5lcixcbiAgICAvLyAgIG92ZXJmbG93aW5nLFxuICAgIC8vICAgcHJldlBhZGRpbmdzLFxuICAgIC8vIH1cblxuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgbW9kYWxJZHggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgICAgaWYgKG1vZGFsSWR4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgICB9XG5cbiAgICAgIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgICAgdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7IC8vIElmIHRoZSBtb2RhbCB3ZSBhcmUgYWRkaW5nIGlzIGFscmVhZHkgaW4gdGhlIERPTS5cblxuICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUsIG1vZGFsLm1vZGFsUmVmLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lcklkeCA9IGZpbmRJbmRleE9mKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uY29udGFpbmVyID09PSBjb250YWluZXI7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGNvbnRhaW5lcklkeCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5kYXRhW2NvbnRhaW5lcklkeF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICBvdmVyZmxvd2luZzogaXNPdmVyZmxvd2luZyhjb250YWluZXIpLFxuICAgICAgICBwcmV2UGFkZGluZ3M6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5kYXRhLnB1c2goZGF0YSk7XG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50KG1vZGFsKSB7XG4gICAgICB2YXIgY29udGFpbmVySWR4ID0gZmluZEluZGV4T2YodGhpcy5kYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YVtjb250YWluZXJJZHhdO1xuXG4gICAgICBpZiAoIWRhdGEuc3R5bGUgJiYgdGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgICBzZXRDb250YWluZXJTdHlsZShkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShtb2RhbCkge1xuICAgICAgdmFyIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICAgIGlmIChtb2RhbElkeCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGFpbmVySWR4ID0gZmluZEluZGV4T2YodGhpcy5kYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YVtjb250YWluZXJJZHhdO1xuICAgICAgZGF0YS5tb2RhbHMuc3BsaWNlKGRhdGEubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbElkeCwgMSk7IC8vIElmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLCBjbGVhbiB1cCB0aGUgY29udGFpbmVyLlxuXG4gICAgICBpZiAoZGF0YS5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICAgICAgcmVtb3ZlQ29udGFpbmVyU3R5bGUoZGF0YSk7XG4gICAgICAgIH0gLy8gSW4gY2FzZSB0aGUgbW9kYWwgd2Fzbid0IGluIHRoZSBET00geWV0LlxuXG5cbiAgICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGRhdGEuY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUsIG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGEuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWVuIHJlYWRlci5cbiAgICAgICAgdmFyIG5leHRUb3AgPSBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXTsgLy8gYXMgc29vbiBhcyBhIG1vZGFsIGlzIGFkZGluZyBpdHMgbW9kYWxSZWYgaXMgdW5kZWZpbmVkLiBpdCBjYW4ndCBzZXRcbiAgICAgICAgLy8gYXJpYS1oaWRkZW4gYmVjYXVzZSB0aGUgZG9tIGVsZW1lbnQgZG9lc24ndCBleGlzdCBlaXRoZXJcbiAgICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcblxuICAgICAgICBpZiAobmV4dFRvcC5tb2RhbFJlZikge1xuICAgICAgICAgIGFyaWFIaWRkZW4obmV4dFRvcC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNUb3BNb2RhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgICByZXR1cm4gISF0aGlzLm1vZGFscy5sZW5ndGggJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbE1hbmFnZXI7XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsTWFuYWdlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgICdsYWJlbCArICYnOiB7XG4gICAgICAgIG1hcmdpblRvcDogMTZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5W2xpZ2h0ID8gJ2RhcmsnIDogJ2xpZ2h0J10pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7fVxuICB9O1xufTtcbnZhciBJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgZGlzYWJsZVVuZGVybGluZSA9IHByb3BzLmRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZGlzYWJsZVVuZGVybGluZVwiLCBcImNsYXNzZXNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcIm11bHRpbGluZVwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVVbmRlcmxpbmUgJiYgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLCB1c2VmdWwgd2hlbiBub3QgY29udHJvbGxpbmcgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBuYXRpdmUgaW5wdXQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXQnXG59KShJbnB1dCk7IiwiaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuZnVuY3Rpb24gZnVuY3Rpb25QbHVnaW4oKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCB7fSwgb3B0aW9ucyk7XG4gICAgICBydWxlW2ZuUnVsZU5zXSA9IGRlY2w7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9LFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9uIHZhbHVlcyBmcm9tIHRoZSBkZWNsYXJhdGlvbiwgc28gdGhhdCB3ZSBjYW4ga2VlcCBjb3JlIHVuYXdhcmUgb2YgdGhlbS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhhdCBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb25zIG9uIGVhY2ggc3R5bGUgdXBkYXRlLCBzaW5jZSB0aGlzIGNhbiBoYXBwZW4gb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBmdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIG9mIGZ1bmN0aW9uIHJ1bGVzLlxuICAgICAgaWYgKGZuVmFsdWVzTnMgaW4gcnVsZSB8fCBmblJ1bGVOcyBpbiBydWxlKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgZm5WYWx1ZXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgZm5WYWx1ZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmblZhbHVlcztcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgICB2YXIgZm5SdWxlID0gc3R5bGVSdWxlW2ZuUnVsZU5zXTsgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cblxuICAgICAgaWYgKGZuUnVsZSkge1xuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBmblZhbHVlcyA9IHN0eWxlUnVsZVtmblZhbHVlc05zXTsgLy8gSWYgd2UgaGF2ZSBhIGZuIHZhbHVlcyBtYXAsIGl0IGlzIGEgcnVsZSB3aXRoIGZ1bmN0aW9uIHZhbHVlcy5cblxuICAgICAgaWYgKGZuVmFsdWVzKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBmblZhbHVlc1twcm9wXShkYXRhKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uUGx1Z2luO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgUnVsZUxpc3QgfSBmcm9tICdqc3MnO1xuXG52YXIgYXQgPSAnQGdsb2JhbCc7XG52YXIgYXRQcmVmaXggPSAnQGdsb2JhbCAnO1xuXG52YXIgR2xvYmFsQ29udGFpbmVyUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgc2VsZWN0b3IgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChzZWxlY3Rvciwgc3R5bGVzW3NlbGVjdG9yXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEdsb2JhbENvbnRhaW5lclJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZygpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxDb250YWluZXJSdWxlO1xufSgpO1xuXG52YXIgR2xvYmFsUHJlZml4ZWRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsUHJlZml4ZWRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKGF0UHJlZml4Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEdsb2JhbFByZWZpeGVkUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlID8gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgXCIgXCIgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cblxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG4gIHZhciBydWxlcyA9IHN0eWxlID8gc3R5bGVbYXRdIDogbnVsbDtcbiAgaWYgKCFydWxlcykgcmV0dXJuO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcnVsZXMpIHtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbYXRdO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3BbMF0gIT09ICdAJyB8fCBwcm9wLnN1YnN0cigwLCBhdC5sZW5ndGgpICE9PSBhdCkgY29udGludWU7XG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIoYXQubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cbn1cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGpzc0dsb2JhbCgpIHtcbiAgZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAobmFtZSA9PT0gYXQpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsQ29udGFpbmVyUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChuYW1lWzBdID09PSAnQCcgJiYgbmFtZS5zdWJzdHIoMCwgYXRQcmVmaXgubGVuZ3RoKSA9PT0gYXRQcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQgJiYgcGFyZW50Lm9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2NvcGVkID09PSBmYWxzZSkge1xuICAgICAgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm47XG4gICAgaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKTtcbiAgICBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlLFxuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzR2xvYmFsO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcbnZhciBwYXJlbnRSZWdFeHAgPSAvJi9nO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NOZXN0ZWQoKSB7XG4gIC8vIEdldCBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yICRyZWYgcmVwbGFjZW1lbnQuXG4gIGZ1bmN0aW9uIGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpIHx8IHNoZWV0ICYmIHNoZWV0LmdldFJ1bGUoa2V5KTtcblxuICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgcnVsZSA9IHJ1bGU7XG4gICAgICAgIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgXCIgKyBrZXkgKyBcIiBpbiBcIiArIChjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lci50b1N0cmluZygpKSArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VQYXJlbnRSZWZzKG5lc3RlZFByb3AsIHBhcmVudFByb3ApIHtcbiAgICB2YXIgcGFyZW50U2VsZWN0b3JzID0gcGFyZW50UHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciBuZXN0ZWRTZWxlY3RvcnMgPSBuZXN0ZWRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnOyAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuXG4gICAgICAgIHJlc3VsdCArPSBuZXN0ZWQuaW5kZXhPZignJicpICE9PSAtMSA/IG5lc3RlZC5yZXBsYWNlKHBhcmVudFJlZ0V4cCwgcGFyZW50KSA6IHBhcmVudCArIFwiIFwiICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIC8vIE9wdGlvbnMgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkLCBub3cgd2Ugb25seSBpbmNyZWFzZSBpbmRleC5cbiAgICBpZiAob3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBpbmRleDogb3B0aW9ucy5pbmRleCArIDFcbiAgICB9KTtcbiAgICB2YXIgbmVzdGluZ0xldmVsID0gcnVsZS5vcHRpb25zLm5lc3RpbmdMZXZlbDtcbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcnVsZS5vcHRpb25zLCB7XG4gICAgICBuZXN0aW5nTGV2ZWw6IG5lc3RpbmdMZXZlbCxcbiAgICAgIGluZGV4OiBjb250YWluZXIuaW5kZXhPZihydWxlKSArIDFcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgY29udGFpbmVyID0gc3R5bGVSdWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciByZXBsYWNlUmVmO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gcHJvcC5pbmRleE9mKCcmJykgIT09IC0xO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcbiAgICAgIG9wdGlvbnMgPSBnZXRPcHRpb25zKHN0eWxlUnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHN0eWxlUnVsZS5zZWxlY3Rvcik7IC8vIExhemlseSBjcmVhdGUgdGhlIHJlZiByZXBsYWNlciBmdW5jdGlvbiBqdXN0IG9uY2UgZm9yXG4gICAgICAgIC8vIGFsbCBuZXN0ZWQgcnVsZXMgd2l0aGluIHRoZSBzaGVldC5cblxuICAgICAgICBpZiAoIXJlcGxhY2VSZWYpIHJlcGxhY2VSZWYgPSBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpOyAvLyBSZXBsYWNlIGFsbCAkcmVmcy5cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UocmVmUmVnRXhwLCByZXBsYWNlUmVmKTtcbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTmVzdGVkQ29uZGl0aW9uYWwpIHtcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUocHJvcCwge30sIG9wdGlvbnMpIC8vIEZsb3cgZXhwZWN0cyBtb3JlIG9wdGlvbnMgYnV0IHRoZXkgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgIC8vIEFuZCBmbG93IGRvZXNuJ3Qga25vdyB0aGlzIHdpbGwgYWx3YXlzIGJlIGEgU3R5bGVSdWxlIHdoaWNoIGhhcyB0aGUgYWRkUnVsZSBtZXRob2RcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAuYWRkUnVsZShzdHlsZVJ1bGUua2V5LCBzdHlsZVtwcm9wXSwge1xuICAgICAgICAgIHNlbGVjdG9yOiBzdHlsZVJ1bGUuc2VsZWN0b3JcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NOZXN0ZWQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby12YXIsIHByZWZlci10ZW1wbGF0ZSAqL1xudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZ1xudmFyIG1zUGF0dGVybiA9IC9ebXMtL1xudmFyIGNhY2hlID0ge31cblxuZnVuY3Rpb24gdG9IeXBoZW5Mb3dlcihtYXRjaCkge1xuICByZXR1cm4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gY2FjaGVbbmFtZV1cbiAgfVxuXG4gIHZhciBoTmFtZSA9IG5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCB0b0h5cGhlbkxvd2VyKVxuICByZXR1cm4gKGNhY2hlW25hbWVdID0gbXNQYXR0ZXJuLnRlc3QoaE5hbWUpID8gJy0nICsgaE5hbWUgOiBoTmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgaHlwaGVuYXRlU3R5bGVOYW1lXG4iLCJpbXBvcnQgaHlwaGVuYXRlIGZyb20gJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJztcblxuLyoqXG4gKiBDb252ZXJ0IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGRhc2ggc2VwYXJhdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGNvbnZlcnRDYXNlKHN0eWxlKSB7XG4gIHZhciBjb252ZXJ0ZWQgPSB7fTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgdmFyIGtleSA9IHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCA/IHByb3AgOiBoeXBoZW5hdGUocHJvcCk7XG4gICAgY29udmVydGVkW2tleV0gPSBzdHlsZVtwcm9wXTtcbiAgfVxuXG4gIGlmIChzdHlsZS5mYWxsYmFja3MpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZS5mYWxsYmFja3MpKSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzLm1hcChjb252ZXJ0Q2FzZSk7ZWxzZSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gY29udmVydENhc2Uoc3R5bGUuZmFsbGJhY2tzKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59XG4vKipcbiAqIEFsbG93IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIGJ5IGNvbnZlcnRpbmcgdGhlbSBiYWNrIHRvIGRhc2hlcml6ZWQuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAvLyBIYW5kbGUgcnVsZXMgbGlrZSBAZm9udC1mYWNlLCB3aGljaCBjYW4gaGF2ZSBtdWx0aXBsZSBzdHlsZXMgaW4gYW4gYXJyYXlcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3R5bGVbaW5kZXhdID0gY29udmVydENhc2Uoc3R5bGVbaW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiBjb252ZXJ0Q2FzZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgaWYgKHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBoeXBoZW5hdGVkUHJvcCA9IGh5cGhlbmF0ZShwcm9wKTsgLy8gVGhlcmUgd2FzIG5vIGNhbWVsIGNhc2UgaW4gcGxhY2VcblxuICAgIGlmIChwcm9wID09PSBoeXBoZW5hdGVkUHJvcCkgcmV0dXJuIHZhbHVlO1xuICAgIHJ1bGUucHJvcChoeXBoZW5hdGVkUHJvcCwgdmFsdWUpOyAvLyBDb3JlIHdpbGwgaWdub3JlIHRoYXQgcHJvcGVydHkgdmFsdWUgd2Ugc2V0IHRoZSBwcm9wZXIgb25lIGFib3ZlLlxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNhbWVsQ2FzZTtcbiIsImltcG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQgfSBmcm9tICdqc3MnO1xuXG52YXIgcHggPSBoYXNDU1NUT01TdXBwb3J0ID8gd2luZG93LkNTUy5weCA6ICdweCc7XG52YXIgbXMgPSBoYXNDU1NUT01TdXBwb3J0ID8gd2luZG93LkNTUy5tcyA6ICdtcyc7XG52YXIgcGVyY2VudCA9IGhhc0NTU1RPTVN1cHBvcnQgPyB3aW5kb3cuQ1NTLnBlcmNlbnQgOiAnJSc7XG4vKipcbiAqIEdlbmVyYXRlZCBqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuXG52YXIgZGVmYXVsdFVuaXRzID0ge1xuICAvLyBBbmltYXRpb24gcHJvcGVydGllc1xuICAnYW5pbWF0aW9uLWRlbGF5JzogbXMsXG4gICdhbmltYXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQmFja2dyb3VuZCBwcm9wZXJ0aWVzXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXgnOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6IHB4LFxuICAnYmFja2dyb3VuZC1zaXplJzogcHgsXG4gIC8vIEJvcmRlciBQcm9wZXJ0aWVzXG4gIGJvcmRlcjogcHgsXG4gICdib3JkZXItYm90dG9tJzogcHgsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWxlZnQnOiBweCxcbiAgJ2JvcmRlci1sZWZ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItcmFkaXVzJzogcHgsXG4gICdib3JkZXItcmlnaHQnOiBweCxcbiAgJ2JvcmRlci1yaWdodC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXRvcCc6IHB4LFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3Atd2lkdGgnOiBweCxcbiAgJ2JvcmRlci13aWR0aCc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAvLyBQYWRkaW5nIHByb3BlcnRpZXNcbiAgcGFkZGluZzogcHgsXG4gICdwYWRkaW5nLWJvdHRvbSc6IHB4LFxuICAncGFkZGluZy1sZWZ0JzogcHgsXG4gICdwYWRkaW5nLXJpZ2h0JzogcHgsXG4gICdwYWRkaW5nLXRvcCc6IHB4LFxuICAvLyBNYXNrIHByb3BlcnRpZXNcbiAgJ21hc2stcG9zaXRpb24teCc6IHB4LFxuICAnbWFzay1wb3NpdGlvbi15JzogcHgsXG4gICdtYXNrLXNpemUnOiBweCxcbiAgLy8gV2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gIGhlaWdodDogcHgsXG4gIHdpZHRoOiBweCxcbiAgJ21pbi1oZWlnaHQnOiBweCxcbiAgJ21heC1oZWlnaHQnOiBweCxcbiAgJ21pbi13aWR0aCc6IHB4LFxuICAnbWF4LXdpZHRoJzogcHgsXG4gIC8vIFBvc2l0aW9uIHByb3BlcnRpZXNcbiAgYm90dG9tOiBweCxcbiAgbGVmdDogcHgsXG4gIHRvcDogcHgsXG4gIHJpZ2h0OiBweCxcbiAgLy8gU2hhZG93IHByb3BlcnRpZXNcbiAgJ2JveC1zaGFkb3cnOiBweCxcbiAgJ3RleHQtc2hhZG93JzogcHgsXG4gIC8vIENvbHVtbiBwcm9wZXJ0aWVzXG4gICdjb2x1bW4tZ2FwJzogcHgsXG4gICdjb2x1bW4tcnVsZSc6IHB4LFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiBweCxcbiAgJ2NvbHVtbi13aWR0aCc6IHB4LFxuICAvLyBGb250IGFuZCB0ZXh0IHByb3BlcnRpZXNcbiAgJ2ZvbnQtc2l6ZSc6IHB4LFxuICAnZm9udC1zaXplLWRlbHRhJzogcHgsXG4gICdsZXR0ZXItc3BhY2luZyc6IHB4LFxuICAndGV4dC1pbmRlbnQnOiBweCxcbiAgJ3RleHQtc3Ryb2tlJzogcHgsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6IHB4LFxuICAnd29yZC1zcGFjaW5nJzogcHgsXG4gIC8vIE1vdGlvbiBwcm9wZXJ0aWVzXG4gIG1vdGlvbjogcHgsXG4gICdtb3Rpb24tb2Zmc2V0JzogcHgsXG4gIC8vIE91dGxpbmUgcHJvcGVydGllc1xuICBvdXRsaW5lOiBweCxcbiAgJ291dGxpbmUtb2Zmc2V0JzogcHgsXG4gICdvdXRsaW5lLXdpZHRoJzogcHgsXG4gIC8vIFBlcnNwZWN0aXZlIHByb3BlcnRpZXNcbiAgcGVyc3BlY3RpdmU6IHB4LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXgnOiBwZXJjZW50LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiBwZXJjZW50LFxuICAvLyBUcmFuc2Zvcm0gcHJvcGVydGllc1xuICAndHJhbnNmb3JtLW9yaWdpbic6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teic6IHBlcmNlbnQsXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydGllc1xuICAndHJhbnNpdGlvbi1kZWxheSc6IG1zLFxuICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBBbGlnbm1lbnQgcHJvcGVydGllc1xuICAndmVydGljYWwtYWxpZ24nOiBweCxcbiAgJ2ZsZXgtYmFzaXMnOiBweCxcbiAgLy8gU29tZSByYW5kb20gcHJvcGVydGllc1xuICAnc2hhcGUtbWFyZ2luJzogcHgsXG4gIHNpemU6IHB4LFxuICAvLyBHcmlkIHByb3BlcnRpZXNcbiAgZ3JpZDogcHgsXG4gICdncmlkLWdhcCc6IHB4LFxuICAnZ3JpZC1yb3ctZ2FwJzogcHgsXG4gICdncmlkLWNvbHVtbi1nYXAnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtcm93cyc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJzogcHgsXG4gICdncmlkLWF1dG8tcm93cyc6IHB4LFxuICAnZ3JpZC1hdXRvLWNvbHVtbnMnOiBweCxcbiAgLy8gTm90IGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gIC8vIFVzZWQgdG8gYXZvaWQgaXNzdWVzIHdpdGgganNzLXBsdWdpbi1leHBhbmQgaW50ZWdyYXRpb24uXG4gICdib3gtc2hhZG93LXgnOiBweCxcbiAgJ2JveC1zaGFkb3cteSc6IHB4LFxuICAnYm94LXNoYWRvdy1ibHVyJzogcHgsXG4gICdib3gtc2hhZG93LXNwcmVhZCc6IHB4LFxuICAnZm9udC1saW5lLWhlaWdodCc6IHB4LFxuICAndGV4dC1zaGFkb3cteCc6IHB4LFxuICAndGV4dC1zaGFkb3cteSc6IHB4LFxuICAndGV4dC1zaGFkb3ctYmx1cic6IHB4XG59O1xuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIG5ld09ialtfa2V5XSA9IG9ialtfa2V5XTtcbiAgICBuZXdPYmpbX2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oZGVmYXVsdFVuaXRzKTtcbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAob3B0aW9uc1twcm9wXSkge1xuICAgICAgcmV0dXJuIFwiXCIgKyB2YWx1ZSArIG9wdGlvbnNbcHJvcF07XG4gICAgfVxuXG4gICAgaWYgKHVuaXRzW3Byb3BdKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHVuaXRzW3Byb3BdID09PSAnZnVuY3Rpb24nID8gdW5pdHNbcHJvcF0odmFsdWUpLnRvU3RyaW5nKCkgOiBcIlwiICsgdmFsdWUgKyB1bml0c1twcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQWRkIHVuaXQgdG8gbnVtZXJpYyB2YWx1ZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZhdWx0VW5pdChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VW5pdDtcbiIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59IiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnOyAvLyBXZSBzaG91bGQgbm90IGRvIGFueXRoaW5nIGlmIHJlcXVpcmVkIHNlcnZlcnNpZGUuXG5cbmlmIChpc0luQnJvd3Nlcikge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIG1zOiAnLW1zLScsXG4gICAgTzogJy1vLScsXG4gICAgV2Via2l0OiAnLXdlYmtpdC0nXG4gIH07XG5cbiAgdmFyIF9kb2N1bWVudCRjcmVhdGVFbGVtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSxcbiAgICAgIHN0eWxlID0gX2RvY3VtZW50JGNyZWF0ZUVsZW1lLnN0eWxlO1xuXG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIEVkZ2UgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJ21zSHlwaGVucycgaW4gc3R5bGUpIHtcbiAgICBqcyA9ICdtcyc7XG4gICAgY3NzID0ganNDc3NNYXAubXM7XG4gICAgYnJvd3NlciA9ICdlZGdlJztcbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBTYWZhcmkgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJy1hcHBsZS10cmFpbGluZy13b3JkJyBpbiBzdHlsZSkge1xuICAgIHZlbmRvciA9ICdhcHBsZSc7XG4gIH1cbn1cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZywgdmVuZG9yOiBTdHJpbmcsIGJyb3dzZXI6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxudmFyIHByZWZpeCA9IHtcbiAganM6IGpzLFxuICBjc3M6IGNzcyxcbiAgdmVuZG9yOiB2ZW5kb3IsXG4gIGJyb3dzZXI6IGJyb3dzZXJcbn07XG5cbi8qKlxuICogVGVzdCBpZiBhIGtleWZyYW1lIGF0LXJ1bGUgc2hvdWxkIGJlIHByZWZpeGVkIG9yIG5vdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB2ZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkS2V5ZnJhbWVzKGtleSkge1xuICAvLyBLZXlmcmFtZXMgaXMgYWxyZWFkeSBwcmVmaXhlZC4gZS5nLiBrZXkgPSAnQC13ZWJraXQta2V5ZnJhbWVzIGEnXG4gIGlmIChrZXlbMV0gPT09ICctJykgcmV0dXJuIGtleTsgLy8gTm8gbmVlZCB0byBwcmVmaXggSUUvRWRnZS4gT2xkZXIgYnJvd3NlcnMgd2lsbCBpZ25vcmUgdW5zdXBwb3J0ZWQgcnVsZXMuXG4gIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1rZXlmcmFtZXNcblxuICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4ga2V5O1xuICByZXR1cm4gXCJAXCIgKyBwcmVmaXguY3NzICsgXCJrZXlmcmFtZXNcIiArIGtleS5zdWJzdHIoMTApO1xufVxuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9YXBwZWFyYW5jZVxuXG52YXIgYXBwZWFyZW5jZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ2FwcGVhcmFuY2UnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2FwcGVhcmFuY2UnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG52YXIgcmVnRXhwID0gL1stXFxzXSsoLik/L2c7XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBsZXR0ZXIgd2l0aCB0aGUgY2FwaXRhbCBsZXR0ZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBjXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0b1VwcGVyKG1hdGNoLCBjKSB7XG4gIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG59XG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBjYW1lbC1jYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnRXhwLCB0b1VwcGVyKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gcGFzY2FsIGNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhc2NhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIGNhbWVsaXplKFwiLVwiICsgc3RyKTtcbn1cblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW11bHRpY29sdW1uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzQ5MVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8xNzdcblxudmFyIGJyZWFrUHJvcHNPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15icmVhay0vLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIganNQcm9wID0gXCJXZWJraXRDb2x1bW5cIiArIHBhc2NhbGl6ZShwcm9wKTtcbiAgICAgIHJldHVybiBqc1Byb3AgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgXCJjb2x1bW4tXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHtcbiAgICAgIHZhciBfanNQcm9wID0gXCJwYWdlXCIgKyBwYXNjYWxpemUocHJvcCk7XG5cbiAgICAgIHJldHVybiBfanNQcm9wIGluIHN0eWxlID8gXCJwYWdlLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD10ZXh0LWRlY29yYXRpb25cblxudmFyIHRleHREZWNvcmF0aW9uU2tpcEluayA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtZGVjb3JhdGlvbi1za2lwLWluayddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndGV4dC1kZWNvcmF0aW9uLXNraXAtaW5rJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnKSByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnIHx8IHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNvbG9yLWFkanVzdFxuXG52YXIgY29sb3JBZGp1c3QgPSB7XG4gIG5vUHJlZmlsbDogWydjb2xvci1hZGp1c3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2NvbG9yLWFkanVzdCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JykgcmV0dXJuIHByZWZpeC5jc3MgKyBcInByaW50LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXApO1xuXG52YXIgcHJlZml4Q3NzID0gZnVuY3Rpb24gcHJlZml4Q3NzKHApIHtcbiAgcmV0dXJuIHByZWZpeC5jc3MgKyBwO1xufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAwOS5cblxuXG52YXIgZmxleDIwMDkgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgX3JlZikge1xuICAgIHZhciBtdWx0aXBsZSA9IF9yZWYubXVsdGlwbGU7XG5cbiAgICBpZiAocHJvcEtleXMuaW5kZXhPZihwcm9wKSA+IC0xKSB7XG4gICAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdQcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdWx0aXBsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Byb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEocHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3BbMF0pIGluIHN0eWxlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UHJvcC5tYXAocHJlZml4Q3NzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cbiAgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxufTtcbnZhciBmbGV4MjAxMiA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwJDFbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzMyNC5cblxudmFyIGlubGluZUxvZ2ljYWxPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL14oYm9yZGVyfG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUvLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JykgcmV0dXJuIHByb3A7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wLnJlcGxhY2UoJy1pbmxpbmUnLCAnJyk7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIGJ1dCB3ZSBjYW4gdXNlIGEgbG9uZ2hhbmQgcHJvcGVydHkgaW5zdGVhZC5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tYXNrXG5cbnZhciBtYXNrID0ge1xuICBub1ByZWZpbGw6IFsnbWFzayddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9ebWFzay8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBsb25naGFuZCA9ICdtYXNrLWltYWdlJztcblxuICAgICAgaWYgKGNhbWVsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBwYXNjYWxpemVkID0gcGFzY2FsaXplKHByb3ApO1xuICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7IC8vIFRyeSB3ZWJraXQgZmFsbGJhY2suXG5cbiAgICBpZiAocHJlZml4LmpzICE9PSAnV2Via2l0JyAmJiBcIldlYmtpdFwiICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2Nyb2xsLXNuYXBcblxudmFyIHNjcm9sbFNuYXAgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3Auc3Vic3RyaW5nKDAsIDExKSAhPT0gJ3Njcm9sbC1zbmFwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW92ZXJzY3JvbGwtYmVoYXZpb3JcblxudmFyIG92ZXJzY3JvbGxCZWhhdmlvciA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ292ZXJzY3JvbGwtYmVoYXZpb3InKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIFwic2Nyb2xsLWNoYWluaW5nXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2Zvcm1cblxudmFyIHRyYW5zZm9ybSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zZm9ybSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zZm9ybScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNpdGlvblxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zaXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2l0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXdyaXRpbmctbW9kZVxuXG52YXIgd3JpdGluZ01vZGUgPSB7XG4gIG5vUHJlZmlsbDogWyd3cml0aW5nLW1vZGUnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3dyaXRpbmctbW9kZScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnIHx8IHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgbWFzaywgd3JpdGluZ01vZGUsIGNvbG9yQWRqdXN0LCB0ZXh0RGVjb3JhdGlvblNraXBJbmssIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAnYWxsJykgcmV0dXJuICdhbGwnO1xuICBpZiAocDIgPT09ICdhbGwnKSByZXR1cm4gJywgYWxsJztcbiAgcmV0dXJuIHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xufVxuXG5pZiAoaXNJbkJyb3dzZXIpIGVsJDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHZhbHVlO1xuICBpZiAoIWVsJDEpIHJldHVybiB2YWx1ZTsgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgaWYgKHR5cGVvZiBwcmVmaXhlZFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQocHJlZml4ZWRWYWx1ZSwgMTApKSkge1xuICAgIHJldHVybiBwcmVmaXhlZFZhbHVlO1xuICB9IC8vIENyZWF0ZSBjYWNoZSBrZXkgZm9yIGN1cnJlbnQgdmFsdWUuXG5cblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHByZWZpeGVkVmFsdWU7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiB2YWx1ZSBmcm9tIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbi8qKlxuICogQ1NTIFZlbmRvciBwcmVmaXggZGV0ZWN0aW9uIGFuZCBwcm9wZXJ0eSBmZWF0dXJlIHRlc3RpbmcuXG4gKlxuICogQGNvcHlyaWdodCBPbGVnIFNsb2JvZHNrb2kgMjAxNVxuICogQHdlYnNpdGUgaHR0cHM6Ly9naXRodWIuY29tL2pzc3R5bGVzL2Nzcy12ZW5kb3JcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmV4cG9ydCB7IHByZWZpeCwgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfTtcbiIsImltcG9ydCB7IHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH0gZnJvbSAnY3NzLXZlbmRvcic7XG5pbXBvcnQgeyB0b0Nzc1ZhbHVlIH0gZnJvbSAnanNzJztcblxuLyoqXG4gKiBBZGQgdmVuZG9yIHByZWZpeCB0byBhIHByb3BlcnR5IG5hbWUgd2hlbiBuZWVkZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQkMSA9IHN1cHBvcnRlZFZhbHVlKHN1cHBvcnRlZFByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSQkMSAmJiBzdXBwb3J0ZWRWYWx1ZSQkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJCQxIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3U3R5bGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NQcm9wc1NvcnQ7XG4iLCJpbXBvcnQgZnVuY3Rpb25zIGZyb20gJ2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbic7XG5pbXBvcnQgZ2xvYmFsIGZyb20gJ2pzcy1wbHVnaW4tZ2xvYmFsJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnanNzLXBsdWdpbi1uZXN0ZWQnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdqc3MtcGx1Z2luLWNhbWVsLWNhc2UnO1xuaW1wb3J0IGRlZmF1bHRVbml0IGZyb20gJ2pzcy1wbHVnaW4tZGVmYXVsdC11bml0JztcbmltcG9ydCB2ZW5kb3JQcmVmaXhlciBmcm9tICdqc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlcic7XG5pbXBvcnQgcHJvcHNTb3J0IGZyb20gJ2pzcy1wbHVnaW4tcHJvcHMtc29ydCc7IC8vIFN1YnNldCBvZiBqc3MtcHJlc2V0LWRlZmF1bHQgd2l0aCBvbmx5IHRoZSBwbHVnaW5zIHRoZSBNYXRlcmlhbC1VSSBjb21wb25lbnRzIGFyZSB1c2luZy5cblxuZnVuY3Rpb24ganNzUHJlc2V0KCkge1xuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtmdW5jdGlvbnMoKSwgZ2xvYmFsKCksIG5lc3RlZCgpLCBjYW1lbENhc2UoKSwgZGVmYXVsdFVuaXQoKSwgLy8gRGlzYWJsZSB0aGUgdmVuZG9yIHByZWZpeGVyIHNlcnZlci1zaWRlLCBpdCBkb2VzIG5vdGhpbmcuXG4gICAgLy8gVGhpcyB3YXksIHdlIGNhbiBnZXQgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAgICAvLyBJbiB0aGUgZG9jdW1lbnRhdGlvbiwgd2UgYXJlIHVzaW5nIGBhdXRvcHJlZml4ZXJgIHRvIHNvbHZlIHRoaXMgcHJvYmxlbS5cbiAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2ZW5kb3JQcmVmaXhlcigpLCBwcm9wc1NvcnQoKV1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJlc2V0OyIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcblxuZnVuY3Rpb24gVHJhcEZvY3VzKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJGRpc2FibGVFbmZvcmNlID0gcHJvcHMuZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFbmZvcmNlLFxuICAgICAgX3Byb3BzJGRpc2FibGVSZXN0b3JlID0gcHJvcHMuZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVSZXN0b3JlLFxuICAgICAgZ2V0RG9jID0gcHJvcHMuZ2V0RG9jLFxuICAgICAgaXNFbmFibGVkID0gcHJvcHMuaXNFbmFibGVkLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW47XG4gIHZhciBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBzZW50aW5lbFN0YXJ0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgc2VudGluZWxFbmQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBsYXN0Rm9jdXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZHJvcCBzdXBwb3J0IGZvciBub24gcmVmIGZvcndhcmRpbmcgY2xhc3MgY29tcG9uZW50c1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJvb3RSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGhhbmRsZU93blJlZik7IC8vIOKaoO+4jyBZb3UgbWF5IHJlbHkgb24gUmVhY3QudXNlTWVtbyBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgbm90IGFzIGEgc2VtYW50aWMgZ3VhcmFudGVlLlxuICAvLyBodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlbWVtb1xuXG4gIFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RGb2N1cy5jdXJyZW50ID0gZ2V0RG9jKCkuYWN0aXZlRWxlbWVudDtcbiAgfSwgW29wZW5dKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7IC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cblxuICAgIGlmICghZGlzYWJsZUF1dG9Gb2N1cyAmJiByb290UmVmLmN1cnJlbnQgJiYgIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICghcm9vdFJlZi5jdXJyZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBbJ01hdGVyaWFsLVVJOiB0aGUgbW9kYWwgY29udGVudCBub2RlIGRvZXMgbm90IGFjY2VwdCBmb2N1cy4nLCAnRm9yIHRoZSBiZW5lZml0IG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsICcgKyAndGhlIHRhYkluZGV4IG9mIHRoZSBub2RlIGlzIGJlaW5nIHNldCB0byBcIi0xXCIuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICByb290UmVmLmN1cnJlbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uIGVuZm9yY2VGb2N1cygpIHtcbiAgICAgIGlmIChkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQpIHtcbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3RSZWYuY3VycmVudCAmJiAhcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGxvb3BGb2N1cyA9IGZ1bmN0aW9uIGxvb3BGb2N1cyhldmVudCkge1xuICAgICAgLy8gOSA9IFRhYlxuICAgICAgaWYgKGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGV2ZW50LmtleUNvZGUgIT09IDkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIG5leHQgdGFiIHN0YXJ0cyBmcm9tIHRoZSByaWdodCBwbGFjZS5cblxuXG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3RSZWYuY3VycmVudCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGlnbm9yZSB0aGUgbmV4dCBlbmZvcmNlRm9jdXMgYXNcbiAgICAgICAgLy8gaXQgd2lsbCB0cnkgdG8gbW92ZSB0aGUgZm9jdXMgYmFjayB0byB0aGUgcm9vdFJlZiBlbGVtZW50LlxuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIHNlbnRpbmVsRW5kLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW50aW5lbFN0YXJ0LmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBlbmZvcmNlRm9jdXMsIHRydWUpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZW5mb3JjZUZvY3VzLCB0cnVlKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTsgLy8gcmVzdG9yZUxhc3RGb2N1cygpXG5cbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFIDExIGhhdmUgYSBmb2N1cyBtZXRob2QuXG4gICAgICAgIC8vIEJlY2F1c2UgSUUgMTEgbWFya2V0IHNoYXJlIGlzIGxvdywgd2UgYWNjZXB0IHRoZSByZXN0b3JlIGZvY3VzIGJlaW5nIGJyb2tlblxuICAgICAgICAvLyBhbmQgd2Ugc2lsZW50IHRoZSBpc3N1ZS5cbiAgICAgICAgaWYgKGxhc3RGb2N1cy5jdXJyZW50LmZvY3VzKSB7XG4gICAgICAgICAgbGFzdEZvY3VzLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RGb2N1cy5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgfSksIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsRW5kLFxuICAgIFwiZGF0YS10ZXN0XCI6IFwic2VudGluZWxFbmRcIlxuICB9KSk7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUcmFwRm9jdXMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZG9jdW1lbnQgdG8gY29uc2lkZXIuXG4gICAqIFdlIHVzZSBpdCB0byBpbXBsZW1lbnQgdGhlIHJlc3RvcmUgZm9jdXMgYmV0d2VlbiBkaWZmZXJlbnQgYnJvd3NlciBkb2N1bWVudHMuXG4gICAqL1xuICBnZXREb2M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIERvIHdlIHN0aWxsIHdhbnQgdG8gZW5mb3JjZSB0aGUgZm9jdXM/XG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgbmVzdGluZyBUcmFwRm9jdXMgZWxlbWVudHMuXG4gICAqL1xuICBpc0VuYWJsZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVHJhcEZvY3VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgekluZGV4OiAtMSxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBEaXNhYmxlIHNjcm9sbCBjYXBhYmlsaXRpZXMuXG4gICAgdG91Y2hBY3Rpb246ICdub25lJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGludmlzaWJsZT17dHJ1ZX1gLiAqL1xuICBpbnZpc2libGU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfVxufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgU2ltcGxlQmFja2Ryb3AgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNpbXBsZUJhY2tkcm9wKHByb3BzLCByZWYpIHtcbiAgdmFyIGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImludmlzaWJsZVwiLCBcIm9wZW5cIl0pO1xuXG4gIHJldHVybiBvcGVuID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgaW52aXNpYmxlID8gc3R5bGVzLmludmlzaWJsZSA6IHt9LCBvdGhlci5zdHlsZSlcbiAgfSkpIDogbnVsbDtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2ltcGxlQmFja2Ryb3AucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuU2ltcGxlQmFja2Ryb3AuZGVmYXVsdFByb3BzID0ge1xuICBpbnZpc2libGU6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgU2ltcGxlQmFja2Ryb3A7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCB7IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgc2V0UmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCB3aXRoRm9yd2FyZGVkUmVmIGZyb20gJy4uL3V0aWxzL3dpdGhGb3J3YXJkZWRSZWYnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi4vc3R5bGVzL3pJbmRleCc7XG5pbXBvcnQgTW9kYWxNYW5hZ2VyIGZyb20gJy4vTW9kYWxNYW5hZ2VyJztcbmltcG9ydCBUcmFwRm9jdXMgZnJvbSAnLi9UcmFwRm9jdXMnO1xuaW1wb3J0IFNpbXBsZUJhY2tkcm9wIGZyb20gJy4vU2ltcGxlQmFja2Ryb3AnO1xuaW1wb3J0IHsgYXJpYUhpZGRlbiB9IGZyb20gJy4vbWFuYWdlQXJpYUhpZGRlbic7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoY29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gcHJvcHMuY2hpbGRyZW4gPyBwcm9wcy5jaGlsZHJlbi5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaW4nKSA6IGZhbHNlO1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5tb2RhbCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBgTW9kYWxgIGhhcyBleGl0ZWQuICovXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIE1vZGFsIGlzIGEgbG93ZXItbGV2ZWwgY29uc3RydWN0IHRoYXQgaXMgbGV2ZXJhZ2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtEaWFsb2ddKC9hcGkvZGlhbG9nLylcbiAqIC0gW0RyYXdlcl0oL2FwaS9kcmF3ZXIvKVxuICogLSBbTWVudV0oL2FwaS9tZW51LylcbiAqIC0gW1BvcG92ZXJdKC9hcGkvcG9wb3Zlci8pXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIG1vZGFsIGRpYWxvZywgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pIGNvbXBvbmVudFxuICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgdXNpbmcgTW9kYWwuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2hhcmVzIG1hbnkgY29uY2VwdHMgd2l0aCBbcmVhY3Qtb3ZlcmxheXNdKGh0dHBzOi8vcmVhY3QtYm9vdHN0cmFwLmdpdGh1Yi5pby9yZWFjdC1vdmVybGF5cy8jbW9kYWxzKS5cbiAqL1xuXG52YXIgTW9kYWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNb2RhbCkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVPcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihfdGhpcy5wcm9wcy5jb250YWluZXIpIHx8IF90aGlzLmdldERvYygpLmJvZHk7XG5cbiAgICAgIF90aGlzLnByb3BzLm1hbmFnZXIuYWRkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBjb250YWluZXIpO1xuXG4gICAgICBpZiAoX3RoaXMubW9kYWxSZWYpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlT3BlbmVkKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25SZW5kZXJlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICBfdGhpcy5oYW5kbGVPcGVuZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyaWFIaWRkZW4oX3RoaXMubW9kYWxSZWYsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVPcGVuZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLm1vdW50KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gRml4IGEgYnVnIG9uIENocm9tZSB3aGVyZSB0aGUgc2Nyb2xsIGlzbid0IGluaXRpYWxseSAwLlxuXG5cbiAgICAgIF90aGlzLm1vZGFsUmVmLnNjcm9sbFRvcCA9IDA7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdmFyIGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKF90aGlzLnByb3BzKTtcbiAgICAgIC8qIElmIHRoZSBjb21wb25lbnQgZG9lcyBub3QgaGF2ZSBhIHRyYW5zaXRpb24gb3IgaXMgdW5tb3VudGluZyByZW1vdmUgdGhlIE1vZGFsXG4gICAgICBvdGhlcndpc2UgbGV0IHRoZSB0cmFuc2l0aW9uIGhhbmRsZSByZW1vdmluZyB0aGUgc3R5bGUsIHRoaXMgcHJldmVudHMgZWxlbWVudHNcbiAgICAgIG1vdmluZyBhcm91bmQgd2hlbiB0aGUgTW9kYWwgaXMgY2xvc2VkLiAqL1xuXG4gICAgICBpZiAoIShoYXNUcmFuc2l0aW9uICYmIF90aGlzLnByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB8fCByZWFzb24gPT09ICd1bm1vdW50Jykge1xuICAgICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLnJlbW92ZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleGl0ZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm1hbmFnZXIucmVtb3ZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleGl0ZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmFja2Ryb3BDbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrICYmIF90aGlzLnByb3BzLm9uQ2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCwgJ2JhY2tkcm9wQ2xpY2snKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gV2UgZG9uJ3QgdGFrZSBldmVudC5kZWZhdWx0UHJldmVudGVkIGludG8gYWNjb3VudDpcbiAgICAgIC8vXG4gICAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvdXJzIGxpa2VcbiAgICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAgIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gICAgICAvLyBPbmx5IHNwZWNpYWwgSFRNTCBlbGVtZW50cyBoYXZlIHRoZXNlIGRlZmF1bHQgYmVoYXZpb3JzLlxuICAgICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgIV90aGlzLmlzVG9wTW9kYWwoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFN3YWxsb3cgdGhlIGV2ZW50LCBpbiBjYXNlIHNvbWVvbmUgaXMgbGlzdGVuaW5nIGZvciB0aGUgZXNjYXBlIGtleSBvbiB0aGUgYm9keS5cblxuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXNjYXBlS2V5RG93bikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVzY2FwZUtleURvd24oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duICYmIF90aGlzLnByb3BzLm9uQ2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUG9ydGFsUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubW91bnROb2RlID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb2RhbFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLm1vZGFsUmVmID0gcmVmO1xuICAgICAgc2V0UmVmKF90aGlzLnByb3BzLmlubmVyUmVmLCByZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5pc1RvcE1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm1hbmFnZXIuaXNUb3BNb2RhbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldERvYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvd25lckRvY3VtZW50KF90aGlzLm1vdW50Tm9kZSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZXhpdGVkOiAhcHJvcHMub3BlblxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLm9wZW4gJiYgIXRoaXMucHJvcHMub3Blbikge1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7XG4gICAgICB9IGVsc2UgaWYgKCFwcmV2UHJvcHMub3BlbiAmJiB0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub3BlbiB8fCBnZXRIYXNUcmFuc2l0aW9uKHRoaXMucHJvcHMpICYmICF0aGlzLnN0YXRlLmV4aXRlZCkge1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCd1bm1vdW50Jyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuQmFja2Ryb3BDb21wb25lbnQsXG4gICAgICAgICAgQmFja2Ryb3BQcm9wcyA9IF90aGlzJHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uLFxuICAgICAgICAgIGNvbnRhaW5lciA9IF90aGlzJHByb3BzLmNvbnRhaW5lcixcbiAgICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3RoaXMkcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgICBkaXNhYmxlQmFja2Ryb3BDbGljayA9IF90aGlzJHByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgICAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBfdGhpcyRwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gX3RoaXMkcHJvcHMuZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgICAgICAgZGlzYWJsZVBvcnRhbCA9IF90aGlzJHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF90aGlzJHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICAgICAgaGlkZUJhY2tkcm9wID0gX3RoaXMkcHJvcHMuaGlkZUJhY2tkcm9wLFxuICAgICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAga2VlcE1vdW50ZWQgPSBfdGhpcyRwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgICAgICBtYW5hZ2VyID0gX3RoaXMkcHJvcHMubWFuYWdlcixcbiAgICAgICAgICBvbkJhY2tkcm9wQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkJhY2tkcm9wQ2xpY2ssXG4gICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb25Fc2NhcGVLZXlEb3duID0gX3RoaXMkcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgICAgIG9uUmVuZGVyZWQgPSBfdGhpcyRwcm9wcy5vblJlbmRlcmVkLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wcy5vcGVuLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWUsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMsIFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUJhY2tkcm9wQ2xpY2tcIiwgXCJkaXNhYmxlRW5mb3JjZUZvY3VzXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImlubmVyUmVmXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUmVuZGVyZWRcIiwgXCJvcGVuXCIsIFwidGhlbWVcIl0pO1xuXG4gICAgICB2YXIgZXhpdGVkID0gdGhpcy5zdGF0ZS5leGl0ZWQ7XG4gICAgICB2YXIgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24odGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZFByb3BzID0ge307IC8vIEl0J3MgYSBUcmFuc2l0aW9uIGxpa2UgY29tcG9uZW50XG5cbiAgICAgIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIGNoaWxkUHJvcHMub25FbnRlciA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyLCBjaGlsZHJlbi5wcm9wcy5vbkVudGVyKTtcbiAgICAgICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRyZW4ucHJvcHMucm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoaWxkUHJvcHMucm9sZSA9IGNoaWxkcmVuLnByb3BzLnJvbGUgfHwgJ2RvY3VtZW50JztcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2hpbGRQcm9wcy50YWJJbmRleCA9IGNoaWxkcmVuLnByb3BzLnRhYkluZGV4IHx8ICctMSc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZXNSZW5kZXIgPSBzdHlsZXModGhlbWUgfHwge1xuICAgICAgICB6SW5kZXg6IHpJbmRleFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIHtcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVBvcnRhbFJlZixcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgICAgIG9uUmVuZGVyZWQ6IHRoaXMuaGFuZGxlUmVuZGVyZWRcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlTW9kYWxSZWYsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gICAgICB9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlc1JlbmRlci5yb290LCAhb3BlbiAmJiBleGl0ZWQgPyBzdHlsZXNSZW5kZXIuaGlkZGVuIDoge30sIG90aGVyLnN0eWxlKVxuICAgICAgfSksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQmFja2Ryb3BDbGlja1xuICAgICAgfSwgQmFja2Ryb3BQcm9wcykpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYXBGb2N1cywge1xuICAgICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzOiBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgICBnZXREb2M6IHRoaXMuZ2V0RG9jLFxuICAgICAgICBpc0VuYWJsZWQ6IHRoaXMuaXNUb3BNb2RhbCxcbiAgICAgICAgb3Blbjogb3BlblxuICAgICAgfSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3BlcnR5IGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSBhbnkgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIGFueSBjYWxsYmFjay5cbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogZnJvbSBgd2l0aEZvcndhcmRSZWZgXG4gICAqL1xuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBBIG1vZGFsIG1hbmFnZXIgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuXG4gICAqIE1vZGFscy4gVGhpcyBlbmFibGVzIGN1c3RvbWl6aW5nIGhvdyBtb2RhbHMgaW50ZXJhY3Qgd2l0aGluIGEgY29udGFpbmVyLlxuICAgKi9cbiAgbWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTpgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKiBJdCBzaWduYWxzIHRoYXQgdGhlIGBvcGVuPXt0cnVlfWAgcHJvcGVydHkgdG9vayBlZmZlY3QuXG4gICAqL1xuICBvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBCYWNrZHJvcENvbXBvbmVudDogU2ltcGxlQmFja2Ryb3AsXG4gIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uOiBmYWxzZSxcbiAgZGlzYWJsZUF1dG9Gb2N1czogZmFsc2UsXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogZmFsc2UsXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBmYWxzZSxcbiAgZGlzYWJsZVBvcnRhbDogZmFsc2UsXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IGZhbHNlLFxuICBoaWRlQmFja2Ryb3A6IGZhbHNlLFxuICBrZWVwTW91bnRlZDogZmFsc2UsXG4gIC8vIE1vZGFscyBkb24ndCBvcGVuIG9uIHRoZSBzZXJ2ZXIgc28gdGhpcyB3b24ndCBjb25mbGljdCB3aXRoIGNvbmN1cnJlbnQgcmVxdWVzdHMuXG4gIG1hbmFnZXI6IG5ldyBNb2RhbE1hbmFnZXIoKVxufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZSh3aXRoRm9yd2FyZGVkUmVmKE1vZGFsKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgPiAza2IuXG5cbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSwgMTApIHx8IDA7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNoYWRvdyB0ZXh0YXJlYSBlbGVtZW50LiAqL1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAnMCdcbiAgfVxufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqXG4gKiBUbyBtYWtlIHB1YmxpYyBpbiB2NCsuXG4gKi9cblxudmFyIFRleHRhcmVhID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0YXJlYShwcm9wcywgcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIm9uQ2hhbmdlXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJzdHlsZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHt9KSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgc3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0U3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBzaGFkb3dSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWYpO1xuICB2YXIgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIHZhciBpbnB1dFNoYWxsb3cgPSBzaGFkb3dSZWYuY3VycmVudDtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlucHV0KTtcbiAgICBpbnB1dFNoYWxsb3cuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9IGlucHV0LnZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyIHx8ICd4JzsgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuXG4gICAgdmFyIGlubmVySGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcbiAgICB2YXIgYm94U2l6aW5nID0gY29tcHV0ZWRTdHlsZVsnYm94LXNpemluZyddOyAvLyBNZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG5cbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgdmFyIHNpbmdsZVJvd0hlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQ7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIG91dGVyIGNvbnRlbnRcblxuICAgIHZhciBvdXRlckhlaWdodCA9IGlubmVySGVpZ2h0O1xuXG4gICAgaWYgKHJvd3MgIT0gbnVsbCkge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIocm93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAocm93c01heCAhPSBudWxsKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihyb3dzTWF4KSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7XG5cbiAgICBpZiAoYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgICBvdXRlckhlaWdodCAtPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdwYWRkaW5nLWJvdHRvbScpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy10b3AnKTtcbiAgICB9IGVsc2UgaWYgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICBvdXRlckhlaWdodCArPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItYm90dG9tLXdpZHRoJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItdG9wLXdpZHRoJyk7XG4gICAgfVxuXG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbnQgdG8gdXBkYXRlIHRoZSBoZWlnaHQuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgaWYgKGlubmVySGVpZ2h0ID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLmlubmVySGVpZ2h0IHx8IDApIC0gaW5uZXJIZWlnaHQpID4gMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlubmVySGVpZ2h0OiBpbm5lckhlaWdodCxcbiAgICAgICAgICBvdXRlckhlaWdodDogb3V0ZXJIZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICB9KTtcbiAgfSwgW3NldFN0YXRlLCByb3dzLCByb3dzTWF4LCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfSwgMTY2KTsgLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW3N5bmNIZWlnaHRdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHN5bmNIZWlnaHQoKTtcbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgX2V4dGVuZHMoe1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0LFxuICAgICAgb3ZlcmZsb3c6IHN0YXRlLm91dGVySGVpZ2h0ID09PSBzdGF0ZS5pbm5lckhlaWdodCA/ICdoaWRkZW4nIDogbnVsbFxuICAgIH0sIHN0eWxlKVxuICB9LCBvdGhlcikpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICByZWFkT25seTogdHJ1ZSxcbiAgICByZWY6IHNoYWRvd1JlZixcbiAgICB0YWJJbmRleDogLTEsXG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMuc2hhZG93LCBzdHlsZSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzLCBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnLi9UZXh0YXJlYSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICB2YXIgcGxhY2Vob2xkZXJWaXNpYmxlID0ge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9O1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgLy8gTWltaWNzIHRoZSBkZWZhdWx0IGlucHV0IGRpc3BsYXkgcHJvcGVydHkgdXNlZCBieSBicm93c2VycyBmb3IgYW4gaW5wdXQuXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE2KSxcbiAgICAgIGxpbmVIZWlnaHQ6ICcxLjE4NzVlbScsXG4gICAgICAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICAgICAgY3Vyc29yOiAndGV4dCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCg4IC0gMiwgXCJweCAwIFwiKS5jb25jYXQoOCAtIDEsIFwicHhcIiksXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBoZWlnaHQ6ICcxLjE4NzVlbScsXG4gICAgICAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIC8vIFJlc2V0IGZvciBTYWZhcmlcbiAgICAgIC8vIFJlbW92ZSBncmV5IGhpZ2hsaWdodFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIEZpeCBJRSAxMSB3aWR0aCBpc3N1ZVxuICAgICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBJRSAxMVxuICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRWRnZVxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIG91dGxpbmU6IDBcbiAgICAgIH0sXG4gICAgICAvLyBSZXNldCBGaXJlZm94IGludmFsaWQgcmVxdWlyZWQgaW5wdXQgc3R5bGVcbiAgICAgICcmOmludmFsaWQnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24nOiB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyB3aGVuIHR5cGU9c2VhcmNoLlxuICAgICAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgLy8gU2hvdyBhbmQgaGlkZSB0aGUgcGxhY2Vob2xkZXIgbG9naWNcbiAgICAgICdsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAkZm9ybUNvbnRyb2wgJic6IHtcbiAgICAgICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gRWRnZVxuICAgICAgICAnJjpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgJyY6Zm9jdXM6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgJyY6Zm9jdXM6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSAvLyBFZGdlXG5cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgb3BhY2l0eTogMSAvLyBSZXNldCBpT1Mgb3BhY2l0eVxuXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge1xuICAgICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJyxcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHt9XG4gIH07XG59O1xuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cblxudmFyIElucHV0QmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFEZXNjcmliZWRieSA9IHByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgICBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZW5kQWRvcm5tZW50ID0gcHJvcHMuZW5kQWRvcm5tZW50LFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcztcbiAgX3Byb3BzJGlucHV0UHJvcHMgPSBfcHJvcHMkaW5wdXRQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkaW5wdXRQcm9wcztcblxuICB2YXIgaW5wdXRQcm9wc0NsYXNzTmFtZSA9IF9wcm9wcyRpbnB1dFByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGlucHV0UHJvcHNQcm9wID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcyRpbnB1dFByb3BzLCBbXCJjbGFzc05hbWVcIl0pLFxuICAgICAgaW5wdXRSZWZQcm9wID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkVtcHR5ID0gcHJvcHMub25FbXB0eSxcbiAgICAgIG9uRmlsbGVkID0gcHJvcHMub25GaWxsZWQsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAgPSBwcm9wcy5vbktleVVwLFxuICAgICAgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZW5kZXJQcmVmaXggPSBwcm9wcy5yZW5kZXJQcmVmaXgsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgc3RhcnRBZG9ybm1lbnQgPSBwcm9wcy5zdGFydEFkb3JubWVudCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsaWNrXCIsIFwib25FbXB0eVwiLCBcIm9uRmlsbGVkXCIsIFwib25Gb2N1c1wiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyUHJlZml4XCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJzdGFydEFkb3JubWVudFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZldhcm5pbmcgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFpbnN0YW5jZSB8fCBpbnN0YW5jZSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgfHwgaW5zdGFuY2UuZm9jdXMsIFsnTWF0ZXJpYWwtVUk6IHlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYGlucHV0UmVmYCBwcm9wZXJ0eS4nLCAnTWFrZSBzdXJlIHRoZSBgaW5wdXRSZWZgIHByb3BlcnR5IGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZUlucHV0UHJvcHNSZWZQcm9wID0gdXNlRm9ya1JlZihpbnB1dFByb3BzUHJvcC5yZWYsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UmVmUHJvcCwgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3ApO1xuICB2YXIgaGFuZGxlSW5wdXRSZWYgPSB1c2VGb3JrUmVmKGlucHV0UmVmLCBoYW5kbGVJbnB1dFJlZlByb3ApO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnbWFyZ2luJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7IC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBkaXNhYmxlZCwgZm9jdXNlZCwgb25CbHVyXSk7XG4gIHZhciBjaGVja0RpcnR5ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChpc0ZpbGxlZChvYmopKSB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQpIHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eSkge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25FbXB0eSgpO1xuICAgIH1cblxuICAgIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIG9uRW1wdHksIG9uRmlsbGVkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KGlucHV0UmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgfSwgW2NoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUgMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IChldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudCkudmFsdWVcbiAgICAgIH0pO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIG9uQ2hhbmdlLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIElucHV0Q29tcG9uZW50ID0gaW5wdXRDb21wb25lbnQ7XG5cbiAgdmFyIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wc1Byb3AsIHtcbiAgICByZWY6IGhhbmRsZUlucHV0UmVmXG4gIH0pO1xuXG4gIGlmICh0eXBlb2YgSW5wdXRDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIC8vIFJlbmFtZSByZWYgdG8gaW5wdXRSZWYgYXMgd2UgZG9uJ3Qga25vdyB0aGVcbiAgICAgIC8vIHByb3ZpZGVkIGBpbnB1dENvbXBvbmVudGAgc3RydWN0dXJlLlxuICAgICAgaW5wdXRSZWY6IGhhbmRsZUlucHV0UmVmLFxuICAgICAgdHlwZTogdHlwZVxuICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgIHJlZjogbnVsbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKG11bHRpbGluZSkge1xuICAgIGlmIChyb3dzICYmICFyb3dzTWF4KSB7XG4gICAgICBJbnB1dENvbXBvbmVudCA9ICd0ZXh0YXJlYSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIHJvd3NNYXg6IHJvd3NNYXhcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgICAgSW5wdXRDb21wb25lbnQgPSBUZXh0YXJlYTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCwgZmNzLmZvY3VzZWQgJiYgY2xhc3Nlcy5mb2N1c2VkLCBtdWlGb3JtQ29udHJvbCAmJiBjbGFzc2VzLmZvcm1Db250cm9sLCBmY3MubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMubWFyZ2luRGVuc2UsIG11bHRpbGluZSAmJiBjbGFzc2VzLm11bHRpbGluZSwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5hZG9ybmVkU3RhcnQsIGVuZEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRFbmQsIGNsYXNzTmFtZVByb3ApLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgcmVuZGVyUHJlZml4ID8gcmVuZGVyUHJlZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICBzdGFydEFkb3JubWVudDogc3RhcnRBZG9ybm1lbnRcbiAgfSkpIDogbnVsbCwgc3RhcnRBZG9ybm1lbnQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG51bGxcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgdHlwZSA9PT0gJ3NlYXJjaCcgJiYgY2xhc3Nlcy5pbnB1dFR5cGVTZWFyY2gsIG11bHRpbGluZSAmJiBjbGFzc2VzLmlucHV0TXVsdGlsaW5lLCBmY3MubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMuaW5wdXRNYXJnaW5EZW5zZSwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkRW5kLCBpbnB1dFByb3BzQ2xhc3NOYW1lKSxcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGlkOiBpZCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgIHJvd3M6IHJvd3MsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0sIGlucHV0UHJvcHMpKSksIGVuZEFkb3JubWVudCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSB3cmFwcGVyIGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZSwgdXNlZnVsIHdoZW4gbm90IGNvbnRyb2xsaW5nIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGluZGljYXRlIGFuIGVycm9yLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVtcHR5OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25GaWxsZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZW5kZXJQcmVmaXg6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnXG59KShJbnB1dEJhc2UpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vQXBwXCI7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcC1yb290XCIpKTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGJhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gY2EoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZCxjLGUsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7ayhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtlPWFbaF07dmFyIGY9YitUKGUsaCk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxoKyspLGcrPVMoZSxmLGQsYyk7ZWxzZVwib2JqZWN0XCI9PT1lJiYoZD1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O251bGw9PT1hP0IoXCIzMjFcIik6dm9pZCAwO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmJhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmFhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9XG5iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi44LjZcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudE93bmVyOkosYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtjLGQsZSxmLGcsaF0saz0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbaysrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHgoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp4KFwiMjI3XCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCxsKXt2YXIgaz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxrKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGwpe2RhPSExO2VhPW51bGw7Y2EuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsbCl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGs9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHgoXCIxOThcIiksaz12b2lkIDA7ZmF8fChmYT0hMCxoYT1rKX19dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOngoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp4KFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP3goXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBsPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYobCl7Zm9yKGUgaW4gbClsLmhhc093blByb3BlcnR5KGUpJiZxYShsW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp4KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP3goXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fSx0YT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe251bGw9PWI/eChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIEJhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2xhP3goXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/eChcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9fTtcbmZ1bmN0aW9uIENhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIERhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhJiYoeWEoYSxBYSksemE/eChcIjk1XCIpOnZvaWQgMCxmYSkpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gSmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3goXCIzM1wiKX1mdW5jdGlvbiBLYShhKXtyZXR1cm4gYVtHYV18fG51bGx9ZnVuY3Rpb24gTGEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBNYShhLGIsYyl7aWYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gTmEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1MYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTWEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylNYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBPYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFBhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmT2EoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUWEoYSl7eWEoYSxOYSl9dmFyIFJhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLCRhPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxhYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmI9bnVsbCxjYj1udWxsLGRiPW51bGw7XG5mdW5jdGlvbiBlYigpe2lmKGRiKXJldHVybiBkYjt2YXIgYSxiPWNiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGRiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZmIoKXtyZXR1cm4hMH1mdW5jdGlvbiBnYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/ZmI6Z2I7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYjtyZXR1cm4gdGhpc31cbm4oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1mYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1mYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1mYn0saXNQZXJzaXN0ZW50OmdiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWdiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2hiKGMpO3JldHVybiBjfTtoYih5KTtmdW5jdGlvbiBpYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBqYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6eChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBoYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1pYjthLnJlbGVhc2U9amJ9dmFyIGtiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxsYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbWI9WzksMTMsMjcsMzJdLG5iPVJhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxvYj1udWxsO1JhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihvYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHBiPVJhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhb2IscWI9UmEmJighbmJ8fG9iJiY4PG9iJiYxMT49b2IpLHJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHNiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHRiPSExO1xuZnVuY3Rpb24gdWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1tYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHZiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHdiPSExO2Z1bmN0aW9uIHhiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dGI9ITA7cmV0dXJuIHJiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXJiJiZ0Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB5YihhLGIpe2lmKHdiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFuYiYmdWIoYSxiKT8oYT1lYigpLGRiPWNiPWJiPW51bGwsd2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHFiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB6Yj17ZXZlbnRUeXBlczpzYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYobmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1zYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1zYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9c2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHdiP3ViKGEsYykmJihlPXNiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9c2IuY29tcG9zaXRpb25TdGFydCk7ZT8ocWImJlwia29cIiE9PWMubG9jYWxlJiYod2J8fGUhPT1zYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1zYi5jb21wb3NpdGlvbkVuZCYmd2ImJihmPWViKCkpOihiYj1kLGNiPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LHdiPVxuITApKSxlPWtiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXZiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxRYShlKSxmPWUpOmY9bnVsbDsoYT1wYj94YihhLGMpOnliKGEsYykpPyhiPWxiLmdldFBvb2xlZChzYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQWI9bnVsbCxCYj1udWxsLENiPW51bGw7ZnVuY3Rpb24gRGIoYSl7aWYoYT11YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIEFiP3goXCIyODBcIik6dm9pZCAwO3ZhciBiPXRhKGEuc3RhdGVOb2RlKTtBYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEViKGEpe0JiP0NiP0NiLnB1c2goYSk6Q2I9W2FdOkJiPWF9ZnVuY3Rpb24gRmIoKXtpZihCYil7dmFyIGE9QmIsYj1DYjtDYj1CYj1udWxsO0RiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylEYihiW2FdKX19XG5mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj0hMTtmdW5jdGlvbiBLYihhLGIpe2lmKEpiKXJldHVybiBhKGIpO0piPSEwO3RyeXtyZXR1cm4gR2IoYSxiKX1maW5hbGx5e2lmKEpiPSExLG51bGwhPT1CYnx8bnVsbCE9PUNiKUliKCksRmIoKX19dmFyIExiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIE1iKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhTGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gTmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIE9iKGEpe2lmKCFSYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBQYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gUWIoYSl7dmFyIGI9UGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFJiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1RYihhKSl9ZnVuY3Rpb24gU2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVBiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIFRiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1RiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1xudmFyIFViPS9eKC4qKVtcXFxcXFwvXS8sej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFZiPXo/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsV2I9ej9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LFhiPXo/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LFliPXo/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LFpiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LCRiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGFjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsYmM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGNjPXo/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGRjPXo/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGVjPXo/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxmYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGdjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBoYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9Z2MmJmFbZ2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBpYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGJjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIFhiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIFdiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBaYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBZYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGRjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgYWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSAkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGNjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBlYzpyZXR1cm4gaWMoYS50eXBlKTtjYXNlIGZjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gaWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gamMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPWljKGEudHlwZSk7Yz1udWxsO2QmJihjPWljKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoVWIsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBrYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxtYz17fSxuYz17fTtcbmZ1bmN0aW9uIG9jKGEpe2lmKGxjLmNhbGwobmMsYSkpcmV0dXJuITA7aWYobGMuY2FsbChtYyxhKSlyZXR1cm4hMTtpZihrYy50ZXN0KGEpKXJldHVybiBuY1thXT0hMDttY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQyhiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHJjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2MoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsXG5zYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbmZ1bmN0aW9uIHRjKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHFjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gdWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIHdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXVjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24geGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24geWMoYSxiKXt4YyhhLGIpO3ZhciBjPXVjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP3pjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJnpjKGEsYi50eXBlLHVjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gQWMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gemMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBCYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBDYyhhLGIsYyl7YT15LmdldFBvb2xlZChCYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0ViKGMpO1FhKGEpO3JldHVybiBhfXZhciBEYz1udWxsLEVjPW51bGw7ZnVuY3Rpb24gRmMoYSl7RGEoYSl9XG5mdW5jdGlvbiBHYyhhKXt2YXIgYj1KYShhKTtpZihTYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBIYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBJYz0hMTtSYSYmKEljPU9iKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIEpjKCl7RGMmJihEYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYyksRWM9RGM9bnVsbCl9ZnVuY3Rpb24gS2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkdjKEVjKSYmKGE9Q2MoRWMsYSxOYihhKSksS2IoRmMsYSkpfWZ1bmN0aW9uIExjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhKYygpLERjPWIsRWM9YyxEYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYykpOlwiYmx1clwiPT09YSYmSmMoKX1mdW5jdGlvbiBNYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBHYyhFYyl9XG5mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIEdjKGIpfWZ1bmN0aW9uIE9jKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIEdjKGIpfVxudmFyIFBjPXtldmVudFR5cGVzOkJjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6SWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1IYzpNYihlKT9JYz9mPU9jOihmPU1jLGc9TGMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPU5jKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBDYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJnpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFFjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxSYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBTYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVJjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gVGMoKXtyZXR1cm4gU2N9XG52YXIgVWM9MCxWYz0wLFdjPSExLFhjPSExLFljPVFjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1VYztVYz1hLnNjcmVlblg7cmV0dXJuIFdjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooV2M9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1WYztWYz1hLnNjcmVlblk7cmV0dXJuIFhjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooWGM9ITAsMCl9fSksWmM9WWMuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLCRjPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxhZD17ZXZlbnRUeXBlczokYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwLGs9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9WWMsaD0kYy5tb3VzZUxlYXZlLGw9JGMubW91c2VFbnRlcixrPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9WmMsaD0kYy5wb2ludGVyTGVhdmUsbD0kYy5wb2ludGVyRW50ZXIsaz1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9aytcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGwsYixjLGQpO2MudHlwZT1rK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7az0wO2ZvcihnPWI7ZztnPUxhKGcpKWsrKztnPTA7Zm9yKGw9ZTtsO2w9TGEobCkpZysrO2Zvcig7MDxrLWc7KWI9TGEoYiksay0tO2Zvcig7MDxnLWs7KWU9TGEoZSksZy0tO2Zvcig7ay0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7az1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2s9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBiZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGNkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBkZChhLGIpe2lmKGJkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighY2QuY2FsbChiLGNbZF0pfHwhYmQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBlZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBmZChhKXsyIT09ZWQoYSk/eChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1lZChhKSwzPT09Yj94KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBmZChlKSxhO2lmKGc9PT1kKXJldHVybiBmZChlKSxiO2c9Zy5zaWJsaW5nfXgoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp4KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/eChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3goXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGQoYSl7YT1nZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBpZD15LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksamQ9eS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxrZD1RYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIGxkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIG1kPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxuZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sb2Q9UWMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPW1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWxkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9uZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/bGQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/bGQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxwZD1ZYy5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSkscWQ9UWMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGN9KSxyZD15LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1ZYy5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1hhLFwiYW5pbWF0aW9uRW5kXCJdLFtZYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbWmEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFskYSxcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHVkPXt9LHZkPXt9O2Z1bmN0aW9uIHdkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07dWRbYV09Yjt2ZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITApfSk7dGQuZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCExKX0pO1xudmFyIHhkPXtldmVudFR5cGVzOnVkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPXZkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWxkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1vZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9a2Q7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1ZYzticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPWlkO2JyZWFrO2Nhc2UgJGE6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1RYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9amQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1aYzticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0seWQ9eGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuemQ9W107ZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SGEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8b2EubGVuZ3RoO2grKyl7dmFyIGw9b2FbaF07bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eGEoZyxsKSl9RGEoZyl9fXZhciBCZD0hMDtcbmZ1bmN0aW9uIEUoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBFZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIENkKGEsYil7SGIoRGQsYSxiKX1cbmZ1bmN0aW9uIERkKGEsYil7aWYoQmQpe3ZhciBjPU5iKGIpO2M9SGEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1lZChjKXx8KGM9bnVsbCk7aWYoemQubGVuZ3RoKXt2YXIgZD16ZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtLYihBZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnpkLmxlbmd0aCYmemQucHVzaChhKX19fXZhciBGZD17fSxHZD0wLEhkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIElkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEhkKXx8KGFbSGRdPUdkKyssRmRbYVtIZF1dPXt9KTtyZXR1cm4gRmRbYVtIZF1dfWZ1bmN0aW9uIEpkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBLZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZChhLGIpe3ZhciBjPUtkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtkKGMpfX1mdW5jdGlvbiBNZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01kKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5kKCl7Zm9yKHZhciBhPXdpbmRvdyxiPUpkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPUpkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9kKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBQZCgpe3ZhciBhPU5kKCk7aWYoT2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2I9KGI9YS5vd25lckRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBjPWIuZ2V0U2VsZWN0aW9uJiZiLmdldFNlbGVjdGlvbigpO2lmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQSl7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsbD0wLGs9MCxtPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHQ7Oyl7bSE9PWJ8fDAhPT1kJiYzIT09bS5ub2RlVHlwZXx8KGc9ZitkKTttIT09ZXx8MCE9PWMmJjMhPT1tLm5vZGVUeXBlfHwoaD1mK2MpOzM9PT1tLm5vZGVUeXBlJiYoZis9bS5ub2RlVmFsdWUubGVuZ3RoKTtcbmlmKG51bGw9PT0odD1tLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bTttPXR9Zm9yKDs7KXtpZihtPT09YSlicmVhayBiO3A9PT1iJiYrK2w9PT1kJiYoZz1mKTtwPT09ZSYmKytrPT09YyYmKGg9Zik7aWYobnVsbCE9PSh0PW0ubmV4dFNpYmxpbmcpKWJyZWFrO209cDtwPW0ucGFyZW50Tm9kZX1tPXR9Yj0tMT09PWd8fC0xPT09aD9udWxsOntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtyZXR1cm57Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifX1cbmZ1bmN0aW9uIFFkKGEpe3ZhciBiPU5kKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZNZChjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmT2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9TGQoYyxmKTt2YXIgZz1MZChjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFJkPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsU2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFRkPW51bGwsVWQ9bnVsbCxWZD1udWxsLFdkPSExO1xuZnVuY3Rpb24gWGQoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihXZHx8bnVsbD09VGR8fFRkIT09SmQoYykpcmV0dXJuIG51bGw7Yz1UZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZPZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBWZCYmZGQoVmQsYyk/bnVsbDooVmQ9YyxhPXkuZ2V0UG9vbGVkKFNkLnNlbGVjdCxVZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVRkLFFhKGEpLGEpfVxudmFyIFlkPXtldmVudFR5cGVzOlNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPUlkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9KYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKE1iKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVRkPWUsVWQ9YixWZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6VmQ9VWQ9VGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6V2Q9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBXZD0hMSxYZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihSZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIFhkKGMsZCl9cmV0dXJuIG51bGx9fTtCYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3RhPUthO3VhPUlhO3ZhPUphO0JhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46eGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmFkLENoYW5nZUV2ZW50UGx1Z2luOlBjLFNlbGVjdEV2ZW50UGx1Z2luOllkLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46emJ9KTtmdW5jdGlvbiBaZChhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRkKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9WmQoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGFlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gYmUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gY2UoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz94KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6eChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWMoYyl9fVxuZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz11YyhiLnZhbHVlKSxkPXVjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gZWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGZlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGdlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gaGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2dlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGllPXZvaWQgMCxqZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1mZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtpZT1pZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1pZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBrZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIGxlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG1lPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhsZSkuZm9yRWFjaChmdW5jdGlvbihhKXttZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2xlW2JdPWxlW2FdfSl9KTtmdW5jdGlvbiBuZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bGUuaGFzT3duUHJvcGVydHkoYSkmJmxlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG9lKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW5lKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHBlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBxZShhLGIpe2ImJihwZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj94KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOngoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3goXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiByZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBzZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1JZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpFZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6RWQoXCJmb2N1c1wiLGEpO0VkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpPYihlKSYmRWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWIuaW5kZXhPZihlKSYmRShlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB0ZSgpe312YXIgdWU9bnVsbCx2ZT1udWxsO1xuZnVuY3Rpb24gd2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIHhlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQWU9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEJlPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBDZShhLGIsYyxkLGUpe2FbR2FdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJnhjKGEsZSk7cmUoYyxkKTtkPXJlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/b2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2plKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9rZShhLGgpOnRjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/YWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2FlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmFlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBEZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEVlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBGZT1bXSxHZT0tMTtmdW5jdGlvbiBGKGEpezA+R2V8fChhLmN1cnJlbnQ9RmVbR2VdLEZlW0dlXT1udWxsLEdlLS0pfWZ1bmN0aW9uIEcoYSxiKXtHZSsrO0ZlW0dlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEhlPXt9LEg9e2N1cnJlbnQ6SGV9LEk9e2N1cnJlbnQ6ITF9LEllPUhlO1xuZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBIZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBKKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gS2UoYSl7RihJLGEpO0YoSCxhKX1mdW5jdGlvbiBMZShhKXtGKEksYSk7RihILGEpfVxuZnVuY3Rpb24gTWUoYSxiLGMpe0guY3VycmVudCE9PUhlP3goXCIxNjhcIik6dm9pZCAwO0coSCxiLGEpO0coSSxjLGEpfWZ1bmN0aW9uIE5lKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOngoXCIxMDhcIixpYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBPZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEhlO0llPUguY3VycmVudDtHKEgsYixhKTtHKEksSS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOngoXCIxNjlcIik7Yz8oYj1OZShhLGIsSWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixGKEksYSksRihILGEpLEcoSCxiLGEpKTpGKEksYSk7RyhJLGMsYSl9dmFyIFFlPW51bGwsUmU9bnVsbDtmdW5jdGlvbiBTZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gVGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7UWU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1JlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBVZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBLKGEsYixjLGQpe3JldHVybiBuZXcgVWUoYSxiLGMsZCl9XG5mdW5jdGlvbiBWZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFdlKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBWZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Y2MpcmV0dXJuIDExO2lmKGE9PT1lYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBYZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUsoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFllKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlWZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBYYjpyZXR1cm4gWmUoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBiYzpyZXR1cm4gJGUoYyxlfDMsZixiKTtjYXNlIFliOnJldHVybiAkZShjLGV8MixmLGIpO2Nhc2UgWmI6cmV0dXJuIGE9SygxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPVpiLGEudHlwZT1aYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGRjOnJldHVybiBhPUsoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9ZGMsYS50eXBlPWRjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSAkYjpnPTEwO2JyZWFrIGE7Y2FzZSBhYzpnPTk7YnJlYWsgYTtjYXNlIGNjOmc9MTE7YnJlYWsgYTtjYXNlIGVjOmc9XG4xNDticmVhayBhO2Nhc2UgZmM6Zz0xNjtkPW51bGw7YnJlYWsgYX14KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9SyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFplKGEsYixjLGQpe2E9Syg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gJGUoYSxiLGMsZCl7YT1LKDgsYSxkLGIpO2I9MD09PShiJjEpP1liOmJjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiLGMpe2E9Syg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBiZihhLGIsYyl7Yj1LKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGNmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZWYoYSxiKXthLmRpZEVycm9yPSExO2lmKDA9PT1iKWEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wO2Vsc2V7YjxhLmxhdGVzdFBpbmdlZFRpbWUmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5sYXRlc3RQZW5kaW5nVGltZTswIT09YyYmKGM+Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5iJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2NmKGEsYik6YjxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsY2YoYSxiKSk6XG5iPmMmJmNmKGEsYil9ZGYoMCxhKX1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7YS5sYXRlc3RQaW5nZWRUaW1lPj1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZSxkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM8Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ+YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZ2YoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZGYoYSxiKXt2YXIgYz1iLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWIubGF0ZXN0U3VzcGVuZGVkVGltZSxlPWIuZWFybGllc3RQZW5kaW5nVGltZSxmPWIubGF0ZXN0UGluZ2VkVGltZTtlPTAhPT1lP2U6ZjswPT09ZSYmKDA9PT1hfHxkPGEpJiYoZT1kKTthPWU7MCE9PWEmJmM+YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBMKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgamY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBrZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciB0Zj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWVkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9cmY7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1sZigpO2M9bWYoYyxhKTt2YXIgZD1uZihjKTtkLnRhZz1cbnNmO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtvZigpO3BmKGEsZCk7cWYoYSxjKX19O2Z1bmN0aW9uIHVmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWRkKGMsZCl8fCFkZChlLGYpOiEwfVxuZnVuY3Rpb24gdmYoYSxiLGMpe3ZhciBkPSExLGU9SGU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TShmKTooZT1KKGIpP0llOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0plKGEsZSk6SGUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj10ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiB3ZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiB4ZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TShmKTooZj1KKGIpP0llOkguY3VycmVudCxlLmNvbnRleHQ9SmUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgemY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEFmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz94KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp4KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1qZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT94KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6eChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gQmYoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJngoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIENmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9WGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1hZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9QWYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVllKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUFmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WmUoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWFmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjPVllKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUFmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBXYjpyZXR1cm4gYj1iZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoemYoYil8fFxuaGMoYikpcmV0dXJuIGI9WmUoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7QmYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB0KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09WGI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlIFdiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKHpmKGMpfHxoYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7QmYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBBKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVhiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlIFdiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKHpmKGQpfHxoYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7QmYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxxPWcsdT1nPTAsQj1udWxsO251bGwhPT1xJiZ1PGgubGVuZ3RoO3UrKyl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdz10KGUscSxoW3VdLGspO2lmKG51bGw9PT13KXtudWxsPT09cSYmKHE9Qik7YnJlYWt9YSYmXG5xJiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodyxnLHUpO251bGw9PT1tP2w9dzptLnNpYmxpbmc9dzttPXc7cT1CfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYocT1wKGUsaFt1XSxrKSlnPWYocSxnLHUpLG51bGw9PT1tP2w9cTptLnNpYmxpbmc9cSxtPXE7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpO3U8aC5sZW5ndGg7dSsrKWlmKEI9QShxLGUsdSxoW3VdLGspKWEmJm51bGwhPT1CLmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PUIua2V5P3U6Qi5rZXkpLGc9ZihCLGcsdSksbnVsbD09PW0/bD1COm0uc2libGluZz1CLG09QjthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9aGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/eChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD94KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLEI9bnVsbCx3PWgubmV4dCgpO251bGwhPT1xJiYhdy5kb25lO3UrKyx3PWgubmV4dCgpKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB2PXQoZSxxLHcudmFsdWUsayk7aWYobnVsbD09PXYpe3F8fChxPUIpO2JyZWFrfWEmJnEmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih2LGcsdSk7bnVsbD09PW0/bD12Om0uc2libGluZz12O209djtxPUJ9aWYody5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9cChlLHcudmFsdWUsayksbnVsbCE9PXcmJihnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9QShxLGUsdSx3LnZhbHVlLGspLG51bGwhPT13JiYoYSYmbnVsbCE9PXcuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09dy5rZXk/dTpcbncua2V5KSxnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVhiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFZiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09WGI6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09WGI/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUFmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09WGI/KGQ9WmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVllKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUFmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBXYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWJmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1hZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZih6ZihmKSlyZXR1cm4gdihhLGQsZixoKTtpZihoYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZCZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHgoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBEZj1DZighMCksRWY9Q2YoITEpLEZmPXt9LE49e2N1cnJlbnQ6RmZ9LEdmPXtjdXJyZW50OkZmfSxIZj17Y3VycmVudDpGZn07ZnVuY3Rpb24gSWYoYSl7YT09PUZmP3goXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gSmYoYSxiKXtHKEhmLGIsYSk7RyhHZixhLGEpO0coTixGZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpoZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9aGUoYixjKX1GKE4sYSk7RyhOLGIsYSl9ZnVuY3Rpb24gS2YoYSl7RihOLGEpO0YoR2YsYSk7RihIZixhKX1mdW5jdGlvbiBMZihhKXtJZihIZi5jdXJyZW50KTt2YXIgYj1JZihOLmN1cnJlbnQpO3ZhciBjPWhlKGIsYS50eXBlKTtiIT09YyYmKEcoR2YsYSxhKSxHKE4sYyxhKSl9ZnVuY3Rpb24gTWYoYSl7R2YuY3VycmVudD09PWEmJihGKE4sYSksRihHZixhKSl9XG52YXIgTmY9MCxPZj0yLFBmPTQsUWY9OCxSZj0xNixTZj0zMixUZj02NCxVZj0xMjgsVmY9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixXZj0wLFhmPW51bGwsTz1udWxsLFA9bnVsbCxZZj1udWxsLFE9bnVsbCxaZj1udWxsLCRmPTAsYWc9bnVsbCxiZz0wLGNnPSExLGRnPW51bGwsZWc9MDtmdW5jdGlvbiBmZygpe3goXCIzMjFcIil9ZnVuY3Rpb24gZ2coYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighYmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGhnKGEsYixjLGQsZSxmKXtXZj1mO1hmPWI7UD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtWZi5jdXJyZW50PW51bGw9PT1QP2lnOmpnO2I9YyhkLGUpO2lmKGNnKXtkbyBjZz0hMSxlZys9MSxQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFpmPVlmLGFnPVE9Tz1udWxsLFZmLmN1cnJlbnQ9amcsYj1jKGQsZSk7d2hpbGUoY2cpO2RnPW51bGw7ZWc9MH1WZi5jdXJyZW50PWtnO2E9WGY7YS5tZW1vaXplZFN0YXRlPVlmO2EuZXhwaXJhdGlvblRpbWU9JGY7YS51cGRhdGVRdWV1ZT1hZzthLmVmZmVjdFRhZ3w9Ymc7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7YT94KFwiMzAwXCIpOnZvaWQgMDtyZXR1cm4gYn1mdW5jdGlvbiBsZygpe1ZmLmN1cnJlbnQ9a2c7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2NnPSExO2RnPW51bGw7ZWc9MH1cbmZ1bmN0aW9uIG1nKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1RP1lmPVE9YTpRPVEubmV4dD1hO3JldHVybiBRfWZ1bmN0aW9uIG5nKCl7aWYobnVsbCE9PVpmKVE9WmYsWmY9US5uZXh0LE89UCxQPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7bnVsbD09PVA/eChcIjMxMFwiKTp2b2lkIDA7Tz1QO3ZhciBhPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUscXVldWU6Ty5xdWV1ZSxiYXNlVXBkYXRlOk8uYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1E9bnVsbD09PVE/WWY9YTpRLm5leHQ9YTtQPU8ubmV4dH1yZXR1cm4gUX1mdW5jdGlvbiBvZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPW5nKCksYz1iLnF1ZXVlO251bGw9PT1jP3goXCIzMTFcIik6dm9pZCAwO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8ZWcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWRnKXt2YXIgZT1kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7ZGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBoPWU9bnVsbCxsPWQsaz0hMTtkb3t2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208V2Y/KGt8fChrPSEwLGg9ZyxlPWYpLG0+JGYmJigkZj1tKSk6Zj1sLmVhZ2VyUmVkdWNlcj09PWE/bC5lYWdlclN0YXRlOmEoZixsLmFjdGlvbik7Zz1sO2w9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09ZCk7a3x8KGg9ZyxlPWYpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1hZz8oYWc9e2xhc3RFZmZlY3Q6bnVsbH0sYWcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9YWcubGFzdEVmZmVjdCxudWxsPT09Yj9hZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxhZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzZyhhLGIsYyxkKXt2YXIgZT1tZygpO2JnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHRnKGEsYixjLGQpe3ZhciBlPW5nKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmZ2coZCxnLmRlcHMpKXtyZyhOZixjLGYsZCk7cmV0dXJufX1iZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLGYsZCl9ZnVuY3Rpb24gdWcoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2Zygpe31cbmZ1bmN0aW9uIHdnKGEsYixjKXsyNT5lZz92b2lkIDA6eChcIjMwMVwiKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09WGZ8fG51bGwhPT1kJiZkPT09WGYpaWYoY2c9ITAsYT17ZXhwaXJhdGlvblRpbWU6V2YsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PWRnJiYoZGc9bmV3IE1hcCksYz1kZy5nZXQoYiksdm9pZCAwPT09YylkZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXtvZigpO3ZhciBlPWxmKCk7ZT1tZihlLGEpO3ZhciBmPXtleHBpcmF0aW9uVGltZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiYoZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PVxuZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgbD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZChsLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWs7aWYoYmQoayxsKSlyZXR1cm59Y2F0Y2gobSl7fWZpbmFsbHl7fXFmKGEsZSl9fVxudmFyIGtnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZnLHVzZUNvbnRleHQ6ZmcsdXNlRWZmZWN0OmZnLHVzZUltcGVyYXRpdmVIYW5kbGU6ZmcsdXNlTGF5b3V0RWZmZWN0OmZnLHVzZU1lbW86ZmcsdXNlUmVkdWNlcjpmZyx1c2VSZWY6ZmcsdXNlU3RhdGU6ZmcsdXNlRGVidWdWYWx1ZTpmZ30saWc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXttZygpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gc2coNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDQsUGZ8U2YsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bWcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9bWcoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxcbmxhc3RSZW5kZXJlZFJlZHVjZXI6b2csbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfSx1c2VEZWJ1Z1ZhbHVlOnZnfSxqZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0Zyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLFxuYil7cmV0dXJuIHRnKDQsUGZ8U2YsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpwZyx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gbmcoKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gcGcob2csYSl9LHVzZURlYnVnVmFsdWU6dmd9LHhnPW51bGwseWc9bnVsbCx6Zz0hMTtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9Syg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBDZyhhKXtpZih6Zyl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQmcoYSxiKSl7Yj1EZShjKTtpZighYnx8IUJnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3pnPSExO3hnPWE7cmV0dXJufUFnKHhnLGMpfXhnPWE7eWc9RWUoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6Zz0hMSx4Zz1hfX1mdW5jdGlvbiBEZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjE4IT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1mdW5jdGlvbiBFZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIXpnKXJldHVybiBEZyhhKSx6Zz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIXhlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj15ZztiOylBZyhhLGIpLGI9RGUoYik7RGcoYSk7eWc9eGc/RGUoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gRmcoKXt5Zz14Zz1udWxsO3pnPSExfVxudmFyIEdnPVRiLlJlYWN0Q3VycmVudE93bmVyLHFnPSExO2Z1bmN0aW9uIFMoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9FZihiLG51bGwsYyxkKTpEZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7SWcoYixlKTtkPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIVZlKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLExnKGEsYixnLGQsZSxmKTthPVllKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6ZGQsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gSmcoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9WGUoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIExnKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmRkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHFnPSExLGU8Zik/SmcoYSxiLGYpOk1nKGEsYixjLGQsZil9ZnVuY3Rpb24gTmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBNZyhhLGIsYyxkLGUpe3ZhciBmPUooYyk/SWU6SC5jdXJyZW50O2Y9SmUoYixmKTtJZyhiLGUpO2M9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIE9nKGEsYixjLGQsZSl7aWYoSihjKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO0lnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSx2ZihiLGMsZCxlKSx4ZihiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspO1BnPSExO3ZhciB0PWIubWVtb2l6ZWRTdGF0ZTtsPWcuc3RhdGU9dDt2YXIgQT1iLnVwZGF0ZVF1ZXVlO251bGwhPT1BJiYoeWYoYixBLGQsZyxlKSxsPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHQhPT1sfHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLGw9Yi5tZW1vaXplZFN0YXRlKSwoaD1QZ3x8dWYoYixjLGgsZCx0LGwsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bCksZy5wcm9wcz1kLGcuc3RhdGU9bCxnLmNvbnRleHQ9ayxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TChiLnR5cGUsaCksbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayksUGc9ITEsbD1iLm1lbW9pemVkU3RhdGUsdD1nLnN0YXRlPWwsQT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1BJiYoeWYoYixBLGQsZyxlKSx0PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGwhPT10fHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLHQ9Yi5tZW1vaXplZFN0YXRlKSwobT1QZ3x8dWYoYixjLGgsZCxsLHQsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxudCksZy5wcm9wcz1kLGcuc3RhdGU9dCxnLmNvbnRleHQ9ayxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gUWcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCxlLGYpe05nKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZQZShiLGMsITEpLEpnKGEsYixmKTtkPWIuc3RhdGVOb2RlO0dnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPURmKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9RGYoYixudWxsLGgsZikpOlMoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmUGUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P01lKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJk1lKGEsYi5jb250ZXh0LCExKTtKZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBTZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9WmUobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPVplKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPUVmKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPVhlKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1YZShoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1EZihiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1aZShudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1aZShnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPURmKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiBKZyhhLGIsYyl7bnVsbCE9PWEmJihiLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/eChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIFRnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxJLmN1cnJlbnQpcWc9ITA7ZWxzZXtpZihkPGMpe3FnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOlJnKGIpO0ZnKCk7YnJlYWs7Y2FzZSA1OkxmKGIpO2JyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJk9lKGIpO2JyZWFrO2Nhc2UgNDpKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6VWcoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIFNnKGEsYixjKTtiPUpnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiBKZyhhLGIsYyl9fWVsc2UgcWc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9XG5iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPUplKGIsSC5jdXJyZW50KTtJZyhiLGMpO2U9aGcobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtsZygpO2lmKEooZCkpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZrZihiLGQsZyxhKTtlLnVwZGF0ZXI9dGY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9Yjt4ZihiLGQsYSxjKTtiPVFnKG51bGwsYixkLCEwLGYsXG5jKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1oZihlKTtiLnR5cGU9YTtlPWIudGFnPVdlKGEpO2Y9TChhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1NZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPU9nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPUhnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPUtnKG51bGwsYixhLEwoYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp4KFwiMzA2XCIsYSxcIlwiKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxNZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxcbmU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksT2coYSxiLGQsZSxjKTtjYXNlIDM6UmcoYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3goXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWYoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlGZygpLGI9SmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpeWc9RWUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbykseGc9YixlPXpnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9RWYoYixudWxsLGQsYykpOihTKGEsYixkLGMpLEZnKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIExmKGIpLG51bGw9PT1hJiZDZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsXG5nPWUuY2hpbGRyZW4seGUoZCxlKT9nPW51bGw6bnVsbCE9PWYmJnhlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLE5nKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihTKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFNnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPURmKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksSGcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO1VnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1iZChoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSS5jdXJyZW50KXtiPUpnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBsPWguY29udGV4dERlcGVuZGVuY2llcztpZihudWxsIT09bCl7Zz1oLmNoaWxkO2Zvcih2YXIgaz1sLmZpcnN0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCYmMCE9PVxuKGsub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihrPW5mKGMpLGsudGFnPXNmLHBmKGgsaykpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7az1oLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtrPWM7Zm9yKHZhciBtPWgucmV0dXJuO251bGwhPT1tOyl7dmFyIHA9bS5hbHRlcm5hdGU7aWYobS5jaGlsZEV4cGlyYXRpb25UaW1lPGspbS5jaGlsZEV4cGlyYXRpb25UaW1lPWssbnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrJiYocC5jaGlsZEV4cGlyYXRpb25UaW1lPWspO2Vsc2UgaWYobnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrKXAuY2hpbGRFeHBpcmF0aW9uVGltZT1rO2Vsc2UgYnJlYWs7bT1tLnJldHVybn1sLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/XG5udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixJZyhiLGMpLGU9TShlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9TChlLGIucGVuZGluZ1Byb3BzKSxmPUwoZS50eXBlLGYpLEtnKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBMZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1cbmQ/ZTpMKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsSihkKT8oYT0hMCxPZShiKSk6YT0hMSxJZyhiLGMpLHZmKGIsZCxlLGMpLHhmKGIsZCxlLGMpLFFnKG51bGwsYixkLCEwLGEsYyl9eChcIjE1NlwiKX12YXIgVmc9e2N1cnJlbnQ6bnVsbH0sV2c9bnVsbCxYZz1udWxsLFlnPW51bGw7ZnVuY3Rpb24gVWcoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7RyhWZyxjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gWmcoYSl7dmFyIGI9VmcuY3VycmVudDtGKFZnLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWcoYSxiKXtXZz1hO1lnPVhnPW51bGw7dmFyIGM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPj1iJiYocWc9ITApO2EuY29udGV4dERlcGVuZGVuY2llcz1udWxsfVxuZnVuY3Rpb24gTShhLGIpe2lmKFlnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilZZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09WGc/KG51bGw9PT1XZz94KFwiMzA4XCIpOnZvaWQgMCxYZz1iLFdnLmNvbnRleHREZXBlbmRlbmNpZXM9e2ZpcnN0OmIsZXhwaXJhdGlvblRpbWU6MH0pOlhnPVhnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciAkZz0wLHJmPTEsc2Y9MixhaD0zLFBnPSExO2Z1bmN0aW9uIGJoKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIGNoKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBuZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6JGcscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gZGgoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWJoKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1jaChlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1jaChkKSk7bnVsbD09PWV8fGQ9PT1lP2RoKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oZGgoZCxiKSxkaChlLGIpKTooZGgoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBlaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSk6ZmgoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1jaChiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIHJmOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSBhaDphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlICRnOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSBzZjpQZz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIHlmKGEsYixjLGQsZSl7UGc9ITE7Yj1maChhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGw9Yi5maXJzdFVwZGF0ZSxrPWY7bnVsbCE9PWw7KXt2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWwsZj1rKSxoPG0mJihoPW0pKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1sOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdEVmZmVjdD1sKSkpO2w9bC5uZXh0fW09bnVsbDtmb3IobD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWw7KXt2YXIgcD1sLmV4cGlyYXRpb25UaW1lO3A8ZT8obnVsbD09PW0mJihtPWwsbnVsbD09PWcmJihmPWspKSxoPHAmJihoPXApKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWw6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1sKSkpO2w9bC5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9ayk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1rfVxuZnVuY3Rpb24gaGgoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO2loKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtpaChiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gaWgoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gamgoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpqYyhiKX19ZnVuY3Rpb24ga2goYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGxoPXZvaWQgMCxtaD12b2lkIDAsbmg9dm9pZCAwLG9oPXZvaWQgMDtsaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07bWg9ZnVuY3Rpb24oKXt9O1xubmg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO0lmKE4uY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXZjKGcsZik7ZD12YyhnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9JGQoZyxmKTtkPSRkKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9YmUoZyxmKTtkPWJlKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9dGUpfXFlKGMsZCk7Zz1jPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgbD1mW2NdO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYmKGh8fChoPXt9KSxoW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBrPWRbY107bD1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmshPT1sJiYobnVsbCE9a3x8bnVsbCE9bCkpaWYoXCJzdHlsZVwiPT09YylpZihsKXtmb3IoZyBpbiBsKSFsLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoaHx8KGg9e30pLGhbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZsW2ddIT09a1tnXSYmKGh8fFxuKGg9e30pLGhbZ109a1tnXSl9ZWxzZSBofHwoYXx8KGE9W10pLGEucHVzaChjLGgpKSxoPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGs9az9rLl9faHRtbDp2b2lkIDAsbD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1rJiZsIT09ayYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1jP2w9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGE9YXx8W10pLnB1c2goYyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1rJiZzZShlLGMpLGF8fGw9PT1rfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsaykpfWgmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJmtoKGIpfX07b2g9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmtoKGIpfTtcbnZhciBwaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBxaChhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPWpjKGMpKTtudWxsIT09YyYmaWMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmaWMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7c2goYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gdGgoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigoZC50YWcmYSkhPT1OZil7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfShkLnRhZyZiKSE9PU5mJiYoZT1kLmNyZWF0ZSxkLmRlc3Ryb3k9ZSgpKTtkPWQubmV4dH13aGlsZShkIT09Yyl9fVxuZnVuY3Rpb24gdWgoYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PW5lKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09Yy50YWcmJm51bGwhPT1jLm1lbW9pemVkU3RhdGUpe2Q9Yy5jaGlsZC5zaWJsaW5nO2QucmV0dXJuPWM7Yz1kO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8XG5jLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiB2aChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUmUmJlJlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIubGFzdEVmZmVjdCxudWxsIT09Yikpe3ZhciBjPWI9Yi5uZXh0O2Rve3ZhciBkPWMuZGVzdHJveTtpZih2b2lkIDAhPT1kKXt2YXIgZT1hO3RyeXtkKCl9Y2F0Y2goZil7c2goZSxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWIpfWJyZWFrO2Nhc2UgMTpyaChhKTtiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7c2goYSxmKX1icmVhaztjYXNlIDU6cmgoYSk7YnJlYWs7Y2FzZSA0OndoKGEpfX1cbmZ1bmN0aW9uIHhoKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24geWgoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoeGgoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXgoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp4KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoa2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHhoKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJlxuMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhnPWIsaD1lLnN0YXRlTm9kZSw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz10ZSkpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIHdoKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3goXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZih2aChnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWcpe2lmKG51bGwhPT1iLmNoaWxkKXtkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX19ZWxzZSBpZih2aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiB6aChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnRoKFBmLFFmLGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkNlKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWIubWVtb2l6ZWRTdGF0ZTtkPXZvaWQgMDthPWI7bnVsbD09PWM/ZD0hMTooZD0hMCxhPWIuY2hpbGQsMD09PWMudGltZWRPdXRBdCYmKGMudGltZWRPdXRBdD1sZigpKSk7bnVsbCE9PWEmJnVoKGEsZCk7Yz1cbmIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMpe2IudXBkYXRlUXVldWU9bnVsbDt2YXIgZz1iLnN0YXRlTm9kZTtudWxsPT09ZyYmKGc9Yi5zdGF0ZU5vZGU9bmV3IHBoKTtjLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGM9QWguYmluZChudWxsLGIsYSk7Zy5oYXMoYSl8fChnLmFkZChhKSxhLnRoZW4oYyxjKSl9KX1icmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19dmFyIEJoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIENoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtEaChkKTtxaChhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIEVoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1GaD9GaD1uZXcgU2V0KFt0aGlzXSk6RmguYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztxaChhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkooYS50eXBlKSYmS2UoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gS2YoYSksTGUoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3goXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIE1mKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDE4OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gS2YoYSksbnVsbDtjYXNlIDEwOnJldHVybiBaZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEhoPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsSWg9VGIuUmVhY3RDdXJyZW50T3duZXIsSmg9MTA3Mzc0MTgyMixLaD0hMSxUPW51bGwsTGg9bnVsbCxVPTAsTWg9LTEsTmg9ITEsVj1udWxsLE9oPSExLFBoPW51bGwsUWg9bnVsbCxSaD1udWxsLEZoPW51bGw7ZnVuY3Rpb24gU2goKXtpZihudWxsIT09VClmb3IodmFyIGE9VC5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTticmVhaztjYXNlIDQ6S2YoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKX1hPWEucmV0dXJufUxoPW51bGw7VT0wO01oPS0xO05oPSExO1Q9bnVsbH1cbmZ1bmN0aW9uIFRoKCl7Zm9yKDtudWxsIT09Vjspe3ZhciBhPVYuZWZmZWN0VGFnO2EmMTYmJmtlKFYuc3RhdGVOb2RlLFwiXCIpO2lmKGEmMTI4KXt2YXIgYj1WLmFsdGVybmF0ZTtudWxsIT09YiYmKGI9Yi5yZWYsbnVsbCE9PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKG51bGwpOmIuY3VycmVudD1udWxsKSl9c3dpdGNoKGEmMTQpe2Nhc2UgMjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OnloKFYpO1YuZWZmZWN0VGFnJj0tMzt6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDQ6emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA4OmE9Vix3aChhKSxhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwsYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCl9Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVWgoKXtmb3IoO251bGwhPT1WOyl7aWYoVi5lZmZlY3RUYWcmMjU2KWE6e3ZhciBhPVYuYWx0ZXJuYXRlLGI9Vjtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoT2YsTmYsYik7YnJlYWsgYTtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpMKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6eChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVmgoYSxiKXtmb3IoO251bGwhPT1WOyl7dmFyIGM9Vi5lZmZlY3RUYWc7aWYoYyYzNil7dmFyIGQ9Vi5hbHRlcm5hdGUsZT1WLGY9Yjtzd2l0Y2goZS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoUmYsU2YsZSk7YnJlYWs7Y2FzZSAxOnZhciBnPWUuc3RhdGVOb2RlO2lmKGUuZWZmZWN0VGFnJjQpaWYobnVsbD09PWQpZy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGg9ZS5lbGVtZW50VHlwZT09PWUudHlwZT9kLm1lbW9pemVkUHJvcHM6TChlLnR5cGUsZC5tZW1vaXplZFByb3BzKTtnLmNvbXBvbmVudERpZFVwZGF0ZShoLGQubWVtb2l6ZWRTdGF0ZSxnLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1kPWUudXBkYXRlUXVldWU7bnVsbCE9PWQmJmhoKGUsZCxnLGYpO2JyZWFrO2Nhc2UgMzpkPWUudXBkYXRlUXVldWU7aWYobnVsbCE9PWQpe2c9bnVsbDtpZihudWxsIT09ZS5jaGlsZClzd2l0Y2goZS5jaGlsZC50YWcpe2Nhc2UgNTpnPVxuZS5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmc9ZS5jaGlsZC5zdGF0ZU5vZGV9aGgoZSxkLGcsZil9YnJlYWs7Y2FzZSA1OmY9ZS5zdGF0ZU5vZGU7bnVsbD09PWQmJmUuZWZmZWN0VGFnJjQmJndlKGUudHlwZSxlLm1lbW9pemVkUHJvcHMpJiZmLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fWMmMTI4JiYoZT1WLnJlZixudWxsIT09ZSYmKGY9Vi5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGU/ZShmKTplLmN1cnJlbnQ9ZikpO2MmNTEyJiYoUGg9YSk7Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gV2goYSxiKXtSaD1RaD1QaD1udWxsO3ZhciBjPVc7Vz0hMDtkb3tpZihiLmVmZmVjdFRhZyY1MTIpe3ZhciBkPSExLGU9dm9pZCAwO3RyeXt2YXIgZj1iO3RoKFVmLE5mLGYpO3RoKE5mLFRmLGYpfWNhdGNoKGcpe2Q9ITAsZT1nfWQmJnNoKGIsZSl9Yj1iLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PWIpO1c9YztjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyk7WHx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9ZnVuY3Rpb24gb2YoKXtudWxsIT09UWgmJkJlKFFoKTtudWxsIT09UmgmJlJoKCl9XG5mdW5jdGlvbiBaaChhLGIpe09oPUtoPSEwO2EuY3VycmVudD09PWI/eChcIjE3N1wiKTp2b2lkIDA7dmFyIGM9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/eChcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD1iLmV4cGlyYXRpb25UaW1lLGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2VmKGEsZT5kP2U6ZCk7SWguY3VycmVudD1udWxsO2Q9dm9pZCAwOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7dWU9QmQ7dmU9UGQoKTtCZD0hMTtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTt2YXIgZj12b2lkIDA7dHJ5e1VoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO1xuZj12b2lkIDA7dHJ5e1RoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfVFkKHZlKTt2ZT1udWxsO0JkPSEhdWU7dWU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtmPXZvaWQgMDt0cnl7VmgoYSxjKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9aWYobnVsbCE9PWQmJm51bGwhPT1QaCl7dmFyIGc9V2guYmluZChudWxsLGEsZCk7UWg9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBBZShnKX0pO1JoPWd9S2g9T2g9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIFFlJiZRZShiLnN0YXRlTm9kZSk7Yz1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9XG5iPmM/YjpjOzA9PT1iJiYoRmg9bnVsbCk7JGgoYSxiKX1cbmZ1bmN0aW9uIGFpKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtUPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VTt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClFZyhiKSxiLmVmZmVjdFRhZyY9LTM7bWgoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO3ZhciBoPUlmKEhmLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSluaChlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGw9SWYoTi5jdXJyZW50KTtpZihFZyhiKSl7Zz1iO2U9Zy5zdGF0ZU5vZGU7dmFyIGs9Zy50eXBlLG09Zy5tZW1vaXplZFByb3BzLHA9aDtlW0ZhXT1nO2VbR2FdPW07Zj12b2lkIDA7aD1rO3N3aXRjaChoKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGs9MDtrPGFiLmxlbmd0aDtrKyspRShhYltrXSxlKTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIsZSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIsZSk7RShcImxvYWRcIixlKTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLGUpO0UoXCJzdWJtaXRcIixlKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixlKTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhlLG0pO0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShlLG0pLEUoXCJpbnZhbGlkXCIsZSksc2UocCxcIm9uQ2hhbmdlXCIpfXFlKGgsbSk7az1udWxsO2ZvcihmIGluIG0pbS5oYXNPd25Qcm9wZXJ0eShmKSYmKGw9bVtmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD9lLnRleHRDb250ZW50IT09bCYmKGs9W1wiY2hpbGRyZW5cIixsXSk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZlLnRleHRDb250ZW50IT09XCJcIitsJiYoaz1bXCJjaGlsZHJlblwiLFwiXCIrbF0pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1sJiZzZShwLGYpKTtzd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6UmIoZSk7QWMoZSxtLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihlKTtlZShlLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5vbkNsaWNrJiZcbihlLm9uY2xpY2s9dGUpfWY9aztnLnVwZGF0ZVF1ZXVlPWY7Zz1udWxsIT09Zj8hMDohMTtnJiZraChiKX1lbHNle209YjtwPWY7ZT1nO2s9OT09PWgubm9kZVR5cGU/aDpoLm93bmVyRG9jdW1lbnQ7bD09PWZlLmh0bWwmJihsPWdlKHApKTtsPT09ZmUuaHRtbD9cInNjcmlwdFwiPT09cD8oZT1rLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixrPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBlLmlzP2s9ay5jcmVhdGVFbGVtZW50KHAse2lzOmUuaXN9KTooaz1rLmNyZWF0ZUVsZW1lbnQocCksXCJzZWxlY3RcIj09PXAmJihwPWssZS5tdWx0aXBsZT9wLm11bHRpcGxlPSEwOmUuc2l6ZSYmKHAuc2l6ZT1lLnNpemUpKSk6az1rLmNyZWF0ZUVsZW1lbnROUyhsLHApO2U9aztlW0ZhXT1tO2VbR2FdPWc7bGgoZSxiLCExLCExKTtwPWU7az1mO209Zzt2YXIgdD1oLEE9cmUoayxtKTtzd2l0Y2goayl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLFxucCk7aD1tO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYi5sZW5ndGg7aCsrKUUoYWJbaF0scCk7aD1tO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixwKTtoPW07YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIscCk7RShcImxvYWRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixwKTtFKFwic3VibWl0XCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLHApO2g9bTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhwLG0pO2g9dmMocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD0kZChwLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpwLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07aD1uKHt9LG0se3ZhbHVlOnZvaWQgMH0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKHAsXG5tKTtoPWJlKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPW19cWUoayxoKTtsPXZvaWQgMDt2YXIgdj1rLFI9cCx1PWg7Zm9yKGwgaW4gdSlpZih1Lmhhc093blByb3BlcnR5KGwpKXt2YXIgcT11W2xdO1wic3R5bGVcIj09PWw/b2UoUixxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhxPXE/cS5fX2h0bWw6dm9pZCAwLG51bGwhPXEmJmplKFIscSkpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIj09PXR5cGVvZiBxPyhcInRleHRhcmVhXCIhPT12fHxcIlwiIT09cSkmJmtlKFIscSk6XCJudW1iZXJcIj09PXR5cGVvZiBxJiZrZShSLFwiXCIrcSk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKHJhLmhhc093blByb3BlcnR5KGwpP251bGwhPXEmJnNlKHQsbCk6bnVsbCE9cSYmdGMoUixsLHEsQSkpfXN3aXRjaChrKXtjYXNlIFwiaW5wdXRcIjpSYihwKTtcbkFjKHAsbSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIocCk7ZWUocCxtKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9bS52YWx1ZSYmcC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdWMobS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpoPXA7aC5tdWx0aXBsZT0hIW0ubXVsdGlwbGU7cD1tLnZhbHVlO251bGwhPXA/YWUoaCwhIW0ubXVsdGlwbGUscCwhMSk6bnVsbCE9bS5kZWZhdWx0VmFsdWUmJmFlKGgsISFtLm11bHRpcGxlLG0uZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihwLm9uY2xpY2s9dGUpfShnPXdlKGYsZykpJiZraChiKTtiLnN0YXRlTm9kZT1lfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgbnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwO2JyZWFrO2Nhc2UgNjplJiZudWxsIT1iLnN0YXRlTm9kZT9vaChlLGIsZS5tZW1vaXplZFByb3BzLGcpOihcInN0cmluZ1wiIT09XG50eXBlb2YgZyYmKG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMCksZT1JZihIZi5jdXJyZW50KSxJZihOLmN1cnJlbnQpLEVnKGIpPyhnPWIsZj1nLnN0YXRlTm9kZSxlPWcubWVtb2l6ZWRQcm9wcyxmW0ZhXT1nLChnPWYubm9kZVZhbHVlIT09ZSkmJmtoKGIpKTooZj1iLGc9KDk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShnKSxnW0ZhXT1iLGYuc3RhdGVOb2RlPWcpKTticmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6Zz1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZjtUPWI7YnJlYWsgYX1nPW51bGwhPT1nO2Y9bnVsbCE9PWUmJm51bGwhPT1lLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJiFnJiZmJiYoZT1lLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihoPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWg/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9aCk6KGIuZmlyc3RFZmZlY3Q9XG5iLmxhc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpO2lmKGd8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpLZihiKTttaChiKTticmVhaztjYXNlIDEwOlpnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2RlZmF1bHQ6eChcIjE1NlwiKX1UPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09VClyZXR1cm4gVDtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiZcbihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9R2goYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gYmkoYSl7dmFyIGI9VGcoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWFpKGEpKTtJaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBjaShhLGIpe0toP3goXCIyNDNcIik6dm9pZCAwO29mKCk7S2g9ITA7dmFyIGM9SGguY3VycmVudDtIaC5jdXJyZW50PWtnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PVV8fGEhPT1MaHx8bnVsbD09PVQpU2goKSxMaD1hLFU9ZCxUPVhlKExoLmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVQmJiFkaSgpOylUPWJpKFQpO2Vsc2UgZm9yKDtudWxsIT09VDspVD1iaShUKX1jYXRjaCh1KXtpZihZZz1YZz1XZz1udWxsLGxnKCksbnVsbD09PVQpZT0hMCxEaCh1KTtlbHNle251bGw9PT1UP3goXCIyNzFcIik6dm9pZCAwO3ZhciBmPVQsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLERoKHUpO2Vsc2V7YTp7dmFyIGg9YSxsPWcsaz1mLG09dTtnPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09XG5tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLnRoZW4pe3ZhciBwPW07bT1sO3ZhciB0PS0xLEE9LTE7ZG97aWYoMTM9PT1tLnRhZyl7dmFyIHY9bS5hbHRlcm5hdGU7aWYobnVsbCE9PXYmJih2PXYubWVtb2l6ZWRTdGF0ZSxudWxsIT09dikpe0E9MTAqKDEwNzM3NDE4MjItdi50aW1lZE91dEF0KTticmVha312PW0ucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgdilpZigwPj12KXQ9MDtlbHNlIGlmKC0xPT09dHx8djx0KXQ9dn1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPWw7ZG97aWYodj0xMz09PW0udGFnKXY9dm9pZCAwPT09bS5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1tLm1lbW9pemVkU3RhdGU7aWYodil7bD1tLnVwZGF0ZVF1ZXVlO251bGw9PT1sPyhsPW5ldyBTZXQsbC5hZGQocCksbS51cGRhdGVRdWV1ZT1sKTpsLmFkZChwKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PVxuNjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZz1uZigxMDczNzQxODIzKSxnLnRhZz1zZixwZihrLGcpKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2w9Zzt2YXIgUj1rLnBpbmdDYWNoZTtudWxsPT09Uj8oUj1rLnBpbmdDYWNoZT1uZXcgQmgsdj1uZXcgU2V0LFIuc2V0KHAsdikpOih2PVIuZ2V0KHApLHZvaWQgMD09PXYmJih2PW5ldyBTZXQsUi5zZXQocCx2KSkpO3YuaGFzKGwpfHwodi5hZGQobCksaz1laS5iaW5kKG51bGwsayxwLGwpLHAudGhlbihrLGspKTstMT09PXQ/aD0xMDczNzQxODIzOigtMT09PUEmJihBPTEwKigxMDczNzQxODIyLWdmKGgsZykpLTVFMyksaD1BK3QpOzA8PWgmJk1oPGgmJihNaD1oKTttLmVmZmVjdFRhZ3w9MjA0ODttLmV4cGlyYXRpb25UaW1lPWc7YnJlYWsgYX1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPUVycm9yKChpYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1xuXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitqYyhrKSl9Tmg9ITA7bT1qaChtLGspO2g9bDtkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmVmZmVjdFRhZ3w9MjA0ODtoLmV4cGlyYXRpb25UaW1lPWc7Zz1DaChoLG0sZyk7ZWgoaCxnKTticmVhayBhO2Nhc2UgMTppZih0PW0sQT1oLnR5cGUsaz1oLnN0YXRlTm9kZSwwPT09KGguZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PWsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGspKSkpe2guZWZmZWN0VGFnfD0yMDQ4O1xuaC5leHBpcmF0aW9uVGltZT1nO2c9RWgoaCx0LGcpO2VoKGgsZyk7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9VD1haShmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO0toPSExO0hoLmN1cnJlbnQ9YztZZz1YZz1XZz1udWxsO2xnKCk7aWYoZSlMaD1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09VClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yz1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1jP3goXCIyODFcIik6dm9pZCAwO0xoPW51bGw7aWYoTmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxkfHwwIT09ZiYmZjxkfHwwIT09ZyYmZzxkKXtmZihhLGQpO2ZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtcbmI9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2ZpKGEsYyxkLGIsLTEpO3JldHVybn19YiYmLTEhPT1NaD8oZmYoYSxkKSxiPTEwKigxMDczNzQxODIyLWdmKGEsZCkpLGI8TWgmJihNaD1iKSxiPTEwKigxMDczNzQxODIyLWxmKCkpLGI9TWgtYixmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1jKX19XG5mdW5jdGlvbiBzaChhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhkKSkpe2E9amgoYixhKTthPUVoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPWpoKGIsYSk7YT1DaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9amgoYixhKSxjPUNoKGEsYywxMDczNzQxODIzKSxwZihhLGMpLHFmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gbWYoYSxiKXt2YXIgYz1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsKCksZD12b2lkIDA7aWYoMD09PShiLm1vZGUmMSkpZD0xMDczNzQxODIzO2Vsc2UgaWYoS2gmJiFPaClkPVU7ZWxzZXtzd2l0Y2goYyl7Y2FzZSByLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5OmQ9MTA3Mzc0MTgyMzticmVhaztjYXNlIHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk6ZD0xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTG93UHJpb3JpdHk6Y2FzZSByLnVuc3RhYmxlX0lkbGVQcmlvcml0eTpkPTE7YnJlYWs7ZGVmYXVsdDp4KFwiMzEzXCIpfW51bGwhPT1MaCYmZD09PVUmJi0tZH1jPT09ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSYmXG4oMD09PWdpfHxkPGdpKSYmKGdpPWQpO3JldHVybiBkfWZ1bmN0aW9uIGVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PUxoJiZVPT09YylMaD1udWxsO2Vsc2UgaWYoYj1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWEubGF0ZXN0U3VzcGVuZGVkVGltZSwwIT09YiYmYzw9YiYmYz49ZCl7YS5kaWRFcnJvcj0hMTtiPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Ynx8Yj5jKWEubGF0ZXN0UGluZ2VkVGltZT1jO2RmKGMsYSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpfX1mdW5jdGlvbiBBaChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPWxmKCk7Yj1tZihiLGEpO2E9aGkoYSxiKTtudWxsIT09YSYmKGNmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZYaChhLGIpKX1cbmZ1bmN0aW9uIGhpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiBxZihhLGIpe2E9aGkoYSxiKTtudWxsIT09YSYmKCFLaCYmMCE9PVUmJmI+VSYmU2goKSxjZihhLGIpLEtoJiYhT2gmJkxoPT09YXx8WGgoYSxhLmV4cGlyYXRpb25UaW1lKSxpaT5qaSYmKGlpPTAseChcIjE4NVwiKSkpfWZ1bmN0aW9uIGtpKGEsYixjLGQsZSl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfXZhciBsaT1udWxsLFk9bnVsbCxtaT0wLG5pPXZvaWQgMCxXPSExLG9pPW51bGwsWj0wLGdpPTAscGk9ITEscWk9bnVsbCxYPSExLHJpPSExLHNpPW51bGwsdGk9ci51bnN0YWJsZV9ub3coKSx1aT0xMDczNzQxODIyLSh0aS8xMHwwKSx2aT11aSxqaT01MCxpaT0wLHdpPW51bGw7ZnVuY3Rpb24geGkoKXt1aT0xMDczNzQxODIyLSgoci51bnN0YWJsZV9ub3coKS10aSkvMTB8MCl9XG5mdW5jdGlvbiB5aShhLGIpe2lmKDAhPT1taSl7aWYoYjxtaSlyZXR1cm47bnVsbCE9PW5pJiZyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKG5pKX1taT1iO2E9ci51bnN0YWJsZV9ub3coKS10aTtuaT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soemkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxkaSgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT15ZShBaS5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBBaShhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO3hpKCk7dmk9dWk7QmkoYSxjKX1mdW5jdGlvbiAkaChhLGIpe2EuZXhwaXJhdGlvblRpbWU9YjthLmZpbmlzaGVkV29yaz1udWxsfVxuZnVuY3Rpb24gbGYoKXtpZihXKXJldHVybiB2aTtDaSgpO2lmKDA9PT1afHwxPT09Wil4aSgpLHZpPXVpO3JldHVybiB2aX1mdW5jdGlvbiBYaChhLGIpe251bGw9PT1hLm5leHRTY2hlZHVsZWRSb290PyhhLmV4cGlyYXRpb25UaW1lPWIsbnVsbD09PVk/KGxpPVk9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihZPVkubmV4dFNjaGVkdWxlZFJvb3Q9YSxZLm5leHRTY2hlZHVsZWRSb290PWxpKSk6Yj5hLmV4cGlyYXRpb25UaW1lJiYoYS5leHBpcmF0aW9uVGltZT1iKTtXfHwoWD9yaSYmKG9pPWEsWj0xMDczNzQxODIzLERpKGEsMTA3Mzc0MTgyMywhMSkpOjEwNzM3NDE4MjM9PT1iP1loKDEwNzM3NDE4MjMsITEpOnlpKGEsYikpfVxuZnVuY3Rpb24gQ2koKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09WSlmb3IodmFyIGM9WSxkPWxpO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1ZP3goXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsaT1ZPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1saSlsaT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsWS5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1ZKXtZPWM7WS5uZXh0U2NoZWR1bGVkUm9vdD1saTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2U+YSYmKGE9ZSxiPWQpO2lmKGQ9PT1ZKWJyZWFrO2lmKDEwNzM3NDE4MjM9PT1cbmEpYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19b2k9YjtaPWF9dmFyIEVpPSExO2Z1bmN0aW9uIGRpKCl7cmV0dXJuIEVpPyEwOnIudW5zdGFibGVfc2hvdWxkWWllbGQoKT9FaT0hMDohMX1mdW5jdGlvbiB6aSgpe3RyeXtpZighZGkoKSYmbnVsbCE9PWxpKXt4aSgpO3ZhciBhPWxpO2Rve3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7MCE9PWImJnVpPD1iJiYoYS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj11aSk7YT1hLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGEhPT1saSl9WWgoMCwhMCl9ZmluYWxseXtFaT0hMX19XG5mdW5jdGlvbiBZaChhLGIpe0NpKCk7aWYoYilmb3IoeGkoKSx2aT11aTtudWxsIT09b2kmJjAhPT1aJiZhPD1aJiYhKEVpJiZ1aT5aKTspRGkob2ksWix1aT5aKSxDaSgpLHhpKCksdmk9dWk7ZWxzZSBmb3IoO251bGwhPT1vaSYmMCE9PVomJmE8PVo7KURpKG9pLFosITEpLENpKCk7YiYmKG1pPTAsbmk9bnVsbCk7MCE9PVomJnlpKG9pLFopO2lpPTA7d2k9bnVsbDtpZihudWxsIT09c2kpZm9yKGE9c2ksc2k9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtwaXx8KHBpPSEwLHFpPWQpfX1pZihwaSl0aHJvdyBhPXFpLHFpPW51bGwscGk9ITEsYTt9ZnVuY3Rpb24gQmkoYSxiKXtXP3goXCIyNTNcIik6dm9pZCAwO29pPWE7Wj1iO0RpKGEsYiwhMSk7WWgoMTA3Mzc0MTgyMywhMSl9XG5mdW5jdGlvbiBEaShhLGIsYyl7Vz94KFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2lmKGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmKGRpKCk/YS5maW5pc2hlZFdvcms9ZDpGaShhLGQsYikpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZGaShhLGQsYikpO1c9ITF9XG5mdW5jdGlvbiBGaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YyYmKG51bGw9PT1zaT9zaT1bZF06c2kucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT13aT9paSsrOih3aT1hLGlpPTApO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtaaChhLGIpfSl9ZnVuY3Rpb24gRGgoYSl7bnVsbD09PW9pP3goXCIyNDZcIik6dm9pZCAwO29pLmV4cGlyYXRpb25UaW1lPTA7cGl8fChwaT0hMCxxaT1hKX1mdW5jdGlvbiBHaShhLGIpe3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWD1jKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSGkoYSxiKXtpZihYJiYhcmkpe3JpPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e3JpPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBJaShhLGIsYyl7WHx8V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApO3ZhciBkPVg7WD0hMDt0cnl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMpfSl9ZmluYWxseXsoWD1kKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSmkoYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOnsyPT09ZWQoYykmJjE9PT1jLnRhZz92b2lkIDA6eChcIjE3MFwiKTt2YXIgZz1jO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmc9Zy5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihKKGcudHlwZSkpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyk7eChcIjE3MVwiKTtnPXZvaWQgMH1pZigxPT09Yy50YWcpe3ZhciBoPWMudHlwZTtpZihKKGgpKXtjPU5lKGMsaCxnKTticmVhayBhfX1jPWd9ZWxzZSBjPUhlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPW5mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtcbm9mKCk7cGYoZixlKTtxZihmLGQpO3JldHVybiBkfWZ1bmN0aW9uIEtpKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWxmKCk7ZT1tZihmLGUpO3JldHVybiBKaShhLGIsYyxlLGQpfWZ1bmN0aW9uIExpKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gTWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpXYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkFiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6eWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2U/dm9pZCAwOngoXCI5MFwiKTtTYihkKTt5YyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmFlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBOaShhKXt2YXIgYj0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItbGYoKSs1MDApLzI1fDApKzEpO2I+PUpoJiYoYj1KaC0xKTt0aGlzLl9leHBpcmF0aW9uVGltZT1KaD1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9TmkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6eChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IE9pO0ppKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbk5pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk5pLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp4KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3goXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7QmkoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07TmkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIE9pKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9T2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk9pLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O1xuZnVuY3Rpb24gUGkoYSxiLGMpe2I9SygzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwaW5nQ2FjaGU6bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5QaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IE9pO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtLaShhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1BpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBPaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7S2kobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtQaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgT2k7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO0tpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5QaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTmkodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBRaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9R2I9R2k7SGI9SWk7SWI9ZnVuY3Rpb24oKXtXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCl9O1xuZnVuY3Rpb24gUmkoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBQaShhLCExLGIpfVxuZnVuY3Rpb24gU2koYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9UmkoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fUhpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBMaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gVGkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gTWkoYSxiLG51bGwsYyl9XG52YXIgVmk9e2NyZWF0ZVBvcnRhbDpUaSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3goXCIxODhcIik6eChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1oZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe1FpKGMpP3ZvaWQgMDp4KFwiMjAwXCIpO251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9cbngoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIFNpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe1FpKGEpP3ZvaWQgMDp4KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oSGkoZnVuY3Rpb24oKXtTaShudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBUaS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6R2ksdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOklpLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1c/eChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4ga2koYSxiKX1maW5hbGx5e1g9YyxZaCgxMDczNzQxODIzLCExKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6VWksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVxuWDtYPSEwO3RyeXtraShhKX1maW5hbGx5eyhYPWIpfHxXfHxZaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLEJhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxwYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sRWIsRmIsRGQsRGFdfX07ZnVuY3Rpb24gVWkoYSxiKXtRaShhKT92b2lkIDA6eChcIjI5OVwiLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IFBpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFRlKG4oe30sYSx7b3ZlcnJpZGVQcm9wczpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOlRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjguNlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBXaT17ZGVmYXVsdDpWaX0sWGk9V2kmJlZpfHxXaTttb2R1bGUuZXhwb3J0cz1YaS5kZWZhdWx0fHxYaTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTMuNlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPW51bGwsZT0hMSxnPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWQuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWQsYj1kLm5leHQ7aWYoZD09PWIpZD1udWxsO2Vsc2V7dmFyIGM9ZC5wcmV2aW91cztkPWMubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGY9ZyxRPWw7Zz1hO2w9Yjt0cnl7dmFyIGg9YygpfWZpbmFsbHl7Zz1mLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaClpZihoPXtjYWxsYmFjazpoLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09ZClkPWgubmV4dD1oLnByZXZpb3VzPWg7ZWxzZXtjPW51bGw7YT1kO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2M9YTticmVha31hPWEubmV4dH13aGlsZShhIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1oLHAoKSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWg7aC5uZXh0PWM7aC5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09ZD9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1lO2U9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1kOyl7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihkLmV4cGlyYXRpb25UaW1lPD1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8PWMpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09ZCl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYhdygpKX19ZmluYWxseXttPSExLGU9YixudWxsIT09ZD9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHcsRz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P0c9d2luZG93OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsJiYoRz1nbG9iYWwpO1xuaWYoRyYmRy5fc2NoZWRNb2NrKXt2YXIgSD1HLl9zY2hlZE1vY2s7cj1IWzBdO3E9SFsxXTt3PUhbMl07ZXhwb3J0cy51bnN0YWJsZV9ub3c9SFszXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBJPW51bGwsSj1mdW5jdGlvbihhKXtpZihudWxsIT09SSl0cnl7SShhKX1maW5hbGx5e0k9bnVsbH19O3I9ZnVuY3Rpb24oYSl7bnVsbCE9PUk/c2V0VGltZW91dChyLDAsYSk6KEk9YSxzZXRUaW1lb3V0KEosMCwhMSkpfTtxPWZ1bmN0aW9uKCl7ST1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9fWVsc2V7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgQiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTt2YXIgSz1udWxsLEw9ITEsTT0tMSxOPSExLE89ITEsUD0wLFI9MzMsUz0zMzt3PWZ1bmN0aW9uKCl7cmV0dXJuIFA8PWV4cG9ydHMudW5zdGFibGVfbm93KCl9O3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtMPSExO3ZhciBhPUssYj1NO0s9bnVsbDtNPS0xO3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCksZj0hMTtpZigwPj1QLWMpaWYoLTEhPT1iJiZiPD1jKWY9ITA7ZWxzZXtOfHwoTj0hMCxFKFYpKTtLPWE7TT1iO3JldHVybn1pZihudWxsIT09YSl7Tz0hMDt0cnl7YShmKX1maW5hbGx5e089ITF9fX07XG52YXIgVj1mdW5jdGlvbihhKXtpZihudWxsIT09Syl7RShWKTt2YXIgYj1hLVArUztiPFMmJlI8Uz8oOD5iJiYoYj04KSxTPWI8Uj9SOmIpOlI9YjtQPWErUztMfHwoTD0hMCxVLnBvc3RNZXNzYWdlKHZvaWQgMCkpfWVsc2UgTj0hMX07cj1mdW5jdGlvbihhLGIpe0s9YTtNPWI7T3x8MD5iP1UucG9zdE1lc3NhZ2Uodm9pZCAwKTpOfHwoTj0hMCxFKFYpKX07cT1mdW5jdGlvbigpe0s9bnVsbDtMPSExO009LTF9fWV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1nLGY9aztnPWE7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKGcpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPWd9dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMSE9PWs/azpleHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0KWI9YytiLnRpbWVvdXQ7ZWxzZSBzd2l0Y2goZyl7Y2FzZSAxOmI9YystMTticmVhaztjYXNlIDI6Yj1jKzI1MDticmVhaztjYXNlIDU6Yj1jKzEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmI9YysxRTQ7YnJlYWs7ZGVmYXVsdDpiPWMrNUUzfWE9e2NhbGxiYWNrOmEscHJpb3JpdHlMZXZlbDpnLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKG51bGw9PT1kKWQ9YS5uZXh0PWEucHJldmlvdXM9YSxwKCk7ZWxzZXtjPW51bGw7dmFyIGY9ZDtkb3tpZihmLmV4cGlyYXRpb25UaW1lPmIpe2M9ZjticmVha31mPWYubmV4dH13aGlsZShmIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1hLHAoKSk7XG5iPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9YTthLm5leHQ9YzthLnByZXZpb3VzPWJ9cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihiPT09YSlkPW51bGw7ZWxzZXthPT09ZCYmKGQ9Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWc7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBnfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hZSYmKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPGx8fHcoKSl9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtudWxsIT09ZCYmcCgpfTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGR9O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUGFwZXIgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1BhcGVyXCI7XG5pbXBvcnQgeyBMb2dpbkZvcm0gfSBmcm9tIFwiLi9jb21wb25lbnRzL0xvZ2luRm9ybVwiO1xuaW1wb3J0IEFwcEJhciBmcm9tIFwiLi9jb21wb25lbnRzL0FwcEJhclwiO1xuaW1wb3J0IHsgTWVzc2FnZXNTZXJ2aWNlIH0gZnJvbSBcIi4vbWVzc2FnZXNTZXJ2aWNlXCI7XG5pbXBvcnQgeyBDaGF0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9DaGF0XCI7XG5cbmV4cG9ydCBjb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xuICAgIGlmICh0b2tlbiAhPSBudWxsKSB7XG4gICAgICBNZXNzYWdlc1NlcnZpY2UudG9rZW4gPSB0b2tlbjtcbiAgICAgIGNvbnN0IF91c2VybmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlcm5hbWVcIik7XG4gICAgICBzZXRVc2VybmFtZShfdXNlcm5hbWUpO1xuICAgICAgTWVzc2FnZXNTZXJ2aWNlLnVzZXJuYW1lID0gX3VzZXJuYW1lO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxBcHBCYXIgLz5cbiAgICAgIDxQYXBlclxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcbiAgICAgICAgICBmbGV4V3JhcDogXCJ3cmFwXCJcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3VzZXJuYW1lID09IG51bGwgfHwgdXNlcm5hbWUgPT0gXCJcIiA/IChcbiAgICAgICAgICA8TG9naW5Gb3JtIHNldFVzZXJuYW1lPXsodTogc3RyaW5nKSA9PiBzZXRVc2VybmFtZSh1KX0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8Q2hhdCAvPlxuICAgICAgICApfVxuICAgICAgPC9QYXBlcj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtmdW5jdGlvbiB0KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgcjpjYXNlIHE6Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gdihhKXtyZXR1cm4gdChhKT09PW19ZXhwb3J0cy50eXBlT2Y9dDtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47XG5leHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXI7ZXhwb3J0cy5NZW1vPXE7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bil9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSl8fHQoYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9djtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09a307XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1yfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXF9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWZ9O1xuZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cH07XG4iLCIvKiFcbiAqIGlzb2JqZWN0IDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pc29iamVjdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheSh2YWwpID09PSBmYWxzZTtcbn07XG4iLCJpbXBvcnQgVGV4dEZpZWxkIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGRcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0J1dHRvblwiO1xuaW1wb3J0IHsgTWVzc2FnZXNTZXJ2aWNlIH0gZnJvbSBcIi4uL21lc3NhZ2VzU2VydmljZVwiO1xuXG5leHBvcnQgY29uc3QgTG9naW5Gb3JtID0gKHByb3BzOiB7IHNldFVzZXJuYW1lOiAodTogc3RyaW5nKSA9PiB2b2lkIH0pID0+IHtcbiAgY29uc3QgW3VzZXJuYW1lLCBzZXRVc2VybmFtZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3Qgc3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IE1lc3NhZ2VzU2VydmljZS5sb2dpbih1c2VybmFtZSk7XG4gICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgLy9UT0RPIHRoaXMgc2hvdWxkIGFsbCByZWFsbHkgYmUgaW4gdGhlIG1lc3NhZ2VzIHNlcnZpY2VcbiAgICAgIGNvbnN0IHRva2VuID0gcmVzdWx0LmRhdGEuYWNjZXNzVG9rZW47XG4gICAgICBNZXNzYWdlc1NlcnZpY2UudG9rZW4gPSB0b2tlbjtcbiAgICAgIE1lc3NhZ2VzU2VydmljZS51c2VybmFtZSA9IHVzZXJuYW1lO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b2tlblwiLCB0b2tlbik7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJuYW1lXCIsIHVzZXJuYW1lKTtcbiAgICAgIHByb3BzLnNldFVzZXJuYW1lKHVzZXJuYW1lKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiB9fT5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgaWQ9XCJvdXRsaW5lZC11c2VybmFtZVwiXG4gICAgICAgIGxhYmVsPVwiVXNlcm5hbWVcIlxuICAgICAgICB2YWx1ZT17dXNlcm5hbWV9XG4gICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiBzZXRVc2VybmFtZShldmVudC50YXJnZXQudmFsdWUpfVxuICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgLz5cbiAgICAgIDxCdXR0b24gb25DbGljaz17c3VibWl0fT5Mb2dpbjwvQnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDsiLCJmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhvdXRIb2xlczsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjcmVhdGVTdHlsZXMsIFdpdGhTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XG5pbXBvcnQgQXBwQmFyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXJcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9Ub29sYmFyXCI7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeVwiO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b25cIjtcbmltcG9ydCBNZW51SWNvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2ljb25zL01lbnVcIjtcbmltcG9ydCBOYXZEcmF3ZXIgZnJvbSBcIi4vTmF2RHJhd2VyXCI7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3dpdGhTdHlsZXNcIjtcblxuY29uc3Qgc3R5bGVzID0gY3JlYXRlU3R5bGVzKHtcbiAgcm9vdDoge1xuICAgIGZsZXhHcm93OiAxXG4gIH0sXG4gIGdyb3c6IHtcbiAgICBmbGV4R3JvdzogMVxuICB9LFxuICBtZW51QnV0dG9uOiB7XG4gICAgbWFyZ2luTGVmdDogLTEyLFxuICAgIG1hcmdpblJpZ2h0OiAyMFxuICB9XG59KTtcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyBleHRlbmRzIFdpdGhTdHlsZXM8dHlwZW9mIHN0eWxlcz4ge31cblxuZnVuY3Rpb24gQnV0dG9uQXBwQmFyKHByb3BzOiBQcm9wcykge1xuICBjb25zdCBbbmF2QWN0aXZlLCBzZXROYXZBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCB7IGNsYXNzZXMgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9IHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiB9fT5cbiAgICAgIDxBcHBCYXIgcG9zaXRpb249XCJzdGF0aWNcIj5cbiAgICAgICAgPFRvb2xiYXI+XG4gICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tZW51QnV0dG9ufVxuICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJNZW51XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE5hdkFjdGl2ZSh0cnVlKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TWVudUljb24gLz5cbiAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg2XCIgY29sb3I9XCJpbmhlcml0XCIgY2xhc3NOYW1lPXtjbGFzc2VzLmdyb3d9PlxuICAgICAgICAgICBDaGF0IEFwcFxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9Ub29sYmFyPlxuICAgICAgPC9BcHBCYXI+XG4gICAgICA8TmF2RHJhd2VyIG9wZW49e25hdkFjdGl2ZX0gdG9nZ2xlPXsoKSA9PiBzZXROYXZBY3RpdmUoIW5hdkFjdGl2ZSl9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzKShCdXR0b25BcHBCYXIpOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VVbml0KHN0ciwgb3V0KSB7XG4gICAgaWYgKCFvdXQpXG4gICAgICAgIG91dCA9IFsgMCwgJycgXVxuXG4gICAgc3RyID0gU3RyaW5nKHN0cilcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdChzdHIsIDEwKVxuICAgIG91dFswXSA9IG51bVxuICAgIG91dFsxXSA9IHN0ci5tYXRjaCgvW1xcZC5cXC1cXCtdKlxccyooLiopLylbMV0gfHwgJydcbiAgICByZXR1cm4gb3V0XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBmaWxsOiBcIm5vbmVcIixcbiAgZDogXCJNMCAwaDI0djI0SDB6XCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTMgMThoMTh2LTJIM3Yyem0wLTVoMTh2LTJIM3Yyem0wLTd2MmgxOFY2SDN6XCJcbn0pKSwgJ01lbnUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBXaXRoU3R5bGVzLCB3aXRoU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xuaW1wb3J0IERyYXdlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvRHJhd2VyXCI7XG5pbXBvcnQgTGlzdCBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvTGlzdFwiO1xuaW1wb3J0IExpc3RJdGVtIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbVwiO1xuaW1wb3J0IExpc3RJdGVtSWNvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1JY29uXCI7XG5pbXBvcnQgTGlzdEl0ZW1UZXh0IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbVRleHRcIjtcbmltcG9ydCBFeGl0VG9BcHAgZnJvbSBcIkBtYXRlcmlhbC11aS9pY29ucy9FeGl0VG9BcHBcIjtcbmltcG9ydCB7IEdpdEh1YiB9IGZyb20gXCIuL0dpdEh1YlwiO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGxpc3Q6IHtcbiAgICB3aWR0aDogMjUwXG4gIH0sXG4gIGZ1bGxMaXN0OiB7XG4gICAgd2lkdGg6IFwiYXV0b1wiXG4gIH1cbn07XG5cbmNvbnN0IFRlbXBvcmFyeURyYXdlciA9IChcbiAgcHJvcHM6IFdpdGhTdHlsZXM8dHlwZW9mIHN0eWxlcz4gJiB7IHRvZ2dsZTogKCkgPT4gdm9pZDsgb3BlbjogYm9vbGVhbiB9XG4pID0+IHtcbiAgY29uc3QgeyBjbGFzc2VzIH0gPSBwcm9wcztcblxuICBjb25zdCBzaWRlTGlzdCA9IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5saXN0fT5cbiAgICAgIDxMaXN0PlxuICAgICAgICA8TGlzdEl0ZW1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKFwiaHR0cHM6Ly9naXRodWIuY29tL2FkY29zdGFuemEvY2hhdC1hcHBcIik7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBidXR0b25cbiAgICAgICAgPlxuICAgICAgICAgIDxMaXN0SXRlbUljb24+XG4gICAgICAgICAgICA8R2l0SHViIC8+XG4gICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PXtcIkdpdEh1YlwifSAvPlxuICAgICAgICA8L0xpc3RJdGVtPlxuICAgICAgICA8TGlzdEl0ZW1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInRva2VuXCIpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ1c2VybmFtZVwiKTtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH19XG4gICAgICAgICAgYnV0dG9uXG4gICAgICAgID5cbiAgICAgICAgICA8TGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgPEV4aXRUb0FwcCAvPlxuICAgICAgICAgIDwvTGlzdEl0ZW1JY29uPlxuICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT17XCJMb2dvdXRcIn0gLz5cbiAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgIDwvTGlzdD5cbiAgICA8L2Rpdj5cbiAgKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPERyYXdlciBvcGVuPXtwcm9wcy5vcGVufSBvbkNsb3NlPXtwcm9wcy50b2dnbGV9PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17cHJvcHMudG9nZ2xlfVxuICAgICAgICAgIG9uS2V5RG93bj17cHJvcHMudG9nZ2xlfVxuICAgICAgICA+XG4gICAgICAgICAge3NpZGVMaXN0fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRHJhd2VyPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMpKFRlbXBvcmFyeURyYXdlcik7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGZpbGw6IFwibm9uZVwiLFxuICBkOiBcIk0wIDBoMjR2MjRIMHpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAuMDkgMTUuNTlMMTEuNSAxN2w1LTUtNS01LTEuNDEgMS40MUwxMi42NyAxMUgzdjJoOS42N2wtMi41OCAyLjU5ek0xOSAzSDVjLTEuMTEgMC0yIC45LTIgMnY0aDJWNWgxNHYxNEg1di00SDN2NGMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yelwiXG59KSksICdFeGl0VG9BcHAnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiaW1wb3J0IHsgU3ZnSWNvbiB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBHaXRIdWIocHJvcHM6IE9iamVjdCkge1xuICByZXR1cm4gKFxuICAgIDxTdmdJY29uIHsuLi5wcm9wc30+XG4gICAgICA8cGF0aCBkPVwiTTEyLjAwNyAwQzYuMTIgMCAxLjEgNC4yNy4xNTcgMTAuMDhjLS45NDQgNS44MTMgMi40NjggMTEuNDUgOC4wNTQgMTMuMzEyLjE5LjA2NC4zOTcuMDMzLjU1NS0uMDg0LjE2LS4xMTcuMjUtLjMwNC4yNDQtLjV2LTIuMDQyYy0zLjMzLjczNS00LjAzNy0xLjU2LTQuMDM3LTEuNTYtLjIyLS43MjYtLjY5NC0xLjM1LTEuMzM0LTEuNzU2LTEuMDk2LS43NS4wNzQtLjczNS4wNzQtLjczNS43NzMuMTAzIDEuNDU0LjU1NyAxLjg0NiAxLjIzLjY5NCAxLjIxIDIuMjMgMS42MzggMy40NS45Ni4wNTYtLjYxLjMyNy0xLjE3OC43NjYtMS42MDUtMi42Ny0uMy01LjQ2Mi0xLjMzNS01LjQ2Mi02LjAwMi0uMDItMS4xOTMuNDItMi4zNSAxLjIzLTMuMjI2LS4zMjctMS4wMTUtLjI3LTIuMTE2LjE2Ni0zLjA5IDAgMCAxLjAwNi0uMzMgMy4zIDEuMjMgMS45NjYtLjUzOCA0LjA0LS41MzggNi4wMDMgMCAyLjI5NS0xLjUgMy4zLTEuMjMgMy4zLTEuMjMuNDQ1IDEuMDA2LjQ5IDIuMTQ0LjEyIDMuMTguODEuODc3IDEuMjUgMi4wMzMgMS4yMyAzLjIyNiAwIDQuNjA3LTIuODA1IDUuNjI3LTUuNDc2IDUuOTI3LjU3OC41ODMuODggMS4zODYuODI1IDIuMjA2djMuMjljLS4wMDUuMi4wOTIuMzkzLjI2LjUwNy4xNjQuMTE1LjM3Ny4xNC41NjUuMDYzIDUuNTY4LTEuODggOC45NTYtNy41MTQgOC4wMDctMTMuMzEzQzIyLjg5MiA0LjI2NyAxNy44ODQuMDA3IDEyLjAwOCAwelwiIC8+XG4gICAgPC9TdmdJY29uPlxuICApO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9zdHlsZXMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3N0eWxlc1wiKTtcblxudmFyIF9kZWZhdWx0VGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2RlZmF1bHRUaGVtZVwiKSk7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiAoMCwgX3N0eWxlcy53aXRoU3R5bGVzKShzdHlsZXNPckNyZWF0b3IsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGRlZmF1bHRUaGVtZTogX2RlZmF1bHRUaGVtZS5kZWZhdWx0XG4gIH0sIG9wdGlvbnMpKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gd2l0aFN0eWxlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVNdWlUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlTXVpVGhlbWVcIikpO1xuXG52YXIgZGVmYXVsdFRoZW1lID0gKDAsIF9jcmVhdGVNdWlUaGVtZS5kZWZhdWx0KSgpO1xudmFyIF9kZWZhdWx0ID0gZGVmYXVsdFRoZW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9kZWVwbWVyZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkZWVwbWVyZ2VcIikpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpcy1wbGFpbi1vYmplY3RcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9jcmVhdGVCcmVha3BvaW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlQnJlYWtwb2ludHNcIikpO1xuXG52YXIgX2NyZWF0ZU1peGlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlTWl4aW5zXCIpKTtcblxudmFyIF9jcmVhdGVQYWxldHRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVQYWxldHRlXCIpKTtcblxudmFyIF9jcmVhdGVUeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVUeXBvZ3JhcGh5XCIpKTtcblxudmFyIF9zaGFkb3dzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFkb3dzXCIpKTtcblxudmFyIF9zaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2hhcGVcIikpO1xuXG52YXIgX2NyZWF0ZVNwYWNpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVNwYWNpbmdcIikpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90cmFuc2l0aW9uc1wiKSk7XG5cbnZhciBfekluZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi96SW5kZXhcIikpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGJyZWFrcG9pbnRzID0gb3B0aW9ucy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzSW5wdXQgPSBfb3B0aW9ucyRicmVha3BvaW50cyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRicmVha3BvaW50cyxcbiAgICAgIF9vcHRpb25zJG1peGlucyA9IG9wdGlvbnMubWl4aW5zLFxuICAgICAgbWl4aW5zSW5wdXQgPSBfb3B0aW9ucyRtaXhpbnMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkbWl4aW5zLFxuICAgICAgX29wdGlvbnMkcGFsZXR0ZSA9IG9wdGlvbnMucGFsZXR0ZSxcbiAgICAgIHBhbGV0dGVJbnB1dCA9IF9vcHRpb25zJHBhbGV0dGUgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkcGFsZXR0ZSxcbiAgICAgIHNoYWRvd3NJbnB1dCA9IG9wdGlvbnMuc2hhZG93cyxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNoYWRvd3NcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG4gIHZhciBwYWxldHRlID0gKDAsIF9jcmVhdGVQYWxldHRlLmRlZmF1bHQpKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9ICgwLCBfY3JlYXRlQnJlYWtwb2ludHMuZGVmYXVsdCkoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gKDAsIF9jcmVhdGVTcGFjaW5nLmRlZmF1bHQpKHNwYWNpbmdJbnB1dCk7XG4gIHZhciBtdWlUaGVtZSA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIG1peGluczogKDAsIF9jcmVhdGVNaXhpbnMuZGVmYXVsdCkoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBwcm9wZXJ0aWVzXG4gICAgc2hhZG93czogc2hhZG93c0lucHV0IHx8IF9zaGFkb3dzLmRlZmF1bHQsXG4gICAgdHlwb2dyYXBoeTogKDAsIF9jcmVhdGVUeXBvZ3JhcGh5LmRlZmF1bHQpKHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZ1xuICB9LCAoMCwgX2RlZXBtZXJnZS5kZWZhdWx0KSh7XG4gICAgc2hhcGU6IF9zaGFwZS5kZWZhdWx0LFxuICAgIHRyYW5zaXRpb25zOiBfdHJhbnNpdGlvbnMuZGVmYXVsdCxcbiAgICB6SW5kZXg6IF96SW5kZXguZGVmYXVsdFxuICB9LCBvdGhlciwge1xuICAgIGlzTWVyZ2VhYmxlT2JqZWN0OiBfaXNQbGFpbk9iamVjdC5kZWZhdWx0XG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBwYXJlbnRLZXkpIHtcbiAgICAgIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHZhciBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmIChkZXB0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignTXVpJykgPT09IDAgJiYgY2hpbGQpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkLCBrZXksIGRlcHRoICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShmYWxzZSwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBgXCIuY29uY2F0KHBhcmVudEtleSwgXCJgIGNvbXBvbmVudCBpbmNyZWFzZXMgXCIpICsgXCJ0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGludGVybmFsIHN0YXRlLlwiKSwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCAnSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAkcnVsZU5hbWUgc3ludGF4OicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHJvb3Q6ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL2N1c3RvbWl6YXRpb24vY29tcG9uZW50cy8jcHNldWRvLWNsYXNzZXMnXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShtdWlUaGVtZS5zaGFkb3dzLmxlbmd0aCA9PT0gMjUsICdNYXRlcmlhbC1VSTogdGhlIHNoYWRvd3MgYXJyYXkgcHJvdmlkZWQgdG8gY3JlYXRlTXVpVGhlbWUgc2hvdWxkIHN1cHBvcnQgMjUgZWxldmF0aW9ucy4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVNdWlUaGVtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyZWFrcG9pbnRzO1xuZXhwb3J0cy5rZXlzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxudmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnRzLmtleXMgPSBrZXlzO1xuXG5mdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpICsgMTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1tzdGFydF0pLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleXNbZW5kSW5kZXhdXSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1peGlucztcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbi8vIGltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAvLyBUbyBkZXByZWNhdGUgaW4gdjQuMVxuICAgICAgLy8gICAgICAgd2FybmluZyhcbiAgICAgIC8vICAgICAgICAgZmFsc2UsXG4gICAgICAvLyAgICAgICAgIFtcbiAgICAgIC8vICAgICAgICAgICAnTWF0ZXJpYWwtVUk6IHRoZW1lLm1peGlucy5ndXR0ZXJzKCkgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgLy8gICAgICAgICAgICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLFxuICAgICAgLy8gICAgICAgICAgIGBcbiAgICAgIC8vIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgLy8gICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGAsXG4gICAgICAvLyAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyAgICAgICApO1xuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQYWxldHRlO1xuZXhwb3J0cy5kYXJrID0gZXhwb3J0cy5saWdodCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaW5kaWdvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2luZGlnb1wiKSk7XG5cbnZhciBfcGluayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9waW5rXCIpKTtcblxudmFyIF9ncmV5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2dyZXlcIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9yZWRcIikpO1xuXG52YXIgX2NvbW1vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9jb21tb25cIikpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxudmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IF9jb21tb24uZGVmYXVsdC53aGl0ZSxcbiAgICBkZWZhdWx0OiBfZ3JleS5kZWZhdWx0WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjE0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKSdcbiAgfVxufTtcbmV4cG9ydHMubGlnaHQgPSBsaWdodDtcbnZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfZ3JleS5kZWZhdWx0WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMSxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknXG4gIH1cbn07XG5leHBvcnRzLmRhcmsgPSBkYXJrO1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikoaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5kYXJrZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9pbmRpZ28uZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9pbmRpZ28uZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9pbmRpZ28uZGVmYXVsdFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3BpbmsuZGVmYXVsdC5BMjAwLFxuICAgIG1haW46IF9waW5rLmRlZmF1bHQuQTQwMCxcbiAgICBkYXJrOiBfcGluay5kZWZhdWx0LkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3JlZC5kZWZhdWx0WzMwMF0sXG4gICAgbWFpbjogX3JlZC5kZWZhdWx0WzUwMF0sXG4gICAgZGFyazogX3JlZC5kZWZhdWx0WzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShiYWNrZ3JvdW5kLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGJhY2tncm91bmQgYXJndW1lbnQgaW4gZ2V0Q29udHJhc3RUZXh0KFwiLmNvbmNhdChiYWNrZ3JvdW5kLCBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmdldENvbnRyYXN0UmF0aW8pKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb250cmFzdCA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5nZXRDb250cmFzdFJhdGlvKShiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbnRyYXN0ID49IDMsIFtcIk1hdGVyaWFsLVVJOiB0aGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQUNHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvcikge1xuICAgIHZhciBtYWluU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDUwMDtcbiAgICB2YXIgbGlnaHRTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzAwO1xuICAgIHZhciBkYXJrU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDcwMDtcbiAgICBjb2xvciA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29sb3IubWFpbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuJywgXCJUaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBgbWFpbmAgcHJvcGVydHkgb3IgYSBgXCIuY29uY2F0KG1haW5TaGFkZSwgXCJgIHByb3BlcnR5LlwiKV0uam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG5cbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciB0eXBlcyA9IHtcbiAgICBkYXJrOiBkYXJrLFxuICAgIGxpZ2h0OiBsaWdodFxuICB9O1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodHlwZXNbdHlwZV0sIFwiTWF0ZXJpYWwtVUk6IHRoZSBwYWxldHRlIHR5cGUgYFwiLmNvbmNhdCh0eXBlLCBcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpIDogdm9pZCAwO1xuICB2YXIgcGFsZXR0ZU91dHB1dCA9ICgwLCBfZGVlcG1lcmdlLmRlZmF1bHQpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2NvbW1vbi5kZWZhdWx0LFxuICAgIC8vIFRoZSBwYWxldHRlIHR5cGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcihwcmltYXJ5KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcihzZWNvbmRhcnksICdBNDAwJywgJ0EyMDAnLCAnQTcwMCcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcihlcnJvciksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXk6IF9ncmV5LmRlZmF1bHQsXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuIHRoZSBiYWNrZ3JvdW5kIGFuZFxuICAgIC8vIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkOiBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJuIHRoZSBjb2xvciBvZiB0aGUgdGV4dCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0OiBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3I6IGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXQ6IHRvbmFsT2Zmc2V0XG4gIH0sIHR5cGVzW3R5cGVdKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGluZGlnbyA9IHtcbiAgNTA6ICcjZThlYWY2JyxcbiAgMTAwOiAnI2M1Y2FlOScsXG4gIDIwMDogJyM5ZmE4ZGEnLFxuICAzMDA6ICcjNzk4NmNiJyxcbiAgNDAwOiAnIzVjNmJjMCcsXG4gIDUwMDogJyMzZjUxYjUnLFxuICA2MDA6ICcjMzk0OWFiJyxcbiAgNzAwOiAnIzMwM2Y5ZicsXG4gIDgwMDogJyMyODM1OTMnLFxuICA5MDA6ICcjMWEyMzdlJyxcbiAgQTEwMDogJyM4YzllZmYnLFxuICBBMjAwOiAnIzUzNmRmZScsXG4gIEE0MDA6ICcjM2Q1YWZlJyxcbiAgQTcwMDogJyMzMDRmZmUnXG59O1xudmFyIF9kZWZhdWx0ID0gaW5kaWdvO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgcGluayA9IHtcbiAgNTA6ICcjZmNlNGVjJyxcbiAgMTAwOiAnI2Y4YmJkMCcsXG4gIDIwMDogJyNmNDhmYjEnLFxuICAzMDA6ICcjZjA2MjkyJyxcbiAgNDAwOiAnI2VjNDA3YScsXG4gIDUwMDogJyNlOTFlNjMnLFxuICA2MDA6ICcjZDgxYjYwJyxcbiAgNzAwOiAnI2MyMTg1YicsXG4gIDgwMDogJyNhZDE0NTcnLFxuICA5MDA6ICcjODgwZTRmJyxcbiAgQTEwMDogJyNmZjgwYWInLFxuICBBMjAwOiAnI2ZmNDA4MScsXG4gIEE0MDA6ICcjZjUwMDU3JyxcbiAgQTcwMDogJyNjNTExNjInXG59O1xudmFyIF9kZWZhdWx0ID0gcGluaztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbnZhciBfZGVmYXVsdCA9IGdyZXk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IHJlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbnZhciBfZGVmYXVsdCA9IGNvbW1vbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGV4VG9SZ2IgPSBoZXhUb1JnYjtcbmV4cG9ydHMucmdiVG9IZXggPSByZ2JUb0hleDtcbmV4cG9ydHMuaHNsVG9SZ2IgPSBoc2xUb1JnYjtcbmV4cG9ydHMuZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMucmVjb21wb3NlQ29sb3IgPSByZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMuZ2V0Q29udHJhc3RSYXRpbyA9IGdldENvbnRyYXN0UmF0aW87XG5leHBvcnRzLmdldEx1bWluYW5jZSA9IGdldEx1bWluYW5jZTtcbmV4cG9ydHMuZW1waGFzaXplID0gZW1waGFzaXplO1xuZXhwb3J0cy5mYWRlID0gZmFkZTtcbmV4cG9ydHMuZGFya2VuID0gZGFya2VuO1xuZXhwb3J0cy5saWdodGVuID0gbGlnaHRlbjtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4LCBcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpIDogdm9pZCAwO1xuXG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCAvIDMsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2IoXCIuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gcGFyc2VJbnQobiwgMTYpO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIHZhciBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cblxuXG5mdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICB2YXIgX2RlY29tcG9zZUNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpLFxuICAgICAgdmFsdWVzID0gX2RlY29tcG9zZUNvbG9yLnZhbHVlcztcblxuICByZXR1cm4gXCIjXCIuY29uY2F0KHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaW50VG9IZXgobik7XG4gIH0pLmpvaW4oJycpKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuXG5mdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIF9jb2xvciA9IGNvbG9yLFxuICAgICAgdmFsdWVzID0gX2NvbG9yLnZhbHVlcztcbiAgdmFyIGggPSB2YWx1ZXNbMF07XG4gIHZhciBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICB2YXIgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgdmFyIGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG4gIHZhciBmID0gZnVuY3Rpb24gZihuKSB7XG4gICAgdmFyIGsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IChuICsgaCAvIDMwKSAlIDEyO1xuICAgIHJldHVybiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgfTtcblxuICB2YXIgdHlwZSA9ICdyZ2InO1xuICB2YXIgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihbXCJNYXRlcmlhbC1VSTogdW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlwiKSwgJ1dlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSkuc3BsaXQoJywnKTtcbiAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiB2YWx1ZXNcbiAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICB2YXIgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgdmFyIGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6IE1hdGgucG93KCh2YWwgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gZmFkZShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG5cbiAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5cbmZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHlwb2dyYXBoeTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxuLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cblxudmFyIGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbnZhciBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIHZhciBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICAgIF9yZWYkZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGZvbnRGYW1pbHkgPSBfcmVmJGZvbnRGYW1pbHkgPT09IHZvaWQgMCA/IGRlZmF1bHRGb250RmFtaWx5IDogX3JlZiRmb250RmFtaWx5LFxuICAgICAgX3JlZiRmb250U2l6ZSA9IF9yZWYuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9yZWYkZm9udFNpemUgPT09IHZvaWQgMCA/IDE0IDogX3JlZiRmb250U2l6ZSxcbiAgICAgIF9yZWYkZm9udFdlaWdodExpZ2h0ID0gX3JlZi5mb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSBfcmVmJGZvbnRXZWlnaHRMaWdodCA9PT0gdm9pZCAwID8gMzAwIDogX3JlZiRmb250V2VpZ2h0TGlnaHQsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPSBfcmVmLmZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPT09IHZvaWQgMCA/IDQwMCA6IF9yZWYkZm9udFdlaWdodFJlZ3VsYSxcbiAgICAgIF9yZWYkZm9udFdlaWdodE1lZGl1bSA9IF9yZWYuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPT09IHZvaWQgMCA/IDUwMCA6IF9yZWYkZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIF9yZWYkaHRtbEZvbnRTaXplID0gX3JlZi5odG1sRm9udFNpemUsXG4gICAgICBodG1sRm9udFNpemUgPSBfcmVmJGh0bWxGb250U2l6ZSA9PT0gdm9pZCAwID8gMTYgOiBfcmVmJGh0bWxGb250U2l6ZSxcbiAgICAgIGFsbFZhcmlhbnRzID0gX3JlZi5hbGxWYXJpYW50cyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3JlZiwgW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIl0pO1xuXG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IGZ1bmN0aW9uIHB4VG9SZW0oc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAvLyBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMSwgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4wNCwgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMTcsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzLCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuICgwLCBfZGVlcG1lcmdlLmRlZmF1bHQpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGh0bWxGb250U2l6ZTogaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW06IHB4VG9SZW0sXG4gICAgcm91bmQ6IHJvdW5kLFxuICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodDogZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyOiBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtOiBmb250V2VpZ2h0TWVkaXVtXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xudmFyIHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG52YXIgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coKSB7XG4gIHJldHVybiBbXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlVbWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA1ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzVdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA2ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzZdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA3ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzddLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA4ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzhdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA5ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzldLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDExID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzExXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHksIFwiKVwiKV0uam9pbignLCcpO1xufVxuXG52YXIgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAxLCAzLCAwLCAwLCAxLCAxLCAwLCAwLCAyLCAxLCAtMSksIGNyZWF0ZVNoYWRvdygwLCAxLCA1LCAwLCAwLCAyLCAyLCAwLCAwLCAzLCAxLCAtMiksIGNyZWF0ZVNoYWRvdygwLCAxLCA4LCAwLCAwLCAzLCA0LCAwLCAwLCAzLCAzLCAtMiksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xudmFyIF9kZWZhdWx0ID0gc2hhZG93cztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG52YXIgX2RlZmF1bHQgPSBzaGFwZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVNwYWNpbmc7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgd2Fybk9uY2U7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoKSB7XG4gIHZhciBzcGFjaW5nSW5wdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDg7XG5cbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIEFsbCBjb21wb25lbnRzIGFsaWduIHRvIGFuIDhkcCBzcXVhcmUgYmFzZWxpbmUgZ3JpZCBmb3IgbW9iaWxlLCB0YWJsZXQsIGFuZCBkZXNrdG9wLlxuICAvLyBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbCNwaXhlbC1kZW5zaXR5XG5cblxuICB2YXIgdHJhbnNmb3JtO1xuXG4gIGlmICh0eXBlb2Ygc3BhY2luZ0lucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJhbnNmb3JtID0gc3BhY2luZ0lucHV0O1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlb2Ygc3BhY2luZ0lucHV0ID09PSAnbnVtYmVyJywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBgdGhlbWUuc3BhY2luZ2AgdmFsdWUgKFwiLmNvbmNhdChzcGFjaW5nSW5wdXQsIFwiKSBpcyBpbnZhbGlkLlwiKSwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcblxuICAgIHRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybShmYWN0b3IpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlb2YgZmFjdG9yID09PSAnbnVtYmVyJywgXCJFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGZhY3RvcikpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dCAqIGZhY3RvcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoYXJncy5sZW5ndGggPD0gNCwgXCJUb28gbWFueSBhcmd1bWVudHMsIGV4cGVjdGVkIFsxLCA0XSwgZ290IFwiLmNvbmNhdChhcmdzLmxlbmd0aCkpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKGFyZ3NbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoZmFjdG9yKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gdHJhbnNmb3JtKGZhY3Rvcik7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChvdXRwdXQsIFwicHhcIikgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9OyAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0byByZW1vdmUgaW4gdjUuXG5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3BhY2luZywgJ3VuaXQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkod2Fybk9uY2UgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JywgWydNYXRlcmlhbC1VSTogdGhlbWUuc3BhY2luZy51bml0IHVzYWdlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJywgJ0l0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4nLCAnWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC4nLCAnJywgJ1lvdSBjYW4gdXNlIHRoZSBgaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWF0ZXJpYWwtdWktY29kZW1vZC9SRUFETUUubWQjdGhlbWUtc3BhY2luZy1hcGlgIG1pZ3JhdGlvbiBoZWxwZXIgdG8gbWFrZSB0aGUgcHJvY2VzcyBzbW9vdGhlci4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICAgIHdhcm5PbmNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgICB9XG4gIH0pO1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuaXNOdW1iZXIgPSBleHBvcnRzLmlzU3RyaW5nID0gZXhwb3J0cy5mb3JtYXRNcyA9IGV4cG9ydHMuZHVyYXRpb24gPSBleHBvcnRzLmVhc2luZyA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG52YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydHMuZWFzaW5nID0gZWFzaW5nO1xudmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZXhwb3J0cy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG52YXIgZm9ybWF0TXMgPSBmdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn07XG5cbmV4cG9ydHMuZm9ybWF0TXMgPSBmb3JtYXRNcztcblxudmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59O1xuXG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cblxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xudmFyIF9kZWZhdWx0ID0ge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBfb3B0aW9ucyRkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIGR1cmF0aW9uT3B0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IGR1cmF0aW9uLnN0YW5kYXJkIDogX29wdGlvbnMkZHVyYXRpb24sXG4gICAgICAgIF9vcHRpb25zJGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nLFxuICAgICAgICBlYXNpbmdPcHRpb24gPSBfb3B0aW9ucyRlYXNpbmcgPT09IHZvaWQgMCA/IGVhc2luZy5lYXNlSW5PdXQgOiBfb3B0aW9ucyRlYXNpbmcsXG4gICAgICAgIF9vcHRpb25zJGRlbGF5ID0gb3B0aW9ucy5kZWxheSxcbiAgICAgICAgZGVsYXkgPSBfb3B0aW9ucyRkZWxheSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGRlbGF5LFxuICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpc1N0cmluZyhwcm9wcykgfHwgQXJyYXkuaXNBcnJheShwcm9wcyksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSB8fCBpc1N0cmluZyhkdXJhdGlvbk9wdGlvbiksIFwiTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFxcXCJkdXJhdGlvblxcXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgXCIuY29uY2F0KGR1cmF0aW9uT3B0aW9uLCBcIi5cIikpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpc1N0cmluZyhlYXNpbmdPcHRpb24pLCAnTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNOdW1iZXIoZGVsYXkpIHx8IGlzU3RyaW5nKGRlbGF5KSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCA9PT0gMCwgXCJNYXRlcmlhbC1VSTogdW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFtcIi5jb25jYXQoT2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKSwgXCJdXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoZnVuY3Rpb24gKGFuaW1hdGVkUHJvcCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFuaW1hdGVkUHJvcCwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbiksIFwiIFwiKS5jb25jYXQoZWFzaW5nT3B0aW9uLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KSk7XG4gICAgfSkuam9pbignLCcpO1xuICB9LFxuICBnZXRBdXRvSGVpZ2h0RHVyYXRpb246IGZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIE1hdGgucG93KGNvbnN0YW50LCAwLjI1KSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbnZhciBfZGVmYXVsdCA9IHpJbmRleDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTWVzc2FnZXMgfSBmcm9tIFwiLi9NZXNzYWdlc1wiO1xuaW1wb3J0IHsgQ2hhdEZvcm0gfSBmcm9tIFwiLi9DaGF0Rm9ybVwiO1xuXG5leHBvcnQgY29uc3QgQ2hhdCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENoYXRGb3JtIC8+XG4gICAgICA8TWVzc2FnZXMgLz5cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiLi4vbW9kZWxcIjtcbmltcG9ydCB7IE1lc3NhZ2VzU2VydmljZSB9IGZyb20gXCIuLi9tZXNzYWdlc1NlcnZpY2VcIjtcbmltcG9ydCB7IE1lc3NhZ2VDb21wb25lbnQgfSBmcm9tIFwiLi9NZXNzYWdlXCI7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlcyA9ICgpID0+IHtcbiAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZShbXSBhcyBNZXNzYWdlW10pO1xuICBjb25zdCBncm91cGVkTWVzc2FnZXMgPSBtZXNzYWdlcy5yZWR1Y2UoXG4gICAgKGdyb3VwZWQsIG1lc3NhZ2UpID0+IHtcbiAgICAgIGlmIChtZXNzYWdlLmZyb21Vc2VyID09PSBNZXNzYWdlc1NlcnZpY2UudXNlcm5hbWUpIHtcbiAgICAgICAgY29uc3QgdG8gPSBtZXNzYWdlLnRvVXNlcnNbMF07XG4gICAgICAgIGlmIChncm91cGVkW3RvXSkge1xuICAgICAgICAgIGdyb3VwZWRbdG9dLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ3JvdXBlZFttZXNzYWdlLnRvVXNlcnNbMF1dID0gW21lc3NhZ2VdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdyb3VwZWRbbWVzc2FnZS5mcm9tVXNlcl0pIHtcbiAgICAgICAgZ3JvdXBlZFttZXNzYWdlLmZyb21Vc2VyXS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBlZFttZXNzYWdlLmZyb21Vc2VyXSA9IFttZXNzYWdlXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBncm91cGVkO1xuICAgIH0sXG4gICAge30gYXMgUmVjb3JkPHN0cmluZywgTWVzc2FnZVtdPlxuICApO1xuICBjb25zdCBnZXRNZXNzYWdlcyA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gc2V0TWVzc2FnZXMoYXdhaXQgTWVzc2FnZXNTZXJ2aWNlLmdldE1lc3NhZ2VzKCkpO1xuICB9O1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdldE1lc3NhZ2VzKCk7XG4gICAgc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZ2V0TWVzc2FnZXMoKTtcbiAgICB9LCAxMDAwKTtcbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgICAgICBmbGV4V3JhcDogXCJ3cmFwXCJcbiAgICAgIH19XG4gICAgPlxuICAgICAge09iamVjdC5rZXlzKGdyb3VwZWRNZXNzYWdlcykubWFwKGZyb21Vc2VyID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TWVzc2FnZUNvbXBvbmVudFxuICAgICAgICAgICAga2V5PXtmcm9tVXNlcn1cbiAgICAgICAgICAgIG1lc3NhZ2VzPXtncm91cGVkTWVzc2FnZXNbZnJvbVVzZXJdfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9KX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiLi4vbW9kZWxcIjtcbmltcG9ydCB7IFBhcGVyIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XG5pbXBvcnQgeyBFbWJlZGRlZENoYXRGb3JtIH0gZnJvbSBcIi4vRW1iZWRkZWRDaGF0Rm9ybVwiO1xuaW1wb3J0IHsgTWVzc2FnZXNTZXJ2aWNlIH0gZnJvbSBcIi4uL21lc3NhZ2VzU2VydmljZVwiO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbXBvbmVudCA9IChwcm9wczogeyBtZXNzYWdlczogTWVzc2FnZVtdIH0pID0+IHtcbiAgY29uc3QgcmVuZGVyTWVzc2FnZXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLm1lc3NhZ2VzLm1hcChtZXNzYWdlID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlID1cbiAgICAgICAgbWVzc2FnZS5mcm9tVXNlciAhPT0gTWVzc2FnZXNTZXJ2aWNlLnVzZXJuYW1lXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjNjZjZGFhXCIsXG4gICAgICAgICAgICAgIGFsaWduU2VsZjogXCJmbGV4U3RhcnRcIixcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IFwiYXV0b1wiLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAxMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2FkZDhlNlwiLFxuICAgICAgICAgICAgICBhbGlnblNlbGY6IFwiZmxleEVuZFwiLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBcImF1dG9cIixcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IDEwXG4gICAgICAgICAgICB9O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBtYXhXaWR0aDogXCI0OCVcIixcbiAgICAgICAgICAgIHBhZGRpbmc6IDgsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDYsXG4gICAgICAgICAgICBtYXJnaW46IDQsXG4gICAgICAgICAgICAuLi5zdHlsZVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2PnttZXNzYWdlLm1lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcblxuICBsZXQgZnJvbVVzZXIgPSBwcm9wcy5tZXNzYWdlc1swXS5mcm9tVXNlcjtcbiAgZnJvbVVzZXIgPVxuICAgIGZyb21Vc2VyID09PSBNZXNzYWdlc1NlcnZpY2UudXNlcm5hbWVcbiAgICAgID8gcHJvcHMubWVzc2FnZXNbMF0udG9Vc2Vyc1swXVxuICAgICAgOiBmcm9tVXNlcjtcbiAgcmV0dXJuIChcbiAgICA8UGFwZXIgZWxldmF0aW9uPXsyfSBzdHlsZT17eyB3aWR0aDogNDAwLCBoZWlnaHQ6IDQwMCwgbWFyZ2luOiAxMiB9fT5cbiAgICAgIDxiIHN0eWxlPXt7IG1hcmdpbjogMjAgfX0+Q2hhdCB3aXRoIHtmcm9tVXNlcn08L2I+XG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICBvdmVyZmxvd1k6IFwic2Nyb2xsXCIsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAyNTAsXG4gICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCJcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3JlbmRlck1lc3NhZ2VzKCl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxFbWJlZGRlZENoYXRGb3JtIHRvPXtwcm9wcy5tZXNzYWdlc1swXS5mcm9tVXNlcn0gLz5cbiAgICA8L1BhcGVyPlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBUZXh0RmllbGQgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1RleHRGaWVsZFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uXCI7XG5pbXBvcnQgeyBNZXNzYWdlc1NlcnZpY2UgfSBmcm9tIFwiLi4vbWVzc2FnZXNTZXJ2aWNlXCI7XG5cbmV4cG9ydCBjb25zdCBFbWJlZGRlZENoYXRGb3JtID0gKHByb3BzOiB7IHRvOiBzdHJpbmcgfSkgPT4ge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3Qgc3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IE1lc3NhZ2VzU2VydmljZS53cml0ZU1lc3NhZ2UoW3Byb3BzLnRvXSwgbWVzc2FnZSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBhbGlnblNlbGY6IFwiZmxleEVuZFwiXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgaWQ9XCJvdXRsaW5lZC1tZXNzYWdlXCJcbiAgICAgICAgbGFiZWw9XCJNZXNzYWdlXCJcbiAgICAgICAgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiBzZXRNZXNzYWdlKGV2ZW50LnRhcmdldC52YWx1ZSl9XG4gICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAvPlxuICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtzdWJtaXR9PlNlbmQgTWVzc2FnZSB0byB7cHJvcHMudG99PC9CdXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25cIjtcbmltcG9ydCB7IE1lc3NhZ2VzU2VydmljZSB9IGZyb20gXCIuLi9tZXNzYWdlc1NlcnZpY2VcIjtcblxuZXhwb3J0IGNvbnN0IENoYXRGb3JtID0gKCkgPT4ge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3RvLCBzZXRUb10gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3Qgc3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IE1lc3NhZ2VzU2VydmljZS53cml0ZU1lc3NhZ2UoW3RvXSwgbWVzc2FnZSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxoMj5TZW5kIGEgbmV3IG1lc3NhZ2U6PC9oMj5cbiAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgaWQ9XCJvdXRsaW5lZC10b1wiXG4gICAgICAgIGxhYmVsPVwiVG9cIlxuICAgICAgICB2YWx1ZT17dG99XG4gICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiBzZXRUbyhldmVudC50YXJnZXQudmFsdWUpfVxuICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgLz5cblxuICAgICAgPFRleHRGaWVsZFxuICAgICAgICBpZD1cIm91dGxpbmVkLW1lc3NhZ2VcIlxuICAgICAgICBsYWJlbD1cIk1lc3NhZ2VcIlxuICAgICAgICB2YWx1ZT17bWVzc2FnZX1cbiAgICAgICAgb25DaGFuZ2U9e2V2ZW50ID0+IHNldE1lc3NhZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgIC8+XG4gICAgICA8QnV0dG9uIG9uQ2xpY2s9e3N1Ym1pdH0+U2VuZCBNZXNzYWdlPC9CdXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnOyAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG52YXIgd2l0aFN0eWxlcyA9IGZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICAgIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWUgPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImRlZmF1bHRUaGVtZVwiLCBcIndpdGhUaGVtZVwiLCBcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFuYW1lKSB7XG4gICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgIGNsYXNzTmFtZVByZWZpeCA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBjbGFzc05hbWVQcmVmaXggPT09ICdzdHJpbmcnLCBbJ01hdGVyaWFsLVVJOiB0aGUgY29tcG9uZW50IGRpc3BsYXlOYW1lIGlzIGludmFsaWQuIEl0IG5lZWRzIHRvIGJlIGEgc3RyaW5nLicsIFwiUGxlYXNlIGZpeCB0aGUgZm9sbG93aW5nIGNvbXBvbmVudDogXCIuY29uY2F0KENvbXBvbmVudCwgXCIuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZSxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50LFxuICAgICAgbmFtZTogbmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICAgIH0sIHN0eWxlc09wdGlvbnMpKTtcbiAgICB2YXIgV2l0aFN0eWxlcyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gV2l0aFN0eWxlcyhwcm9wcywgcmVmKSB7XG4gICAgICB2YXIgY2xhc3Nlc1Byb3AgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKHByb3BzKTtcbiAgICAgIHZhciB0aGVtZTtcbiAgICAgIHZhciBtb3JlID0gb3RoZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgd2l0aFRoZW1lKSB7XG4gICAgICAgIC8vIG5hbWUgYW5kIHdpdGhUaGVtZSBhcmUgaW52YXJpYW50IGluIHRoZSBvdXRlciBzY29wZVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgICAgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIG1vcmUgPSBnZXRUaGVtZVByb3BzKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwcm9wczogb3RoZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBQcm92aWRlIHRoZSB0aGVtZSB0byB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgICAgIC8vIFNvIHdlIGRvbid0IGhhdmUgdG8gdXNlIHRoZSBgd2l0aFRoZW1lKClgIEhpZ2hlci1vcmRlciBDb21wb25lbnQuXG5cblxuICAgICAgICBpZiAod2l0aFRoZW1lICYmICFtb3JlLnRoZW1lKSB7XG4gICAgICAgICAgbW9yZS50aGVtZSA9IHRoZW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgZGVjb3JhdGVkIGNvbXBvbmVudC5cbiAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmlubmVyUmVmID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsOyAvLyByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAvLyAgICdNYXRlcmlhbC1VSTogdGhlIGBpbm5lclJlZmAgcHJvcCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuICcgK1xuICAgICAgICAvLyAgICAgJ1JlZnMgYXJlIG5vdyBhdXRvbWF0aWNhbGx5IGZvcndhcmRlZCB0byB0aGUgaW5uZXIgY29tcG9uZW50LicsXG4gICAgICAgIC8vICk7XG4gICAgICB9KVxuICAgIH0gOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFN0eWxlcy5kaXNwbGF5TmFtZSA9IFwiV2l0aFN0eWxlcyhcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhTdHlsZXMsIENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gRXhwb3NlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cbiAgICAgIFdpdGhTdHlsZXMuTmFrZWQgPSBDb21wb25lbnQ7XG4gICAgICBXaXRoU3R5bGVzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgV2l0aFN0eWxlcy51c2VTdHlsZXMgPSB1c2VTdHlsZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICcuLi9UaGVtZVByb3ZpZGVyL25lc3RlZCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGxpc3Qgb2YgdGhlIHN0eWxlIHJ1bGUgbmFtZSB3ZSB1c2UgYXMgZHJvcCBpbiByZXBsYWNlbWVudCBmb3IgdGhlIGJ1aWx0LWluXG4gKiBwc2V1ZG8gY2xhc3NlcyAoOmNoZWNrZWQsIDpkaXNhYmxlZCwgOmZvY3VzZWQsIGV0Yy4pLlxuICpcbiAqIFdoeSBkbyB0aGV5IGV4aXN0IGluIHRoZSBmaXJzdCBwbGFjZT9cbiAqIFRoZXNlIGNsYXNzZXMgYXJlIHVzZWQgYXQgYSBzcGVjaWZpY2l0eSBvZiAyLlxuICogSXQgYWxsb3dzIHRoZW0gdG8gb3ZlcnJpZGUgcHJldmlvdXNseSBkZWZpbmllZCBzdHlsZXMgYXMgd2VsbCBhc1xuICogYmVpbmcgdW50b3VjaGVkIGJ5IHNpbXBsZSB1c2VyIG92ZXJyaWRlcy5cbiAqL1xuXG52YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddOyAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbi8vIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXQuXG4vLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuLy9cbi8vIEl0J3MgaW5zcGlyZWQgYnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iLzRlNmEwNWRkM2Y3YjY1NzJmZGQzYWIyMTY4NjFkOWU0NDZjMjAzMzEvc3JjL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPSBvcHRpb25zLmRpc2FibGVHbG9iYWwsXG4gICAgICBkaXNhYmxlR2xvYmFsID0gX29wdGlvbnMkZGlzYWJsZUdsb2JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGRpc2FibGVHbG9iYSxcbiAgICAgIF9vcHRpb25zJHByb2R1Y3Rpb25QciA9IG9wdGlvbnMucHJvZHVjdGlvblByZWZpeCxcbiAgICAgIHByb2R1Y3Rpb25QcmVmaXggPSBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPT09IHZvaWQgMCA/ICdqc3MnIDogX29wdGlvbnMkcHJvZHVjdGlvblByLFxuICAgICAgX29wdGlvbnMkc2VlZCA9IG9wdGlvbnMuc2VlZCxcbiAgICAgIHNlZWQgPSBfb3B0aW9ucyRzZWVkID09PSB2b2lkIDAgPyAnJyA6IF9vcHRpb25zJHNlZWQ7XG4gIHZhciBzZWVkUHJlZml4ID0gc2VlZCA9PT0gJycgPyAnJyA6IFwiXCIuY29uY2F0KHNlZWQsIFwiLVwiKTtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHJ1bGVDb3VudGVyIDwgMWUxMCwgWydNYXRlcmlhbC1VSTogeW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIHJ1bGVDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCcnKSkgOiB2b2lkIDA7XG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIHZhciBzdWZmaXggPSBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChydWxlQ291bnRlcik7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lLFxuICAgICAgcHJvcHMgPSBwYXJhbXMucHJvcHM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lUHJvcHM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBib3R0b21MaW5lQ29sb3IgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuNDIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknO1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEzKScsXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDkpJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4xMiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5W2xpZ2h0ID8gJ2RhcmsnIDogJ2xpZ2h0J10pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSlcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDEyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAxMlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogJzI3cHggMTJweCAxMHB4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBwYWRkaW5nOiAnMjdweCAxMnB4IDEwcHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDI0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xudmFyIEZpbGxlZElucHV0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBkaXNhYmxlVW5kZXJsaW5lID0gcHJvcHMuZGlzYWJsZVVuZGVybGluZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRpbnB1dENvbXBvbmVudCA9IHByb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRDb21wb25lbnQgPSBfcHJvcHMkaW5wdXRDb21wb25lbnQgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcHJvcHMkaW5wdXRDb21wb25lbnQsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCAhZGlzYWJsZVVuZGVybGluZSAmJiBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICB1bmRlcmxpbmU6IG51bGxcbiAgICB9KSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGaWxsZWRJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgd3JhcHBlciBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBgaW5wdXRgIGVsZW1lbnQgdmFsdWUsIHVzZWZ1bCB3aGVuIG5vdCBjb250cm9sbGluZyB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIG5hdGl2ZSBpbnB1dC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbn0pKEZpbGxlZElucHV0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBpc0ZpbGxlZCwgaXNBZG9ybmVkU3RhcnQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgaXNNdWlFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIFJlc2V0IGZpZWxkc2V0IGRlZmF1bHQgc3R5bGUuXG4gICAgbWluV2lkdGg6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnIC8vIEZpeCBhbGlnbm1lbnQgaXNzdWUgb24gU2FmYXJpLlxuXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwibm9ybWFsXCJgLiAqL1xuICBtYXJnaW5Ob3JtYWw6IHtcbiAgICBtYXJnaW5Ub3A6IDE2LFxuICAgIG1hcmdpbkJvdHRvbTogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICBtYXJnaW5EZW5zZToge1xuICAgIG1hcmdpblRvcDogOCxcbiAgICBtYXJnaW5Cb3R0b206IDRcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgZnVsbFdpZHRoOiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9XG59O1xuLyoqXG4gKiBQcm92aWRlcyBjb250ZXh0IHN1Y2ggYXMgZmlsbGVkL2ZvY3VzZWQvZXJyb3IvcmVxdWlyZWQgZm9yIGZvcm0gaW5wdXRzLlxuICogUmVseWluZyBvbiB0aGUgY29udGV4dCBwcm92aWRlcyBoaWdoIGZsZXhpYmlsaXR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2lzdGVudCBhY3Jvc3MgdGhlIGNoaWxkcmVuIG9mIHRoZSBgRm9ybUNvbnRyb2xgLlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICogIC0gRm9ybUxhYmVsXG4gKiAgLSBGb3JtSGVscGVyVGV4dFxuICogIC0gSW5wdXRcbiAqICAtIElucHV0TGFiZWxcbiAqXG4gKiDimqDvuI9Pbmx5IG9uZSBpbnB1dCBjYW4gYmUgdXNlZCB3aXRoaW4gYSBGb3JtQ29udHJvbC5cbiAqL1xuXG52YXIgRm9ybUNvbnRyb2wgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Db250cm9sKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcHJvcHMkZXJyb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVycm9yLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBtYXJnaW4gPSBfcHJvcHMkbWFyZ2luID09PSB2b2lkIDAgPyAnbm9uZScgOiBfcHJvcHMkbWFyZ2luLFxuICAgICAgX3Byb3BzJHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICByZXF1aXJlZCA9IF9wcm9wcyRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVxdWlyZWQsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICB2YXIgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAxKSxcbiAgICAgIGFkb3JuZWRTdGFydCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIHZhciBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIGZpbGxlZCA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRGaWxsZWQgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTUsIDIpLFxuICAgICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTZbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlNlsxXTtcblxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNlZCkge1xuICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICB9XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoKSB7XG4gICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZURpcnR5ID0gZnVuY3Rpb24gaGFuZGxlRGlydHkoKSB7XG4gICAgaWYgKCFmaWxsZWQpIHtcbiAgICAgIHNldEZpbGxlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsZWFuID0gZnVuY3Rpb24gaGFuZGxlQ2xlYW4oKSB7XG4gICAgaWYgKGZpbGxlZCkge1xuICAgICAgc2V0RmlsbGVkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNoaWxkQ29udGV4dCA9IHtcbiAgICBhZG9ybmVkU3RhcnQ6IGFkb3JuZWRTdGFydCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZpbGxlZDogZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uRW1wdHk6IGhhbmRsZUNsZWFuLFxuICAgIG9uRmlsbGVkOiBoYW5kbGVEaXJ0eSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgdmFyaWFudDogdmFyaWFudFxuICB9O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgbWFyZ2luICE9PSAnbm9uZScgJiYgY2xhc3Nlc1tcIm1hcmdpblwiLmNvbmNhdChjYXBpdGFsaXplKG1hcmdpbikpXSwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBmb3JtIGNvbnRyb2wuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsLCBpbnB1dCBhbmQgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ2RlbnNlJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sJ1xufSkoRm9ybUNvbnRyb2wpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgd2l0aEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC93aXRoRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBGb3JtTGFiZWwgZnJvbSAnLi4vRm9ybUxhYmVsJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhc3RlcmlzayBlbGVtZW50LiAqL1xuICAgIGFzdGVyaXNrOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYEZvcm1Db250cm9sYC4gKi9cbiAgICBmb3JtQ29udHJvbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgLy8gc2xpZ2h0IGFsdGVyYXRpb24gdG8gc3BlYyBzcGFjaW5nIHRvIG1hdGNoIHZpc3VhbCBzcGVjIHJlc3VsdFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIDI0cHgpIHNjYWxlKDEpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge1xuICAgICAgLy8gQ29tcGVuc2F0aW9uIGZvciB0aGUgYElucHV0LmlucHV0RGVuc2VgIHN0eWxlLlxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIDIxcHgpIHNjYWxlKDEpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzaHJpbms9e3RydWV9YC4gKi9cbiAgICBzaHJpbms6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAxLjVweCkgc2NhbGUoMC43NSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYGRpc2FibGVBbmltYXRpb249e2ZhbHNlfWAuICovXG4gICAgYW5pbWF0ZWQ6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2NvbG9yJywgJ3RyYW5zZm9ybSddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGZpbGxlZDoge1xuICAgICAgLy8gQ2hyb21lJ3MgYXV0b2ZpbGwgZmVhdHVyZSBnaXZlcyB0aGUgaW5wdXQgZmllbGQgYSB5ZWxsb3cgYmFja2dyb3VuZC5cbiAgICAgIC8vIFNpbmNlIHRoZSBpbnB1dCBmaWVsZCBpcyBiZWhpbmQgdGhlIGxhYmVsIGluIHRoZSBIVE1MIHRyZWUsXG4gICAgICAvLyB0aGUgaW5wdXQgZmllbGQgaXMgZHJhd24gbGFzdCBhbmQgaGlkZXMgdGhlIGxhYmVsIHdpdGggYW4gb3BhcXVlIGJhY2tncm91bmQgY29sb3IuXG4gICAgICAvLyB6SW5kZXg6IDEgd2lsbCByYWlzZSB0aGUgbGFiZWwgYWJvdmUgb3BhcXVlIGJhY2tncm91bmQtY29sb3JzIG9mIGlucHV0LlxuICAgICAgekluZGV4OiAxLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDIwcHgpIHNjYWxlKDEpJyxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgMTdweCkgc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgJyYkc2hyaW5rJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgMTBweCkgc2NhbGUoMC43NSknLFxuICAgICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgN3B4KSBzY2FsZSgwLjc1KSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIC8vIHNlZSBjb21tZW50IGFib3ZlIG9uIGZpbGxlZC56SW5kZXhcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAyMHB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIDE3cHgpIHNjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJHNocmluayc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIC02cHgpIHNjYWxlKDAuNzUpJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgSW5wdXRMYWJlbCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRMYWJlbChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQW5pbWF0aSA9IHByb3BzLmRpc2FibGVBbmltYXRpb24sXG4gICAgICBkaXNhYmxlQW5pbWF0aW9uID0gX3Byb3BzJGRpc2FibGVBbmltYXRpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQW5pbWF0aSxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIG11aUZvcm1Db250cm9sID0gcHJvcHMubXVpRm9ybUNvbnRyb2wsXG4gICAgICBzaHJpbmtQcm9wID0gcHJvcHMuc2hyaW5rLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVBbmltYXRpb25cIiwgXCJtYXJnaW5cIiwgXCJtdWlGb3JtQ29udHJvbFwiLCBcInNocmlua1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBzaHJpbmsgPSBzaHJpbmtQcm9wO1xuXG4gIGlmICh0eXBlb2Ygc2hyaW5rID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIHNocmluayA9IG11aUZvcm1Db250cm9sLmZpbGxlZCB8fCBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIHx8IG11aUZvcm1Db250cm9sLmFkb3JuZWRTdGFydDtcbiAgfVxuXG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydtYXJnaW4nLCAndmFyaWFudCddXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtTGFiZWwsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBtdWlGb3JtQ29udHJvbCAmJiBjbGFzc2VzLmZvcm1Db250cm9sLCAhZGlzYWJsZUFuaW1hdGlvbiAmJiBjbGFzc2VzLmFuaW1hdGVkLCBzaHJpbmsgJiYgY2xhc3Nlcy5zaHJpbmssIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIGNsYXNzZXMuZmlsbGVkLCBmY3MudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBjbGFzc2VzLm91dGxpbmVkLCBjbGFzc05hbWUpLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIGZvY3VzZWQ6IGNsYXNzZXMuZm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkLFxuICAgICAgZXJyb3I6IGNsYXNzZXMuZXJyb3IsXG4gICAgICByZXF1aXJlZDogY2xhc3Nlcy5yZXF1aXJlZCxcbiAgICAgIGFzdGVyaXNrOiBjbGFzc2VzLmFzdGVyaXNrXG4gICAgfSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVBbmltYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFwcGx5IGRpc2FibGVkIGNsYXNzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11aUZvcm1Db250cm9sOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBpZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGlucHV0IGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBzaHJ1bmsuXG4gICAqL1xuICBzaHJpbms6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRMYWJlbCdcbn0pKHdpdGhGb3JtQ29udHJvbENvbnRleHQoSW5wdXRMYWJlbCkpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgd2l0aEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC93aXRoRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeVt0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAnZGFyaycgOiAnbGlnaHQnXVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmaWxsZWQ9e3RydWV9YC4gKi9cbiAgICBmaWxsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYXN0ZXJpc2sgZWxlbWVudC4gKi9cbiAgICBhc3Rlcmlzazoge1xuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIEZvcm1MYWJlbCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xhYmVsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBwcm9wcy5tdWlGb3JtQ29udHJvbCxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImZpbGxlZFwiLCBcImZvY3VzZWRcIiwgXCJtdWlGb3JtQ29udHJvbFwiLCBcInJlcXVpcmVkXCJdKTtcblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmY3MuZmlsbGVkICYmIGNsYXNzZXMuZmlsbGVkLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIGZjcy5yZXF1aXJlZCAmJiBjbGFzc2VzLnJlcXVpcmVkLCBjbGFzc05hbWVQcm9wKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmFzdGVyaXNrLCBmY3MuZXJyb3IgJiYgY2xhc3Nlcy5lcnJvcilcbiAgfSwgXCJcXHUyMDA5XCIsICcqJykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtTGFiZWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IG9mIHRoaXMgbGFiZWwgaXMgZm9jdXNlZCAodXNlZCBieSBgRm9ybUdyb3VwYCBjb21wb25lbnRzKS5cbiAgICovXG4gIGZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtTGFiZWwnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KEZvcm1MYWJlbCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJ2RlYm91bmNlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyA+IDNrYi5cblxuaW1wb3J0IEV2ZW50TGlzdGVuZXIgZnJvbSAncmVhY3QtZXZlbnQtbGlzdGVuZXInO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnO1xuaW1wb3J0IHsgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgd2l0aEZvcndhcmRlZFJlZiBmcm9tICcuLi91dGlscy93aXRoRm9yd2FyZGVkUmVmJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5cbmZ1bmN0aW9uIGdldE9mZnNldFRvcChyZWN0LCB2ZXJ0aWNhbCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIHZlcnRpY2FsID09PSAnbnVtYmVyJykge1xuICAgIG9mZnNldCA9IHZlcnRpY2FsO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0IC8gMjtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2JvdHRvbScpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldExlZnQocmVjdCwgaG9yaXpvbnRhbCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKSB7XG4gIHJldHVybiBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG4sIFwicHhcIikgOiBuO1xuICB9KS5qb2luKCcgJyk7XG59IC8vIFN1bSB0aGUgc2Nyb2xsVG9wIGJldHdlZW4gdHdvIGVsZW1lbnRzLlxuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBlbGVtZW50ID0gY2hpbGQ7XG4gIHZhciBzY3JvbGxUb3AgPSAwO1xuXG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHBhcmVudCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgc2Nyb2xsVG9wICs9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgcmV0dXJuIHNjcm9sbFRvcDtcbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbmNob3JFbCA9PT0gJ2Z1bmN0aW9uJyA/IGFuY2hvckVsKCkgOiBhbmNob3JFbDtcbn1cblxuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgIC8vIFNvIHdlIHNlZSB0aGUgcG9wb3ZlciB3aGVuIGl0J3MgZW1wdHkuXG4gICAgLy8gSXQncyBtb3N0IGxpa2VseSBvbiBpc3N1ZSBvbiB1c2VybGFuZC5cbiAgICBtaW5XaWR0aDogMTYsXG4gICAgbWluSGVpZ2h0OiAxNixcbiAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufTtcblxudmFyIFBvcG92ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcG92ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcG92ZXIpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUG9wb3ZlcikuY2FsbCh0aGlzKSk7XG4gICAgX3RoaXMuaGFuZGxlR2V0T2Zmc2V0VG9wID0gZ2V0T2Zmc2V0VG9wO1xuICAgIF90aGlzLmhhbmRsZUdldE9mZnNldExlZnQgPSBnZXRPZmZzZXRMZWZ0O1xuXG4gICAgX3RoaXMuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5oYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0UG9zaXRpb25pbmdTdHlsZXMgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIHBvc2l0aW9uaW5nID0gX3RoaXMuZ2V0UG9zaXRpb25pbmdTdHlsZShlbGVtZW50KTtcblxuICAgICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uaW5nLnRvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc2l0aW9uaW5nLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwb3NpdGlvbmluZy50cmFuc2Zvcm1PcmlnaW47XG4gICAgfTtcblxuICAgIF90aGlzLmdldFBvc2l0aW9uaW5nU3R5bGUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYW5jaG9yRWwgPSBfdGhpcyRwcm9wcy5hbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JSZWZlcmVuY2UgPSBfdGhpcyRwcm9wcy5hbmNob3JSZWZlcmVuY2UsXG4gICAgICAgICAgbWFyZ2luVGhyZXNob2xkID0gX3RoaXMkcHJvcHMubWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgcGFyZW50IGhhcyByZXF1ZXN0ZWQgYW5jaG9yaW5nIG9uIGFuIGlubmVyIGNvbnRlbnQgbm9kZVxuXG4gICAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IF90aGlzLmdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCk7XG5cbiAgICAgIHZhciBlbGVtUmVjdCA9IHtcbiAgICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICAgIH07IC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcblxuICAgICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IF90aGlzLmdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCwgY29udGVudEFuY2hvck9mZnNldCk7XG5cbiAgICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKVxuICAgICAgICB9O1xuICAgICAgfSAvLyBHZXQgdGhlIG9mZnNldCBvZiBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcblxuXG4gICAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gX3RoaXMuZ2V0QW5jaG9yT2Zmc2V0KGNvbnRlbnRBbmNob3JPZmZzZXQpOyAvLyBDYWxjdWxhdGUgZWxlbWVudCBwb3NpdGlvbmluZ1xuXG5cbiAgICAgIHZhciB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgICAgdmFyIGxlZnQgPSBhbmNob3JPZmZzZXQubGVmdCAtIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICAgIHZhciByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgICB2YXIgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coZ2V0QW5jaG9yRWwoYW5jaG9yRWwpKTsgLy8gV2luZG93IHRocmVzaG9sZHMgdGFraW5nIHJlcXVpcmVkIG1hcmdpbiBpbnRvIGFjY291bnRcblxuICAgICAgdmFyIGhlaWdodFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lckhlaWdodCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICAgIHZhciB3aWR0aFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lcldpZHRoIC0gbWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgdmVydGljYWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG4gICAgICBpZiAodG9wIDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBkaWZmID0gdG9wIC0gbWFyZ2luVGhyZXNob2xkO1xuICAgICAgICB0b3AgLT0gZGlmZjtcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IGRpZmY7XG4gICAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgICB2YXIgX2RpZmYgPSBib3R0b20gLSBoZWlnaHRUaHJlc2hvbGQ7XG5cbiAgICAgICAgdG9wIC09IF9kaWZmO1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gX2RpZmY7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZWxlbVJlY3QuaGVpZ2h0IDw9IGhlaWdodFRocmVzaG9sZCB8fCAhZWxlbVJlY3QuaGVpZ2h0IHx8ICFoZWlnaHRUaHJlc2hvbGQsIFsnTWF0ZXJpYWwtVUk6IHRoZSBwb3BvdmVyIGNvbXBvbmVudCBpcyB0b28gdGFsbC4nLCBcIlNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoXCIuY29uY2F0KGVsZW1SZWN0LmhlaWdodCAtIGhlaWdodFRocmVzaG9sZCwgXCJweCkuXCIpLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpIDogdm9pZCAwOyAvLyBDaGVjayBpZiB0aGUgaG9yaXpvbnRhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICAgIGlmIChsZWZ0IDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBfZGlmZjIgPSBsZWZ0IC0gbWFyZ2luVGhyZXNob2xkO1xuXG4gICAgICAgIGxlZnQgLT0gX2RpZmYyO1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBfZGlmZjI7XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIF9kaWZmMyA9IHJpZ2h0IC0gd2lkdGhUaHJlc2hvbGQ7XG5cbiAgICAgICAgbGVmdCAtPSBfZGlmZjM7XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IF9kaWZmMztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBcIlwiLmNvbmNhdCh0b3AsIFwicHhcIiksXG4gICAgICAgIGxlZnQ6IFwiXCIuY29uY2F0KGxlZnQsIFwicHhcIiksXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmluZyhlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0UG9zaXRpb25pbmdTdHlsZXMoZWxlbWVudCk7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgX3RoaXMuaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBCZWNhdXNlIHdlIGRlYm91bmNlIHRoZSBldmVudCwgdGhlIG9wZW4gcHJvcGVydHkgbWlnaHQgbm8gbG9uZ2VyIGJlIHRydWVcbiAgICAgICAgLy8gd2hlbiB0aGUgY2FsbGJhY2sgcmVzb2x2ZXMuXG4gICAgICAgIGlmICghX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldFBvc2l0aW9uaW5nU3R5bGVzKF90aGlzLnBhcGVyUmVmKTtcbiAgICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hY3Rpb24pIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb24oe1xuICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QW5jaG9yT2Zmc2V0XCIsXG4gICAgLy8gUmV0dXJucyB0aGUgdG9wL2xlZnQgb2Zmc2V0IG9mIHRoZSBwb3NpdGlvblxuICAgIC8vIHRvIGF0dGFjaCB0byBvbiB0aGUgYW5jaG9yIGVsZW1lbnQgKG9yIGJvZHkgaWYgbm9uZSBpcyBwcm92aWRlZClcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5jaG9yT2Zmc2V0KGNvbnRlbnRBbmNob3JPZmZzZXQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFuY2hvckVsID0gX3RoaXMkcHJvcHMyLmFuY2hvckVsLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF90aGlzJHByb3BzMi5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgYW5jaG9yUmVmZXJlbmNlID0gX3RoaXMkcHJvcHMyLmFuY2hvclJlZmVyZW5jZSxcbiAgICAgICAgICBhbmNob3JQb3NpdGlvbiA9IF90aGlzJHByb3BzMi5hbmNob3JQb3NpdGlvbjtcblxuICAgICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvclBvc2l0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGFuY2hvclBvc2l0aW9uLCAnTWF0ZXJpYWwtVUk6IHlvdSBuZWVkIHRvIHByb3ZpZGUgYSBgYW5jaG9yUG9zaXRpb25gIHByb3BlcnR5IHdoZW4gdXNpbmcgJyArICc8UG9wb3ZlciBhbmNob3JSZWZlcmVuY2U9XCJhbmNob3JQb3NpdGlvblwiIC8+LicpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gYW5jaG9yUG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpOyAvLyBJZiBhbiBhbmNob3IgZWxlbWVudCB3YXNuJ3QgcHJvdmlkZWQsIGp1c3QgdXNlIHRoZSBwYXJlbnQgYm9keSBlbGVtZW50IG9mIHRoaXMgUG9wb3ZlclxuXG4gICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IHJlc29sdmVkQW5jaG9yRWwgaW5zdGFuY2VvZiBFbGVtZW50ID8gcmVzb2x2ZWRBbmNob3JFbCA6IG93bmVyRG9jdW1lbnQodGhpcy5wYXBlclJlZikuYm9keTtcbiAgICAgIHZhciBhbmNob3JSZWN0ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBhbmNob3JWZXJ0aWNhbCA9IGNvbnRlbnRBbmNob3JPZmZzZXQgPT09IDAgPyBhbmNob3JPcmlnaW4udmVydGljYWwgOiAnY2VudGVyJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AgKyB0aGlzLmhhbmRsZUdldE9mZnNldFRvcChhbmNob3JSZWN0LCBhbmNob3JWZXJ0aWNhbCksXG4gICAgICAgIGxlZnQ6IGFuY2hvclJlY3QubGVmdCArIHRoaXMuaGFuZGxlR2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICAgIH07XG4gICAgfSAvLyBSZXR1cm5zIHRoZSB2ZXJ0aWNhbCBvZmZzZXQgb2YgaW5uZXIgY29udGVudCB0byBhbmNob3IgdGhlIHRyYW5zZm9ybSBvbiBpZiBwcm92aWRlZFxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q29udGVudEFuY2hvck9mZnNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250ZW50QW5jaG9yT2Zmc2V0KGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGdldENvbnRlbnRBbmNob3JFbCA9IF90aGlzJHByb3BzMy5nZXRDb250ZW50QW5jaG9yRWwsXG4gICAgICAgICAgYW5jaG9yUmVmZXJlbmNlID0gX3RoaXMkcHJvcHMzLmFuY2hvclJlZmVyZW5jZTtcbiAgICAgIHZhciBjb250ZW50QW5jaG9yT2Zmc2V0ID0gMDtcblxuICAgICAgaWYgKGdldENvbnRlbnRBbmNob3JFbCAmJiBhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpIHtcbiAgICAgICAgdmFyIGNvbnRlbnRBbmNob3JFbCA9IGdldENvbnRlbnRBbmNob3JFbChlbGVtZW50KTtcblxuICAgICAgICBpZiAoY29udGVudEFuY2hvckVsICYmIGVsZW1lbnQuY29udGFpbnMoY29udGVudEFuY2hvckVsKSkge1xuICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCwgY29udGVudEFuY2hvckVsKTtcbiAgICAgICAgICBjb250ZW50QW5jaG9yT2Zmc2V0ID0gY29udGVudEFuY2hvckVsLm9mZnNldFRvcCArIGNvbnRlbnRBbmNob3JFbC5jbGllbnRIZWlnaHQgLyAyIC0gc2Nyb2xsVG9wIHx8IDA7XG4gICAgICAgIH0gLy8gIT0gdGhlIGRlZmF1bHQgdmFsdWVcblxuXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodGhpcy5wcm9wcy5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICd0b3AnLCBbJ01hdGVyaWFsLVVJOiB5b3UgY2FuIG5vdCBjaGFuZ2UgdGhlIGRlZmF1bHQgYGFuY2hvck9yaWdpbi52ZXJ0aWNhbGAgdmFsdWUgJywgJ3doZW4gYWxzbyBwcm92aWRpbmcgdGhlIGBnZXRDb250ZW50QW5jaG9yRWxgIHByb3BlcnR5IHRvIHRoZSBwb3BvdmVyIGNvbXBvbmVudC4nLCAnT25seSB1c2Ugb25lIG9mIHRoZSB0d28gcHJvcGVydGllcy4nLCAnU2V0IGBnZXRDb250ZW50QW5jaG9yRWxgIHRvIGBudWxsIHwgdW5kZWZpbmVkYCcgKyAnIG9yIGxlYXZlIGBhbmNob3JPcmlnaW4udmVydGljYWxgIHVuY2hhbmdlZC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50QW5jaG9yT2Zmc2V0O1xuICAgIH0gLy8gUmV0dXJuIHRoZSBiYXNlIHRyYW5zZm9ybSBvcmlnaW4gdXNpbmcgdGhlIGVsZW1lbnRcbiAgICAvLyBhbmQgdGFraW5nIHRoZSBjb250ZW50IGFuY2hvciBvZmZzZXQgaW50byBhY2NvdW50IGlmIGluIHVzZVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VHJhbnNmb3JtT3JpZ2luXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCkge1xuICAgICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICB2YXIgdHJhbnNmb3JtT3JpZ2luID0gdGhpcy5wcm9wcy50cmFuc2Zvcm1PcmlnaW47XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2ZXJ0aWNhbDogdGhpcy5oYW5kbGVHZXRPZmZzZXRUb3AoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCkgKyBjb250ZW50QW5jaG9yT2Zmc2V0LFxuICAgICAgICBob3Jpem9udGFsOiB0aGlzLmhhbmRsZUdldE9mZnNldExlZnQoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsKVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3Rpb24gPSBfdGhpcyRwcm9wczQuYWN0aW9uLFxuICAgICAgICAgIGFuY2hvckVsID0gX3RoaXMkcHJvcHM0LmFuY2hvckVsLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF90aGlzJHByb3BzNC5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgYW5jaG9yUG9zaXRpb24gPSBfdGhpcyRwcm9wczQuYW5jaG9yUG9zaXRpb24sXG4gICAgICAgICAgYW5jaG9yUmVmZXJlbmNlID0gX3RoaXMkcHJvcHM0LmFuY2hvclJlZmVyZW5jZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHM0LmNsYXNzZXMsXG4gICAgICAgICAgY29udGFpbmVyUHJvcCA9IF90aGlzJHByb3BzNC5jb250YWluZXIsXG4gICAgICAgICAgZWxldmF0aW9uID0gX3RoaXMkcHJvcHM0LmVsZXZhdGlvbixcbiAgICAgICAgICBnZXRDb250ZW50QW5jaG9yRWwgPSBfdGhpcyRwcm9wczQuZ2V0Q29udGVudEFuY2hvckVsLFxuICAgICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHM0LmlubmVyUmVmLFxuICAgICAgICAgIG1hcmdpblRocmVzaG9sZCA9IF90aGlzJHByb3BzNC5tYXJnaW5UaHJlc2hvbGQsXG4gICAgICAgICAgTW9kYWxDbGFzc2VzID0gX3RoaXMkcHJvcHM0Lk1vZGFsQ2xhc3NlcyxcbiAgICAgICAgICBvbkVudGVyID0gX3RoaXMkcHJvcHM0Lm9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmVkID0gX3RoaXMkcHJvcHM0Lm9uRW50ZXJlZCxcbiAgICAgICAgICBvbkVudGVyaW5nID0gX3RoaXMkcHJvcHM0Lm9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FeGl0ID0gX3RoaXMkcHJvcHM0Lm9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRlZCA9IF90aGlzJHByb3BzNC5vbkV4aXRlZCxcbiAgICAgICAgICBvbkV4aXRpbmcgPSBfdGhpcyRwcm9wczQub25FeGl0aW5nLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wczQub3BlbixcbiAgICAgICAgICBfdGhpcyRwcm9wczQkUGFwZXJQcm8gPSBfdGhpcyRwcm9wczQuUGFwZXJQcm9wcyxcbiAgICAgICAgICBQYXBlclByb3BzID0gX3RoaXMkcHJvcHM0JFBhcGVyUHJvID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzNCRQYXBlclBybyxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4gPSBfdGhpcyRwcm9wczQudHJhbnNmb3JtT3JpZ2luLFxuICAgICAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfdGhpcyRwcm9wczQuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID0gX3RoaXMkcHJvcHM0LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgICBfdGhpcyRwcm9wczQkVHJhbnNpdGkgPSBfdGhpcyRwcm9wczQuVHJhbnNpdGlvblByb3BzLFxuICAgICAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IF90aGlzJHByb3BzNCRUcmFuc2l0aSA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczQkVHJhbnNpdGksXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHM0LCBbXCJhY3Rpb25cIiwgXCJhbmNob3JFbFwiLCBcImFuY2hvck9yaWdpblwiLCBcImFuY2hvclBvc2l0aW9uXCIsIFwiYW5jaG9yUmVmZXJlbmNlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwiZ2V0Q29udGVudEFuY2hvckVsXCIsIFwiaW5uZXJSZWZcIiwgXCJtYXJnaW5UaHJlc2hvbGRcIiwgXCJNb2RhbENsYXNzZXNcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJ0cmFuc2Zvcm1PcmlnaW5cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID09PSAnYXV0bycgJiYgIVRyYW5zaXRpb25Db21wb25lbnQubXVpU3VwcG9ydEF1dG8pIHtcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgfSAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gICAgICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgICAgIC8vIElmIG5laXRoZXIgYXJlIHByb3ZpZGVkIGxldCB0aGUgTW9kYWwgdGFrZSBjYXJlIG9mIGNob29zaW5nIHRoZSBjb250YWluZXJcblxuXG4gICAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KGdldEFuY2hvckVsKGFuY2hvckVsKSkuYm9keSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgICAgICBjbGFzc2VzOiBNb2RhbENsYXNzZXMsXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgICBCYWNrZHJvcFByb3BzOiB7XG4gICAgICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgaW46IG9wZW4sXG4gICAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLFxuICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB9LCBUcmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgICAgb25FbnRlcmluZzogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRW50ZXJpbmcsIFRyYW5zaXRpb25Qcm9wcy5vbkVudGVyaW5nKVxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICAgICAgZWxldmF0aW9uOiBlbGV2YXRpb24sXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgICAgIF90aGlzMi5wYXBlclJlZiA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF9yZWYpO1xuICAgICAgICB9XG4gICAgICB9LCBQYXBlclByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBQYXBlclByb3BzLmNsYXNzTmFtZSlcbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50TGlzdGVuZXIsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0pLCBjaGlsZHJlbikpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9wb3Zlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9wb3Zlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxiYWNrIHByb3BlcnR5LiBJdCdzIGNhbGxlZCBieSB0aGUgY29tcG9uZW50IG9uIG1vdW50LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHRyaWdnZXIgYW4gYWN0aW9uIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHVwZGF0ZVBvc2l0aW9uKCkgYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYWN0aW9ucyBUaGlzIG9iamVjdCBjb250YWlucyBhbGwgcG9zc2libGUgYWN0aW9uc1xuICAgKiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIERPTSBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgRE9NIGVsZW1lbnQsXG4gICAqIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAocHJvcHMub3BlbiAmJiBwcm9wcy5hbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpIHtcbiAgICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBub2RlIGVsZW1lbnQgc2hvdWxkIGJlIHZpc2libGUuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIFwiSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgYFwiLmNvbmNhdChyZXNvbHZlZEFuY2hvckVsLCBcImAgaW5zdGVhZC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgYW5jaG9yRWxgIHdpbGwgYXR0YWNoIHRvLiBUaGlzIGlzIG5vdCB1c2VkIHdoZW4gdGhlXG4gICAqIGFuY2hvclJlZmVyZW5jZSBpcyAnYW5jaG9yUG9zaXRpb24nLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodF0uXG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnXSldKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbSddKV0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWRcbiAgICogdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0b1xuICAgKiB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKlxuICAgKiBUaGlzIGRldGVybWluZXMgd2hpY2ggYW5jaG9yIHByb3AgdG8gcmVmZXIgdG8gdG8gc2V0XG4gICAqIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvclJlZmVyZW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnYW5jaG9yRWwnLCAnYW5jaG9yUG9zaXRpb24nLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgaW4gb3JkZXIgdG8gcmV0cmlldmUgdGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEl0J3MgdGhlIG9wcG9zaXRlIG9mIHRoZSBgYW5jaG9yRWxgIHByb3BlcnR5LlxuICAgKiBUaGUgY29udGVudCBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgYW4gZWxlbWVudCBpbnNpZGUgdGhlIHBvcG92ZXIuXG4gICAqIEl0J3MgdXNlZCB0byBjb3JyZWN0bHkgc2Nyb2xsIGFuZCBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgcG9zaXRpb25pbmcgc3RyYXRlZ3kgdHJpZXMgdG8gbWFrZSB0aGUgY29udGVudCBhbmNob3IgZWxlbWVudCBqdXN0IGFib3ZlIHRoZVxuICAgKiBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIGdldENvbnRlbnRBbmNob3JFbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogZnJvbSBgd2l0aEZvcndhcmRSZWZgXG4gICAqL1xuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wZXJ0eSBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbENsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6YFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYFxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcG9wb3ZlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYFBhcGVyYF0oL2FwaS9wYXBlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWZcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoXG4gICAqIHdpbGwgYXR0YWNoIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbSwgeChweCldO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodCwgeChweCldLlxuICAgKi9cbiAgdHJhbnNmb3JtT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10pXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ2NlbnRlcicsICdib3R0b20nXSldKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KSwgUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBUcmFuc2l0aW9uYCBlbGVtZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvclJlZmVyZW5jZTogJ2FuY2hvckVsJyxcbiAgYW5jaG9yT3JpZ2luOiB7XG4gICAgdmVydGljYWw6ICd0b3AnLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9LFxuICBlbGV2YXRpb246IDgsXG4gIG1hcmdpblRocmVzaG9sZDogMTYsXG4gIHRyYW5zZm9ybU9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogR3JvdyxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnYXV0bydcbn07XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpUG9wb3Zlcidcbn0pKHdpdGhGb3J3YXJkZWRSZWYoUG9wb3ZlcikpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBmdW5jdGlvbiB3aXRoVGhlbWVDcmVhdG9yKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZTtcblxuICB2YXIgd2l0aFRoZW1lID0gZnVuY3Rpb24gd2l0aFRoZW1lKENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgd2l0aFRoZW1lKENvbXBvbmVudCkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgdmFyIFdpdGhUaGVtZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gV2l0aFRoZW1lKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJpbm5lclJlZlwiXSk7XG5cbiAgICAgIHZhciB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgcmVmOiBpbm5lclJlZiB8fCByZWZcbiAgICAgIH0sIG90aGVyKSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gV2l0aFRoZW1lLnByb3BUeXBlcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgZGVjb3JhdGVkIGNvbXBvbmVudC5cbiAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmlubmVyUmVmID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiB0aGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArICdSZWZzIGFyZSBub3cgYXV0b21hdGljYWxseSBmb3J3YXJkZWQgdG8gdGhlIGlubmVyIGNvbXBvbmVudC4nKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFRoZW1lLk5ha2VkID0gQ29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiBXaXRoVGhlbWU7XG4gIH07XG5cbiAgcmV0dXJuIHdpdGhUaGVtZTtcbn0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgb2JqZWN0IGFzIGEgcHJvcGVydHkgdG8gdGhlIGlucHV0IGNvbXBvbmVudC5cbi8vIEl0J3MgYW4gYWx0ZXJuYXRpdmUgQVBJIHRvIHVzZVRoZW1lKCkuXG4vLyBXZSBlbmNvdXJhZ2UgdGhlIHVzYWdlIG9mIHVzZVRoZW1lKCkgd2hlcmUgcG9zc2libGUuXG5cbnZhciB3aXRoVGhlbWUgPSB3aXRoVGhlbWVDcmVhdG9yKCk7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHdpdGhUaGVtZSBmcm9tICcuLi9zdHlsZXMvd2l0aFRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5cbmZ1bmN0aW9uIGdldFNjYWxlKHZhbHVlKSB7XG4gIHJldHVybiBcInNjYWxlKFwiLmNvbmNhdCh2YWx1ZSwgXCIsIFwiKS5jb25jYXQoTWF0aC5wb3codmFsdWUsIDIpLCBcIilcIik7XG59XG5cbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIC8vIFVzZSB0cmFuc2xhdGVaIHRvIHNjcm9sbGluZyBpc3N1ZSBvbiBDaHJvbWUuXG4gICAgdHJhbnNmb3JtOiBcIlwiLmNvbmNhdChnZXRTY2FsZSgxKSwgXCIgdHJhbnNsYXRlWigwKVwiKVxuICB9XG59O1xuLyoqXG4gKiBUaGUgR3JvdyB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtUb29sdGlwXSgvY29tcG9uZW50cy90b29sdGlwcy8pIGFuZFxuICogW1BvcG92ZXJdKC9jb21wb25lbnRzL3BvcG92ZXIvKSBjb21wb25lbnRzLlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgR3JvdyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3Jvdyhwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRXhpdFwiLCBcInN0eWxlXCIsIFwidGhlbWVcIiwgXCJ0aW1lb3V0XCJdKTtcblxuICB2YXIgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGF1dG9UaW1lb3V0ID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcmVmKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcihub2RlKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kZWxheTtcblxuICAgIHZhciBkdXJhdGlvbiA9IDA7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheVxuICAgIH0pXS5qb2luKCcsJyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0KG5vZGUpIHtcbiAgICB2YXIgZHVyYXRpb24gPSAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMyID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZGVsYXk7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzXG4gICAgfSldLmpvaW4oJywnKTtcbiAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBnZXRTY2FsZSgwLjc1KTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFkZEVuZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRW5kTGlzdGVuZXIoXywgbmV4dCkge1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KG5leHQsIGF1dG9UaW1lb3V0LmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGFkZEVuZExpc3RlbmVyLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3Jvdy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KSwgUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoR3Jvdyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnLi4vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcblxuZnVuY3Rpb24gbmV4dEl0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChpdGVtICYmIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0LmZpcnN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHByZXZpb3VzSXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGl0ZW0gJiYgaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5sYXN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgaWYgKHRleHRDcml0ZXJpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgdGV4dCA9IG5leHRGb2N1cy5pbm5lclRleHQ7XG5cbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGpzZG9tIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lclRleHRcbiAgICB0ZXh0ID0gbmV4dEZvY3VzLnRleHRDb250ZW50O1xuICB9XG5cbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRleHQgPSB0ZXh0LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0ZXh0Q3JpdGVyaWEucmVwZWF0aW5nKSB7XG4gICAgcmV0dXJuIHRleHRbMF0gPT09IHRleHRDcml0ZXJpYS5rZXlzWzBdO1xuICB9XG5cbiAgcmV0dXJuIHRleHQuaW5kZXhPZih0ZXh0Q3JpdGVyaWEua2V5cy5qb2luKCcnKSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgdHJhdmVyc2FsRnVuY3Rpb24sIHRleHRDcml0ZXJpYSkge1xuICB2YXIgd3JhcHBlZE9uY2UgPSBmYWxzZTtcbiAgdmFyIG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIGN1cnJlbnRGb2N1cywgY3VycmVudEZvY3VzID8gZGlzYWJsZUxpc3RXcmFwIDogZmFsc2UpO1xuXG4gIHdoaWxlIChuZXh0Rm9jdXMpIHtcbiAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AuXG4gICAgaWYgKG5leHRGb2N1cyA9PT0gbGlzdC5maXJzdENoaWxkKSB7XG4gICAgICBpZiAod3JhcHBlZE9uY2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB3cmFwcGVkT25jZSA9IHRydWU7XG4gICAgfSAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG5cblxuICAgIGlmICghbmV4dEZvY3VzLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZScgfHwgIXRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpKSB7XG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuZXh0Rm9jdXMpIHtcbiAgICBuZXh0Rm9jdXMuZm9jdXMoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG52YXIgTWVudUxpc3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnVMaXN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbnMgPSBwcm9wcy5hY3Rpb25zLFxuICAgICAgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgX3Byb3BzJGRpc2FibGVMaXN0V3JhID0gcHJvcHMuZGlzYWJsZUxpc3RXcmFwLFxuICAgICAgZGlzYWJsZUxpc3RXcmFwID0gX3Byb3BzJGRpc2FibGVMaXN0V3JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlTGlzdFdyYSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2xhc3NOYW1lXCIsIFwib25LZXlEb3duXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCJdKTtcblxuICB2YXIgbGlzdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHRleHRDcml0ZXJpYVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAga2V5czogW10sXG4gICAgcmVwZWF0aW5nOiB0cnVlLFxuICAgIHByZXZpb3VzS2V5TWF0Y2hlZDogdHJ1ZSxcbiAgICBsYXN0VGltZTogbnVsbFxuICB9KTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGxpc3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXI6IGZ1bmN0aW9uIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGNvbnRhaW5lckVsZW1lbnQsIHRoZW1lKSB7XG4gICAgICAgIC8vIExldCdzIGlnbm9yZSB0aGF0IHBpZWNlIG9mIGxvZ2ljIGlmIHVzZXJzIGFyZSBhbHJlYWR5IG92ZXJyaWRpbmcgdGhlIHdpZHRoXG4gICAgICAgIC8vIG9mIHRoZSBtZW51LlxuICAgICAgICB2YXIgbm9FeHBsaWNpdFdpZHRoID0gIWxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aDtcblxuICAgICAgICBpZiAoY29udGFpbmVyRWxlbWVudC5jbGllbnRIZWlnaHQgPCBsaXN0UmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0ICYmIG5vRXhwbGljaXRXaWR0aCkge1xuICAgICAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gXCJcIi5jb25jYXQoZ2V0U2Nyb2xsYmFyU2l6ZSh0cnVlKSwgXCJweFwiKTtcbiAgICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGVbdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0J10gPSBzY3JvbGxiYXJTaXplO1xuICAgICAgICAgIGxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aCA9IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHNjcm9sbGJhclNpemUsIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0UmVmLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIHZhciBsaXN0ID0gbGlzdFJlZi5jdXJyZW50O1xuICAgIHZhciBrZXkgPSBldmVudC5rZXk7XG4gICAgdmFyIGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmICgoa2V5ID09PSAnQXJyb3dVcCcgfHwga2V5ID09PSAnQXJyb3dEb3duJykgJiYgKCFjdXJyZW50Rm9jdXMgfHwgY3VycmVudEZvY3VzICYmICFsaXN0LmNvbnRhaW5zKGN1cnJlbnRGb2N1cykpKSB7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBuZXh0SXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBuZXh0SXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgcHJldmlvdXNJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0hvbWUnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIG51bGwsIGRpc2FibGVMaXN0V3JhcCwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnRW5kJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIHZhciBsb3dlcktleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGN1cnJUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5rZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gUmVzZXRcbiAgICAgICAgaWYgKGN1cnJUaW1lIC0gY3JpdGVyaWEubGFzdFRpbWUgPiA1MDApIHtcbiAgICAgICAgICBjcml0ZXJpYS5rZXlzID0gW107XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNyaXRlcmlhLnJlcGVhdGluZyAmJiBsb3dlcktleSAhPT0gY3JpdGVyaWEua2V5c1swXSkge1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNyaXRlcmlhLmxhc3RUaW1lID0gY3VyclRpbWU7XG4gICAgICBjcml0ZXJpYS5rZXlzLnB1c2gobG93ZXJLZXkpO1xuICAgICAgdmFyIGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGxpc3RSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVPd25SZWYsIHJlZik7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpc3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcIm1lbnVcIixcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IGF1dG9Gb2N1cyA/IDAgOiAtMVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51TGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhY3Rpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3Qgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqIEZvY3VzIHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgaWYgdGhlIHZhbHVlIGNoYW5nZXMgZnJvbSBmYWxzZSB0byB0cnVlLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1lbnUgaXRlbXMgd2lsbCBub3Qgd3JhcCBmb2N1cy5cbiAgICovXG4gIGRpc2FibGVMaXN0V3JhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmNcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNZW51TGlzdDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHdpdGhGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvd2l0aEZvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sIHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgbWFyZ2luVG9wOiA4LFxuICAgICAgbGluZUhlaWdodDogJzFlbScsXG4gICAgICBtaW5IZWlnaHQ6ICcxZW0nLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7XG4gICAgICBtYXJnaW5Ub3A6IDRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYCBvciBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZDoge1xuICAgICAgbWFyZ2luOiAnOHB4IDEycHggMCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9jdXNlZD17dHJ1ZX1gLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmlsbGVkPXt0cnVlfWAuICovXG4gICAgZmlsbGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHJlcXVpcmVkPXt0cnVlfWAuICovXG4gICAgcmVxdWlyZWQ6IHt9XG4gIH07XG59O1xudmFyIEZvcm1IZWxwZXJUZXh0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtSGVscGVyVGV4dChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3AnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZmlsbGVkID0gcHJvcHMuZmlsbGVkLFxuICAgICAgZm9jdXNlZCA9IHByb3BzLmZvY3VzZWQsXG4gICAgICBtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBtdWlGb3JtQ29udHJvbCA9IHByb3BzLm11aUZvcm1Db250cm9sLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcIm11aUZvcm1Db250cm9sXCIsIFwicmVxdWlyZWRcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdtYXJnaW4nLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZmlsbGVkJywgJ2ZvY3VzZWQnLCAncmVxdWlyZWQnXVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgKGZjcy52YXJpYW50ID09PSAnZmlsbGVkJyB8fCBmY3MudmFyaWFudCA9PT0gJ291dGxpbmVkJykgJiYgY2xhc3Nlcy5jb250YWluZWQsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmY3MuZmlsbGVkICYmIGNsYXNzZXMuZmlsbGVkLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIGZjcy5yZXF1aXJlZCAmJiBjbGFzc2VzLnJlcXVpcmVkLCBjbGFzc05hbWVQcm9wKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtSGVscGVyVGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZvY3VzZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZSddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgcmVxdWlyZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtSGVscGVyVGV4dCdcbn0pKHdpdGhGb3JtQ29udHJvbENvbnRleHQoRm9ybUhlbHBlclRleHQpKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoc3R5bGVzKSB7XG4gIHJldHVybiBzdHlsZXM7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuLi91c2VUaGVtZS9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnLi9uZXN0ZWQnOyAvLyBUbyBzdXBwb3J0IGNvbXBvc2l0aW9uIG9mIHRoZW1lLlxuXG5mdW5jdGlvbiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKSB7XG4gIGlmICh0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IGxvY2FsVGhlbWUob3V0ZXJUaGVtZSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhtZXJnZWRUaGVtZSwgWydNYXRlcmlhbC1VSTogeW91IHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17KCkgPT4gKHt9KX0gLz4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3BlcnR5LlxuICogSXQgbWFrZXMgdGhlIGB0aGVtZWAgYXZhaWxhYmxlIGRvd24gdGhlIFJlYWN0IHRyZWUgdGhhbmtzIHRvIFJlYWN0IGNvbnRleHQuXG4gKiBUaGlzIGNvbXBvbmVudCBzaG91bGQgcHJlZmVyYWJseSBiZSB1c2VkIGF0ICoqdGhlIHJvb3Qgb2YgeW91ciBjb21wb25lbnQgdHJlZSoqLlxuICovXG5cblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGxvY2FsVGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgdmFyIG91dGVyVGhlbWUgPSB1c2VUaGVtZSgpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG91dGVyVGhlbWUgIT09IG51bGwgfHwgdHlwZW9mIGxvY2FsVGhlbWUgIT09ICdmdW5jdGlvbicsIFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgcHJvdmlkaW5nIGEgdGhlbWUgZnVuY3Rpb24gcHJvcGVydHkgJyArICd0byB0aGUgVGhlbWVQcm92aWRlciBjb21wb25lbnQ6JywgJzxUaGVtZVByb3ZpZGVyIHRoZW1lPXtvdXRlclRoZW1lID0+IG91dGVyVGhlbWV9IC8+JywgJycsICdIb3dldmVyLCBubyBvdXRlciB0aGVtZSBpcyBwcmVzZW50LicsICdNYWtlIHN1cmUgYSB0aGVtZSBpcyBhbHJlYWR5IGluamVjdGVkIGhpZ2hlciBpbiB0aGUgUmVhY3QgdHJlZSAnICsgJ29yIHByb3ZpZGUgYSB0aGVtZSBvYmplY3QuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcblxuICAgIGlmIChvdXRlclRoZW1lICE9PSBudWxsICYmIG91dHB1dCkge1xuICAgICAgb3V0cHV0W25lc3RlZF0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtsb2NhbFRoZW1lLCBvdXRlclRoZW1lXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEEgdGhlbWUgb2JqZWN0LiBZb3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBleHRlbmQgdGhlIG91dGVyIHRoZW1lLlxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoVGhlbWVQcm92aWRlci5wcm9wVHlwZXMpIDogdm9pZCAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuXG5mdW5jdGlvbiBvbWl0KGlucHV0LCBmaWVsZHMpIHtcbiAgdmFyIG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhpbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChmaWVsZHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtwcm9wXSA9IGlucHV0W3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IC8vIHN0eWxlZC1jb21wb25lbnRzJ3MgQVBJIHJlbW92ZXMgdGhlIG1hcHBpbmcgYmV0d2VlbiBjb21wb25lbnRzIGFuZCBzdHlsZXMuXG4vLyBVc2luZyBjb21wb25lbnRzIGFzIGEgbG93LWxldmVsIHN0eWxpbmcgY29uc3RydWN0IGNhbiBiZSBzaW1wbGVyLlxuXG5cbmZ1bmN0aW9uIHN0eWxlZChDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENyZWF0b3IgPSBmdW5jdGlvbiBjb21wb25lbnRDcmVhdG9yKHN0eWxlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFsnWW91IGFyZSBjYWxsaW5nIHN0eWxlZChDb21wb25lbnQpKHN0eWxlKSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFuYW1lKSB7XG4gICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgIGNsYXNzTmFtZVByZWZpeCA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBjbGFzc05hbWVQcmVmaXggPT09ICdzdHJpbmcnLCBbJ01hdGVyaWFsLVVJOiB0aGUgY29tcG9uZW50IGRpc3BsYXlOYW1lIGlzIGludmFsaWQuIEl0IG5lZWRzIHRvIGJlIGEgc3RyaW5nLicsIFwiUGxlYXNlIGZpeCB0aGUgZm9sbG93aW5nIGNvbXBvbmVudDogXCIuY29uY2F0KENvbXBvbmVudCwgXCIuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlc09yQ3JlYXRvciA9IHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogZnVuY3Rpb24gcm9vdChwcm9wcykge1xuICAgICAgICAgIHJldHVybiBzdHlsZShfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgICAgICB9LCBwcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gOiB7XG4gICAgICByb290OiBzdHlsZVxuICAgIH07XG4gICAgdmFyIHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIGZpbHRlclByb3BzO1xuICAgIHZhciBwcm9wVHlwZXMgPSB7fTtcblxuICAgIGlmIChzdHlsZS5maWx0ZXJQcm9wcykge1xuICAgICAgZmlsdGVyUHJvcHMgPSBzdHlsZS5maWx0ZXJQcm9wcztcbiAgICAgIGRlbGV0ZSBzdHlsZS5maWx0ZXJQcm9wcztcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlcyAqL1xuXG5cbiAgICBpZiAoc3R5bGUucHJvcFR5cGVzKSB7XG4gICAgICBwcm9wVHlwZXMgPSBzdHlsZS5wcm9wVHlwZXM7XG4gICAgICBkZWxldGUgc3R5bGUucHJvcFR5cGVzO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXMgKi9cblxuXG4gICAgdmFyIFN0eWxlZENvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3R5bGVkQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY2xvbmUgPSBwcm9wcy5jbG9uZSxcbiAgICAgICAgICBDb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNsb25lXCIsIFwiY29tcG9uZW50XCJdKTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMocHJvcHMpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKTtcblxuICAgICAgaWYgKGNsb25lKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3ByZWFkID0gb3RoZXI7XG5cbiAgICAgIGlmIChmaWx0ZXJQcm9wcykge1xuICAgICAgICBzcHJlYWQgPSBvbWl0KHNwcmVhZCwgZmlsdGVyUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbihfZXh0ZW5kcyh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSwgc3ByZWFkKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBGaW5hbENvbXBvbmVudCA9IENvbXBvbmVudFByb3AgfHwgQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmluYWxDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9LCBzcHJlYWQpLCBjaGlsZHJlbik7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVkQ29tcG9uZW50LnByb3BUeXBlcyA9IF9leHRlbmRzKHtcbiAgICAgIC8qKlxuICAgICAgICogQSByZW5kZXIgZnVuY3Rpb24gb3Igbm9kZS5cbiAgICAgICAqL1xuICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBpZ25vcmVcbiAgICAgICAqL1xuICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAvKipcbiAgICAgICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHJlY3ljbGUgaXQncyBjaGlsZHJlbiBET00gZWxlbWVudC5cbiAgICAgICAqIEl0J3MgdXNpbmcgYFJlYWN0LmNsb25lRWxlbWVudGAgaW50ZXJuYWxseS5cbiAgICAgICAqL1xuICAgICAgY2xvbmU6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmNsb25lICYmIHByb3BzLmNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBjYW4gbm90IHVzZSB0aGUgY2xvbmUgYW5kIGNvbXBvbmVudCBwcm9wZXJ0aWVzIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICAgICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICB9LCBwcm9wVHlwZXMpIDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFN0eWxlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiU3R5bGVkKFwiLmNvbmNhdChjbGFzc05hbWVQcmVmaXgsIFwiKVwiKTtcbiAgICB9XG5cbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhTdHlsZWRDb21wb25lbnQsIENvbXBvbmVudCk7XG4gICAgcmV0dXJuIFN0eWxlZENvbXBvbmVudDtcbiAgfTtcblxuICByZXR1cm4gY29tcG9uZW50Q3JlYXRvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJ2RlYm91bmNlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyA+IDNrYi5cblxuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCB3aXRoVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3dpdGhUaGVtZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbnZhciBHVVRURVIgPSAyNDsgLy8gVHJhbnNsYXRlIHRoZSBub2RlIHNvIGhlIGNhbid0IGJlIHNlZW4gb24gdGhlIHNjcmVlbi5cbi8vIExhdGVyLCB3ZSBnb25uYSB0cmFuc2xhdGUgYmFjayB0aGUgbm9kZSB0byBoaXMgb3JpZ2luYWwgbG9jYXRpb25cbi8vIHdpdGggYHRyYW5zbGF0ZTNkKDAsIDAsIDApYC5gXG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSkge1xuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciB0cmFuc2Zvcm07XG5cbiAgaWYgKG5vZGUuZmFrZVRyYW5zZm9ybSkge1xuICAgIHRyYW5zZm9ybSA9IG5vZGUuZmFrZVRyYW5zZm9ybTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10cmFuc2Zvcm0nKSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpO1xuICB9XG5cbiAgdmFyIG9mZnNldFggPSAwO1xuICB2YXIgb2Zmc2V0WSA9IDA7XG5cbiAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJyAmJiB0eXBlb2YgdHJhbnNmb3JtID09PSAnc3RyaW5nJykge1xuICAgIHZhciB0cmFuc2Zvcm1WYWx1ZXMgPSB0cmFuc2Zvcm0uc3BsaXQoJygnKVsxXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsJyk7XG4gICAgb2Zmc2V0WCA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s0XSwgMTApO1xuICAgIG9mZnNldFkgPSBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNV0sIDEwKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVgoMTAwdncpIHRyYW5zbGF0ZVgoLVwiLmNvbmNhdChyZWN0LmxlZnQgLSBvZmZzZXRYLCBcInB4KVwiKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKC1cIi5jb25jYXQocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCArIEdVVFRFUiAtIG9mZnNldFgsIFwicHgpXCIpO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVkoMTAwdmgpIHRyYW5zbGF0ZVkoLVwiLmNvbmNhdChyZWN0LnRvcCAtIG9mZnNldFksIFwicHgpXCIpO1xuICB9IC8vIGRpcmVjdGlvbiA9PT0gJ2Rvd24nXG5cblxuICByZXR1cm4gXCJ0cmFuc2xhdGVZKC1cIi5jb25jYXQocmVjdC50b3AgKyByZWN0LmhlaWdodCArIEdVVFRFUiAtIG9mZnNldFksIFwicHgpXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKSB7XG4gIHZhciB0cmFuc2Zvcm0gPSBnZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuXG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxufVxudmFyIGRlZmF1bHRUaW1lb3V0ID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBTbGlkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtEcmF3ZXJdKC9jb21wb25lbnRzL2RyYXdlcnMvKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbnZhciBTbGlkZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2xpZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAnZG93bicgOiBfcHJvcHMkZGlyZWN0aW9uLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyBkZWZhdWx0VGltZW91dCA6IF9wcm9wcyR0aW1lb3V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiZGlyZWN0aW9uXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwic3R5bGVcIiwgXCJ0aGVtZVwiLCBcInRpbWVvdXRcIl0pO1xuXG4gIHZhciBjaGlsZHJlblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLyoqXG4gICAqIHVzZWQgaW4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IHJlZjogaGFuZGxlUmVmIH0pXG4gICAqL1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGNoaWxkcmVuUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZkludGVybWVkaWFyeSA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBoYW5kbGVPd25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVSZWZJbnRlcm1lZGlhcnksIHJlZik7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgdmFyIG5vZGUgPSBjaGlsZHJlblJlZi5jdXJyZW50O1xuICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSk7XG4gICAgcmVmbG93KG5vZGUpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyaW5nKCkge1xuICAgIHZhciBub2RlID0gY2hpbGRyZW5SZWYuY3VycmVudDtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCctd2Via2l0LXRyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgfSkpO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCAwKSc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsIDApJztcblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKG5vZGUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXQoKSB7XG4gICAgdmFyIG5vZGUgPSBjaGlsZHJlblJlZi5jdXJyZW50O1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnLXdlYmtpdC10cmFuc2Zvcm0nLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycFxuICAgIH0pKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwXG4gICAgfSkpO1xuICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgdmFyIG5vZGUgPSBjaGlsZHJlblJlZi5jdXJyZW50OyAvLyBObyBuZWVkIGZvciB0cmFuc2l0aW9ucyB3aGVuIHRoZSBjb21wb25lbnQgaXMgaGlkZGVuXG5cbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSAnJztcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcblxuICAgIGlmIChvbkV4aXRlZCkge1xuICAgICAgb25FeGl0ZWQobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciB1cGRhdGVQb3NpdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2hpbGRyZW5SZWYuY3VycmVudCkge1xuICAgICAgc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBjaGlsZHJlblJlZi5jdXJyZW50KTtcbiAgICB9XG4gIH0sIFtkaXJlY3Rpb25dKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTa2lwIGNvbmZpZ3VyYXRpb24gd2hlcmUgdGhlIHBvc2l0aW9uIGlzIHNjcmVlbiBzaXplIGludmFyaWFudC5cbiAgICBpZiAoIWluUHJvcCAmJiBkaXJlY3Rpb24gIT09ICdkb3duJyAmJiBkaXJlY3Rpb24gIT09ICdyaWdodCcpIHtcbiAgICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBjaGlsZHJlblJlZi5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgMTY2KTsgLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2RpcmVjdGlvbiwgaW5Qcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJhd2VyIHdoZW4gdGhlIGRpcmVjdGlvbiBjaGFuZ2UgYW5kXG4gICAgICAvLyB3aGVuIGl0J3MgaGlkZGVuLlxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIFtpblByb3AsIHVwZGF0ZVBvc2l0aW9uXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgY2hpbGQgbm9kZSB3aWxsIGVudGVyIGZyb20uXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAndXAnLCAnZG93biddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IGFuaW1hdGlvbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFNsaWRlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBGYWRlIGZyb20gJy4uL0ZhZGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICB6SW5kZXg6IC0xLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIC8vIFJlbW92ZSBncmV5IGhpZ2hsaWdodFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIERpc2FibGUgc2Nyb2xsIGNhcGFiaWxpdGllcy5cbiAgICB0b3VjaEFjdGlvbjogJ25vbmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xudmFyIEJhY2tkcm9wID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWNrZHJvcChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRpbnZpc2libGUgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBpbnZpc2libGUgPSBfcHJvcHMkaW52aXNpYmxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnZpc2libGUsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmFkZSwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvblxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGludmlzaWJsZSAmJiBjbGFzc2VzLmludmlzaWJsZSwgY2xhc3NOYW1lKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCYWNrZHJvcCdcbn0pKEJhY2tkcm9wKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgd2l0aFRoZW1lIGZyb20gJy4uL3N0eWxlcy93aXRoVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59O1xudmFyIGRlZmF1bHRUaW1lb3V0ID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBGYWRlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW01vZGFsXSgvY29tcG9uZW50cy9tb2RhbC8pIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIEZhZGUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgdGhlbWUgPSBwcm9wcy50aGVtZSxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZGVmYXVsdFRpbWVvdXQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRXhpdFwiLCBcInN0eWxlXCIsIFwidGhlbWVcIiwgXCJ0aW1lb3V0XCJdKTtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIobm9kZSkge1xuICAgIHJlZmxvdyhub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ID0gZnVuY3Rpb24gaGFuZGxlRXhpdChub2RlKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgfSwgb3RoZXIpLCBmdW5jdGlvbiAoc3RhdGUsIGNoaWxkUHJvcHMpIHtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWRlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEZhZGUpOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYWxpZ24gPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IC01LFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAvLyBNYXRjaCB0aGUgSW5wdXQgTGFiZWxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbXCJwYWRkaW5nLVwiLmNvbmNhdChhbGlnbiksICdib3JkZXItY29sb3InLCAnYm9yZGVyLXdpZHRoJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBsZWdlbmQgZWxlbWVudC4gKi9cbiAgICBsZWdlbmQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGxpbmVIZWlnaHQ6ICcxMXB4JyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIE5vdGNoZWRPdXRsaW5lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOb3RjaGVkT3V0bGluZShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBsYWJlbFdpZHRoUHJvcCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBub3RjaGVkID0gcHJvcHMubm90Y2hlZCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsV2lkdGhcIiwgXCJub3RjaGVkXCIsIFwic3R5bGVcIiwgXCJ0aGVtZVwiXSk7XG5cbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIHZhciBsYWJlbFdpZHRoID0gbGFiZWxXaWR0aFByb3AgPiAwID8gbGFiZWxXaWR0aFByb3AgKiAwLjc1ICsgOCA6IDA7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIiwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBzdHlsZTogX2V4dGVuZHMoX2RlZmluZVByb3BlcnR5KHt9LCBcInBhZGRpbmdcIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpLCA4ICsgKG5vdGNoZWQgPyAwIDogbGFiZWxXaWR0aCAvIDIpKSwgc3R5bGUpLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGVnZW5kXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGVnZW5kLFxuICAgIHN0eWxlOiB7XG4gICAgICAvLyBJRSAxMTogZmllbGRzZXQgd2l0aCBsZWdlbmQgZG9lcyBub3QgcmVuZGVyXG4gICAgICAvLyBhIGJvcmRlciByYWRpdXMuIFRoaXMgbWFpbnRhaW5zIGNvbnNpc3RlbmN5XG4gICAgICAvLyBieSBhbHdheXMgaGF2aW5nIGEgbGVnZW5kIHJlbmRlcmVkXG4gICAgICB3aWR0aDogbm90Y2hlZCA/IGxhYmVsV2lkdGggOiAwLjAxXG4gICAgfVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgIF9faHRtbDogJyYjODIwMzsnXG4gICAgfVxuICB9KSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOb3RjaGVkT3V0bGluZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsV2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlTm90Y2hlZE91dGxpbmUnLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKE5vdGNoZWRPdXRsaW5lKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBOb3RjaGVkT3V0bGluZSBmcm9tICcuL05vdGNoZWRPdXRsaW5lJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBib3JkZXJDb2xvciA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJztcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgJyYgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICAnJjpob3ZlciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAxNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogJzE4LjVweCAxNHB4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYE5vdGNoZWRPdXRsaW5lYCBlbGVtZW50LiAqL1xuICAgIG5vdGNoZWRPdXRsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBhZGRpbmc6ICcxOC41cHggMTRweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogMTUsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxNVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xudmFyIE91dGxpbmVkSW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRsYWJlbFdpZHRoID0gcHJvcHMubGFiZWxXaWR0aCxcbiAgICAgIGxhYmVsV2lkdGggPSBfcHJvcHMkbGFiZWxXaWR0aCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRsYWJlbFdpZHRoLFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIG5vdGNoZWQgPSBwcm9wcy5ub3RjaGVkLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJsYWJlbFdpZHRoXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIHJlbmRlclByZWZpeDogZnVuY3Rpb24gcmVuZGVyUHJlZml4KHN0YXRlKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOb3RjaGVkT3V0bGluZSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICAgIGxhYmVsV2lkdGg6IGxhYmVsV2lkdGgsXG4gICAgICAgIG5vdGNoZWQ6IHR5cGVvZiBub3RjaGVkICE9PSAndW5kZWZpbmVkJyA/IG5vdGNoZWQgOiBCb29sZWFuKHN0YXRlLnN0YXJ0QWRvcm5tZW50IHx8IHN0YXRlLmZpbGxlZCB8fCBzdGF0ZS5mb2N1c2VkKVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgY2xhc3Nlcywge1xuICAgICAgcm9vdDogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMudW5kZXJsaW5lKSxcbiAgICAgIG5vdGNoZWRPdXRsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gT3V0bGluZWRJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgd3JhcHBlciBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBgaW5wdXRgIGVsZW1lbnQgdmFsdWUsIHVzZWZ1bCB3aGVuIG5vdCBjb250cm9sbGluZyB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIG5hdGl2ZSBpbnB1dC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWxXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnXG59KShPdXRsaW5lZElucHV0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IE1lbnUgZnJvbSAnLi4vTWVudS9NZW51JztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuXG5mdW5jdGlvbiBhcmVFcXVhbFZhbHVlcyhhLCBiKSB7XG4gIGlmIChfdHlwZW9mKGIpID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG52YXIgU2VsZWN0SW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9XaWR0aCA9IHByb3BzLmF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNwbGF5RW1wdHkgPSBwcm9wcy5kaXNwbGF5RW1wdHksXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBfcHJvcHMkTWVudVByb3BzID0gcHJvcHMuTWVudVByb3BzLFxuICAgICAgTWVudVByb3BzID0gX3Byb3BzJE1lbnVQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTWVudVByb3BzLFxuICAgICAgbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuUHJvcCA9IHByb3BzLm9wZW4sXG4gICAgICByZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgICAgcmVuZGVyVmFsdWUgPSBwcm9wcy5yZW5kZXJWYWx1ZSxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHMgPSBwcm9wcy5TZWxlY3REaXNwbGF5UHJvcHMsXG4gICAgICB0YWJJbmRleFByb3AgPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2hpZGRlbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJWYWx1ZVwiLCBcInJlcXVpcmVkXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgZGlzcGxheVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGlnbm9yZU5leHRCbHVyID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZihwcm9wcy5vcGVuICE9IG51bGwpLFxuICAgICAgaXNPcGVuQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgbWVudU1pbldpZHRoU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTMsIDIpLFxuICAgICAgb3BlblN0YXRlID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICAgIHNldE9wZW5TdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTUgPSBSZWFjdC51c2VTdGF0ZSgwKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGU1LCAyKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlNlsxXTtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShoYW5kbGVSZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0sXG4gICAgICBub2RlOiBpbnB1dFJlZiA/IGlucHV0UmVmLmN1cnJlbnQgOiBudWxsLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfSwgW2lucHV0UmVmLCB2YWx1ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc09wZW5Db250cm9sbGVkICYmIG9wZW5Qcm9wKSB7XG4gICAgICAvLyBGb2N1cyB0aGUgZGlzcGxheSBub2RlIHNvIHRoZSBmb2N1cyBpcyByZXN0b3JlZCBvbiB0aGlzIGVsZW1lbnQgb25jZVxuICAgICAgLy8gdGhlIG1lbnUgaXMgY2xvc2VkLlxuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7IC8vIFJlcmVuZGVyIHdpdGggdGhlIHJlc29sdmUgYGRpc3BsYXlSZWZgIHJlZmVyZW5jZS5cblxuICAgICAgZm9yY2VVcGRhdGUoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuICFuO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGF1dG9Gb2N1cykge1xuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzLCBpc09wZW5Db250cm9sbGVkLCBvcGVuUHJvcF0pO1xuXG4gIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUob3BlbiwgZXZlbnQpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaWYgKG9uT3Blbikge1xuICAgICAgICBvbk9wZW4oZXZlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFpc09wZW5Db250cm9sbGVkKSB7XG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZShhdXRvV2lkdGggPyBudWxsIDogZGlzcGxheVJlZi5jdXJyZW50LmNsaWVudFdpZHRoKTtcbiAgICAgIHNldE9wZW5TdGF0ZShvcGVuKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICAvLyBPcGVuaW5nIHRoZSBtZW51IGlzIGdvaW5nIHRvIGJsdXIgdGhlLiBJdCB3aWxsIGJlIGZvY3VzZWQgYmFjayB3aGVuIGNsb3NlZC5cbiAgICBpZ25vcmVOZXh0Qmx1ci5jdXJyZW50ID0gdHJ1ZTtcbiAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKGV2ZW50KSB7XG4gICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUl0ZW1DbGljayA9IGZ1bmN0aW9uIGhhbmRsZUl0ZW1DbGljayhjaGlsZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICB2YXIgbmV3VmFsdWU7XG5cbiAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZSkgOiBbXTtcbiAgICAgICAgICB2YXIgaXRlbUluZGV4ID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgICBldmVudC50YXJnZXQgPSB7XG4gICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcbiAgICAgICAgb25DaGFuZ2UoZXZlbnQsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkge1xuICAgIGlmIChpZ25vcmVOZXh0Qmx1ci5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICAvLyBUaGUgcGFyZW50IGNvbXBvbmVudHMgYXJlIHJlbHlpbmcgb24gdGhlIGJ1YmJsaW5nIG9mIHRoZSBldmVudC5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWdub3JlTmV4dEJsdXIuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIGV2ZW50LnRhcmdldCA9IHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9O1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgdmFyIHZhbGlkS2V5cyA9IFsnICcsICdBcnJvd1VwJywgJ0Fycm93RG93bicsIC8vIFRoZSBuYXRpdmUgc2VsZWN0IGRvZXNuJ3QgcmVzcG9uZCB0byBlbnRlciBvbiBNYWNPUywgYnV0IGl0J3MgcmVjb21tZW5kZWQgYnlcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvZXhhbXBsZXMvbGlzdGJveC9saXN0Ym94LWNvbGxhcHNpYmxlLmh0bWxcbiAgICAgICdFbnRlciddO1xuXG4gICAgICBpZiAodmFsaWRLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gT3BlbmluZyB0aGUgbWVudSBpcyBnb2luZyB0byBibHVyIHRoZS4gSXQgd2lsbCBiZSBmb2N1c2VkIGJhY2sgd2hlbiBjbG9zZWQuXG5cbiAgICAgICAgaWdub3JlTmV4dEJsdXIuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBvcGVuID0gaXNPcGVuQ29udHJvbGxlZCAmJiBkaXNwbGF5UmVmLmN1cnJlbnQgPyBvcGVuUHJvcCA6IG9wZW5TdGF0ZTtcbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgdmFyIGRpc3BsYXk7XG4gIHZhciBkaXNwbGF5U2luZ2xlID0gJyc7XG4gIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgdmFyIGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZChwcm9wcykgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjaGlsZC50eXBlICE9PSBSZWFjdC5GcmFnbWVudCwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBTZWxlY3QgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0ZWQ7XG5cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogdGhlIGB2YWx1ZWAgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheSAnICsgJ3doZW4gdXNpbmcgdGhlIGBTZWxlY3RgIGNvbXBvbmVudCB3aXRoIGBtdWx0aXBsZWAuJyk7XG4gICAgICB9XG5cbiAgICAgIHNlbGVjdGVkID0gdmFsdWUuc29tZShmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gYXJlRXF1YWxWYWx1ZXModiwgY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5TXVsdGlwbGUucHVzaChjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkID0gYXJlRXF1YWxWYWx1ZXModmFsdWUsIGNoaWxkLnByb3BzLnZhbHVlKTtcblxuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlTaW5nbGUgPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIHZhbHVlIGlzIG1vc3QgbGlrZWx5IG5vdCBhIHZhbGlkIEhUTUwgYXR0cmlidXRlLlxuICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG5cbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgZGlzcGxheSA9IG11bHRpcGxlID8gZGlzcGxheU11bHRpcGxlLmpvaW4oJywgJykgOiBkaXNwbGF5U2luZ2xlO1xuICB9IC8vIEF2b2lkIHBlcmZvcm1pbmcgYSBsYXlvdXQgY29tcHV0YXRpb24gaW4gdGhlIHJlbmRlciBtZXRob2QuXG5cblxuICB2YXIgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG5cbiAgaWYgKCFhdXRvV2lkdGggJiYgaXNPcGVuQ29udHJvbGxlZC5jdXJyZW50ICYmIGRpc3BsYXlSZWYuY3VycmVudCkge1xuICAgIG1lbnVNaW5XaWR0aCA9IGRpc3BsYXlSZWYuY3VycmVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHZhciB0YWJJbmRleDtcblxuICBpZiAodHlwZW9mIHRhYkluZGV4UHJvcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcDtcbiAgfSBlbHNlIHtcbiAgICB0YWJJbmRleCA9IGRpc2FibGVkID8gbnVsbCA6IDA7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3RcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2VsZWN0LCBjbGFzc2VzLnNlbGVjdE1lbnUsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIHZhcmlhbnQgPT09ICdmaWxsZWQnICYmIGNsYXNzZXMuZmlsbGVkLCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIGNsYXNzZXMub3V0bGluZWQsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBkaXNwbGF5UmVmLFxuICAgIFwiYXJpYS1wcmVzc2VkXCI6IG9wZW4gPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1vd25zXCI6IG9wZW4gPyBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpIDogdW5kZWZpbmVkLFxuICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2xpY2s6IGRpc2FibGVkIHx8IHJlYWRPbmx5ID8gbnVsbCA6IGhhbmRsZUNsaWNrLFxuICAgIG9uRm9jdXM6IG9uRm9jdXMgLy8gVGhlIGlkIGNhbiBoZWxwIHdpdGggZW5kLXRvLWVuZCB0ZXN0aW5nIGF1dG9tYXRpb24uXG4gICAgLFxuICAgIGlkOiBuYW1lID8gXCJzZWxlY3QtXCIuY29uY2F0KG5hbWUpIDogdW5kZWZpbmVkXG4gIH0sIFNlbGVjdERpc3BsYXlQcm9wcyksIGRpc3BsYXkgIT0gbnVsbCA/IGRpc3BsYXkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgIF9faHRtbDogJyYjODIwMzsnXG4gICAgfVxuICB9KSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0eXBlOiB0eXBlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzXG4gIH0sIG90aGVyKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnUsIF9leHRlbmRzKHtcbiAgICBpZDogXCJtZW51LVwiLmNvbmNhdChuYW1lIHx8ICcnKSxcbiAgICBhbmNob3JFbDogZGlzcGxheVJlZi5jdXJyZW50LFxuICAgIG9wZW46IG9wZW4sXG4gICAgb25DbG9zZTogaGFuZGxlQ2xvc2VcbiAgfSwgTWVudVByb3BzLCB7XG4gICAgTWVudUxpc3RQcm9wczogX2V4dGVuZHMoe1xuICAgICAgcm9sZTogJ2xpc3Rib3gnLFxuICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgbWluV2lkdGg6IG1lbnVNaW5XaWR0aFxuICAgICAgfSwgTWVudVByb3BzLlBhcGVyUHJvcHMgIT0gbnVsbCA/IE1lbnVQcm9wcy5QYXBlclByb3BzLnN0eWxlIDogbnVsbClcbiAgICB9KVxuICB9KSwgaXRlbXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8TWVudUl0ZW0+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGBzZWxlY3RgIG9wZW4gc3RhdGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1lcmdlQ2xhc3NlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJy4vU2VsZWN0SW5wdXQnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgd2l0aEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC93aXRoRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBBcnJvd0Ryb3BEb3duSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xuaW1wb3J0IHsgc3R5bGVzIGFzIG5hdGl2ZVNlbGVjdFN0eWxlcyB9IGZyb20gJy4uL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QnO1xuaW1wb3J0IE5hdGl2ZVNlbGVjdElucHV0IGZyb20gJy4uL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IG5hdGl2ZVNlbGVjdFN0eWxlcztcbnZhciBkZWZhdWx0SW5wdXQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBudWxsKTtcbnZhciBTZWxlY3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYXV0b1dpZHRoID0gcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgYXV0b1dpZHRoID0gX3Byb3BzJGF1dG9XaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGRpc3BsYXlFbXB0eSA9IHByb3BzLmRpc3BsYXlFbXB0eSxcbiAgICAgIGRpc3BsYXlFbXB0eSA9IF9wcm9wcyRkaXNwbGF5RW1wdHkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc3BsYXlFbXB0eSxcbiAgICAgIF9wcm9wcyRJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIEljb25Db21wb25lbnQgPSBfcHJvcHMkSWNvbkNvbXBvbmVudCA9PT0gdm9pZCAwID8gQXJyb3dEcm9wRG93bkljb24gOiBfcHJvcHMkSWNvbkNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXQgPSBfcHJvcHMkaW5wdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRJbnB1dCA6IF9wcm9wcyRpbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgTWVudVByb3BzID0gcHJvcHMuTWVudVByb3BzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBwcm9wcy5tdWlGb3JtQ29udHJvbCxcbiAgICAgIF9wcm9wcyRtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgbXVsdGlwbGUgPSBfcHJvcHMkbXVsdGlwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpcGxlLFxuICAgICAgX3Byb3BzJG5hdGl2ZSA9IHByb3BzLm5hdGl2ZSxcbiAgICAgIG5hdGl2ZSA9IF9wcm9wcyRuYXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG5hdGl2ZSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25PcGVuID0gcHJvcHMub25PcGVuLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICByZW5kZXJWYWx1ZSA9IHByb3BzLnJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gcHJvcHMuU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzcGxheUVtcHR5XCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0XCIsIFwiaW5wdXRQcm9wc1wiLCBcIk1lbnVQcm9wc1wiLCBcIm11aUZvcm1Db250cm9sXCIsIFwibXVsdGlwbGVcIiwgXCJuYXRpdmVcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGlucHV0Q29tcG9uZW50ID0gbmF0aXZlID8gTmF0aXZlU2VsZWN0SW5wdXQgOiBTZWxlY3RJbnB1dDtcbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChpbnB1dCwgX2V4dGVuZHMoe1xuICAgIC8vIE1vc3Qgb2YgdGhlIGxvZ2ljIGlzIGltcGxlbWVudGVkIGluIGBTZWxlY3RJbnB1dGAuXG4gICAgLy8gVGhlIGBTZWxlY3RgIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBBUEkgd3JhcHBlciB0byBleHBvc2Ugc29tZXRoaW5nIGJldHRlciB0byBwbGF5IHdpdGguXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIEljb25Db21wb25lbnQ6IEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFdlIHJlbmRlciBhIHNlbGVjdC4gV2UgY2FuIGlnbm9yZSB0aGUgdHlwZSBwcm92aWRlZCBieSB0aGUgYElucHV0YC5cbiAgICAgIG11bHRpcGxlOiBtdWx0aXBsZVxuICAgIH0sIG5hdGl2ZSA/IHt9IDoge1xuICAgICAgYXV0b1dpZHRoOiBhdXRvV2lkdGgsXG4gICAgICBkaXNwbGF5RW1wdHk6IGRpc3BsYXlFbXB0eSxcbiAgICAgIE1lbnVQcm9wczogTWVudVByb3BzLFxuICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgIG9uT3Blbjogb25PcGVuLFxuICAgICAgb3Blbjogb3BlbixcbiAgICAgIHJlbmRlclZhbHVlOiByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wczogU2VsZWN0RGlzcGxheVByb3BzXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICAgIGJhc2VDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBuZXdDbGFzc2VzOiBpbnB1dFByb3BzLmNsYXNzZXMsXG4gICAgICAgIENvbXBvbmVudDogU2VsZWN0XG4gICAgICB9KSA6IGNsYXNzZXNcbiAgICB9LCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgTWVudUl0ZW1gIHdoZW4gYG5hdGl2ZWAgaXMgZmFsc2UgYW5kIGBvcHRpb25gIHdoZW4gYG5hdGl2ZWAgaXMgdHJ1ZS5cbiAgICpcbiAgICog4pqg77iPVGhlIGBNZW51SXRlbWAgZWxlbWVudHMgKiptdXN0KiogYmUgZGlyZWN0IGRlc2NlbmRhbnRzIHdoZW4gYG5hdGl2ZWAgaXMgZmFsc2UuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wZXJ0eSBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogV2hlbiBgbmF0aXZlYCBpcyBgdHJ1ZWAsIHRoZSBhdHRyaWJ1dGVzIGFyZSBhcHBsaWVkIG9uIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIGZyb20gYHdpdGhGb3JtQ29udHJvbENvbnRleHRgXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgYmUgdXNpbmcgYSBuYXRpdmUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIG5hdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQgd2hlbiBgbmF0aXZlYCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbCBgc2VsZWN0YCBvcGVuIHN0YXRlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3BlcnR5IGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcGVydHkgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0RWxlbWVudH1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyByZXF1aXJlZCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wZXJ0eSBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5TZWxlY3QubXVpTmFtZSA9ICdTZWxlY3QnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVNlbGVjdCdcbn0pKHdpdGhGb3JtQ29udHJvbENvbnRleHQoU2VsZWN0KSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGJhc2VDbGFzc2VzID0gb3B0aW9ucy5iYXNlQ2xhc3NlcyxcbiAgICAgIG5ld0NsYXNzZXMgPSBvcHRpb25zLm5ld0NsYXNzZXMsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudDtcblxuICBpZiAoIW5ld0NsYXNzZXMpIHtcbiAgICByZXR1cm4gYmFzZUNsYXNzZXM7XG4gIH1cblxuICB2YXIgbmV4dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgYmFzZUNsYXNzZXMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBuZXdDbGFzc2VzID09PSAnc3RyaW5nJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFtcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wZXJ0eSBvZiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIgaXMgaW5jb3JyZWN0LlwiKSwgJ1lvdSBtaWdodCB3YW50IHRvIHVzZSB0aGUgY2xhc3NOYW1lIHByb3BlcnR5IGluc3RlYWQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIE9iamVjdC5rZXlzKG5ld0NsYXNzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYmFzZUNsYXNzZXNba2V5XSB8fCAhbmV3Q2xhc3Nlc1trZXldLCBbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgaXMgbm90IGltcGxlbWVudGVkIGluIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IGNhbiBvbmx5IG92ZXJyaWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBcIi5jb25jYXQoT2JqZWN0LmtleXMoYmFzZUNsYXNzZXMpLmpvaW4oJywnKSwgXCIuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghbmV3Q2xhc3Nlc1trZXldIHx8IHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gPT09ICdzdHJpbmcnLCBbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuXG4gICAgaWYgKG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgbmV4dENsYXNzZXNba2V5XSA9IFwiXCIuY29uY2F0KGJhc2VDbGFzc2VzW2tleV0sIFwiIFwiKS5jb25jYXQobmV3Q2xhc3Nlc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV4dENsYXNzZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgZnJvbSAnLi4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnanNzJztcbmltcG9ydCBqc3NQcmVzZXQgZnJvbSAnLi4vanNzUHJlc2V0JzsgLy8gRGVmYXVsdCBKU1MgaW5zdGFuY2UuXG5cbnZhciBqc3MgPSBjcmVhdGUoanNzUHJlc2V0KCkpOyAvLyBVc2UgYSBzaW5nbGV0b24gb3IgdGhlIHByb3ZpZGVkIG9uZSBieSB0aGUgY29udGV4dC5cbi8vXG4vLyBUaGUgY291bnRlci1iYXNlZCBhcHByb2FjaCBkb2Vzbid0IHRvbGVyYXRlIGFueSBtaXN0YWtlLlxuLy8gSXQncyBtdWNoIHNhZmVyIHRvIHVzZSB0aGUgc2FtZSBjb3VudGVyIGV2ZXJ5d2hlcmUuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbmV4cG9ydCB2YXIgc2hlZXRzTWFuYWdlciA9IG5ldyBNYXAoKTtcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGlzYWJsZUdlbmVyYXRpb246IGZhbHNlLFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogZ2VuZXJhdGVDbGFzc05hbWUsXG4gIGpzczoganNzLFxuICBzaGVldHNDYWNoZTogbnVsbCxcbiAgc2hlZXRzTWFuYWdlcjogc2hlZXRzTWFuYWdlcixcbiAgc2hlZXRzUmVnaXN0cnk6IG51bGxcbn07XG5leHBvcnQgdmFyIFN0eWxlc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRPcHRpb25zKTtcbnZhciBpbmplY3RGaXJzdE5vZGU7XG5cbmZ1bmN0aW9uIFN0eWxlc1Byb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5qZWN0Rmlyc3QgPSBwcm9wcy5pbmplY3RGaXJzdCxcbiAgICAgIGxvY2FsT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpbmplY3RGaXJzdFwiXSk7XG5cbiAgdmFyIG91dGVyT3B0aW9ucyA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCk7XG5cbiAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgb3V0ZXJPcHRpb25zLCBsb2NhbE9wdGlvbnMpO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgfHwgY29udGV4dC5zaGVldHNNYW5hZ2VyLCAnTWF0ZXJpYWwtVUk6IHlvdSBuZWVkIHRvIHVzZSB0aGUgU2VydmVyU3R5bGVTaGVldHMgQVBJIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIuJykgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgfHwgIWluamVjdEZpcnN0LCAnTWF0ZXJpYWwtVUk6IHlvdSBjYW5ub3QgdXNlIGEgY3VzdG9tIGluc2VydGlvblBvaW50IGFuZCA8U3R5bGVzQ29udGV4dCBpbmplY3RGaXJzdD4gYXQgdGhlIHNhbWUgdGltZS4nKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghaW5qZWN0Rmlyc3QgfHwgIWxvY2FsT3B0aW9ucy5qc3MsICdNYXRlcmlhbC1VSTogeW91IGNhbm5vdCB1c2UgdGhlIGpzcyBhbmQgaW5qZWN0Rmlyc3QgcHJvcHMgYXQgdGhlIHNhbWUgdGltZS4nKSA6IHZvaWQgMDtcblxuICBpZiAoIWNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWluamVjdEZpcnN0Tm9kZSkge1xuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgaW5qZWN0Rmlyc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnbXVpLWluamVjdC1maXJzdCcpO1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoaW5qZWN0Rmlyc3ROb2RlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGNvbnRleHQuanNzID0gY3JlYXRlKHtcbiAgICAgIHBsdWdpbnM6IGpzc1ByZXNldCgpLnBsdWdpbnMsXG4gICAgICBpbnNlcnRpb25Qb2ludDogaW5qZWN0Rmlyc3ROb2RlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZXNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZGlzYWJsZSB0aGUgZ2VuZXJhdGlvbiBvZiB0aGUgc3R5bGVzIHdpdGggdGhpcyBvcHRpb24uXG4gICAqIEl0IGNhbiBiZSB1c2VmdWwgd2hlbiB0cmF2ZXJzaW5nIHRoZSBSZWFjdCB0cmVlIG91dHNpZGUgb2YgdGhlIEhUTUxcbiAgICogcmVuZGVyaW5nIHN0ZXAgb24gdGhlIHNlcnZlci5cbiAgICogTGV0J3Mgc2F5IHlvdSBhcmUgdXNpbmcgcmVhY3QtYXBvbGxvIHRvIGV4dHJhY3QgYWxsXG4gICAqIHRoZSBxdWVyaWVzIG1hZGUgYnkgdGhlIGludGVyZmFjZSBzZXJ2ZXItc2lkZSAtIHlvdSBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCB0aGUgdHJhdmVyc2FsIHdpdGggdGhpcyBwcm9wLlxuICAgKi9cbiAgZGlzYWJsZUdlbmVyYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBjbGFzcyBuYW1lIGdlbmVyYXRvci5cbiAgICovXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTWF0ZXJpYWwtVUkncyBzdHlsZXMsIHNldCB0aGlzIHByb3AuXG4gICAqL1xuICBpbmplY3RGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGluc3RhbmNlLlxuICAgKi9cbiAganNzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQmV0YSBmZWF0dXJlLlxuICAgKlxuICAgKiBDYWNoZSBmb3IgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c0NhY2hlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBDb2xsZWN0IHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNSZWdpc3RyeTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5cblN0eWxlc1Byb3ZpZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUdlbmVyYXRpb246IGZhbHNlLFxuICBpbmplY3RGaXJzdDogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBTdHlsZXNQcm92aWRlcjsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7IC8vICNTdHJpY3RNb2RlIHJlYWR5XG5cbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUG9ydGFsID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3J0YWwocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgb25SZW5kZXJlZCA9IHByb3BzLm9uUmVuZGVyZWQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBtb3VudE5vZGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgY2hpbGRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgY2hpbGRSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9uUmVuZGVyZWQgJiYgbW91bnROb2RlKSB7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfVxuICB9LCBbbW91bnROb2RlLCBvblJlbmRlcmVkXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vdW50Tm9kZSB8fCBjaGlsZFJlZi5jdXJyZW50O1xuICB9LCBbbW91bnROb2RlXSk7XG5cbiAgaWYgKGRpc2FibGVQb3J0YWwpIHtcbiAgICBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG1vdW50Tm9kZSA/IFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgbW91bnROb2RlKSA6IG1vdW50Tm9kZTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSBub2RlLCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgb25jZSB0aGUgY2hpbGRyZW4gaGFzIGJlZW4gbW91bnRlZCBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IFByb3BUeXBlcy5mdW5jXG59IDogdm9pZCAwO1xuUG9ydGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZVBvcnRhbDogZmFsc2Vcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBQb3J0YWxbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoUG9ydGFsLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICogLSBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogLSBJbXByb3ZlIHRoZSB0aW1lLXRvLWZpcnN0IHBhaW50IG9uIHRoZSBjbGllbnQgYnkgb25seSByZW5kZXJpbmcgYWJvdmUgdGhlIGZvbGQuXG4gKiAtIFJlZHVjZSB0aGUgcmVuZGVyaW5nIHRpbWUgb24gdGhlIHNlcnZlci5cbiAqIC0gVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBOb1Nzcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkZWZlciA9IHByb3BzLmRlZmVyLFxuICAgICAgZGVmZXIgPSBfcHJvcHMkZGVmZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlZmVyLFxuICAgICAgX3Byb3BzJGZhbGxiYWNrID0gcHJvcHMuZmFsbGJhY2ssXG4gICAgICBmYWxsYmFjayA9IF9wcm9wcyRmYWxsYmFjayA9PT0gdm9pZCAwID8gbnVsbCA6IF9wcm9wcyRmYWxsYmFjaztcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBtb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkZWZlcikge1xuICAgICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICAgIH1cbiAgfSwgW2RlZmVyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRlZmVyKSB7XG4gICAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9LCBbZGVmZXJdKTsgLy8gV2UgbmVlZCB0aGUgRnJhZ21lbnQgaGVyZSB0byBmb3JjZSByZWFjdC1kb2NnZW4gdG8gcmVjb2duaXNlIE5vU3NyIGFzIGEgY29tcG9uZW50LlxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBtb3VudGVkU3RhdGUgPyBjaGlsZHJlbiA6IGZhbGxiYWNrKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm9Tc3IucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBub3Qgb25seSBwcmV2ZW50IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICogSXQgd2lsbCBhbHNvIGRlZmVyIHRoZSByZW5kZXJpbmcgb2YgdGhlIGNoaWxkcmVuIGludG8gYSBkaWZmZXJlbnQgc2NyZWVuIGZyYW1lLlxuICAgKi9cbiAgZGVmZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZmFsbGJhY2sgY29udGVudCB0byBkaXNwbGF5LlxuICAgKi9cbiAgZmFsbGJhY2s6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgTm9Tc3JbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoTm9Tc3IucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9Tc3I7Il0sInNvdXJjZVJvb3QiOiIifQ==